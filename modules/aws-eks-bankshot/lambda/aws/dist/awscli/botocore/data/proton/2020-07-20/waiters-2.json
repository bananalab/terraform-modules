{
  "version": 2,
  "waiters": {
    "ComponentDeleted": {
      "acceptors": [
        {
          "expected": "ResourceNotFoundException",
          "matcher": "error",
          "state": "success"
        },
        {
          "argument": "component.deploymentStatus",
          "expected": "DELETE_FAILED",
          "matcher": "path",
          "state": "failure"
        }
      ],
      "delay": 5,
      "description": "Wait until a Component is deleted. Use this after invoking DeleteComponent",
      "maxAttempts": 999,
      "operation": "GetComponent"
    },
    "ComponentDeployed": {
      "acceptors": [
        {
          "argument": "component.deploymentStatus",
          "expected": "SUCCEEDED",
          "matcher": "path",
          "state": "success"
        },
        {
          "argument": "component.deploymentStatus",
          "expected": "FAILED",
          "matcher": "path",
          "state": "failure"
        }
      ],
      "delay": 5,
      "description": "Wait until a Component is deployed. Use this after invoking CreateComponent or UpdateComponent",
      "maxAttempts": 999,
      "operation": "GetComponent"
    },
    "EnvironmentDeployed": {
      "acceptors": [
        {
          "argument": "environment.deploymentStatus",
          "expected": "SUCCEEDED",
          "matcher": "path",
          "state": "success"
        },
        {
          "argument": "environment.deploymentStatus",
          "expected": "FAILED",
          "matcher": "path",
          "state": "failure"
        }
      ],
      "delay": 5,
      "description": "Wait until an Environment is deployed. Use this after invoking CreateEnvironment or UpdateEnvironment",
      "maxAttempts": 999,
      "operation": "GetEnvironment"
    },
    "EnvironmentTemplateVersionRegistered": {
      "acceptors": [
        {
          "argument": "environmentTemplateVersion.status",
          "expected": "DRAFT",
          "matcher": "path",
          "state": "success"
        },
        {
          "argument": "environmentTemplateVersion.status",
          "expected": "PUBLISHED",
          "matcher": "path",
          "state": "success"
        },
        {
          "argument": "environmentTemplateVersion.status",
          "expected": "REGISTRATION_FAILED",
          "matcher": "path",
          "state": "failure"
        }
      ],
      "delay": 2,
      "description": "Wait until an EnvironmentTemplateVersion is registered. Use this after invoking CreateEnvironmentTemplateVersion",
      "maxAttempts": 150,
      "operation": "GetEnvironmentTemplateVersion"
    },
    "ServiceCreated": {
      "acceptors": [
        {
          "argument": "service.status",
          "expected": "ACTIVE",
          "matcher": "path",
          "state": "success"
        },
        {
          "argument": "service.status",
          "expected": "CREATE_FAILED_CLEANUP_COMPLETE",
          "matcher": "path",
          "state": "failure"
        },
        {
          "argument": "service.status",
          "expected": "CREATE_FAILED_CLEANUP_FAILED",
          "matcher": "path",
          "state": "failure"
        },
        {
          "argument": "service.status",
          "expected": "CREATE_FAILED",
          "matcher": "path",
          "state": "failure"
        }
      ],
      "delay": 5,
      "description": "Wait until an Service has deployed its instances and possibly pipeline. Use this after invoking CreateService",
      "maxAttempts": 999,
      "operation": "GetService"
    },
    "ServiceDeleted": {
      "acceptors": [
        {
          "expected": "ResourceNotFoundException",
          "matcher": "error",
          "state": "success"
        },
        {
          "argument": "service.status",
          "expected": "DELETE_FAILED",
          "matcher": "path",
          "state": "failure"
        }
      ],
      "delay": 5,
      "description": "Wait until a Service, its instances, and possibly pipeline have been deleted after DeleteService is invoked",
      "maxAttempts": 999,
      "operation": "GetService"
    },
    "ServiceInstanceDeployed": {
      "acceptors": [
        {
          "argument": "serviceInstance.deploymentStatus",
          "expected": "SUCCEEDED",
          "matcher": "path",
          "state": "success"
        },
        {
          "argument": "serviceInstance.deploymentStatus",
          "expected": "FAILED",
          "matcher": "path",
          "state": "failure"
        }
      ],
      "delay": 5,
      "description": "Wait until a ServiceInstance is deployed. Use this after invoking CreateService or UpdateServiceInstance",
      "maxAttempts": 999,
      "operation": "GetServiceInstance"
    },
    "ServicePipelineDeployed": {
      "acceptors": [
        {
          "argument": "service.pipeline.deploymentStatus",
          "expected": "SUCCEEDED",
          "matcher": "path",
          "state": "success"
        },
        {
          "argument": "service.pipeline.deploymentStatus",
          "expected": "FAILED",
          "matcher": "path",
          "state": "failure"
        }
      ],
      "delay": 10,
      "description": "Wait until an ServicePipeline is deployed. Use this after invoking CreateService or UpdateServicePipeline",
      "maxAttempts": 360,
      "operation": "GetService"
    },
    "ServiceTemplateVersionRegistered": {
      "acceptors": [
        {
          "argument": "serviceTemplateVersion.status",
          "expected": "DRAFT",
          "matcher": "path",
          "state": "success"
        },
        {
          "argument": "serviceTemplateVersion.status",
          "expected": "PUBLISHED",
          "matcher": "path",
          "state": "success"
        },
        {
          "argument": "serviceTemplateVersion.status",
          "expected": "REGISTRATION_FAILED",
          "matcher": "path",
          "state": "failure"
        }
      ],
      "delay": 2,
      "description": "Wait until a ServiceTemplateVersion is registered. Use this after invoking CreateServiceTemplateVersion",
      "maxAttempts": 150,
      "operation": "GetServiceTemplateVersion"
    },
    "ServiceUpdated": {
      "acceptors": [
        {
          "argument": "service.status",
          "expected": "ACTIVE",
          "matcher": "path",
          "state": "success"
        },
        {
          "argument": "service.status",
          "expected": "UPDATE_FAILED_CLEANUP_COMPLETE",
          "matcher": "path",
          "state": "failure"
        },
        {
          "argument": "service.status",
          "expected": "UPDATE_FAILED_CLEANUP_FAILED",
          "matcher": "path",
          "state": "failure"
        },
        {
          "argument": "service.status",
          "expected": "UPDATE_FAILED",
          "matcher": "path",
          "state": "failure"
        },
        {
          "argument": "service.status",
          "expected": "UPDATE_COMPLETE_CLEANUP_FAILED",
          "matcher": "path",
          "state": "failure"
        }
      ],
      "delay": 5,
      "description": "Wait until a Service, its instances, and possibly pipeline have been deployed after UpdateService is invoked",
      "maxAttempts": 999,
      "operation": "GetService"
    }
  }
}
