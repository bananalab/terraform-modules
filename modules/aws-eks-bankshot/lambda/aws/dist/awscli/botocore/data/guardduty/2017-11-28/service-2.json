{
  "documentation": "<p>Amazon GuardDuty is a continuous security monitoring service that analyzes and processes the following data sources: VPC flow logs, Amazon Web Services CloudTrail management event logs, CloudTrail S3 data event logs, EKS audit logs, and DNS logs. It uses threat intelligence feeds (such as lists of malicious IPs and domains) and machine learning to identify unexpected, potentially unauthorized, and malicious activity within your Amazon Web Services environment. This can include issues like escalations of privileges, uses of exposed credentials, or communication with malicious IPs, URLs, or domains. For example, GuardDuty can detect compromised EC2 instances that serve malware or mine bitcoin. </p> <p>GuardDuty also monitors Amazon Web Services account access behavior for signs of compromise. Some examples of this are unauthorized infrastructure deployments such as EC2 instances deployed in a Region that has never been used, or unusual API calls like a password policy change to reduce password strength. </p> <p>GuardDuty informs you of the status of your Amazon Web Services environment by producing security findings that you can view in the GuardDuty console or through Amazon CloudWatch events. For more information, see the <i> <a href=\"https://docs.aws.amazon.com/guardduty/latest/ug/what-is-guardduty.html\">Amazon GuardDuty User Guide</a> </i>. </p>",
  "metadata": {
    "apiVersion": "2017-11-28",
    "endpointPrefix": "guardduty",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "Amazon GuardDuty",
    "serviceId": "GuardDuty",
    "signatureVersion": "v4",
    "signingName": "guardduty",
    "uid": "guardduty-2017-11-28"
  },
  "operations": {
    "AcceptAdministratorInvitation": {
      "documentation": "<p>Accepts the invitation to be a member account and get monitored by a GuardDuty administrator account that sent the invitation.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/administrator",
        "responseCode": 200
      },
      "input": {
        "shape": "AcceptAdministratorInvitationRequest"
      },
      "name": "AcceptAdministratorInvitation",
      "output": {
        "shape": "AcceptAdministratorInvitationResponse"
      }
    },
    "AcceptInvitation": {
      "deprecated": true,
      "deprecatedMessage": "This operation is deprecated, use AcceptAdministratorInvitation instead",
      "documentation": "<p>Accepts the invitation to be monitored by a GuardDuty administrator account.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/master",
        "responseCode": 200
      },
      "input": {
        "shape": "AcceptInvitationRequest"
      },
      "name": "AcceptInvitation",
      "output": {
        "shape": "AcceptInvitationResponse"
      }
    },
    "ArchiveFindings": {
      "documentation": "<p>Archives GuardDuty findings that are specified by the list of finding IDs.</p> <note> <p>Only the administrator account can archive findings. Member accounts don't have permission to archive findings from their accounts.</p> </note>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/findings/archive",
        "responseCode": 200
      },
      "input": {
        "shape": "ArchiveFindingsRequest"
      },
      "name": "ArchiveFindings",
      "output": {
        "shape": "ArchiveFindingsResponse"
      }
    },
    "CreateDetector": {
      "documentation": "<p>Creates a single Amazon GuardDuty detector. A detector is a resource that represents the GuardDuty service. To start using GuardDuty, you must create a detector in each Region where you enable the service. You can have only one detector per account per Region. All data sources are enabled in a new detector by default.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector",
        "responseCode": 200
      },
      "input": {
        "shape": "CreateDetectorRequest"
      },
      "name": "CreateDetector",
      "output": {
        "shape": "CreateDetectorResponse"
      }
    },
    "CreateFilter": {
      "documentation": "<p>Creates a filter using the specified finding criteria.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/filter",
        "responseCode": 200
      },
      "input": {
        "shape": "CreateFilterRequest"
      },
      "name": "CreateFilter",
      "output": {
        "shape": "CreateFilterResponse"
      }
    },
    "CreateIPSet": {
      "documentation": "<p>Creates a new IPSet, which is called a trusted IP list in the console user interface. An IPSet is a list of IP addresses that are trusted for secure communication with Amazon Web Services infrastructure and applications. GuardDuty doesn't generate findings for IP addresses that are included in IPSets. Only users from the administrator account can use this operation.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/ipset",
        "responseCode": 200
      },
      "input": {
        "shape": "CreateIPSetRequest"
      },
      "name": "CreateIPSet",
      "output": {
        "shape": "CreateIPSetResponse"
      }
    },
    "CreateMembers": {
      "documentation": "<p>Creates member accounts of the current Amazon Web Services account by specifying a list of Amazon Web Services account IDs. This step is a prerequisite for managing the associated member accounts either by invitation or through an organization.</p> <p>When using <code>Create Members</code> as an organizations delegated administrator this action will enable GuardDuty in the added member accounts, with the exception of the organization delegated administrator account, which must enable GuardDuty prior to being added as a member.</p> <p>If you are adding accounts by invitation use this action after GuardDuty has been enabled in potential member accounts and before using <a href=\"https://docs.aws.amazon.com/guardduty/latest/APIReference/API_InviteMembers.html\"> <code>Invite Members</code> </a>.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/member",
        "responseCode": 200
      },
      "input": {
        "shape": "CreateMembersRequest"
      },
      "name": "CreateMembers",
      "output": {
        "shape": "CreateMembersResponse"
      }
    },
    "CreatePublishingDestination": {
      "documentation": "<p>Creates a publishing destination to export findings to. The resource to export findings to must exist before you use this operation.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/publishingDestination",
        "responseCode": 200
      },
      "input": {
        "shape": "CreatePublishingDestinationRequest"
      },
      "name": "CreatePublishingDestination",
      "output": {
        "shape": "CreatePublishingDestinationResponse"
      }
    },
    "CreateSampleFindings": {
      "documentation": "<p>Generates example findings of types specified by the list of finding types. If 'NULL' is specified for <code>findingTypes</code>, the API generates example findings of all supported finding types.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/findings/create",
        "responseCode": 200
      },
      "input": {
        "shape": "CreateSampleFindingsRequest"
      },
      "name": "CreateSampleFindings",
      "output": {
        "shape": "CreateSampleFindingsResponse"
      }
    },
    "CreateThreatIntelSet": {
      "documentation": "<p>Creates a new ThreatIntelSet. ThreatIntelSets consist of known malicious IP addresses. GuardDuty generates findings based on ThreatIntelSets. Only users of the administrator account can use this operation.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/threatintelset",
        "responseCode": 200
      },
      "input": {
        "shape": "CreateThreatIntelSetRequest"
      },
      "name": "CreateThreatIntelSet",
      "output": {
        "shape": "CreateThreatIntelSetResponse"
      }
    },
    "DeclineInvitations": {
      "documentation": "<p>Declines invitations sent to the current member account by Amazon Web Services accounts specified by their account IDs.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/invitation/decline",
        "responseCode": 200
      },
      "input": {
        "shape": "DeclineInvitationsRequest"
      },
      "name": "DeclineInvitations",
      "output": {
        "shape": "DeclineInvitationsResponse"
      }
    },
    "DeleteDetector": {
      "documentation": "<p>Deletes an Amazon GuardDuty detector that is specified by the detector ID.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/detector/{detectorId}",
        "responseCode": 200
      },
      "input": {
        "shape": "DeleteDetectorRequest"
      },
      "name": "DeleteDetector",
      "output": {
        "shape": "DeleteDetectorResponse"
      }
    },
    "DeleteFilter": {
      "documentation": "<p>Deletes the filter specified by the filter name.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/detector/{detectorId}/filter/{filterName}",
        "responseCode": 200
      },
      "input": {
        "shape": "DeleteFilterRequest"
      },
      "name": "DeleteFilter",
      "output": {
        "shape": "DeleteFilterResponse"
      }
    },
    "DeleteIPSet": {
      "documentation": "<p>Deletes the IPSet specified by the <code>ipSetId</code>. IPSets are called trusted IP lists in the console user interface.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/detector/{detectorId}/ipset/{ipSetId}",
        "responseCode": 200
      },
      "input": {
        "shape": "DeleteIPSetRequest"
      },
      "name": "DeleteIPSet",
      "output": {
        "shape": "DeleteIPSetResponse"
      }
    },
    "DeleteInvitations": {
      "documentation": "<p>Deletes invitations sent to the current member account by Amazon Web Services accounts specified by their account IDs.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/invitation/delete",
        "responseCode": 200
      },
      "input": {
        "shape": "DeleteInvitationsRequest"
      },
      "name": "DeleteInvitations",
      "output": {
        "shape": "DeleteInvitationsResponse"
      }
    },
    "DeleteMembers": {
      "documentation": "<p>Deletes GuardDuty member accounts (to the current GuardDuty administrator account) specified by the account IDs.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/member/delete",
        "responseCode": 200
      },
      "input": {
        "shape": "DeleteMembersRequest"
      },
      "name": "DeleteMembers",
      "output": {
        "shape": "DeleteMembersResponse"
      }
    },
    "DeletePublishingDestination": {
      "documentation": "<p>Deletes the publishing definition with the specified <code>destinationId</code>.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/detector/{detectorId}/publishingDestination/{destinationId}",
        "responseCode": 200
      },
      "input": {
        "shape": "DeletePublishingDestinationRequest"
      },
      "name": "DeletePublishingDestination",
      "output": {
        "shape": "DeletePublishingDestinationResponse"
      }
    },
    "DeleteThreatIntelSet": {
      "documentation": "<p>Deletes the ThreatIntelSet specified by the ThreatIntelSet ID.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/detector/{detectorId}/threatintelset/{threatIntelSetId}",
        "responseCode": 200
      },
      "input": {
        "shape": "DeleteThreatIntelSetRequest"
      },
      "name": "DeleteThreatIntelSet",
      "output": {
        "shape": "DeleteThreatIntelSetResponse"
      }
    },
    "DescribeMalwareScans": {
      "documentation": "<p>Returns a list of malware scans. Each member account can view the malware scans for their own accounts. An administrator can view the malware scans for all the member accounts.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/malware-scans",
        "responseCode": 200
      },
      "input": {
        "shape": "DescribeMalwareScansRequest"
      },
      "name": "DescribeMalwareScans",
      "output": {
        "shape": "DescribeMalwareScansResponse"
      }
    },
    "DescribeOrganizationConfiguration": {
      "documentation": "<p>Returns information about the account selected as the delegated administrator for GuardDuty.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/detector/{detectorId}/admin",
        "responseCode": 200
      },
      "input": {
        "shape": "DescribeOrganizationConfigurationRequest"
      },
      "name": "DescribeOrganizationConfiguration",
      "output": {
        "shape": "DescribeOrganizationConfigurationResponse"
      }
    },
    "DescribePublishingDestination": {
      "documentation": "<p>Returns information about the publishing destination specified by the provided <code>destinationId</code>.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/detector/{detectorId}/publishingDestination/{destinationId}",
        "responseCode": 200
      },
      "input": {
        "shape": "DescribePublishingDestinationRequest"
      },
      "name": "DescribePublishingDestination",
      "output": {
        "shape": "DescribePublishingDestinationResponse"
      }
    },
    "DisableOrganizationAdminAccount": {
      "documentation": "<p>Disables an Amazon Web Services account within the Organization as the GuardDuty delegated administrator.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/admin/disable",
        "responseCode": 200
      },
      "input": {
        "shape": "DisableOrganizationAdminAccountRequest"
      },
      "name": "DisableOrganizationAdminAccount",
      "output": {
        "shape": "DisableOrganizationAdminAccountResponse"
      }
    },
    "DisassociateFromAdministratorAccount": {
      "documentation": "<p>Disassociates the current GuardDuty member account from its administrator account.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/administrator/disassociate",
        "responseCode": 200
      },
      "input": {
        "shape": "DisassociateFromAdministratorAccountRequest"
      },
      "name": "DisassociateFromAdministratorAccount",
      "output": {
        "shape": "DisassociateFromAdministratorAccountResponse"
      }
    },
    "DisassociateFromMasterAccount": {
      "deprecated": true,
      "deprecatedMessage": "This operation is deprecated, use DisassociateFromAdministratorAccount instead",
      "documentation": "<p>Disassociates the current GuardDuty member account from its administrator account.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/master/disassociate",
        "responseCode": 200
      },
      "input": {
        "shape": "DisassociateFromMasterAccountRequest"
      },
      "name": "DisassociateFromMasterAccount",
      "output": {
        "shape": "DisassociateFromMasterAccountResponse"
      }
    },
    "DisassociateMembers": {
      "documentation": "<p>Disassociates GuardDuty member accounts (to the current administrator account) specified by the account IDs.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/member/disassociate",
        "responseCode": 200
      },
      "input": {
        "shape": "DisassociateMembersRequest"
      },
      "name": "DisassociateMembers",
      "output": {
        "shape": "DisassociateMembersResponse"
      }
    },
    "EnableOrganizationAdminAccount": {
      "documentation": "<p>Enables an Amazon Web Services account within the organization as the GuardDuty delegated administrator.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/admin/enable",
        "responseCode": 200
      },
      "input": {
        "shape": "EnableOrganizationAdminAccountRequest"
      },
      "name": "EnableOrganizationAdminAccount",
      "output": {
        "shape": "EnableOrganizationAdminAccountResponse"
      }
    },
    "GetAdministratorAccount": {
      "documentation": "<p>Provides the details for the GuardDuty administrator account associated with the current GuardDuty member account.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/detector/{detectorId}/administrator",
        "responseCode": 200
      },
      "input": {
        "shape": "GetAdministratorAccountRequest"
      },
      "name": "GetAdministratorAccount",
      "output": {
        "shape": "GetAdministratorAccountResponse"
      }
    },
    "GetDetector": {
      "documentation": "<p>Retrieves an Amazon GuardDuty detector specified by the detectorId.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/detector/{detectorId}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetDetectorRequest"
      },
      "name": "GetDetector",
      "output": {
        "shape": "GetDetectorResponse"
      }
    },
    "GetFilter": {
      "documentation": "<p>Returns the details of the filter specified by the filter name.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/detector/{detectorId}/filter/{filterName}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetFilterRequest"
      },
      "name": "GetFilter",
      "output": {
        "shape": "GetFilterResponse"
      }
    },
    "GetFindings": {
      "documentation": "<p>Describes Amazon GuardDuty findings specified by finding IDs.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/findings/get",
        "responseCode": 200
      },
      "input": {
        "shape": "GetFindingsRequest"
      },
      "name": "GetFindings",
      "output": {
        "shape": "GetFindingsResponse"
      }
    },
    "GetFindingsStatistics": {
      "documentation": "<p>Lists Amazon GuardDuty findings statistics for the specified detector ID.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/findings/statistics",
        "responseCode": 200
      },
      "input": {
        "shape": "GetFindingsStatisticsRequest"
      },
      "name": "GetFindingsStatistics",
      "output": {
        "shape": "GetFindingsStatisticsResponse"
      }
    },
    "GetIPSet": {
      "documentation": "<p>Retrieves the IPSet specified by the <code>ipSetId</code>.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/detector/{detectorId}/ipset/{ipSetId}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetIPSetRequest"
      },
      "name": "GetIPSet",
      "output": {
        "shape": "GetIPSetResponse"
      }
    },
    "GetInvitationsCount": {
      "documentation": "<p>Returns the count of all GuardDuty membership invitations that were sent to the current member account except the currently accepted invitation.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/invitation/count",
        "responseCode": 200
      },
      "input": {
        "shape": "GetInvitationsCountRequest"
      },
      "name": "GetInvitationsCount",
      "output": {
        "shape": "GetInvitationsCountResponse"
      }
    },
    "GetMalwareScanSettings": {
      "documentation": "<p>Returns the details of the malware scan settings.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/detector/{detectorId}/malware-scan-settings",
        "responseCode": 200
      },
      "input": {
        "shape": "GetMalwareScanSettingsRequest"
      },
      "name": "GetMalwareScanSettings",
      "output": {
        "shape": "GetMalwareScanSettingsResponse"
      }
    },
    "GetMasterAccount": {
      "deprecated": true,
      "deprecatedMessage": "This operation is deprecated, use GetAdministratorAccount instead",
      "documentation": "<p>Provides the details for the GuardDuty administrator account associated with the current GuardDuty member account.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/detector/{detectorId}/master",
        "responseCode": 200
      },
      "input": {
        "shape": "GetMasterAccountRequest"
      },
      "name": "GetMasterAccount",
      "output": {
        "shape": "GetMasterAccountResponse"
      }
    },
    "GetMemberDetectors": {
      "documentation": "<p>Describes which data sources are enabled for the member account's detector.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/member/detector/get",
        "responseCode": 200
      },
      "input": {
        "shape": "GetMemberDetectorsRequest"
      },
      "name": "GetMemberDetectors",
      "output": {
        "shape": "GetMemberDetectorsResponse"
      }
    },
    "GetMembers": {
      "documentation": "<p>Retrieves GuardDuty member accounts (of the current GuardDuty administrator account) specified by the account IDs.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/member/get",
        "responseCode": 200
      },
      "input": {
        "shape": "GetMembersRequest"
      },
      "name": "GetMembers",
      "output": {
        "shape": "GetMembersResponse"
      }
    },
    "GetRemainingFreeTrialDays": {
      "documentation": "<p>Provides the number of days left for each data source used in the free trial period.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/freeTrial/daysRemaining",
        "responseCode": 200
      },
      "input": {
        "shape": "GetRemainingFreeTrialDaysRequest"
      },
      "name": "GetRemainingFreeTrialDays",
      "output": {
        "shape": "GetRemainingFreeTrialDaysResponse"
      }
    },
    "GetThreatIntelSet": {
      "documentation": "<p>Retrieves the ThreatIntelSet that is specified by the ThreatIntelSet ID.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/detector/{detectorId}/threatintelset/{threatIntelSetId}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetThreatIntelSetRequest"
      },
      "name": "GetThreatIntelSet",
      "output": {
        "shape": "GetThreatIntelSetResponse"
      }
    },
    "GetUsageStatistics": {
      "documentation": "<p>Lists Amazon GuardDuty usage statistics over the last 30 days for the specified detector ID. For newly enabled detectors or data sources, the cost returned will include only the usage so far under 30 days. This may differ from the cost metrics in the console, which project usage over 30 days to provide a monthly cost estimate. For more information, see <a href=\"https://docs.aws.amazon.com/guardduty/latest/ug/monitoring_costs.html#usage-calculations\">Understanding How Usage Costs are Calculated</a>.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/usage/statistics",
        "responseCode": 200
      },
      "input": {
        "shape": "GetUsageStatisticsRequest"
      },
      "name": "GetUsageStatistics",
      "output": {
        "shape": "GetUsageStatisticsResponse"
      }
    },
    "InviteMembers": {
      "documentation": "<p>Invites other Amazon Web Services accounts (created as members of the current Amazon Web Services account by CreateMembers) to enable GuardDuty, and allow the current Amazon Web Services account to view and manage these accounts' findings on their behalf as the GuardDuty administrator account.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/member/invite",
        "responseCode": 200
      },
      "input": {
        "shape": "InviteMembersRequest"
      },
      "name": "InviteMembers",
      "output": {
        "shape": "InviteMembersResponse"
      }
    },
    "ListDetectors": {
      "documentation": "<p>Lists detectorIds of all the existing Amazon GuardDuty detector resources.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/detector",
        "responseCode": 200
      },
      "input": {
        "shape": "ListDetectorsRequest"
      },
      "name": "ListDetectors",
      "output": {
        "shape": "ListDetectorsResponse"
      }
    },
    "ListFilters": {
      "documentation": "<p>Returns a paginated list of the current filters.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/detector/{detectorId}/filter",
        "responseCode": 200
      },
      "input": {
        "shape": "ListFiltersRequest"
      },
      "name": "ListFilters",
      "output": {
        "shape": "ListFiltersResponse"
      }
    },
    "ListFindings": {
      "documentation": "<p>Lists Amazon GuardDuty findings for the specified detector ID.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/findings",
        "responseCode": 200
      },
      "input": {
        "shape": "ListFindingsRequest"
      },
      "name": "ListFindings",
      "output": {
        "shape": "ListFindingsResponse"
      }
    },
    "ListIPSets": {
      "documentation": "<p>Lists the IPSets of the GuardDuty service specified by the detector ID. If you use this operation from a member account, the IPSets returned are the IPSets from the associated administrator account.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/detector/{detectorId}/ipset",
        "responseCode": 200
      },
      "input": {
        "shape": "ListIPSetsRequest"
      },
      "name": "ListIPSets",
      "output": {
        "shape": "ListIPSetsResponse"
      }
    },
    "ListInvitations": {
      "documentation": "<p>Lists all GuardDuty membership invitations that were sent to the current Amazon Web Services account.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/invitation",
        "responseCode": 200
      },
      "input": {
        "shape": "ListInvitationsRequest"
      },
      "name": "ListInvitations",
      "output": {
        "shape": "ListInvitationsResponse"
      }
    },
    "ListMembers": {
      "documentation": "<p>Lists details about all member accounts for the current GuardDuty administrator account.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/detector/{detectorId}/member",
        "responseCode": 200
      },
      "input": {
        "shape": "ListMembersRequest"
      },
      "name": "ListMembers",
      "output": {
        "shape": "ListMembersResponse"
      }
    },
    "ListOrganizationAdminAccounts": {
      "documentation": "<p>Lists the accounts configured as GuardDuty delegated administrators.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/admin",
        "responseCode": 200
      },
      "input": {
        "shape": "ListOrganizationAdminAccountsRequest"
      },
      "name": "ListOrganizationAdminAccounts",
      "output": {
        "shape": "ListOrganizationAdminAccountsResponse"
      }
    },
    "ListPublishingDestinations": {
      "documentation": "<p>Returns a list of publishing destinations associated with the specified <code>detectorId</code>.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/detector/{detectorId}/publishingDestination",
        "responseCode": 200
      },
      "input": {
        "shape": "ListPublishingDestinationsRequest"
      },
      "name": "ListPublishingDestinations",
      "output": {
        "shape": "ListPublishingDestinationsResponse"
      }
    },
    "ListTagsForResource": {
      "documentation": "<p>Lists tags for a resource. Tagging is currently supported for detectors, finding filters, IP sets, and threat intel sets, with a limit of 50 tags per resource. When invoked, this operation returns all assigned tags for a given resource.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/tags/{resourceArn}",
        "responseCode": 200
      },
      "input": {
        "shape": "ListTagsForResourceRequest"
      },
      "name": "ListTagsForResource",
      "output": {
        "shape": "ListTagsForResourceResponse"
      }
    },
    "ListThreatIntelSets": {
      "documentation": "<p>Lists the ThreatIntelSets of the GuardDuty service specified by the detector ID. If you use this operation from a member account, the ThreatIntelSets associated with the administrator account are returned.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/detector/{detectorId}/threatintelset",
        "responseCode": 200
      },
      "input": {
        "shape": "ListThreatIntelSetsRequest"
      },
      "name": "ListThreatIntelSets",
      "output": {
        "shape": "ListThreatIntelSetsResponse"
      }
    },
    "StartMonitoringMembers": {
      "documentation": "<p>Turns on GuardDuty monitoring of the specified member accounts. Use this operation to restart monitoring of accounts that you stopped monitoring with the <code>StopMonitoringMembers</code> operation.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/member/start",
        "responseCode": 200
      },
      "input": {
        "shape": "StartMonitoringMembersRequest"
      },
      "name": "StartMonitoringMembers",
      "output": {
        "shape": "StartMonitoringMembersResponse"
      }
    },
    "StopMonitoringMembers": {
      "documentation": "<p>Stops GuardDuty monitoring for the specified member accounts. Use the <code>StartMonitoringMembers</code> operation to restart monitoring for those accounts.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/member/stop",
        "responseCode": 200
      },
      "input": {
        "shape": "StopMonitoringMembersRequest"
      },
      "name": "StopMonitoringMembers",
      "output": {
        "shape": "StopMonitoringMembersResponse"
      }
    },
    "TagResource": {
      "documentation": "<p>Adds tags to a resource.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/tags/{resourceArn}",
        "responseCode": 204
      },
      "input": {
        "shape": "TagResourceRequest"
      },
      "name": "TagResource",
      "output": {
        "shape": "TagResourceResponse"
      }
    },
    "UnarchiveFindings": {
      "documentation": "<p>Unarchives GuardDuty findings specified by the <code>findingIds</code>.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/findings/unarchive",
        "responseCode": 200
      },
      "input": {
        "shape": "UnarchiveFindingsRequest"
      },
      "name": "UnarchiveFindings",
      "output": {
        "shape": "UnarchiveFindingsResponse"
      }
    },
    "UntagResource": {
      "documentation": "<p>Removes tags from a resource.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/tags/{resourceArn}",
        "responseCode": 204
      },
      "input": {
        "shape": "UntagResourceRequest"
      },
      "name": "UntagResource",
      "output": {
        "shape": "UntagResourceResponse"
      }
    },
    "UpdateDetector": {
      "documentation": "<p>Updates the Amazon GuardDuty detector specified by the detectorId.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateDetectorRequest"
      },
      "name": "UpdateDetector",
      "output": {
        "shape": "UpdateDetectorResponse"
      }
    },
    "UpdateFilter": {
      "documentation": "<p>Updates the filter specified by the filter name.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/filter/{filterName}",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateFilterRequest"
      },
      "name": "UpdateFilter",
      "output": {
        "shape": "UpdateFilterResponse"
      }
    },
    "UpdateFindingsFeedback": {
      "documentation": "<p>Marks the specified GuardDuty findings as useful or not useful.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/findings/feedback",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateFindingsFeedbackRequest"
      },
      "name": "UpdateFindingsFeedback",
      "output": {
        "shape": "UpdateFindingsFeedbackResponse"
      }
    },
    "UpdateIPSet": {
      "documentation": "<p>Updates the IPSet specified by the IPSet ID.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/ipset/{ipSetId}",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateIPSetRequest"
      },
      "name": "UpdateIPSet",
      "output": {
        "shape": "UpdateIPSetResponse"
      }
    },
    "UpdateMalwareScanSettings": {
      "documentation": "<p>Updates the malware scan settings.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/malware-scan-settings",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateMalwareScanSettingsRequest"
      },
      "name": "UpdateMalwareScanSettings",
      "output": {
        "shape": "UpdateMalwareScanSettingsResponse"
      }
    },
    "UpdateMemberDetectors": {
      "documentation": "<p>Contains information on member accounts to be updated.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/member/detector/update",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateMemberDetectorsRequest"
      },
      "name": "UpdateMemberDetectors",
      "output": {
        "shape": "UpdateMemberDetectorsResponse"
      }
    },
    "UpdateOrganizationConfiguration": {
      "documentation": "<p>Updates the delegated administrator account with the values provided.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/admin",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateOrganizationConfigurationRequest"
      },
      "name": "UpdateOrganizationConfiguration",
      "output": {
        "shape": "UpdateOrganizationConfigurationResponse"
      }
    },
    "UpdatePublishingDestination": {
      "documentation": "<p>Updates information about the publishing destination specified by the <code>destinationId</code>.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/publishingDestination/{destinationId}",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdatePublishingDestinationRequest"
      },
      "name": "UpdatePublishingDestination",
      "output": {
        "shape": "UpdatePublishingDestinationResponse"
      }
    },
    "UpdateThreatIntelSet": {
      "documentation": "<p>Updates the ThreatIntelSet specified by the ThreatIntelSet ID.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/threatintelset/{threatIntelSetId}",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateThreatIntelSetRequest"
      },
      "name": "UpdateThreatIntelSet",
      "output": {
        "shape": "UpdateThreatIntelSetResponse"
      }
    }
  },
  "shapes": {
    "AcceptAdministratorInvitationRequest": {
      "members": {
        "AdministratorId": {
          "documentation": "<p>The account ID of the GuardDuty administrator account whose invitation you're accepting.</p>",
          "locationName": "administratorId",
          "shape": "String"
        },
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector of the GuardDuty member account.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "InvitationId": {
          "documentation": "<p>The value that is used to validate the administrator account to the member account.</p>",
          "locationName": "invitationId",
          "shape": "String"
        }
      },
      "required": [
        "DetectorId",
        "AdministratorId",
        "InvitationId"
      ],
      "type": "structure"
    },
    "AcceptAdministratorInvitationResponse": {
      "members": {},
      "type": "structure"
    },
    "AcceptInvitationRequest": {
      "deprecated": true,
      "deprecatedMessage": "This input is deprecated, use AcceptAdministratorInvitationRequest instead",
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector of the GuardDuty member account.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "InvitationId": {
          "documentation": "<p>The value that is used to validate the administrator account to the member account.</p>",
          "locationName": "invitationId",
          "shape": "String"
        },
        "MasterId": {
          "documentation": "<p>The account ID of the GuardDuty administrator account whose invitation you're accepting.</p>",
          "locationName": "masterId",
          "shape": "String"
        }
      },
      "required": [
        "DetectorId",
        "MasterId",
        "InvitationId"
      ],
      "type": "structure"
    },
    "AcceptInvitationResponse": {
      "deprecated": true,
      "deprecatedMessage": "This output is deprecated, use AcceptAdministratorInvitationResponse instead",
      "members": {},
      "type": "structure"
    },
    "AccessControlList": {
      "documentation": "<p>Contains information on the current access control policies for the bucket.</p>",
      "members": {
        "AllowsPublicReadAccess": {
          "documentation": "<p>A value that indicates whether public read access for the bucket is enabled through an Access Control List (ACL).</p>",
          "locationName": "allowsPublicReadAccess",
          "shape": "Boolean"
        },
        "AllowsPublicWriteAccess": {
          "documentation": "<p>A value that indicates whether public write access for the bucket is enabled through an Access Control List (ACL).</p>",
          "locationName": "allowsPublicWriteAccess",
          "shape": "Boolean"
        }
      },
      "type": "structure"
    },
    "AccessKeyDetails": {
      "documentation": "<p>Contains information about the access keys.</p>",
      "members": {
        "AccessKeyId": {
          "documentation": "<p>The access key ID of the user.</p>",
          "locationName": "accessKeyId",
          "shape": "String"
        },
        "PrincipalId": {
          "documentation": "<p>The principal ID of the user.</p>",
          "locationName": "principalId",
          "shape": "String"
        },
        "UserName": {
          "documentation": "<p>The name of the user.</p>",
          "locationName": "userName",
          "shape": "String"
        },
        "UserType": {
          "documentation": "<p>The type of the user.</p>",
          "locationName": "userType",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "AccountDetail": {
      "documentation": "<p>Contains information about the account.</p>",
      "members": {
        "AccountId": {
          "documentation": "<p>The member account ID.</p>",
          "locationName": "accountId",
          "shape": "AccountId"
        },
        "Email": {
          "documentation": "<p>The email address of the member account.</p>",
          "locationName": "email",
          "shape": "Email"
        }
      },
      "required": [
        "AccountId",
        "Email"
      ],
      "type": "structure"
    },
    "AccountDetails": {
      "max": 50,
      "member": {
        "shape": "AccountDetail"
      },
      "min": 1,
      "type": "list"
    },
    "AccountFreeTrialInfo": {
      "documentation": "<p>Provides details of the GuardDuty member account that uses a free trial service.</p>",
      "members": {
        "AccountId": {
          "documentation": "<p>The account identifier of the GuardDuty member account.</p>",
          "locationName": "accountId",
          "shape": "String"
        },
        "DataSources": {
          "documentation": "<p>Describes the data source enabled for the GuardDuty member account.</p>",
          "locationName": "dataSources",
          "shape": "DataSourcesFreeTrial"
        }
      },
      "type": "structure"
    },
    "AccountFreeTrialInfos": {
      "member": {
        "shape": "AccountFreeTrialInfo"
      },
      "type": "list"
    },
    "AccountId": {
      "max": 12,
      "min": 12,
      "type": "string"
    },
    "AccountIds": {
      "max": 50,
      "member": {
        "shape": "AccountId"
      },
      "min": 1,
      "type": "list"
    },
    "AccountLevelPermissions": {
      "documentation": "<p>Contains information about the account level permissions on the S3 bucket.</p>",
      "members": {
        "BlockPublicAccess": {
          "documentation": "<p>Describes the S3 Block Public Access settings of the bucket's parent account.</p>",
          "locationName": "blockPublicAccess",
          "shape": "BlockPublicAccess"
        }
      },
      "type": "structure"
    },
    "Action": {
      "documentation": "<p>Contains information about actions.</p>",
      "members": {
        "ActionType": {
          "documentation": "<p>The GuardDuty finding activity type.</p>",
          "locationName": "actionType",
          "shape": "String"
        },
        "AwsApiCallAction": {
          "documentation": "<p>Information about the AWS_API_CALL action described in this finding.</p>",
          "locationName": "awsApiCallAction",
          "shape": "AwsApiCallAction"
        },
        "DnsRequestAction": {
          "documentation": "<p>Information about the DNS_REQUEST action described in this finding.</p>",
          "locationName": "dnsRequestAction",
          "shape": "DnsRequestAction"
        },
        "KubernetesApiCallAction": {
          "documentation": "<p>Information about the Kubernetes API call action described in this finding.</p>",
          "locationName": "kubernetesApiCallAction",
          "shape": "KubernetesApiCallAction"
        },
        "NetworkConnectionAction": {
          "documentation": "<p>Information about the NETWORK_CONNECTION action described in this finding.</p>",
          "locationName": "networkConnectionAction",
          "shape": "NetworkConnectionAction"
        },
        "PortProbeAction": {
          "documentation": "<p>Information about the PORT_PROBE action described in this finding.</p>",
          "locationName": "portProbeAction",
          "shape": "PortProbeAction"
        }
      },
      "type": "structure"
    },
    "AdminAccount": {
      "documentation": "<p>The account within the organization specified as the GuardDuty delegated administrator.</p>",
      "members": {
        "AdminAccountId": {
          "documentation": "<p>The Amazon Web Services account ID for the account.</p>",
          "locationName": "adminAccountId",
          "shape": "String"
        },
        "AdminStatus": {
          "documentation": "<p>Indicates whether the account is enabled as the delegated administrator.</p>",
          "locationName": "adminStatus",
          "shape": "AdminStatus"
        }
      },
      "type": "structure"
    },
    "AdminAccounts": {
      "max": 1,
      "member": {
        "shape": "AdminAccount"
      },
      "min": 0,
      "type": "list"
    },
    "AdminStatus": {
      "enum": [
        "ENABLED",
        "DISABLE_IN_PROGRESS"
      ],
      "max": 300,
      "min": 1,
      "type": "string"
    },
    "Administrator": {
      "documentation": "<p>Contains information about the administrator account and invitation.</p>",
      "members": {
        "AccountId": {
          "documentation": "<p>The ID of the account used as the administrator account.</p>",
          "locationName": "accountId",
          "shape": "AccountId"
        },
        "InvitationId": {
          "documentation": "<p>The value that is used to validate the administrator account to the member account.</p>",
          "locationName": "invitationId",
          "shape": "String"
        },
        "InvitedAt": {
          "documentation": "<p>The timestamp when the invitation was sent.</p>",
          "locationName": "invitedAt",
          "shape": "String"
        },
        "RelationshipStatus": {
          "documentation": "<p>The status of the relationship between the administrator and member accounts.</p>",
          "locationName": "relationshipStatus",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "AffectedResources": {
      "key": {
        "shape": "String"
      },
      "type": "map",
      "value": {
        "shape": "String"
      }
    },
    "ArchiveFindingsRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The ID of the detector that specifies the GuardDuty service whose findings you want to archive.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "FindingIds": {
          "documentation": "<p>The IDs of the findings that you want to archive.</p>",
          "locationName": "findingIds",
          "shape": "FindingIds"
        }
      },
      "required": [
        "DetectorId",
        "FindingIds"
      ],
      "type": "structure"
    },
    "ArchiveFindingsResponse": {
      "members": {},
      "type": "structure"
    },
    "AwsApiCallAction": {
      "documentation": "<p>Contains information about the API action.</p>",
      "members": {
        "AffectedResources": {
          "documentation": "<p>The details of the Amazon Web Services account that made the API call. This field identifies the resources that were affected by this API call.</p>",
          "locationName": "affectedResources",
          "shape": "AffectedResources"
        },
        "Api": {
          "documentation": "<p>The Amazon Web Services API name.</p>",
          "locationName": "api",
          "shape": "String"
        },
        "CallerType": {
          "documentation": "<p>The Amazon Web Services API caller type.</p>",
          "locationName": "callerType",
          "shape": "String"
        },
        "DomainDetails": {
          "documentation": "<p>The domain information for the Amazon Web Services API call.</p>",
          "locationName": "domainDetails",
          "shape": "DomainDetails"
        },
        "ErrorCode": {
          "documentation": "<p>The error code of the failed Amazon Web Services API action.</p>",
          "locationName": "errorCode",
          "shape": "String"
        },
        "RemoteAccountDetails": {
          "documentation": "<p>The details of the Amazon Web Services account that made the API call. This field appears if the call was made from outside your account.</p>",
          "locationName": "remoteAccountDetails",
          "shape": "RemoteAccountDetails"
        },
        "RemoteIpDetails": {
          "documentation": "<p>The remote IP information of the connection that initiated the Amazon Web Services API call.</p>",
          "locationName": "remoteIpDetails",
          "shape": "RemoteIpDetails"
        },
        "ServiceName": {
          "documentation": "<p>The Amazon Web Services service name whose API was invoked.</p>",
          "locationName": "serviceName",
          "shape": "String"
        },
        "UserAgent": {
          "documentation": "<p>The agent through which the API request was made.</p>",
          "locationName": "userAgent",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "BadRequestException": {
      "documentation": "<p>A bad request exception object.</p>",
      "error": {
        "httpStatusCode": 400
      },
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>The error message.</p>",
          "locationName": "message",
          "shape": "String"
        },
        "Type": {
          "documentation": "<p>The error type.</p>",
          "locationName": "__type",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "BlockPublicAccess": {
      "documentation": "<p>Contains information on how the bucker owner's S3 Block Public Access settings are being applied to the S3 bucket. See <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html\">S3 Block Public Access</a> for more information. </p>",
      "members": {
        "BlockPublicAcls": {
          "documentation": "<p>Indicates if S3 Block Public Access is set to <code>BlockPublicAcls</code>.</p>",
          "locationName": "blockPublicAcls",
          "shape": "Boolean"
        },
        "BlockPublicPolicy": {
          "documentation": "<p>Indicates if S3 Block Public Access is set to <code>BlockPublicPolicy</code>.</p>",
          "locationName": "blockPublicPolicy",
          "shape": "Boolean"
        },
        "IgnorePublicAcls": {
          "documentation": "<p>Indicates if S3 Block Public Access is set to <code>IgnorePublicAcls</code>.</p>",
          "locationName": "ignorePublicAcls",
          "shape": "Boolean"
        },
        "RestrictPublicBuckets": {
          "documentation": "<p>Indicates if S3 Block Public Access is set to <code>RestrictPublicBuckets</code>.</p>",
          "locationName": "restrictPublicBuckets",
          "shape": "Boolean"
        }
      },
      "type": "structure"
    },
    "Boolean": {
      "type": "boolean"
    },
    "BucketLevelPermissions": {
      "documentation": "<p>Contains information about the bucket level permissions for the S3 bucket.</p>",
      "members": {
        "AccessControlList": {
          "documentation": "<p>Contains information on how Access Control Policies are applied to the bucket.</p>",
          "locationName": "accessControlList",
          "shape": "AccessControlList"
        },
        "BlockPublicAccess": {
          "documentation": "<p>Contains information on which account level S3 Block Public Access settings are applied to the S3 bucket.</p>",
          "locationName": "blockPublicAccess",
          "shape": "BlockPublicAccess"
        },
        "BucketPolicy": {
          "documentation": "<p>Contains information on the bucket policies for the S3 bucket.</p>",
          "locationName": "bucketPolicy",
          "shape": "BucketPolicy"
        }
      },
      "type": "structure"
    },
    "BucketPolicy": {
      "documentation": "<p>Contains information on the current bucket policies for the S3 bucket.</p>",
      "members": {
        "AllowsPublicReadAccess": {
          "documentation": "<p>A value that indicates whether public read access for the bucket is enabled through a bucket policy.</p>",
          "locationName": "allowsPublicReadAccess",
          "shape": "Boolean"
        },
        "AllowsPublicWriteAccess": {
          "documentation": "<p>A value that indicates whether public write access for the bucket is enabled through a bucket policy.</p>",
          "locationName": "allowsPublicWriteAccess",
          "shape": "Boolean"
        }
      },
      "type": "structure"
    },
    "City": {
      "documentation": "<p>Contains information about the city associated with the IP address.</p>",
      "members": {
        "CityName": {
          "documentation": "<p>The city name of the remote IP address.</p>",
          "locationName": "cityName",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ClientToken": {
      "max": 64,
      "min": 0,
      "type": "string"
    },
    "CloudTrailConfigurationResult": {
      "documentation": "<p>Contains information on the status of CloudTrail as a data source for the detector.</p>",
      "members": {
        "Status": {
          "documentation": "<p>Describes whether CloudTrail is enabled as a data source for the detector.</p>",
          "locationName": "status",
          "shape": "DataSourceStatus"
        }
      },
      "required": [
        "Status"
      ],
      "type": "structure"
    },
    "Condition": {
      "documentation": "<p>Contains information about the condition.</p>",
      "members": {
        "Eq": {
          "deprecated": true,
          "documentation": "<p>Represents the <i>equal</i> condition to be applied to a single field when querying for findings.</p>",
          "locationName": "eq",
          "shape": "Eq"
        },
        "Equals": {
          "documentation": "<p>Represents an <i>equal</i> <b/> condition to be applied to a single field when querying for findings.</p>",
          "locationName": "equals",
          "shape": "Equals"
        },
        "GreaterThan": {
          "documentation": "<p>Represents a <i>greater than</i> condition to be applied to a single field when querying for findings.</p>",
          "locationName": "greaterThan",
          "shape": "Long"
        },
        "GreaterThanOrEqual": {
          "documentation": "<p>Represents a <i>greater than or equal</i> condition to be applied to a single field when querying for findings.</p>",
          "locationName": "greaterThanOrEqual",
          "shape": "Long"
        },
        "Gt": {
          "deprecated": true,
          "documentation": "<p>Represents a <i>greater than</i> condition to be applied to a single field when querying for findings.</p>",
          "locationName": "gt",
          "shape": "Integer"
        },
        "Gte": {
          "deprecated": true,
          "documentation": "<p>Represents a <i>greater than or equal</i> condition to be applied to a single field when querying for findings.</p>",
          "locationName": "gte",
          "shape": "Integer"
        },
        "LessThan": {
          "documentation": "<p>Represents a <i>less than</i> condition to be applied to a single field when querying for findings.</p>",
          "locationName": "lessThan",
          "shape": "Long"
        },
        "LessThanOrEqual": {
          "documentation": "<p>Represents a <i>less than or equal</i> condition to be applied to a single field when querying for findings.</p>",
          "locationName": "lessThanOrEqual",
          "shape": "Long"
        },
        "Lt": {
          "deprecated": true,
          "documentation": "<p>Represents a <i>less than</i> condition to be applied to a single field when querying for findings.</p>",
          "locationName": "lt",
          "shape": "Integer"
        },
        "Lte": {
          "deprecated": true,
          "documentation": "<p>Represents a <i>less than or equal</i> condition to be applied to a single field when querying for findings.</p>",
          "locationName": "lte",
          "shape": "Integer"
        },
        "Neq": {
          "deprecated": true,
          "documentation": "<p>Represents the <i>not equal</i> condition to be applied to a single field when querying for findings.</p>",
          "locationName": "neq",
          "shape": "Neq"
        },
        "NotEquals": {
          "documentation": "<p>Represents a <i>not equal</i> <b/> condition to be applied to a single field when querying for findings.</p>",
          "locationName": "notEquals",
          "shape": "NotEquals"
        }
      },
      "type": "structure"
    },
    "Container": {
      "documentation": "<p>Details of a container.</p>",
      "members": {
        "ContainerRuntime": {
          "documentation": "<p>The container runtime (such as, Docker or containerd) used to run the container.</p>",
          "locationName": "containerRuntime",
          "shape": "String"
        },
        "Id": {
          "documentation": "<p>Container ID.</p>",
          "locationName": "id",
          "shape": "String"
        },
        "Image": {
          "documentation": "<p>Container image.</p>",
          "locationName": "image",
          "shape": "String"
        },
        "ImagePrefix": {
          "documentation": "<p>Part of the image name before the last slash. For example, imagePrefix for public.ecr.aws/amazonlinux/amazonlinux:latest would be public.ecr.aws/amazonlinux. If the image name is relative and does not have a slash, this field is empty.</p>",
          "locationName": "imagePrefix",
          "shape": "String"
        },
        "Name": {
          "documentation": "<p>Container name.</p>",
          "locationName": "name",
          "shape": "String"
        },
        "SecurityContext": {
          "documentation": "<p>Container security context.</p>",
          "locationName": "securityContext",
          "shape": "SecurityContext"
        },
        "VolumeMounts": {
          "documentation": "<p>Container volume mounts.</p>",
          "locationName": "volumeMounts",
          "shape": "VolumeMounts"
        }
      },
      "type": "structure"
    },
    "Containers": {
      "member": {
        "shape": "Container"
      },
      "type": "list"
    },
    "CountBySeverity": {
      "key": {
        "shape": "String"
      },
      "type": "map",
      "value": {
        "shape": "Integer"
      }
    },
    "Country": {
      "documentation": "<p>Contains information about the country where the remote IP address is located.</p>",
      "members": {
        "CountryCode": {
          "documentation": "<p>The country code of the remote IP address.</p>",
          "locationName": "countryCode",
          "shape": "String"
        },
        "CountryName": {
          "documentation": "<p>The country name of the remote IP address.</p>",
          "locationName": "countryName",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "CreateDetectorRequest": {
      "members": {
        "ClientToken": {
          "documentation": "<p>The idempotency token for the create request.</p>",
          "idempotencyToken": true,
          "locationName": "clientToken",
          "shape": "ClientToken"
        },
        "DataSources": {
          "documentation": "<p>Describes which data sources will be enabled for the detector.</p>",
          "locationName": "dataSources",
          "shape": "DataSourceConfigurations"
        },
        "Enable": {
          "documentation": "<p>A Boolean value that specifies whether the detector is to be enabled.</p>",
          "locationName": "enable",
          "shape": "Boolean"
        },
        "FindingPublishingFrequency": {
          "documentation": "<p>A value that specifies how frequently updated findings are exported.</p>",
          "locationName": "findingPublishingFrequency",
          "shape": "FindingPublishingFrequency"
        },
        "Tags": {
          "documentation": "<p>The tags to be added to a new detector resource.</p>",
          "locationName": "tags",
          "shape": "TagMap"
        }
      },
      "required": [
        "Enable"
      ],
      "type": "structure"
    },
    "CreateDetectorResponse": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the created detector.</p>",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "UnprocessedDataSources": {
          "documentation": "<p>Specifies the data sources that couldn't be enabled when GuardDuty was enabled for the first time.</p>",
          "locationName": "unprocessedDataSources",
          "shape": "UnprocessedDataSourcesResult"
        }
      },
      "type": "structure"
    },
    "CreateFilterRequest": {
      "members": {
        "Action": {
          "documentation": "<p>Specifies the action that is to be applied to the findings that match the filter.</p>",
          "locationName": "action",
          "shape": "FilterAction"
        },
        "ClientToken": {
          "documentation": "<p>The idempotency token for the create request.</p>",
          "idempotencyToken": true,
          "locationName": "clientToken",
          "shape": "ClientToken"
        },
        "Description": {
          "documentation": "<p>The description of the filter.</p>",
          "locationName": "description",
          "shape": "FilterDescription"
        },
        "DetectorId": {
          "documentation": "<p>The ID of the detector belonging to the GuardDuty account that you want to create a filter for.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "FindingCriteria": {
          "documentation": "<p>Represents the criteria to be used in the filter for querying findings.</p> <p>You can only use the following attributes to query findings:</p> <ul> <li> <p>accountId</p> </li> <li> <p>region</p> </li> <li> <p>confidence</p> </li> <li> <p>id</p> </li> <li> <p>resource.accessKeyDetails.accessKeyId</p> </li> <li> <p>resource.accessKeyDetails.principalId</p> </li> <li> <p>resource.accessKeyDetails.userName</p> </li> <li> <p>resource.accessKeyDetails.userType</p> </li> <li> <p>resource.instanceDetails.iamInstanceProfile.id</p> </li> <li> <p>resource.instanceDetails.imageId</p> </li> <li> <p>resource.instanceDetails.instanceId</p> </li> <li> <p>resource.instanceDetails.outpostArn</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.ipv6Addresses</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.privateIpAddresses.privateIpAddress</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.publicDnsName</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.publicIp</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.securityGroups.groupId</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.securityGroups.groupName</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.subnetId</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.vpcId</p> </li> <li> <p>resource.instanceDetails.tags.key</p> </li> <li> <p>resource.instanceDetails.tags.value</p> </li> <li> <p>resource.resourceType</p> </li> <li> <p>service.action.actionType</p> </li> <li> <p>service.action.awsApiCallAction.api</p> </li> <li> <p>service.action.awsApiCallAction.callerType</p> </li> <li> <p>service.action.awsApiCallAction.errorCode</p> </li> <li> <p>service.action.awsApiCallAction.userAgent</p> </li> <li> <p>service.action.awsApiCallAction.remoteIpDetails.city.cityName</p> </li> <li> <p>service.action.awsApiCallAction.remoteIpDetails.country.countryName</p> </li> <li> <p>service.action.awsApiCallAction.remoteIpDetails.ipAddressV4</p> </li> <li> <p>service.action.awsApiCallAction.remoteIpDetails.organization.asn</p> </li> <li> <p>service.action.awsApiCallAction.remoteIpDetails.organization.asnOrg</p> </li> <li> <p>service.action.awsApiCallAction.serviceName</p> </li> <li> <p>service.action.dnsRequestAction.domain</p> </li> <li> <p>service.action.networkConnectionAction.blocked</p> </li> <li> <p>service.action.networkConnectionAction.connectionDirection</p> </li> <li> <p>service.action.networkConnectionAction.localPortDetails.port</p> </li> <li> <p>service.action.networkConnectionAction.protocol</p> </li> <li> <p>service.action.networkConnectionAction.localIpDetails.ipAddressV4</p> </li> <li> <p>service.action.networkConnectionAction.remoteIpDetails.city.cityName</p> </li> <li> <p>service.action.networkConnectionAction.remoteIpDetails.country.countryName</p> </li> <li> <p>service.action.networkConnectionAction.remoteIpDetails.ipAddressV4</p> </li> <li> <p>service.action.networkConnectionAction.remoteIpDetails.organization.asn</p> </li> <li> <p>service.action.networkConnectionAction.remoteIpDetails.organization.asnOrg</p> </li> <li> <p>service.action.networkConnectionAction.remotePortDetails.port</p> </li> <li> <p>service.additionalInfo.threatListName</p> </li> <li> <p>resource.s3BucketDetails.publicAccess.effectivePermissions</p> </li> <li> <p>resource.s3BucketDetails.name</p> </li> <li> <p>resource.s3BucketDetails.tags.key</p> </li> <li> <p>resource.s3BucketDetails.tags.value</p> </li> <li> <p>resource.s3BucketDetails.type</p> </li> <li> <p>service.archived</p> <p>When this attribute is set to TRUE, only archived findings are listed. When it's set to FALSE, only unarchived findings are listed. When this attribute is not set, all existing findings are listed.</p> </li> <li> <p>service.resourceRole</p> </li> <li> <p>severity</p> </li> <li> <p>type</p> </li> <li> <p>updatedAt</p> <p>Type: ISO 8601 string format: YYYY-MM-DDTHH:MM:SS.SSSZ or YYYY-MM-DDTHH:MM:SSZ depending on whether the value contains milliseconds.</p> </li> </ul>",
          "locationName": "findingCriteria",
          "shape": "FindingCriteria"
        },
        "Name": {
          "documentation": "<p>The name of the filter. Minimum length of 3. Maximum length of 64. Valid characters include alphanumeric characters, dot (.), underscore (_), and dash (-). Spaces are not allowed.</p>",
          "locationName": "name",
          "shape": "FilterName"
        },
        "Rank": {
          "documentation": "<p>Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.</p>",
          "locationName": "rank",
          "shape": "FilterRank"
        },
        "Tags": {
          "documentation": "<p>The tags to be added to a new filter resource.</p>",
          "locationName": "tags",
          "shape": "TagMap"
        }
      },
      "required": [
        "DetectorId",
        "Name",
        "FindingCriteria"
      ],
      "type": "structure"
    },
    "CreateFilterResponse": {
      "members": {
        "Name": {
          "documentation": "<p>The name of the successfully created filter.</p>",
          "locationName": "name",
          "shape": "FilterName"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "CreateIPSetRequest": {
      "members": {
        "Activate": {
          "documentation": "<p>A Boolean value that indicates whether GuardDuty is to start using the uploaded IPSet.</p>",
          "locationName": "activate",
          "shape": "Boolean"
        },
        "ClientToken": {
          "documentation": "<p>The idempotency token for the create request.</p>",
          "idempotencyToken": true,
          "locationName": "clientToken",
          "shape": "ClientToken"
        },
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector of the GuardDuty account that you want to create an IPSet for.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "Format": {
          "documentation": "<p>The format of the file that contains the IPSet.</p>",
          "locationName": "format",
          "shape": "IpSetFormat"
        },
        "Location": {
          "documentation": "<p>The URI of the file that contains the IPSet. </p>",
          "locationName": "location",
          "shape": "Location"
        },
        "Name": {
          "documentation": "<p>The user-friendly name to identify the IPSet.</p> <p> Allowed characters are alphanumerics, spaces, hyphens (-), and underscores (_).</p>",
          "locationName": "name",
          "shape": "Name"
        },
        "Tags": {
          "documentation": "<p>The tags to be added to a new IP set resource.</p>",
          "locationName": "tags",
          "shape": "TagMap"
        }
      },
      "required": [
        "DetectorId",
        "Name",
        "Format",
        "Location",
        "Activate"
      ],
      "type": "structure"
    },
    "CreateIPSetResponse": {
      "members": {
        "IpSetId": {
          "documentation": "<p>The ID of the IPSet resource.</p>",
          "locationName": "ipSetId",
          "shape": "String"
        }
      },
      "required": [
        "IpSetId"
      ],
      "type": "structure"
    },
    "CreateMembersRequest": {
      "members": {
        "AccountDetails": {
          "documentation": "<p>A list of account ID and email address pairs of the accounts that you want to associate with the GuardDuty administrator account.</p>",
          "locationName": "accountDetails",
          "shape": "AccountDetails"
        },
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector of the GuardDuty account that you want to associate member accounts with.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId",
        "AccountDetails"
      ],
      "type": "structure"
    },
    "CreateMembersResponse": {
      "members": {
        "UnprocessedAccounts": {
          "documentation": "<p>A list of objects that include the <code>accountIds</code> of the unprocessed accounts and a result string that explains why each was unprocessed.</p>",
          "locationName": "unprocessedAccounts",
          "shape": "UnprocessedAccounts"
        }
      },
      "required": [
        "UnprocessedAccounts"
      ],
      "type": "structure"
    },
    "CreatePublishingDestinationRequest": {
      "members": {
        "ClientToken": {
          "documentation": "<p>The idempotency token for the request.</p>",
          "idempotencyToken": true,
          "locationName": "clientToken",
          "shape": "ClientToken"
        },
        "DestinationProperties": {
          "documentation": "<p>The properties of the publishing destination, including the ARNs for the destination and the KMS key used for encryption.</p>",
          "locationName": "destinationProperties",
          "shape": "DestinationProperties"
        },
        "DestinationType": {
          "documentation": "<p>The type of resource for the publishing destination. Currently only Amazon S3 buckets are supported.</p>",
          "locationName": "destinationType",
          "shape": "DestinationType"
        },
        "DetectorId": {
          "documentation": "<p>The ID of the GuardDuty detector associated with the publishing destination.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId",
        "DestinationType",
        "DestinationProperties"
      ],
      "type": "structure"
    },
    "CreatePublishingDestinationResponse": {
      "members": {
        "DestinationId": {
          "documentation": "<p>The ID of the publishing destination that is created.</p>",
          "locationName": "destinationId",
          "shape": "String"
        }
      },
      "required": [
        "DestinationId"
      ],
      "type": "structure"
    },
    "CreateSampleFindingsRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The ID of the detector to create sample findings for.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "FindingTypes": {
          "documentation": "<p>The types of sample findings to generate.</p>",
          "locationName": "findingTypes",
          "shape": "FindingTypes"
        }
      },
      "required": [
        "DetectorId"
      ],
      "type": "structure"
    },
    "CreateSampleFindingsResponse": {
      "members": {},
      "type": "structure"
    },
    "CreateThreatIntelSetRequest": {
      "members": {
        "Activate": {
          "documentation": "<p>A Boolean value that indicates whether GuardDuty is to start using the uploaded ThreatIntelSet.</p>",
          "locationName": "activate",
          "shape": "Boolean"
        },
        "ClientToken": {
          "documentation": "<p>The idempotency token for the create request.</p>",
          "idempotencyToken": true,
          "locationName": "clientToken",
          "shape": "ClientToken"
        },
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector of the GuardDuty account that you want to create a threatIntelSet for.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "Format": {
          "documentation": "<p>The format of the file that contains the ThreatIntelSet.</p>",
          "locationName": "format",
          "shape": "ThreatIntelSetFormat"
        },
        "Location": {
          "documentation": "<p>The URI of the file that contains the ThreatIntelSet. </p>",
          "locationName": "location",
          "shape": "Location"
        },
        "Name": {
          "documentation": "<p>A user-friendly ThreatIntelSet name displayed in all findings that are generated by activity that involves IP addresses included in this ThreatIntelSet.</p>",
          "locationName": "name",
          "shape": "Name"
        },
        "Tags": {
          "documentation": "<p>The tags to be added to a new threat list resource.</p>",
          "locationName": "tags",
          "shape": "TagMap"
        }
      },
      "required": [
        "DetectorId",
        "Name",
        "Format",
        "Location",
        "Activate"
      ],
      "type": "structure"
    },
    "CreateThreatIntelSetResponse": {
      "members": {
        "ThreatIntelSetId": {
          "documentation": "<p>The ID of the ThreatIntelSet resource.</p>",
          "locationName": "threatIntelSetId",
          "shape": "String"
        }
      },
      "required": [
        "ThreatIntelSetId"
      ],
      "type": "structure"
    },
    "Criterion": {
      "key": {
        "shape": "String"
      },
      "type": "map",
      "value": {
        "shape": "Condition"
      }
    },
    "CriterionKey": {
      "enum": [
        "EC2_INSTANCE_ARN",
        "SCAN_ID",
        "ACCOUNT_ID",
        "GUARDDUTY_FINDING_ID",
        "SCAN_START_TIME",
        "SCAN_STATUS"
      ],
      "type": "string"
    },
    "DNSLogsConfigurationResult": {
      "documentation": "<p>Contains information on the status of DNS logs as a data source.</p>",
      "members": {
        "Status": {
          "documentation": "<p>Denotes whether DNS logs is enabled as a data source.</p>",
          "locationName": "status",
          "shape": "DataSourceStatus"
        }
      },
      "required": [
        "Status"
      ],
      "type": "structure"
    },
    "DataSource": {
      "enum": [
        "FLOW_LOGS",
        "CLOUD_TRAIL",
        "DNS_LOGS",
        "S3_LOGS",
        "KUBERNETES_AUDIT_LOGS",
        "EC2_MALWARE_SCAN"
      ],
      "type": "string"
    },
    "DataSourceConfigurations": {
      "documentation": "<p>Contains information about which data sources are enabled.</p>",
      "members": {
        "Kubernetes": {
          "documentation": "<p>Describes whether any Kubernetes logs are enabled as data sources.</p>",
          "locationName": "kubernetes",
          "shape": "KubernetesConfiguration"
        },
        "MalwareProtection": {
          "documentation": "<p>Describes whether Malware Protection is enabled as a data source.</p>",
          "locationName": "malwareProtection",
          "shape": "MalwareProtectionConfiguration"
        },
        "S3Logs": {
          "documentation": "<p>Describes whether S3 data event logs are enabled as a data source.</p>",
          "locationName": "s3Logs",
          "shape": "S3LogsConfiguration"
        }
      },
      "type": "structure"
    },
    "DataSourceConfigurationsResult": {
      "documentation": "<p>Contains information on the status of data sources for the detector.</p>",
      "members": {
        "CloudTrail": {
          "documentation": "<p>An object that contains information on the status of CloudTrail as a data source.</p>",
          "locationName": "cloudTrail",
          "shape": "CloudTrailConfigurationResult"
        },
        "DNSLogs": {
          "documentation": "<p>An object that contains information on the status of DNS logs as a data source.</p>",
          "locationName": "dnsLogs",
          "shape": "DNSLogsConfigurationResult"
        },
        "FlowLogs": {
          "documentation": "<p>An object that contains information on the status of VPC flow logs as a data source.</p>",
          "locationName": "flowLogs",
          "shape": "FlowLogsConfigurationResult"
        },
        "Kubernetes": {
          "documentation": "<p>An object that contains information on the status of all Kubernetes data sources.</p>",
          "locationName": "kubernetes",
          "shape": "KubernetesConfigurationResult"
        },
        "MalwareProtection": {
          "documentation": "<p>Describes the configuration of Malware Protection data sources.</p>",
          "locationName": "malwareProtection",
          "shape": "MalwareProtectionConfigurationResult"
        },
        "S3Logs": {
          "documentation": "<p>An object that contains information on the status of S3 Data event logs as a data source.</p>",
          "locationName": "s3Logs",
          "shape": "S3LogsConfigurationResult"
        }
      },
      "required": [
        "CloudTrail",
        "DNSLogs",
        "FlowLogs",
        "S3Logs"
      ],
      "type": "structure"
    },
    "DataSourceFreeTrial": {
      "documentation": "<p>Contains information about which data sources are enabled for the GuardDuty member account.</p>",
      "members": {
        "FreeTrialDaysRemaining": {
          "documentation": "<p>A value that specifies the number of days left to use each enabled data source.</p>",
          "locationName": "freeTrialDaysRemaining",
          "shape": "Integer"
        }
      },
      "type": "structure"
    },
    "DataSourceList": {
      "member": {
        "shape": "DataSource"
      },
      "type": "list"
    },
    "DataSourceStatus": {
      "enum": [
        "ENABLED",
        "DISABLED"
      ],
      "max": 300,
      "min": 1,
      "type": "string"
    },
    "DataSourcesFreeTrial": {
      "documentation": "<p>Contains information about which data sources are enabled for the GuardDuty member account.</p>",
      "members": {
        "CloudTrail": {
          "documentation": "<p>Describes whether any Amazon Web Services CloudTrail management event logs are enabled as data sources.</p>",
          "locationName": "cloudTrail",
          "shape": "DataSourceFreeTrial"
        },
        "DnsLogs": {
          "documentation": "<p>Describes whether any DNS logs are enabled as data sources.</p>",
          "locationName": "dnsLogs",
          "shape": "DataSourceFreeTrial"
        },
        "FlowLogs": {
          "documentation": "<p>Describes whether any VPC Flow logs are enabled as data sources.</p>",
          "locationName": "flowLogs",
          "shape": "DataSourceFreeTrial"
        },
        "Kubernetes": {
          "documentation": "<p>Describes whether any Kubernetes logs are enabled as data sources.</p>",
          "locationName": "kubernetes",
          "shape": "KubernetesDataSourceFreeTrial"
        },
        "MalwareProtection": {
          "documentation": "<p>Describes whether Malware Protection is enabled as a data source.</p>",
          "locationName": "malwareProtection",
          "shape": "MalwareProtectionDataSourceFreeTrial"
        },
        "S3Logs": {
          "documentation": "<p>Describes whether any S3 data event logs are enabled as data sources.</p>",
          "locationName": "s3Logs",
          "shape": "DataSourceFreeTrial"
        }
      },
      "type": "structure"
    },
    "DeclineInvitationsRequest": {
      "members": {
        "AccountIds": {
          "documentation": "<p>A list of account IDs of the Amazon Web Services accounts that sent invitations to the current member account that you want to decline invitations from.</p>",
          "locationName": "accountIds",
          "shape": "AccountIds"
        }
      },
      "required": [
        "AccountIds"
      ],
      "type": "structure"
    },
    "DeclineInvitationsResponse": {
      "members": {
        "UnprocessedAccounts": {
          "documentation": "<p>A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.</p>",
          "locationName": "unprocessedAccounts",
          "shape": "UnprocessedAccounts"
        }
      },
      "required": [
        "UnprocessedAccounts"
      ],
      "type": "structure"
    },
    "DefaultServerSideEncryption": {
      "documentation": "<p>Contains information on the server side encryption method used in the S3 bucket. See <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/serv-side-encryption.html\">S3 Server-Side Encryption</a> for more information.</p>",
      "members": {
        "EncryptionType": {
          "documentation": "<p>The type of encryption used for objects within the S3 bucket.</p>",
          "locationName": "encryptionType",
          "shape": "String"
        },
        "KmsMasterKeyArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the KMS encryption key. Only available if the bucket <code>EncryptionType</code> is <code>aws:kms</code>.</p>",
          "locationName": "kmsMasterKeyArn",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "DeleteDetectorRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector that you want to delete.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId"
      ],
      "type": "structure"
    },
    "DeleteDetectorResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteFilterRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector that the filter is associated with.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "FilterName": {
          "documentation": "<p>The name of the filter that you want to delete.</p>",
          "location": "uri",
          "locationName": "filterName",
          "shape": "String"
        }
      },
      "required": [
        "DetectorId",
        "FilterName"
      ],
      "type": "structure"
    },
    "DeleteFilterResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteIPSetRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector associated with the IPSet.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "IpSetId": {
          "documentation": "<p>The unique ID of the IPSet to delete.</p>",
          "location": "uri",
          "locationName": "ipSetId",
          "shape": "String"
        }
      },
      "required": [
        "DetectorId",
        "IpSetId"
      ],
      "type": "structure"
    },
    "DeleteIPSetResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteInvitationsRequest": {
      "members": {
        "AccountIds": {
          "documentation": "<p>A list of account IDs of the Amazon Web Services accounts that sent invitations to the current member account that you want to delete invitations from.</p>",
          "locationName": "accountIds",
          "shape": "AccountIds"
        }
      },
      "required": [
        "AccountIds"
      ],
      "type": "structure"
    },
    "DeleteInvitationsResponse": {
      "members": {
        "UnprocessedAccounts": {
          "documentation": "<p>A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.</p>",
          "locationName": "unprocessedAccounts",
          "shape": "UnprocessedAccounts"
        }
      },
      "required": [
        "UnprocessedAccounts"
      ],
      "type": "structure"
    },
    "DeleteMembersRequest": {
      "members": {
        "AccountIds": {
          "documentation": "<p>A list of account IDs of the GuardDuty member accounts that you want to delete.</p>",
          "locationName": "accountIds",
          "shape": "AccountIds"
        },
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector of the GuardDuty account whose members you want to delete.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId",
        "AccountIds"
      ],
      "type": "structure"
    },
    "DeleteMembersResponse": {
      "members": {
        "UnprocessedAccounts": {
          "documentation": "<p>The accounts that could not be processed.</p>",
          "locationName": "unprocessedAccounts",
          "shape": "UnprocessedAccounts"
        }
      },
      "required": [
        "UnprocessedAccounts"
      ],
      "type": "structure"
    },
    "DeletePublishingDestinationRequest": {
      "members": {
        "DestinationId": {
          "documentation": "<p>The ID of the publishing destination to delete.</p>",
          "location": "uri",
          "locationName": "destinationId",
          "shape": "String"
        },
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector associated with the publishing destination to delete.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId",
        "DestinationId"
      ],
      "type": "structure"
    },
    "DeletePublishingDestinationResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteThreatIntelSetRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector that the threatIntelSet is associated with.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "ThreatIntelSetId": {
          "documentation": "<p>The unique ID of the threatIntelSet that you want to delete.</p>",
          "location": "uri",
          "locationName": "threatIntelSetId",
          "shape": "String"
        }
      },
      "required": [
        "DetectorId",
        "ThreatIntelSetId"
      ],
      "type": "structure"
    },
    "DeleteThreatIntelSetResponse": {
      "members": {},
      "type": "structure"
    },
    "DescribeMalwareScansRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector that the request is associated with.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "FilterCriteria": {
          "documentation": "<p>Represents the criteria to be used in the filter for describing scan entries.</p>",
          "locationName": "filterCriteria",
          "shape": "FilterCriteria"
        },
        "MaxResults": {
          "documentation": "<p>You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 50. The maximum value is 50.</p>",
          "locationName": "maxResults",
          "shape": "IntegerValueWithMax"
        },
        "NextToken": {
          "documentation": "<p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.</p>",
          "locationName": "nextToken",
          "shape": "String"
        },
        "SortCriteria": {
          "documentation": "<p>Represents the criteria used for sorting scan entries.</p>",
          "locationName": "sortCriteria",
          "shape": "SortCriteria"
        }
      },
      "required": [
        "DetectorId"
      ],
      "type": "structure"
    },
    "DescribeMalwareScansResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>The pagination parameter to be used on the next list operation to retrieve more items.</p>",
          "locationName": "nextToken",
          "shape": "String"
        },
        "Scans": {
          "documentation": "<p>Contains information about malware scans.</p>",
          "locationName": "scans",
          "shape": "Scans"
        }
      },
      "required": [
        "Scans"
      ],
      "type": "structure"
    },
    "DescribeOrganizationConfigurationRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The ID of the detector to retrieve information about the delegated administrator from.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId"
      ],
      "type": "structure"
    },
    "DescribeOrganizationConfigurationResponse": {
      "members": {
        "AutoEnable": {
          "documentation": "<p>Indicates whether GuardDuty is automatically enabled for accounts added to the organization.</p>",
          "locationName": "autoEnable",
          "shape": "Boolean"
        },
        "DataSources": {
          "documentation": "<p>Describes which data sources are enabled automatically for member accounts.</p>",
          "locationName": "dataSources",
          "shape": "OrganizationDataSourceConfigurationsResult"
        },
        "MemberAccountLimitReached": {
          "documentation": "<p>Indicates whether the maximum number of allowed member accounts are already associated with the delegated administrator account for your organization.</p>",
          "locationName": "memberAccountLimitReached",
          "shape": "Boolean"
        }
      },
      "required": [
        "AutoEnable",
        "MemberAccountLimitReached"
      ],
      "type": "structure"
    },
    "DescribePublishingDestinationRequest": {
      "members": {
        "DestinationId": {
          "documentation": "<p>The ID of the publishing destination to retrieve.</p>",
          "location": "uri",
          "locationName": "destinationId",
          "shape": "String"
        },
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector associated with the publishing destination to retrieve.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId",
        "DestinationId"
      ],
      "type": "structure"
    },
    "DescribePublishingDestinationResponse": {
      "members": {
        "DestinationId": {
          "documentation": "<p>The ID of the publishing destination.</p>",
          "locationName": "destinationId",
          "shape": "String"
        },
        "DestinationProperties": {
          "documentation": "<p>A <code>DestinationProperties</code> object that includes the <code>DestinationArn</code> and <code>KmsKeyArn</code> of the publishing destination.</p>",
          "locationName": "destinationProperties",
          "shape": "DestinationProperties"
        },
        "DestinationType": {
          "documentation": "<p>The type of publishing destination. Currently, only Amazon S3 buckets are supported.</p>",
          "locationName": "destinationType",
          "shape": "DestinationType"
        },
        "PublishingFailureStartTimestamp": {
          "documentation": "<p>The time, in epoch millisecond format, at which GuardDuty was first unable to publish findings to the destination.</p>",
          "locationName": "publishingFailureStartTimestamp",
          "shape": "Long"
        },
        "Status": {
          "documentation": "<p>The status of the publishing destination.</p>",
          "locationName": "status",
          "shape": "PublishingStatus"
        }
      },
      "required": [
        "DestinationId",
        "DestinationType",
        "Status",
        "PublishingFailureStartTimestamp",
        "DestinationProperties"
      ],
      "type": "structure"
    },
    "Destination": {
      "documentation": "<p>Contains information about the publishing destination, including the ID, type, and status.</p>",
      "members": {
        "DestinationId": {
          "documentation": "<p>The unique ID of the publishing destination.</p>",
          "locationName": "destinationId",
          "shape": "String"
        },
        "DestinationType": {
          "documentation": "<p>The type of resource used for the publishing destination. Currently, only Amazon S3 buckets are supported.</p>",
          "locationName": "destinationType",
          "shape": "DestinationType"
        },
        "Status": {
          "documentation": "<p>The status of the publishing destination.</p>",
          "locationName": "status",
          "shape": "PublishingStatus"
        }
      },
      "required": [
        "DestinationId",
        "DestinationType",
        "Status"
      ],
      "type": "structure"
    },
    "DestinationProperties": {
      "documentation": "<p>Contains the Amazon Resource Name (ARN) of the resource to publish to, such as an S3 bucket, and the ARN of the KMS key to use to encrypt published findings.</p>",
      "members": {
        "DestinationArn": {
          "documentation": "<p>The ARN of the resource to publish to.</p> <p>To specify an S3 bucket folder use the following format: <code>arn:aws:s3:::DOC-EXAMPLE-BUCKET/myFolder/</code> </p>",
          "locationName": "destinationArn",
          "shape": "String"
        },
        "KmsKeyArn": {
          "documentation": "<p>The ARN of the KMS key to use for encryption.</p>",
          "locationName": "kmsKeyArn",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "DestinationType": {
      "enum": [
        "S3"
      ],
      "max": 300,
      "min": 1,
      "type": "string"
    },
    "Destinations": {
      "member": {
        "shape": "Destination"
      },
      "type": "list"
    },
    "DetectorId": {
      "max": 300,
      "min": 1,
      "type": "string"
    },
    "DetectorIds": {
      "max": 50,
      "member": {
        "shape": "DetectorId"
      },
      "min": 0,
      "type": "list"
    },
    "DetectorStatus": {
      "enum": [
        "ENABLED",
        "DISABLED"
      ],
      "max": 300,
      "min": 1,
      "type": "string"
    },
    "DisableOrganizationAdminAccountRequest": {
      "members": {
        "AdminAccountId": {
          "documentation": "<p>The Amazon Web Services Account ID for the organizations account to be disabled as a GuardDuty delegated administrator.</p>",
          "locationName": "adminAccountId",
          "shape": "String"
        }
      },
      "required": [
        "AdminAccountId"
      ],
      "type": "structure"
    },
    "DisableOrganizationAdminAccountResponse": {
      "members": {},
      "type": "structure"
    },
    "DisassociateFromAdministratorAccountRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector of the GuardDuty member account.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId"
      ],
      "type": "structure"
    },
    "DisassociateFromAdministratorAccountResponse": {
      "members": {},
      "type": "structure"
    },
    "DisassociateFromMasterAccountRequest": {
      "deprecated": true,
      "deprecatedMessage": "This input is deprecated, use DisassociateFromAdministratorAccountRequest instead",
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector of the GuardDuty member account.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId"
      ],
      "type": "structure"
    },
    "DisassociateFromMasterAccountResponse": {
      "deprecated": true,
      "deprecatedMessage": "This output is deprecated, use DisassociateFromAdministratorAccountResponse instead",
      "members": {},
      "type": "structure"
    },
    "DisassociateMembersRequest": {
      "members": {
        "AccountIds": {
          "documentation": "<p>A list of account IDs of the GuardDuty member accounts that you want to disassociate from the administrator account.</p>",
          "locationName": "accountIds",
          "shape": "AccountIds"
        },
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector of the GuardDuty account whose members you want to disassociate from the administrator account.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId",
        "AccountIds"
      ],
      "type": "structure"
    },
    "DisassociateMembersResponse": {
      "members": {
        "UnprocessedAccounts": {
          "documentation": "<p>A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.</p>",
          "locationName": "unprocessedAccounts",
          "shape": "UnprocessedAccounts"
        }
      },
      "required": [
        "UnprocessedAccounts"
      ],
      "type": "structure"
    },
    "DnsRequestAction": {
      "documentation": "<p>Contains information about the DNS_REQUEST action described in this finding.</p>",
      "members": {
        "Blocked": {
          "documentation": "<p>Indicates whether the targeted port is blocked.</p>",
          "locationName": "blocked",
          "shape": "Boolean"
        },
        "Domain": {
          "documentation": "<p>The domain information for the API request.</p>",
          "locationName": "domain",
          "shape": "String"
        },
        "Protocol": {
          "documentation": "<p>The network connection protocol observed in the activity that prompted GuardDuty to generate the finding.</p>",
          "locationName": "protocol",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "DomainDetails": {
      "documentation": "<p>Contains information about the domain.</p>",
      "members": {
        "Domain": {
          "documentation": "<p>The domain information for the Amazon Web Services API call.</p>",
          "locationName": "domain",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "Double": {
      "type": "double"
    },
    "EbsSnapshotPreservation": {
      "enum": [
        "NO_RETENTION",
        "RETENTION_WITH_FINDING"
      ],
      "type": "string"
    },
    "EbsVolumeDetails": {
      "documentation": "<p>Contains list of scanned and skipped EBS volumes with details.</p>",
      "members": {
        "ScannedVolumeDetails": {
          "documentation": "<p>List of EBS volumes that were scanned.</p>",
          "locationName": "scannedVolumeDetails",
          "shape": "VolumeDetails"
        },
        "SkippedVolumeDetails": {
          "documentation": "<p>List of EBS volumes that were skipped from the malware scan.</p>",
          "locationName": "skippedVolumeDetails",
          "shape": "VolumeDetails"
        }
      },
      "type": "structure"
    },
    "EbsVolumeScanDetails": {
      "documentation": "<p>Contains details from the malware scan that created a finding.</p>",
      "members": {
        "ScanCompletedAt": {
          "documentation": "<p>Returns the completion date and time of the malware scan.</p>",
          "locationName": "scanCompletedAt",
          "shape": "Timestamp"
        },
        "ScanDetections": {
          "documentation": "<p>Contains a complete view providing malware scan result details.</p>",
          "locationName": "scanDetections",
          "shape": "ScanDetections"
        },
        "ScanId": {
          "documentation": "<p>Unique Id of the malware scan that generated the finding.</p>",
          "locationName": "scanId",
          "shape": "String"
        },
        "ScanStartedAt": {
          "documentation": "<p>Returns the start date and time of the malware scan.</p>",
          "locationName": "scanStartedAt",
          "shape": "Timestamp"
        },
        "Sources": {
          "documentation": "<p>Contains list of threat intelligence sources used to detect threats.</p>",
          "locationName": "sources",
          "shape": "Sources"
        },
        "TriggerFindingId": {
          "documentation": "<p>GuardDuty finding ID that triggered a malware scan.</p>",
          "locationName": "triggerFindingId",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "EbsVolumesResult": {
      "documentation": "<p>Describes the configuration of scanning EBS volumes as a data source.</p>",
      "members": {
        "Reason": {
          "documentation": "<p>Specifies the reason why scanning EBS volumes (Malware Protection) was not enabled as a data source.</p>",
          "locationName": "reason",
          "shape": "String"
        },
        "Status": {
          "documentation": "<p>Describes whether scanning EBS volumes is enabled as a data source.</p>",
          "locationName": "status",
          "shape": "DataSourceStatus"
        }
      },
      "type": "structure"
    },
    "EcsClusterDetails": {
      "documentation": "<p>Contains information about the details of the ECS Cluster.</p>",
      "members": {
        "ActiveServicesCount": {
          "documentation": "<p>The number of services that are running on the cluster in an ACTIVE state.</p>",
          "locationName": "activeServicesCount",
          "shape": "Integer"
        },
        "Arn": {
          "documentation": "<p>The Amazon Resource Name (ARN) that identifies the cluster.</p>",
          "locationName": "arn",
          "shape": "String"
        },
        "Name": {
          "documentation": "<p>The name of the ECS Cluster.</p>",
          "locationName": "name",
          "shape": "String"
        },
        "RegisteredContainerInstancesCount": {
          "documentation": "<p>The number of container instances registered into the cluster.</p>",
          "locationName": "registeredContainerInstancesCount",
          "shape": "Integer"
        },
        "RunningTasksCount": {
          "documentation": "<p>The number of tasks in the cluster that are in the RUNNING state.</p>",
          "locationName": "runningTasksCount",
          "shape": "Integer"
        },
        "Status": {
          "documentation": "<p>The status of the ECS cluster.</p>",
          "locationName": "status",
          "shape": "String"
        },
        "Tags": {
          "documentation": "<p>The tags of the ECS Cluster.</p>",
          "locationName": "tags",
          "shape": "Tags"
        },
        "TaskDetails": {
          "documentation": "<p>Contains information about the details of the ECS Task.</p>",
          "locationName": "taskDetails",
          "shape": "EcsTaskDetails"
        }
      },
      "type": "structure"
    },
    "EcsTaskDetails": {
      "documentation": "<p>Contains information about the task in an ECS cluster.</p>",
      "members": {
        "Arn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the task.</p>",
          "locationName": "arn",
          "shape": "String"
        },
        "Containers": {
          "documentation": "<p>The containers that's associated with the task.</p>",
          "locationName": "containers",
          "shape": "Containers"
        },
        "DefinitionArn": {
          "documentation": "<p>The ARN of the task definition that creates the task.</p>",
          "locationName": "definitionArn",
          "shape": "String"
        },
        "Group": {
          "documentation": "<p>The name of the task group that's associated with the task.</p>",
          "locationName": "group",
          "shape": "String"
        },
        "StartedAt": {
          "documentation": "<p>The Unix timestamp for the time when the task started.</p>",
          "locationName": "startedAt",
          "shape": "Timestamp"
        },
        "StartedBy": {
          "documentation": "<p>Contains the tag specified when a task is started.</p>",
          "locationName": "startedBy",
          "shape": "String"
        },
        "Tags": {
          "documentation": "<p>The tags of the ECS Task.</p>",
          "locationName": "tags",
          "shape": "Tags"
        },
        "TaskCreatedAt": {
          "documentation": "<p>The Unix timestamp for the time when the task was created.</p>",
          "locationName": "createdAt",
          "shape": "Timestamp"
        },
        "Version": {
          "documentation": "<p>The version counter for the task.</p>",
          "locationName": "version",
          "shape": "String"
        },
        "Volumes": {
          "documentation": "<p>The list of data volume definitions for the task.</p>",
          "locationName": "volumes",
          "shape": "Volumes"
        }
      },
      "type": "structure"
    },
    "EksClusterDetails": {
      "documentation": "<p>Details about the EKS cluster involved in a Kubernetes finding.</p>",
      "members": {
        "Arn": {
          "documentation": "<p>EKS cluster ARN.</p>",
          "locationName": "arn",
          "shape": "String"
        },
        "CreatedAt": {
          "documentation": "<p>The timestamp when the EKS cluster was created.</p>",
          "locationName": "createdAt",
          "shape": "Timestamp"
        },
        "Name": {
          "documentation": "<p>EKS cluster name.</p>",
          "locationName": "name",
          "shape": "String"
        },
        "Status": {
          "documentation": "<p>The EKS cluster status.</p>",
          "locationName": "status",
          "shape": "String"
        },
        "Tags": {
          "documentation": "<p>The EKS cluster tags.</p>",
          "locationName": "tags",
          "shape": "Tags"
        },
        "VpcId": {
          "documentation": "<p>The VPC ID to which the EKS cluster is attached.</p>",
          "locationName": "vpcId",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "Email": {
      "max": 64,
      "min": 1,
      "type": "string"
    },
    "EnableOrganizationAdminAccountRequest": {
      "members": {
        "AdminAccountId": {
          "documentation": "<p>The Amazon Web Services Account ID for the organization account to be enabled as a GuardDuty delegated administrator.</p>",
          "locationName": "adminAccountId",
          "shape": "String"
        }
      },
      "required": [
        "AdminAccountId"
      ],
      "type": "structure"
    },
    "EnableOrganizationAdminAccountResponse": {
      "members": {},
      "type": "structure"
    },
    "Eq": {
      "member": {
        "shape": "String"
      },
      "type": "list"
    },
    "Equals": {
      "member": {
        "shape": "String"
      },
      "type": "list"
    },
    "Evidence": {
      "documentation": "<p>Contains information about the reason that the finding was generated.</p>",
      "members": {
        "ThreatIntelligenceDetails": {
          "documentation": "<p>A list of threat intelligence details related to the evidence.</p>",
          "locationName": "threatIntelligenceDetails",
          "shape": "ThreatIntelligenceDetails"
        }
      },
      "type": "structure"
    },
    "Feedback": {
      "enum": [
        "USEFUL",
        "NOT_USEFUL"
      ],
      "type": "string"
    },
    "FilePaths": {
      "member": {
        "shape": "ScanFilePath"
      },
      "type": "list"
    },
    "FilterAction": {
      "enum": [
        "NOOP",
        "ARCHIVE"
      ],
      "max": 300,
      "min": 1,
      "type": "string"
    },
    "FilterCondition": {
      "documentation": "<p>Contains information about the condition.</p>",
      "members": {
        "EqualsValue": {
          "documentation": "<p>Represents an <i>equal</i> <b/> condition to be applied to a single field when querying for scan entries.</p>",
          "locationName": "equalsValue",
          "shape": "NonEmptyString"
        },
        "GreaterThan": {
          "documentation": "<p>Represents a <i>greater than</i> condition to be applied to a single field when querying for scan entries.</p>",
          "locationName": "greaterThan",
          "shape": "LongValue"
        },
        "LessThan": {
          "documentation": "<p>Represents a <i>less than</i> condition to be applied to a single field when querying for scan entries.</p>",
          "locationName": "lessThan",
          "shape": "LongValue"
        }
      },
      "type": "structure"
    },
    "FilterCriteria": {
      "documentation": "<p>Represents the criteria to be used in the filter for describing scan entries.</p>",
      "members": {
        "FilterCriterion": {
          "documentation": "<p>Represents a condition that when matched will be added to the response of the operation.</p>",
          "locationName": "filterCriterion",
          "shape": "FilterCriterionList"
        }
      },
      "type": "structure"
    },
    "FilterCriterion": {
      "documentation": "<p>Represents a condition that when matched will be added to the response of the operation. Irrespective of using any filter criteria, an administrator account can view the scan entries for all of its member accounts. However, each member account can view the scan entries only for their own account.</p>",
      "members": {
        "CriterionKey": {
          "documentation": "<p>An enum value representing possible scan properties to match with given scan entries.</p>",
          "locationName": "criterionKey",
          "shape": "CriterionKey"
        },
        "FilterCondition": {
          "documentation": "<p>Contains information about the condition.</p>",
          "locationName": "filterCondition",
          "shape": "FilterCondition"
        }
      },
      "type": "structure"
    },
    "FilterCriterionList": {
      "max": 1,
      "member": {
        "shape": "FilterCriterion"
      },
      "min": 0,
      "type": "list"
    },
    "FilterDescription": {
      "max": 512,
      "min": 0,
      "type": "string"
    },
    "FilterName": {
      "max": 64,
      "min": 3,
      "type": "string"
    },
    "FilterNames": {
      "max": 50,
      "member": {
        "shape": "FilterName"
      },
      "min": 0,
      "type": "list"
    },
    "FilterRank": {
      "max": 100,
      "min": 1,
      "type": "integer"
    },
    "Finding": {
      "documentation": "<p>Contains information about the finding, which is generated when abnormal or suspicious activity is detected.</p>",
      "members": {
        "AccountId": {
          "documentation": "<p>The ID of the account in which the finding was generated.</p>",
          "locationName": "accountId",
          "shape": "String"
        },
        "Arn": {
          "documentation": "<p>The ARN of the finding.</p>",
          "locationName": "arn",
          "shape": "String"
        },
        "Confidence": {
          "documentation": "<p>The confidence score for the finding.</p>",
          "locationName": "confidence",
          "shape": "Double"
        },
        "CreatedAt": {
          "documentation": "<p>The time and date when the finding was created.</p>",
          "locationName": "createdAt",
          "shape": "String"
        },
        "Description": {
          "documentation": "<p>The description of the finding.</p>",
          "locationName": "description",
          "shape": "String"
        },
        "Id": {
          "documentation": "<p>The ID of the finding.</p>",
          "locationName": "id",
          "shape": "String"
        },
        "Partition": {
          "documentation": "<p>The partition associated with the finding.</p>",
          "locationName": "partition",
          "shape": "String"
        },
        "Region": {
          "documentation": "<p>The Region where the finding was generated.</p>",
          "locationName": "region",
          "shape": "String"
        },
        "Resource": {
          "locationName": "resource",
          "shape": "Resource"
        },
        "SchemaVersion": {
          "documentation": "<p>The version of the schema used for the finding.</p>",
          "locationName": "schemaVersion",
          "shape": "String"
        },
        "Service": {
          "locationName": "service",
          "shape": "Service"
        },
        "Severity": {
          "documentation": "<p>The severity of the finding.</p>",
          "locationName": "severity",
          "shape": "Double"
        },
        "Title": {
          "documentation": "<p>The title of the finding.</p>",
          "locationName": "title",
          "shape": "String"
        },
        "Type": {
          "documentation": "<p>The type of finding.</p>",
          "locationName": "type",
          "shape": "FindingType"
        },
        "UpdatedAt": {
          "documentation": "<p>The time and date when the finding was last updated.</p>",
          "locationName": "updatedAt",
          "shape": "String"
        }
      },
      "required": [
        "AccountId",
        "Arn",
        "CreatedAt",
        "Id",
        "Region",
        "Resource",
        "SchemaVersion",
        "Severity",
        "Type",
        "UpdatedAt"
      ],
      "type": "structure"
    },
    "FindingCriteria": {
      "documentation": "<p>Contains information about the criteria used for querying findings.</p>",
      "members": {
        "Criterion": {
          "documentation": "<p>Represents a map of finding properties that match specified conditions and values when querying findings.</p>",
          "locationName": "criterion",
          "shape": "Criterion"
        }
      },
      "type": "structure"
    },
    "FindingId": {
      "max": 300,
      "min": 1,
      "type": "string"
    },
    "FindingIds": {
      "max": 50,
      "member": {
        "shape": "FindingId"
      },
      "min": 0,
      "type": "list"
    },
    "FindingPublishingFrequency": {
      "enum": [
        "FIFTEEN_MINUTES",
        "ONE_HOUR",
        "SIX_HOURS"
      ],
      "type": "string"
    },
    "FindingStatisticType": {
      "enum": [
        "COUNT_BY_SEVERITY"
      ],
      "type": "string"
    },
    "FindingStatisticTypes": {
      "max": 10,
      "member": {
        "shape": "FindingStatisticType"
      },
      "min": 0,
      "type": "list"
    },
    "FindingStatistics": {
      "documentation": "<p>Contains information about finding statistics.</p>",
      "members": {
        "CountBySeverity": {
          "documentation": "<p>Represents a map of severity to count statistics for a set of findings.</p>",
          "locationName": "countBySeverity",
          "shape": "CountBySeverity"
        }
      },
      "type": "structure"
    },
    "FindingType": {
      "max": 50,
      "min": 1,
      "type": "string"
    },
    "FindingTypes": {
      "max": 50,
      "member": {
        "shape": "FindingType"
      },
      "min": 0,
      "type": "list"
    },
    "Findings": {
      "max": 50,
      "member": {
        "shape": "Finding"
      },
      "min": 0,
      "type": "list"
    },
    "FlowLogsConfigurationResult": {
      "documentation": "<p>Contains information on the status of VPC flow logs as a data source.</p>",
      "members": {
        "Status": {
          "documentation": "<p>Denotes whether VPC flow logs is enabled as a data source.</p>",
          "locationName": "status",
          "shape": "DataSourceStatus"
        }
      },
      "required": [
        "Status"
      ],
      "type": "structure"
    },
    "GeoLocation": {
      "documentation": "<p>Contains information about the location of the remote IP address.</p>",
      "members": {
        "Lat": {
          "documentation": "<p>The latitude information of the remote IP address.</p>",
          "locationName": "lat",
          "shape": "Double"
        },
        "Lon": {
          "documentation": "<p>The longitude information of the remote IP address.</p>",
          "locationName": "lon",
          "shape": "Double"
        }
      },
      "type": "structure"
    },
    "GetAdministratorAccountRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector of the GuardDuty member account.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId"
      ],
      "type": "structure"
    },
    "GetAdministratorAccountResponse": {
      "members": {
        "Administrator": {
          "documentation": "<p>The administrator account details.</p>",
          "locationName": "administrator",
          "shape": "Administrator"
        }
      },
      "required": [
        "Administrator"
      ],
      "type": "structure"
    },
    "GetDetectorRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector that you want to get.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId"
      ],
      "type": "structure"
    },
    "GetDetectorResponse": {
      "members": {
        "CreatedAt": {
          "documentation": "<p>The timestamp of when the detector was created.</p>",
          "locationName": "createdAt",
          "shape": "String"
        },
        "DataSources": {
          "documentation": "<p>Describes which data sources are enabled for the detector.</p>",
          "locationName": "dataSources",
          "shape": "DataSourceConfigurationsResult"
        },
        "FindingPublishingFrequency": {
          "documentation": "<p>The publishing frequency of the finding.</p>",
          "locationName": "findingPublishingFrequency",
          "shape": "FindingPublishingFrequency"
        },
        "ServiceRole": {
          "documentation": "<p>The GuardDuty service role.</p>",
          "locationName": "serviceRole",
          "shape": "String"
        },
        "Status": {
          "documentation": "<p>The detector status.</p>",
          "locationName": "status",
          "shape": "DetectorStatus"
        },
        "Tags": {
          "documentation": "<p>The tags of the detector resource.</p>",
          "locationName": "tags",
          "shape": "TagMap"
        },
        "UpdatedAt": {
          "documentation": "<p>The last-updated timestamp for the detector.</p>",
          "locationName": "updatedAt",
          "shape": "String"
        }
      },
      "required": [
        "ServiceRole",
        "Status"
      ],
      "type": "structure"
    },
    "GetFilterRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector that the filter is associated with.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "FilterName": {
          "documentation": "<p>The name of the filter you want to get.</p>",
          "location": "uri",
          "locationName": "filterName",
          "shape": "String"
        }
      },
      "required": [
        "DetectorId",
        "FilterName"
      ],
      "type": "structure"
    },
    "GetFilterResponse": {
      "members": {
        "Action": {
          "documentation": "<p>Specifies the action that is to be applied to the findings that match the filter.</p>",
          "locationName": "action",
          "shape": "FilterAction"
        },
        "Description": {
          "documentation": "<p>The description of the filter.</p>",
          "locationName": "description",
          "shape": "FilterDescription"
        },
        "FindingCriteria": {
          "documentation": "<p>Represents the criteria to be used in the filter for querying findings.</p>",
          "locationName": "findingCriteria",
          "shape": "FindingCriteria"
        },
        "Name": {
          "documentation": "<p>The name of the filter.</p>",
          "locationName": "name",
          "shape": "FilterName"
        },
        "Rank": {
          "documentation": "<p>Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.</p>",
          "locationName": "rank",
          "shape": "FilterRank"
        },
        "Tags": {
          "documentation": "<p>The tags of the filter resource.</p>",
          "locationName": "tags",
          "shape": "TagMap"
        }
      },
      "required": [
        "Name",
        "Action",
        "FindingCriteria"
      ],
      "type": "structure"
    },
    "GetFindingsRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The ID of the detector that specifies the GuardDuty service whose findings you want to retrieve.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "FindingIds": {
          "documentation": "<p>The IDs of the findings that you want to retrieve.</p>",
          "locationName": "findingIds",
          "shape": "FindingIds"
        },
        "SortCriteria": {
          "documentation": "<p>Represents the criteria used for sorting findings.</p>",
          "locationName": "sortCriteria",
          "shape": "SortCriteria"
        }
      },
      "required": [
        "DetectorId",
        "FindingIds"
      ],
      "type": "structure"
    },
    "GetFindingsResponse": {
      "members": {
        "Findings": {
          "documentation": "<p>A list of findings.</p>",
          "locationName": "findings",
          "shape": "Findings"
        }
      },
      "required": [
        "Findings"
      ],
      "type": "structure"
    },
    "GetFindingsStatisticsRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The ID of the detector that specifies the GuardDuty service whose findings' statistics you want to retrieve.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "FindingCriteria": {
          "documentation": "<p>Represents the criteria that is used for querying findings.</p>",
          "locationName": "findingCriteria",
          "shape": "FindingCriteria"
        },
        "FindingStatisticTypes": {
          "documentation": "<p>The types of finding statistics to retrieve.</p>",
          "locationName": "findingStatisticTypes",
          "shape": "FindingStatisticTypes"
        }
      },
      "required": [
        "DetectorId",
        "FindingStatisticTypes"
      ],
      "type": "structure"
    },
    "GetFindingsStatisticsResponse": {
      "members": {
        "FindingStatistics": {
          "documentation": "<p>The finding statistics object.</p>",
          "locationName": "findingStatistics",
          "shape": "FindingStatistics"
        }
      },
      "required": [
        "FindingStatistics"
      ],
      "type": "structure"
    },
    "GetIPSetRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector that the IPSet is associated with.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "IpSetId": {
          "documentation": "<p>The unique ID of the IPSet to retrieve.</p>",
          "location": "uri",
          "locationName": "ipSetId",
          "shape": "String"
        }
      },
      "required": [
        "DetectorId",
        "IpSetId"
      ],
      "type": "structure"
    },
    "GetIPSetResponse": {
      "members": {
        "Format": {
          "documentation": "<p>The format of the file that contains the IPSet.</p>",
          "locationName": "format",
          "shape": "IpSetFormat"
        },
        "Location": {
          "documentation": "<p>The URI of the file that contains the IPSet.</p>",
          "locationName": "location",
          "shape": "Location"
        },
        "Name": {
          "documentation": "<p>The user-friendly name for the IPSet.</p>",
          "locationName": "name",
          "shape": "Name"
        },
        "Status": {
          "documentation": "<p>The status of IPSet file that was uploaded.</p>",
          "locationName": "status",
          "shape": "IpSetStatus"
        },
        "Tags": {
          "documentation": "<p>The tags of the IPSet resource.</p>",
          "locationName": "tags",
          "shape": "TagMap"
        }
      },
      "required": [
        "Name",
        "Format",
        "Location",
        "Status"
      ],
      "type": "structure"
    },
    "GetInvitationsCountRequest": {
      "members": {},
      "type": "structure"
    },
    "GetInvitationsCountResponse": {
      "members": {
        "InvitationsCount": {
          "documentation": "<p>The number of received invitations.</p>",
          "locationName": "invitationsCount",
          "shape": "Integer"
        }
      },
      "type": "structure"
    },
    "GetMalwareScanSettingsRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector that the scan setting is associated with.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId"
      ],
      "type": "structure"
    },
    "GetMalwareScanSettingsResponse": {
      "members": {
        "EbsSnapshotPreservation": {
          "documentation": "<p>An enum value representing possible snapshot preservation settings.</p>",
          "locationName": "ebsSnapshotPreservation",
          "shape": "EbsSnapshotPreservation"
        },
        "ScanResourceCriteria": {
          "documentation": "<p>Represents the criteria to be used in the filter for scanning resources.</p>",
          "locationName": "scanResourceCriteria",
          "shape": "ScanResourceCriteria"
        }
      },
      "type": "structure"
    },
    "GetMasterAccountRequest": {
      "deprecated": true,
      "deprecatedMessage": "This input is deprecated, use GetAdministratorAccountRequest instead",
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector of the GuardDuty member account.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId"
      ],
      "type": "structure"
    },
    "GetMasterAccountResponse": {
      "deprecated": true,
      "deprecatedMessage": "This output is deprecated, use GetAdministratorAccountResponse instead",
      "members": {
        "Master": {
          "documentation": "<p>The administrator account details.</p>",
          "locationName": "master",
          "shape": "Master"
        }
      },
      "required": [
        "Master"
      ],
      "type": "structure"
    },
    "GetMemberDetectorsRequest": {
      "members": {
        "AccountIds": {
          "documentation": "<p>The account ID of the member account.</p>",
          "locationName": "accountIds",
          "shape": "AccountIds"
        },
        "DetectorId": {
          "documentation": "<p>The detector ID for the administrator account.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId",
        "AccountIds"
      ],
      "type": "structure"
    },
    "GetMemberDetectorsResponse": {
      "members": {
        "MemberDataSourceConfigurations": {
          "documentation": "<p>An object that describes which data sources are enabled for a member account.</p>",
          "locationName": "members",
          "shape": "MemberDataSourceConfigurations"
        },
        "UnprocessedAccounts": {
          "documentation": "<p>A list of member account IDs that were unable to be processed along with an explanation for why they were not processed.</p>",
          "locationName": "unprocessedAccounts",
          "shape": "UnprocessedAccounts"
        }
      },
      "required": [
        "MemberDataSourceConfigurations",
        "UnprocessedAccounts"
      ],
      "type": "structure"
    },
    "GetMembersRequest": {
      "members": {
        "AccountIds": {
          "documentation": "<p>A list of account IDs of the GuardDuty member accounts that you want to describe.</p>",
          "locationName": "accountIds",
          "shape": "AccountIds"
        },
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector of the GuardDuty account whose members you want to retrieve.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId",
        "AccountIds"
      ],
      "type": "structure"
    },
    "GetMembersResponse": {
      "members": {
        "Members": {
          "documentation": "<p>A list of members.</p>",
          "locationName": "members",
          "shape": "Members"
        },
        "UnprocessedAccounts": {
          "documentation": "<p>A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.</p>",
          "locationName": "unprocessedAccounts",
          "shape": "UnprocessedAccounts"
        }
      },
      "required": [
        "Members",
        "UnprocessedAccounts"
      ],
      "type": "structure"
    },
    "GetRemainingFreeTrialDaysRequest": {
      "members": {
        "AccountIds": {
          "documentation": "<p>A list of account identifiers of the GuardDuty member account.</p>",
          "locationName": "accountIds",
          "shape": "AccountIds"
        },
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector of the GuardDuty member account.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId"
      ],
      "type": "structure"
    },
    "GetRemainingFreeTrialDaysResponse": {
      "members": {
        "Accounts": {
          "documentation": "<p>The member accounts which were included in a request and were processed successfully.</p>",
          "locationName": "accounts",
          "shape": "AccountFreeTrialInfos"
        },
        "UnprocessedAccounts": {
          "documentation": "<p>The member account that was included in a request but for which the request could not be processed.</p>",
          "locationName": "unprocessedAccounts",
          "shape": "UnprocessedAccounts"
        }
      },
      "type": "structure"
    },
    "GetThreatIntelSetRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector that the threatIntelSet is associated with.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "ThreatIntelSetId": {
          "documentation": "<p>The unique ID of the threatIntelSet that you want to get.</p>",
          "location": "uri",
          "locationName": "threatIntelSetId",
          "shape": "String"
        }
      },
      "required": [
        "DetectorId",
        "ThreatIntelSetId"
      ],
      "type": "structure"
    },
    "GetThreatIntelSetResponse": {
      "members": {
        "Format": {
          "documentation": "<p>The format of the threatIntelSet.</p>",
          "locationName": "format",
          "shape": "ThreatIntelSetFormat"
        },
        "Location": {
          "documentation": "<p>The URI of the file that contains the ThreatIntelSet. </p>",
          "locationName": "location",
          "shape": "Location"
        },
        "Name": {
          "documentation": "<p>A user-friendly ThreatIntelSet name displayed in all findings that are generated by activity that involves IP addresses included in this ThreatIntelSet.</p>",
          "locationName": "name",
          "shape": "Name"
        },
        "Status": {
          "documentation": "<p>The status of threatIntelSet file uploaded.</p>",
          "locationName": "status",
          "shape": "ThreatIntelSetStatus"
        },
        "Tags": {
          "documentation": "<p>The tags of the threat list resource.</p>",
          "locationName": "tags",
          "shape": "TagMap"
        }
      },
      "required": [
        "Name",
        "Format",
        "Location",
        "Status"
      ],
      "type": "structure"
    },
    "GetUsageStatisticsRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The ID of the detector that specifies the GuardDuty service whose usage statistics you want to retrieve.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of results to return in the response.</p>",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "NextToken": {
          "documentation": "<p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the NextToken value returned from the previous request to continue listing results after the first page.</p>",
          "locationName": "nextToken",
          "shape": "String"
        },
        "Unit": {
          "documentation": "<p>The currency unit you would like to view your usage statistics in. Current valid values are USD.</p>",
          "locationName": "unit",
          "shape": "String"
        },
        "UsageCriteria": {
          "documentation": "<p>Represents the criteria used for querying usage.</p>",
          "locationName": "usageCriteria",
          "shape": "UsageCriteria"
        },
        "UsageStatisticType": {
          "documentation": "<p>The type of usage statistics to retrieve.</p>",
          "locationName": "usageStatisticsType",
          "shape": "UsageStatisticType"
        }
      },
      "required": [
        "DetectorId",
        "UsageStatisticType",
        "UsageCriteria"
      ],
      "type": "structure"
    },
    "GetUsageStatisticsResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>The pagination parameter to be used on the next list operation to retrieve more items.</p>",
          "locationName": "nextToken",
          "shape": "String"
        },
        "UsageStatistics": {
          "documentation": "<p>The usage statistics object. If a UsageStatisticType was provided, the objects representing other types will be null.</p>",
          "locationName": "usageStatistics",
          "shape": "UsageStatistics"
        }
      },
      "type": "structure"
    },
    "Groups": {
      "member": {
        "shape": "String"
      },
      "type": "list"
    },
    "GuardDutyArn": {
      "pattern": "^arn:[A-Za-z_.-]{1,20}:guardduty:[A-Za-z0-9_/.-]{0,63}:\\d+:detector/[A-Za-z0-9_/.-]{32,264}$",
      "type": "string"
    },
    "HighestSeverityThreatDetails": {
      "documentation": "<p>Contains details of the highest severity threat detected during scan and number of infected files.</p>",
      "members": {
        "Count": {
          "documentation": "<p>Total number of infected files with the highest severity threat detected.</p>",
          "locationName": "count",
          "shape": "Integer"
        },
        "Severity": {
          "documentation": "<p>Severity level of the highest severity threat detected.</p>",
          "locationName": "severity",
          "shape": "String"
        },
        "ThreatName": {
          "documentation": "<p>Threat name of the highest severity threat detected as part of the malware scan.</p>",
          "locationName": "threatName",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "HostPath": {
      "documentation": "<p>Represents a pre-existing file or directory on the host machine that the volume maps to.</p>",
      "members": {
        "Path": {
          "documentation": "<p>Path of the file or directory on the host that the volume maps to.</p>",
          "locationName": "path",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "IamInstanceProfile": {
      "documentation": "<p>Contains information about the EC2 instance profile.</p>",
      "members": {
        "Arn": {
          "documentation": "<p>The profile ARN of the EC2 instance.</p>",
          "locationName": "arn",
          "shape": "String"
        },
        "Id": {
          "documentation": "<p>The profile ID of the EC2 instance.</p>",
          "locationName": "id",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "InstanceArn": {
      "pattern": "^arn:(aws|aws-cn|aws-us-gov):[a-z]+:[a-z]+(-[0-9]+|-[a-z]+)+:([0-9]{12}):[a-z\\-]+\\/[a-zA-Z0-9]*$",
      "type": "string"
    },
    "InstanceDetails": {
      "documentation": "<p>Contains information about the details of an instance.</p>",
      "members": {
        "AvailabilityZone": {
          "documentation": "<p>The Availability Zone of the EC2 instance.</p>",
          "locationName": "availabilityZone",
          "shape": "String"
        },
        "IamInstanceProfile": {
          "documentation": "<p>The profile information of the EC2 instance.</p>",
          "locationName": "iamInstanceProfile",
          "shape": "IamInstanceProfile"
        },
        "ImageDescription": {
          "documentation": "<p>The image description of the EC2 instance.</p>",
          "locationName": "imageDescription",
          "shape": "String"
        },
        "ImageId": {
          "documentation": "<p>The image ID of the EC2 instance.</p>",
          "locationName": "imageId",
          "shape": "String"
        },
        "InstanceId": {
          "documentation": "<p>The ID of the EC2 instance.</p>",
          "locationName": "instanceId",
          "shape": "String"
        },
        "InstanceState": {
          "documentation": "<p>The state of the EC2 instance.</p>",
          "locationName": "instanceState",
          "shape": "String"
        },
        "InstanceType": {
          "documentation": "<p>The type of the EC2 instance.</p>",
          "locationName": "instanceType",
          "shape": "String"
        },
        "LaunchTime": {
          "documentation": "<p>The launch time of the EC2 instance.</p>",
          "locationName": "launchTime",
          "shape": "String"
        },
        "NetworkInterfaces": {
          "documentation": "<p>The elastic network interface information of the EC2 instance.</p>",
          "locationName": "networkInterfaces",
          "shape": "NetworkInterfaces"
        },
        "OutpostArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the Amazon Web Services Outpost. Only applicable to Amazon Web Services Outposts instances.</p>",
          "locationName": "outpostArn",
          "shape": "String"
        },
        "Platform": {
          "documentation": "<p>The platform of the EC2 instance.</p>",
          "locationName": "platform",
          "shape": "String"
        },
        "ProductCodes": {
          "documentation": "<p>The product code of the EC2 instance.</p>",
          "locationName": "productCodes",
          "shape": "ProductCodes"
        },
        "Tags": {
          "documentation": "<p>The tags of the EC2 instance.</p>",
          "locationName": "tags",
          "shape": "Tags"
        }
      },
      "type": "structure"
    },
    "Integer": {
      "type": "integer"
    },
    "IntegerValueWithMax": {
      "max": 50,
      "min": 1,
      "type": "integer"
    },
    "InternalServerErrorException": {
      "documentation": "<p>An internal server error exception object.</p>",
      "error": {
        "httpStatusCode": 500
      },
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>The error message.</p>",
          "locationName": "message",
          "shape": "String"
        },
        "Type": {
          "documentation": "<p>The error type.</p>",
          "locationName": "__type",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "Invitation": {
      "documentation": "<p>Contains information about the invitation to become a member account.</p>",
      "members": {
        "AccountId": {
          "documentation": "<p>The ID of the account that the invitation was sent from.</p>",
          "locationName": "accountId",
          "shape": "AccountId"
        },
        "InvitationId": {
          "documentation": "<p>The ID of the invitation. This value is used to validate the inviter account to the member account.</p>",
          "locationName": "invitationId",
          "shape": "String"
        },
        "InvitedAt": {
          "documentation": "<p>The timestamp when the invitation was sent.</p>",
          "locationName": "invitedAt",
          "shape": "String"
        },
        "RelationshipStatus": {
          "documentation": "<p>The status of the relationship between the inviter and invitee accounts.</p>",
          "locationName": "relationshipStatus",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "Invitations": {
      "max": 50,
      "member": {
        "shape": "Invitation"
      },
      "min": 0,
      "type": "list"
    },
    "InviteMembersRequest": {
      "members": {
        "AccountIds": {
          "documentation": "<p>A list of account IDs of the accounts that you want to invite to GuardDuty as members.</p>",
          "locationName": "accountIds",
          "shape": "AccountIds"
        },
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector of the GuardDuty account that you want to invite members with.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "DisableEmailNotification": {
          "documentation": "<p>A Boolean value that specifies whether you want to disable email notification to the accounts that you are inviting to GuardDuty as members.</p>",
          "locationName": "disableEmailNotification",
          "shape": "Boolean"
        },
        "Message": {
          "documentation": "<p>The invitation message that you want to send to the accounts that you're inviting to GuardDuty as members.</p>",
          "locationName": "message",
          "shape": "String"
        }
      },
      "required": [
        "DetectorId",
        "AccountIds"
      ],
      "type": "structure"
    },
    "InviteMembersResponse": {
      "members": {
        "UnprocessedAccounts": {
          "documentation": "<p>A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.</p>",
          "locationName": "unprocessedAccounts",
          "shape": "UnprocessedAccounts"
        }
      },
      "required": [
        "UnprocessedAccounts"
      ],
      "type": "structure"
    },
    "IpSetFormat": {
      "enum": [
        "TXT",
        "STIX",
        "OTX_CSV",
        "ALIEN_VAULT",
        "PROOF_POINT",
        "FIRE_EYE"
      ],
      "max": 300,
      "min": 1,
      "type": "string"
    },
    "IpSetIds": {
      "max": 50,
      "member": {
        "shape": "String"
      },
      "min": 0,
      "type": "list"
    },
    "IpSetStatus": {
      "enum": [
        "INACTIVE",
        "ACTIVATING",
        "ACTIVE",
        "DEACTIVATING",
        "ERROR",
        "DELETE_PENDING",
        "DELETED"
      ],
      "max": 300,
      "min": 1,
      "type": "string"
    },
    "Ipv6Addresses": {
      "member": {
        "shape": "String"
      },
      "type": "list"
    },
    "KubernetesApiCallAction": {
      "documentation": "<p>Information about the Kubernetes API call action described in this finding.</p>",
      "members": {
        "Parameters": {
          "documentation": "<p>Parameters related to the Kubernetes API call action.</p>",
          "locationName": "parameters",
          "shape": "String"
        },
        "RemoteIpDetails": {
          "locationName": "remoteIpDetails",
          "shape": "RemoteIpDetails"
        },
        "RequestUri": {
          "documentation": "<p>The Kubernetes API request URI.</p>",
          "locationName": "requestUri",
          "shape": "String"
        },
        "SourceIps": {
          "documentation": "<p>The IP of the Kubernetes API caller and the IPs of any proxies or load balancers between the caller and the API endpoint.</p>",
          "locationName": "sourceIps",
          "shape": "SourceIps"
        },
        "StatusCode": {
          "documentation": "<p>The resulting HTTP response code of the Kubernetes API call action.</p>",
          "locationName": "statusCode",
          "shape": "Integer"
        },
        "UserAgent": {
          "documentation": "<p>The user agent of the caller of the Kubernetes API.</p>",
          "locationName": "userAgent",
          "shape": "String"
        },
        "Verb": {
          "documentation": "<p>The Kubernetes API request HTTP verb.</p>",
          "locationName": "verb",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "KubernetesAuditLogsConfiguration": {
      "documentation": "<p>Describes whether Kubernetes audit logs are enabled as a data source.</p>",
      "members": {
        "Enable": {
          "documentation": "<p>The status of Kubernetes audit logs as a data source.</p>",
          "locationName": "enable",
          "shape": "Boolean"
        }
      },
      "required": [
        "Enable"
      ],
      "type": "structure"
    },
    "KubernetesAuditLogsConfigurationResult": {
      "documentation": "<p>Describes whether Kubernetes audit logs are enabled as a data source.</p>",
      "members": {
        "Status": {
          "documentation": "<p>A value that describes whether Kubernetes audit logs are enabled as a data source.</p>",
          "locationName": "status",
          "shape": "DataSourceStatus"
        }
      },
      "required": [
        "Status"
      ],
      "type": "structure"
    },
    "KubernetesConfiguration": {
      "documentation": "<p>Describes whether any Kubernetes data sources are enabled.</p>",
      "members": {
        "AuditLogs": {
          "documentation": "<p>The status of Kubernetes audit logs as a data source.</p>",
          "locationName": "auditLogs",
          "shape": "KubernetesAuditLogsConfiguration"
        }
      },
      "required": [
        "AuditLogs"
      ],
      "type": "structure"
    },
    "KubernetesConfigurationResult": {
      "documentation": "<p>Describes whether any Kubernetes logs will be enabled as a data source.</p>",
      "members": {
        "AuditLogs": {
          "documentation": "<p>Describes whether Kubernetes audit logs are enabled as a data source.</p>",
          "locationName": "auditLogs",
          "shape": "KubernetesAuditLogsConfigurationResult"
        }
      },
      "required": [
        "AuditLogs"
      ],
      "type": "structure"
    },
    "KubernetesDataSourceFreeTrial": {
      "documentation": "<p>Provides details about the Kubernetes resources when it is enabled as a data source.</p>",
      "members": {
        "AuditLogs": {
          "documentation": "<p>Describes whether Kubernetes audit logs are enabled as a data source.</p>",
          "locationName": "auditLogs",
          "shape": "DataSourceFreeTrial"
        }
      },
      "type": "structure"
    },
    "KubernetesDetails": {
      "documentation": "<p>Details about Kubernetes resources such as a Kubernetes user or workload resource involved in a Kubernetes finding.</p>",
      "members": {
        "KubernetesUserDetails": {
          "documentation": "<p>Details about the Kubernetes user involved in a Kubernetes finding.</p>",
          "locationName": "kubernetesUserDetails",
          "shape": "KubernetesUserDetails"
        },
        "KubernetesWorkloadDetails": {
          "documentation": "<p>Details about the Kubernetes workload involved in a Kubernetes finding.</p>",
          "locationName": "kubernetesWorkloadDetails",
          "shape": "KubernetesWorkloadDetails"
        }
      },
      "type": "structure"
    },
    "KubernetesUserDetails": {
      "documentation": "<p>Details about the Kubernetes user involved in a Kubernetes finding.</p>",
      "members": {
        "Groups": {
          "documentation": "<p>The groups that include the user who called the Kubernetes API.</p>",
          "locationName": "groups",
          "shape": "Groups"
        },
        "Uid": {
          "documentation": "<p>The user ID of the user who called the Kubernetes API.</p>",
          "locationName": "uid",
          "shape": "String"
        },
        "Username": {
          "documentation": "<p>The username of the user who called the Kubernetes API.</p>",
          "locationName": "username",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "KubernetesWorkloadDetails": {
      "documentation": "<p>Details about the Kubernetes workload involved in a Kubernetes finding.</p>",
      "members": {
        "Containers": {
          "documentation": "<p>Containers running as part of the Kubernetes workload.</p>",
          "locationName": "containers",
          "shape": "Containers"
        },
        "HostNetwork": {
          "documentation": "<p>Whether the hostNetwork flag is enabled for the pods included in the workload.</p>",
          "locationName": "hostNetwork",
          "shape": "Boolean"
        },
        "Name": {
          "documentation": "<p>Kubernetes workload name.</p>",
          "locationName": "name",
          "shape": "String"
        },
        "Namespace": {
          "documentation": "<p>Kubernetes namespace that the workload is part of.</p>",
          "locationName": "namespace",
          "shape": "String"
        },
        "Type": {
          "documentation": "<p>Kubernetes workload type (e.g. Pod, Deployment, etc.).</p>",
          "locationName": "type",
          "shape": "String"
        },
        "Uid": {
          "documentation": "<p>Kubernetes workload ID.</p>",
          "locationName": "uid",
          "shape": "String"
        },
        "Volumes": {
          "documentation": "<p>Volumes used by the Kubernetes workload.</p>",
          "locationName": "volumes",
          "shape": "Volumes"
        }
      },
      "type": "structure"
    },
    "ListDetectorsRequest": {
      "members": {
        "MaxResults": {
          "documentation": "<p>You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 50. The maximum value is 50.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "NextToken": {
          "documentation": "<p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ListDetectorsResponse": {
      "members": {
        "DetectorIds": {
          "documentation": "<p>A list of detector IDs.</p>",
          "locationName": "detectorIds",
          "shape": "DetectorIds"
        },
        "NextToken": {
          "documentation": "<p>The pagination parameter to be used on the next list operation to retrieve more items.</p>",
          "locationName": "nextToken",
          "shape": "String"
        }
      },
      "required": [
        "DetectorIds"
      ],
      "type": "structure"
    },
    "ListFiltersRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector that the filter is associated with.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "MaxResults": {
          "documentation": "<p>You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 50. The maximum value is 50.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "NextToken": {
          "documentation": "<p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "String"
        }
      },
      "required": [
        "DetectorId"
      ],
      "type": "structure"
    },
    "ListFiltersResponse": {
      "members": {
        "FilterNames": {
          "documentation": "<p>A list of filter names.</p>",
          "locationName": "filterNames",
          "shape": "FilterNames"
        },
        "NextToken": {
          "documentation": "<p>The pagination parameter to be used on the next list operation to retrieve more items.</p>",
          "locationName": "nextToken",
          "shape": "String"
        }
      },
      "required": [
        "FilterNames"
      ],
      "type": "structure"
    },
    "ListFindingsRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The ID of the detector that specifies the GuardDuty service whose findings you want to list.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "FindingCriteria": {
          "documentation": "<p>Represents the criteria used for querying findings. Valid values include:</p> <ul> <li> <p>JSON field name</p> </li> <li> <p>accountId</p> </li> <li> <p>region</p> </li> <li> <p>confidence</p> </li> <li> <p>id</p> </li> <li> <p>resource.accessKeyDetails.accessKeyId</p> </li> <li> <p>resource.accessKeyDetails.principalId</p> </li> <li> <p>resource.accessKeyDetails.userName</p> </li> <li> <p>resource.accessKeyDetails.userType</p> </li> <li> <p>resource.instanceDetails.iamInstanceProfile.id</p> </li> <li> <p>resource.instanceDetails.imageId</p> </li> <li> <p>resource.instanceDetails.instanceId</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.ipv6Addresses</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.privateIpAddresses.privateIpAddress</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.publicDnsName</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.publicIp</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.securityGroups.groupId</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.securityGroups.groupName</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.subnetId</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.vpcId</p> </li> <li> <p>resource.instanceDetails.tags.key</p> </li> <li> <p>resource.instanceDetails.tags.value</p> </li> <li> <p>resource.resourceType</p> </li> <li> <p>service.action.actionType</p> </li> <li> <p>service.action.awsApiCallAction.api</p> </li> <li> <p>service.action.awsApiCallAction.callerType</p> </li> <li> <p>service.action.awsApiCallAction.remoteIpDetails.city.cityName</p> </li> <li> <p>service.action.awsApiCallAction.remoteIpDetails.country.countryName</p> </li> <li> <p>service.action.awsApiCallAction.remoteIpDetails.ipAddressV4</p> </li> <li> <p>service.action.awsApiCallAction.remoteIpDetails.organization.asn</p> </li> <li> <p>service.action.awsApiCallAction.remoteIpDetails.organization.asnOrg</p> </li> <li> <p>service.action.awsApiCallAction.serviceName</p> </li> <li> <p>service.action.dnsRequestAction.domain</p> </li> <li> <p>service.action.networkConnectionAction.blocked</p> </li> <li> <p>service.action.networkConnectionAction.connectionDirection</p> </li> <li> <p>service.action.networkConnectionAction.localPortDetails.port</p> </li> <li> <p>service.action.networkConnectionAction.protocol</p> </li> <li> <p>service.action.networkConnectionAction.remoteIpDetails.country.countryName</p> </li> <li> <p>service.action.networkConnectionAction.remoteIpDetails.ipAddressV4</p> </li> <li> <p>service.action.networkConnectionAction.remoteIpDetails.organization.asn</p> </li> <li> <p>service.action.networkConnectionAction.remoteIpDetails.organization.asnOrg</p> </li> <li> <p>service.action.networkConnectionAction.remotePortDetails.port</p> </li> <li> <p>service.additionalInfo.threatListName</p> </li> <li> <p>service.archived</p> <p>When this attribute is set to 'true', only archived findings are listed. When it's set to 'false', only unarchived findings are listed. When this attribute is not set, all existing findings are listed.</p> </li> <li> <p>service.resourceRole</p> </li> <li> <p>severity</p> </li> <li> <p>type</p> </li> <li> <p>updatedAt</p> <p>Type: Timestamp in Unix Epoch millisecond format: 1486685375000</p> </li> </ul>",
          "locationName": "findingCriteria",
          "shape": "FindingCriteria"
        },
        "MaxResults": {
          "documentation": "<p>You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.</p>",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "NextToken": {
          "documentation": "<p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.</p>",
          "locationName": "nextToken",
          "shape": "String"
        },
        "SortCriteria": {
          "documentation": "<p>Represents the criteria used for sorting findings.</p>",
          "locationName": "sortCriteria",
          "shape": "SortCriteria"
        }
      },
      "required": [
        "DetectorId"
      ],
      "type": "structure"
    },
    "ListFindingsResponse": {
      "members": {
        "FindingIds": {
          "documentation": "<p>The IDs of the findings that you're listing.</p>",
          "locationName": "findingIds",
          "shape": "FindingIds"
        },
        "NextToken": {
          "documentation": "<p>The pagination parameter to be used on the next list operation to retrieve more items.</p>",
          "locationName": "nextToken",
          "shape": "String"
        }
      },
      "required": [
        "FindingIds"
      ],
      "type": "structure"
    },
    "ListIPSetsRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector that the IPSet is associated with.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "MaxResults": {
          "documentation": "<p>You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "NextToken": {
          "documentation": "<p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "String"
        }
      },
      "required": [
        "DetectorId"
      ],
      "type": "structure"
    },
    "ListIPSetsResponse": {
      "members": {
        "IpSetIds": {
          "documentation": "<p>The IDs of the IPSet resources.</p>",
          "locationName": "ipSetIds",
          "shape": "IpSetIds"
        },
        "NextToken": {
          "documentation": "<p>The pagination parameter to be used on the next list operation to retrieve more items.</p>",
          "locationName": "nextToken",
          "shape": "String"
        }
      },
      "required": [
        "IpSetIds"
      ],
      "type": "structure"
    },
    "ListInvitationsRequest": {
      "members": {
        "MaxResults": {
          "documentation": "<p>You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 50. The maximum value is 50.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "NextToken": {
          "documentation": "<p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ListInvitationsResponse": {
      "members": {
        "Invitations": {
          "documentation": "<p>A list of invitation descriptions.</p>",
          "locationName": "invitations",
          "shape": "Invitations"
        },
        "NextToken": {
          "documentation": "<p>The pagination parameter to be used on the next list operation to retrieve more items.</p>",
          "locationName": "nextToken",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ListMembersRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector the member is associated with.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "MaxResults": {
          "documentation": "<p>You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "NextToken": {
          "documentation": "<p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "String"
        },
        "OnlyAssociated": {
          "documentation": "<p>Specifies whether to only return associated members or to return all members (including members who haven't been invited yet or have been disassociated). Member accounts must have been previously associated with the GuardDuty administrator account using <a href=\"https://docs.aws.amazon.com/guardduty/latest/APIReference/API_CreateMembers.html\"> <code>Create Members</code> </a>. </p>",
          "location": "querystring",
          "locationName": "onlyAssociated",
          "shape": "String"
        }
      },
      "required": [
        "DetectorId"
      ],
      "type": "structure"
    },
    "ListMembersResponse": {
      "members": {
        "Members": {
          "documentation": "<p>A list of members.</p>",
          "locationName": "members",
          "shape": "Members"
        },
        "NextToken": {
          "documentation": "<p>The pagination parameter to be used on the next list operation to retrieve more items.</p>",
          "locationName": "nextToken",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ListOrganizationAdminAccountsRequest": {
      "members": {
        "MaxResults": {
          "documentation": "<p>The maximum number of results to return in the response.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "NextToken": {
          "documentation": "<p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ListOrganizationAdminAccountsResponse": {
      "members": {
        "AdminAccounts": {
          "documentation": "<p>A list of accounts configured as GuardDuty delegated administrators.</p>",
          "locationName": "adminAccounts",
          "shape": "AdminAccounts"
        },
        "NextToken": {
          "documentation": "<p>The pagination parameter to be used on the next list operation to retrieve more items.</p>",
          "locationName": "nextToken",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ListPublishingDestinationsRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The ID of the detector to retrieve publishing destinations for.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of results to return in the response.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "NextToken": {
          "documentation": "<p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "String"
        }
      },
      "required": [
        "DetectorId"
      ],
      "type": "structure"
    },
    "ListPublishingDestinationsResponse": {
      "members": {
        "Destinations": {
          "documentation": "<p>A <code>Destinations</code> object that includes information about each publishing destination returned.</p>",
          "locationName": "destinations",
          "shape": "Destinations"
        },
        "NextToken": {
          "documentation": "<p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</p>",
          "locationName": "nextToken",
          "shape": "String"
        }
      },
      "required": [
        "Destinations"
      ],
      "type": "structure"
    },
    "ListTagsForResourceRequest": {
      "members": {
        "ResourceArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) for the given GuardDuty resource. </p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "GuardDutyArn"
        }
      },
      "required": [
        "ResourceArn"
      ],
      "type": "structure"
    },
    "ListTagsForResourceResponse": {
      "members": {
        "Tags": {
          "documentation": "<p>The tags associated with the resource.</p>",
          "locationName": "tags",
          "shape": "TagMap"
        }
      },
      "type": "structure"
    },
    "ListThreatIntelSetsRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector that the threatIntelSet is associated with.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "MaxResults": {
          "documentation": "<p>You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 50. The maximum value is 50.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "NextToken": {
          "documentation": "<p>You can use this parameter to paginate results in the response. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "String"
        }
      },
      "required": [
        "DetectorId"
      ],
      "type": "structure"
    },
    "ListThreatIntelSetsResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>The pagination parameter to be used on the next list operation to retrieve more items.</p>",
          "locationName": "nextToken",
          "shape": "String"
        },
        "ThreatIntelSetIds": {
          "documentation": "<p>The IDs of the ThreatIntelSet resources.</p>",
          "locationName": "threatIntelSetIds",
          "shape": "ThreatIntelSetIds"
        }
      },
      "required": [
        "ThreatIntelSetIds"
      ],
      "type": "structure"
    },
    "LocalIpDetails": {
      "documentation": "<p>Contains information about the local IP address of the connection.</p>",
      "members": {
        "IpAddressV4": {
          "documentation": "<p>The IPv4 local address of the connection.</p>",
          "locationName": "ipAddressV4",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "LocalPortDetails": {
      "documentation": "<p>Contains information about the port for the local connection.</p>",
      "members": {
        "Port": {
          "documentation": "<p>The port number of the local connection.</p>",
          "locationName": "port",
          "shape": "Integer"
        },
        "PortName": {
          "documentation": "<p>The port name of the local connection.</p>",
          "locationName": "portName",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "Location": {
      "max": 300,
      "min": 1,
      "type": "string"
    },
    "Long": {
      "type": "long"
    },
    "LongValue": {
      "type": "long"
    },
    "MalwareProtectionConfiguration": {
      "documentation": "<p>Describes whether Malware Protection will be enabled as a data source.</p>",
      "members": {
        "ScanEc2InstanceWithFindings": {
          "documentation": "<p>Describes the configuration of Malware Protection for EC2 instances with findings.</p>",
          "locationName": "scanEc2InstanceWithFindings",
          "shape": "ScanEc2InstanceWithFindings"
        }
      },
      "type": "structure"
    },
    "MalwareProtectionConfigurationResult": {
      "documentation": "<p>An object that contains information on the status of all Malware Protection data sources.</p>",
      "members": {
        "ScanEc2InstanceWithFindings": {
          "documentation": "<p>Describes the configuration of Malware Protection for EC2 instances with findings.</p>",
          "locationName": "scanEc2InstanceWithFindings",
          "shape": "ScanEc2InstanceWithFindingsResult"
        },
        "ServiceRole": {
          "documentation": "<p>The GuardDuty Malware Protection service role.</p>",
          "locationName": "serviceRole",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "MalwareProtectionDataSourceFreeTrial": {
      "documentation": "<p>Provides details about Malware Protection when it is enabled as a data source.</p>",
      "members": {
        "ScanEc2InstanceWithFindings": {
          "documentation": "<p>Describes whether Malware Protection for EC2 instances with findings is enabled as a data source.</p>",
          "locationName": "scanEc2InstanceWithFindings",
          "shape": "DataSourceFreeTrial"
        }
      },
      "type": "structure"
    },
    "MapEquals": {
      "member": {
        "shape": "ScanConditionPair"
      },
      "type": "list"
    },
    "Master": {
      "documentation": "<p>Contains information about the administrator account and invitation.</p>",
      "members": {
        "AccountId": {
          "documentation": "<p>The ID of the account used as the administrator account.</p>",
          "locationName": "accountId",
          "shape": "AccountId"
        },
        "InvitationId": {
          "documentation": "<p>The value used to validate the administrator account to the member account.</p>",
          "locationName": "invitationId",
          "shape": "String"
        },
        "InvitedAt": {
          "documentation": "<p>The timestamp when the invitation was sent.</p>",
          "locationName": "invitedAt",
          "shape": "String"
        },
        "RelationshipStatus": {
          "documentation": "<p>The status of the relationship between the administrator and member accounts.</p>",
          "locationName": "relationshipStatus",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "MaxResults": {
      "max": 50,
      "min": 1,
      "type": "integer"
    },
    "Member": {
      "documentation": "<p>Contains information about the member account. </p>",
      "members": {
        "AccountId": {
          "documentation": "<p>The ID of the member account.</p>",
          "locationName": "accountId",
          "shape": "AccountId"
        },
        "AdministratorId": {
          "documentation": "<p>The administrator account ID.</p>",
          "locationName": "administratorId",
          "shape": "String"
        },
        "DetectorId": {
          "documentation": "<p>The detector ID of the member account.</p>",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "Email": {
          "documentation": "<p>The email address of the member account.</p>",
          "locationName": "email",
          "shape": "Email"
        },
        "InvitedAt": {
          "documentation": "<p>The timestamp when the invitation was sent.</p>",
          "locationName": "invitedAt",
          "shape": "String"
        },
        "MasterId": {
          "documentation": "<p>The administrator account ID.</p>",
          "locationName": "masterId",
          "shape": "String"
        },
        "RelationshipStatus": {
          "documentation": "<p>The status of the relationship between the member and the administrator.</p>",
          "locationName": "relationshipStatus",
          "shape": "String"
        },
        "UpdatedAt": {
          "documentation": "<p>The last-updated timestamp of the member.</p>",
          "locationName": "updatedAt",
          "shape": "String"
        }
      },
      "required": [
        "AccountId",
        "MasterId",
        "Email",
        "RelationshipStatus",
        "UpdatedAt"
      ],
      "type": "structure"
    },
    "MemberDataSourceConfiguration": {
      "documentation": "<p>Contains information on which data sources are enabled for a member account.</p>",
      "members": {
        "AccountId": {
          "documentation": "<p>The account ID for the member account.</p>",
          "locationName": "accountId",
          "shape": "AccountId"
        },
        "DataSources": {
          "documentation": "<p>Contains information on the status of data sources for the account.</p>",
          "locationName": "dataSources",
          "shape": "DataSourceConfigurationsResult"
        }
      },
      "required": [
        "AccountId",
        "DataSources"
      ],
      "type": "structure"
    },
    "MemberDataSourceConfigurations": {
      "max": 50,
      "member": {
        "shape": "MemberDataSourceConfiguration"
      },
      "min": 1,
      "type": "list"
    },
    "Members": {
      "max": 50,
      "member": {
        "shape": "Member"
      },
      "min": 0,
      "type": "list"
    },
    "Name": {
      "max": 300,
      "min": 1,
      "type": "string"
    },
    "Neq": {
      "member": {
        "shape": "String"
      },
      "type": "list"
    },
    "NetworkConnectionAction": {
      "documentation": "<p>Contains information about the NETWORK_CONNECTION action described in the finding.</p>",
      "members": {
        "Blocked": {
          "documentation": "<p>Indicates whether EC2 blocked the network connection to your instance.</p>",
          "locationName": "blocked",
          "shape": "Boolean"
        },
        "ConnectionDirection": {
          "documentation": "<p>The network connection direction.</p>",
          "locationName": "connectionDirection",
          "shape": "String"
        },
        "LocalIpDetails": {
          "documentation": "<p>The local IP information of the connection.</p>",
          "locationName": "localIpDetails",
          "shape": "LocalIpDetails"
        },
        "LocalPortDetails": {
          "documentation": "<p>The local port information of the connection.</p>",
          "locationName": "localPortDetails",
          "shape": "LocalPortDetails"
        },
        "Protocol": {
          "documentation": "<p>The network connection protocol.</p>",
          "locationName": "protocol",
          "shape": "String"
        },
        "RemoteIpDetails": {
          "documentation": "<p>The remote IP information of the connection.</p>",
          "locationName": "remoteIpDetails",
          "shape": "RemoteIpDetails"
        },
        "RemotePortDetails": {
          "documentation": "<p>The remote port information of the connection.</p>",
          "locationName": "remotePortDetails",
          "shape": "RemotePortDetails"
        }
      },
      "type": "structure"
    },
    "NetworkInterface": {
      "documentation": "<p>Contains information about the elastic network interface of the EC2 instance.</p>",
      "members": {
        "Ipv6Addresses": {
          "documentation": "<p>A list of IPv6 addresses for the EC2 instance.</p>",
          "locationName": "ipv6Addresses",
          "shape": "Ipv6Addresses"
        },
        "NetworkInterfaceId": {
          "documentation": "<p>The ID of the network interface.</p>",
          "locationName": "networkInterfaceId",
          "shape": "String"
        },
        "PrivateDnsName": {
          "documentation": "<p>The private DNS name of the EC2 instance.</p>",
          "locationName": "privateDnsName",
          "shape": "String"
        },
        "PrivateIpAddress": {
          "documentation": "<p>The private IP address of the EC2 instance.</p>",
          "locationName": "privateIpAddress",
          "shape": "String"
        },
        "PrivateIpAddresses": {
          "documentation": "<p>Other private IP address information of the EC2 instance.</p>",
          "locationName": "privateIpAddresses",
          "shape": "PrivateIpAddresses"
        },
        "PublicDnsName": {
          "documentation": "<p>The public DNS name of the EC2 instance.</p>",
          "locationName": "publicDnsName",
          "shape": "String"
        },
        "PublicIp": {
          "documentation": "<p>The public IP address of the EC2 instance.</p>",
          "locationName": "publicIp",
          "shape": "String"
        },
        "SecurityGroups": {
          "documentation": "<p>The security groups associated with the EC2 instance.</p>",
          "locationName": "securityGroups",
          "shape": "SecurityGroups"
        },
        "SubnetId": {
          "documentation": "<p>The subnet ID of the EC2 instance.</p>",
          "locationName": "subnetId",
          "shape": "String"
        },
        "VpcId": {
          "documentation": "<p>The VPC ID of the EC2 instance.</p>",
          "locationName": "vpcId",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "NetworkInterfaces": {
      "member": {
        "shape": "NetworkInterface"
      },
      "type": "list"
    },
    "NonEmptyString": {
      "max": 200,
      "min": 1,
      "type": "string"
    },
    "NotEquals": {
      "member": {
        "shape": "String"
      },
      "type": "list"
    },
    "OrderBy": {
      "enum": [
        "ASC",
        "DESC"
      ],
      "type": "string"
    },
    "Organization": {
      "documentation": "<p>Contains information about the ISP organization of the remote IP address.</p>",
      "members": {
        "Asn": {
          "documentation": "<p>The Autonomous System Number (ASN) of the internet provider of the remote IP address.</p>",
          "locationName": "asn",
          "shape": "String"
        },
        "AsnOrg": {
          "documentation": "<p>The organization that registered this ASN.</p>",
          "locationName": "asnOrg",
          "shape": "String"
        },
        "Isp": {
          "documentation": "<p>The ISP information for the internet provider.</p>",
          "locationName": "isp",
          "shape": "String"
        },
        "Org": {
          "documentation": "<p>The name of the internet provider.</p>",
          "locationName": "org",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "OrganizationDataSourceConfigurations": {
      "documentation": "<p>An object that contains information on which data sources will be configured to be automatically enabled for new members within the organization.</p>",
      "members": {
        "Kubernetes": {
          "documentation": "<p>Describes the configuration of Kubernetes data sources for new members of the organization.</p>",
          "locationName": "kubernetes",
          "shape": "OrganizationKubernetesConfiguration"
        },
        "MalwareProtection": {
          "documentation": "<p>Describes the configuration of Malware Protection for new members of the organization.</p>",
          "locationName": "malwareProtection",
          "shape": "OrganizationMalwareProtectionConfiguration"
        },
        "S3Logs": {
          "documentation": "<p>Describes whether S3 data event logs are enabled for new members of the organization.</p>",
          "locationName": "s3Logs",
          "shape": "OrganizationS3LogsConfiguration"
        }
      },
      "type": "structure"
    },
    "OrganizationDataSourceConfigurationsResult": {
      "documentation": "<p>An object that contains information on which data sources are automatically enabled for new members within the organization.</p>",
      "members": {
        "Kubernetes": {
          "documentation": "<p>Describes the configuration of Kubernetes data sources.</p>",
          "locationName": "kubernetes",
          "shape": "OrganizationKubernetesConfigurationResult"
        },
        "MalwareProtection": {
          "documentation": "<p>Describes the configuration of Malware Protection data source for an organization.</p>",
          "locationName": "malwareProtection",
          "shape": "OrganizationMalwareProtectionConfigurationResult"
        },
        "S3Logs": {
          "documentation": "<p>Describes whether S3 data event logs are enabled as a data source.</p>",
          "locationName": "s3Logs",
          "shape": "OrganizationS3LogsConfigurationResult"
        }
      },
      "required": [
        "S3Logs"
      ],
      "type": "structure"
    },
    "OrganizationEbsVolumes": {
      "documentation": "<p>Organization-wide EBS volumes scan configuration.</p>",
      "members": {
        "AutoEnable": {
          "documentation": "<p>Whether scanning EBS volumes should be auto-enabled for new members joining the organization.</p>",
          "locationName": "autoEnable",
          "shape": "Boolean"
        }
      },
      "type": "structure"
    },
    "OrganizationEbsVolumesResult": {
      "documentation": "<p>An object that contains information on the status of whether EBS volumes scanning will be enabled as a data source for an organization.</p>",
      "members": {
        "AutoEnable": {
          "documentation": "<p>An object that contains the status of whether scanning EBS volumes should be auto-enabled for new members joining the organization.</p>",
          "locationName": "autoEnable",
          "shape": "Boolean"
        }
      },
      "type": "structure"
    },
    "OrganizationKubernetesAuditLogsConfiguration": {
      "documentation": "<p>Organization-wide Kubernetes audit logs configuration.</p>",
      "members": {
        "AutoEnable": {
          "documentation": "<p>A value that contains information on whether Kubernetes audit logs should be enabled automatically as a data source for the organization.</p>",
          "locationName": "autoEnable",
          "shape": "Boolean"
        }
      },
      "required": [
        "AutoEnable"
      ],
      "type": "structure"
    },
    "OrganizationKubernetesAuditLogsConfigurationResult": {
      "documentation": "<p>The current configuration of Kubernetes audit logs as a data source for the organization.</p>",
      "members": {
        "AutoEnable": {
          "documentation": "<p>Whether Kubernetes audit logs data source should be auto-enabled for new members joining the organization.</p>",
          "locationName": "autoEnable",
          "shape": "Boolean"
        }
      },
      "required": [
        "AutoEnable"
      ],
      "type": "structure"
    },
    "OrganizationKubernetesConfiguration": {
      "documentation": "<p>Organization-wide Kubernetes data sources configurations.</p>",
      "members": {
        "AuditLogs": {
          "documentation": "<p>Whether Kubernetes audit logs data source should be auto-enabled for new members joining the organization.</p>",
          "locationName": "auditLogs",
          "shape": "OrganizationKubernetesAuditLogsConfiguration"
        }
      },
      "required": [
        "AuditLogs"
      ],
      "type": "structure"
    },
    "OrganizationKubernetesConfigurationResult": {
      "documentation": "<p>The current configuration of all Kubernetes data sources for the organization.</p>",
      "members": {
        "AuditLogs": {
          "documentation": "<p>The current configuration of Kubernetes audit logs as a data source for the organization.</p>",
          "locationName": "auditLogs",
          "shape": "OrganizationKubernetesAuditLogsConfigurationResult"
        }
      },
      "required": [
        "AuditLogs"
      ],
      "type": "structure"
    },
    "OrganizationMalwareProtectionConfiguration": {
      "documentation": "<p>Organization-wide Malware Protection configurations.</p>",
      "members": {
        "ScanEc2InstanceWithFindings": {
          "documentation": "<p>Whether Malware Protection for EC2 instances with findings should be auto-enabled for new members joining the organization.</p>",
          "locationName": "scanEc2InstanceWithFindings",
          "shape": "OrganizationScanEc2InstanceWithFindings"
        }
      },
      "type": "structure"
    },
    "OrganizationMalwareProtectionConfigurationResult": {
      "documentation": "<p>An object that contains information on the status of all Malware Protection data source for an organization.</p>",
      "members": {
        "ScanEc2InstanceWithFindings": {
          "documentation": "<p>Describes the configuration for scanning EC2 instances with findings for an organization.</p>",
          "locationName": "scanEc2InstanceWithFindings",
          "shape": "OrganizationScanEc2InstanceWithFindingsResult"
        }
      },
      "type": "structure"
    },
    "OrganizationS3LogsConfiguration": {
      "documentation": "<p>Describes whether S3 data event logs will be automatically enabled for new members of the organization.</p>",
      "members": {
        "AutoEnable": {
          "documentation": "<p>A value that contains information on whether S3 data event logs will be enabled automatically as a data source for the organization.</p>",
          "locationName": "autoEnable",
          "shape": "Boolean"
        }
      },
      "required": [
        "AutoEnable"
      ],
      "type": "structure"
    },
    "OrganizationS3LogsConfigurationResult": {
      "documentation": "<p>The current configuration of S3 data event logs as a data source for the organization.</p>",
      "members": {
        "AutoEnable": {
          "documentation": "<p>A value that describes whether S3 data event logs are automatically enabled for new members of the organization.</p>",
          "locationName": "autoEnable",
          "shape": "Boolean"
        }
      },
      "required": [
        "AutoEnable"
      ],
      "type": "structure"
    },
    "OrganizationScanEc2InstanceWithFindings": {
      "documentation": "<p>Organization-wide EC2 instances with findings scan configuration.</p>",
      "members": {
        "EbsVolumes": {
          "documentation": "<p>Whether scanning EBS volumes should be auto-enabled for new members joining the organization.</p>",
          "locationName": "ebsVolumes",
          "shape": "OrganizationEbsVolumes"
        }
      },
      "type": "structure"
    },
    "OrganizationScanEc2InstanceWithFindingsResult": {
      "documentation": "<p>An object that contains information on the status of scanning EC2 instances with findings for an organization.</p>",
      "members": {
        "EbsVolumes": {
          "documentation": "<p>Describes the configuration for scanning EBS volumes for an organization.</p>",
          "locationName": "ebsVolumes",
          "shape": "OrganizationEbsVolumesResult"
        }
      },
      "type": "structure"
    },
    "Owner": {
      "documentation": "<p>Contains information on the owner of the bucket.</p>",
      "members": {
        "Id": {
          "documentation": "<p>The canonical user ID of the bucket owner. For information about locating your canonical user ID see <a href=\"https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html#FindingCanonicalId\">Finding Your Account Canonical User ID.</a> </p>",
          "locationName": "id",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "PermissionConfiguration": {
      "documentation": "<p>Contains information about how permissions are configured for the S3 bucket.</p>",
      "members": {
        "AccountLevelPermissions": {
          "documentation": "<p>Contains information about the account level permissions on the S3 bucket.</p>",
          "locationName": "accountLevelPermissions",
          "shape": "AccountLevelPermissions"
        },
        "BucketLevelPermissions": {
          "documentation": "<p>Contains information about the bucket level permissions for the S3 bucket.</p>",
          "locationName": "bucketLevelPermissions",
          "shape": "BucketLevelPermissions"
        }
      },
      "type": "structure"
    },
    "PortProbeAction": {
      "documentation": "<p>Contains information about the PORT_PROBE action described in the finding.</p>",
      "members": {
        "Blocked": {
          "documentation": "<p>Indicates whether EC2 blocked the port probe to the instance, such as with an ACL.</p>",
          "locationName": "blocked",
          "shape": "Boolean"
        },
        "PortProbeDetails": {
          "documentation": "<p>A list of objects related to port probe details.</p>",
          "locationName": "portProbeDetails",
          "shape": "PortProbeDetails"
        }
      },
      "type": "structure"
    },
    "PortProbeDetail": {
      "documentation": "<p>Contains information about the port probe details.</p>",
      "members": {
        "LocalIpDetails": {
          "documentation": "<p>The local IP information of the connection.</p>",
          "locationName": "localIpDetails",
          "shape": "LocalIpDetails"
        },
        "LocalPortDetails": {
          "documentation": "<p>The local port information of the connection.</p>",
          "locationName": "localPortDetails",
          "shape": "LocalPortDetails"
        },
        "RemoteIpDetails": {
          "documentation": "<p>The remote IP information of the connection.</p>",
          "locationName": "remoteIpDetails",
          "shape": "RemoteIpDetails"
        }
      },
      "type": "structure"
    },
    "PortProbeDetails": {
      "member": {
        "shape": "PortProbeDetail"
      },
      "type": "list"
    },
    "PositiveLong": {
      "min": 0,
      "type": "long"
    },
    "PrivateIpAddressDetails": {
      "documentation": "<p>Contains other private IP address information of the EC2 instance.</p>",
      "members": {
        "PrivateDnsName": {
          "documentation": "<p>The private DNS name of the EC2 instance.</p>",
          "locationName": "privateDnsName",
          "shape": "String"
        },
        "PrivateIpAddress": {
          "documentation": "<p>The private IP address of the EC2 instance.</p>",
          "locationName": "privateIpAddress",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "PrivateIpAddresses": {
      "member": {
        "shape": "PrivateIpAddressDetails"
      },
      "type": "list"
    },
    "ProductCode": {
      "documentation": "<p>Contains information about the product code for the EC2 instance.</p>",
      "members": {
        "Code": {
          "documentation": "<p>The product code information.</p>",
          "locationName": "productCodeId",
          "shape": "String"
        },
        "ProductType": {
          "documentation": "<p>The product code type.</p>",
          "locationName": "productCodeType",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ProductCodes": {
      "member": {
        "shape": "ProductCode"
      },
      "type": "list"
    },
    "PublicAccess": {
      "documentation": "<p>Describes the public access policies that apply to the S3 bucket.</p>",
      "members": {
        "EffectivePermission": {
          "documentation": "<p>Describes the effective permission on this bucket after factoring all attached policies.</p>",
          "locationName": "effectivePermission",
          "shape": "String"
        },
        "PermissionConfiguration": {
          "documentation": "<p>Contains information about how permissions are configured for the S3 bucket.</p>",
          "locationName": "permissionConfiguration",
          "shape": "PermissionConfiguration"
        }
      },
      "type": "structure"
    },
    "PublishingStatus": {
      "enum": [
        "PENDING_VERIFICATION",
        "PUBLISHING",
        "UNABLE_TO_PUBLISH_FIX_DESTINATION_PROPERTY",
        "STOPPED"
      ],
      "max": 300,
      "min": 1,
      "type": "string"
    },
    "RemoteAccountDetails": {
      "documentation": "<p>Contains details about the remote Amazon Web Services account that made the API call.</p>",
      "members": {
        "AccountId": {
          "documentation": "<p>The Amazon Web Services account ID of the remote API caller.</p>",
          "locationName": "accountId",
          "shape": "String"
        },
        "Affiliated": {
          "documentation": "<p>Details on whether the Amazon Web Services account of the remote API caller is related to your GuardDuty environment. If this value is <code>True</code> the API caller is affiliated to your account in some way. If it is <code>False</code> the API caller is from outside your environment.</p>",
          "locationName": "affiliated",
          "shape": "Boolean"
        }
      },
      "type": "structure"
    },
    "RemoteIpDetails": {
      "documentation": "<p>Contains information about the remote IP address of the connection.</p>",
      "members": {
        "City": {
          "documentation": "<p>The city information of the remote IP address.</p>",
          "locationName": "city",
          "shape": "City"
        },
        "Country": {
          "documentation": "<p>The country code of the remote IP address.</p>",
          "locationName": "country",
          "shape": "Country"
        },
        "GeoLocation": {
          "documentation": "<p>The location information of the remote IP address.</p>",
          "locationName": "geoLocation",
          "shape": "GeoLocation"
        },
        "IpAddressV4": {
          "documentation": "<p>The IPv4 remote address of the connection.</p>",
          "locationName": "ipAddressV4",
          "shape": "String"
        },
        "Organization": {
          "documentation": "<p>The ISP organization information of the remote IP address.</p>",
          "locationName": "organization",
          "shape": "Organization"
        }
      },
      "type": "structure"
    },
    "RemotePortDetails": {
      "documentation": "<p>Contains information about the remote port.</p>",
      "members": {
        "Port": {
          "documentation": "<p>The port number of the remote connection.</p>",
          "locationName": "port",
          "shape": "Integer"
        },
        "PortName": {
          "documentation": "<p>The port name of the remote connection.</p>",
          "locationName": "portName",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "Resource": {
      "documentation": "<p>Contains information about the Amazon Web Services resource associated with the activity that prompted GuardDuty to generate a finding.</p>",
      "members": {
        "AccessKeyDetails": {
          "documentation": "<p>The IAM access key details (IAM user information) of a user that engaged in the activity that prompted GuardDuty to generate a finding.</p>",
          "locationName": "accessKeyDetails",
          "shape": "AccessKeyDetails"
        },
        "ContainerDetails": {
          "locationName": "containerDetails",
          "shape": "Container"
        },
        "EbsVolumeDetails": {
          "documentation": "<p>Contains list of scanned and skipped EBS volumes with details.</p>",
          "locationName": "ebsVolumeDetails",
          "shape": "EbsVolumeDetails"
        },
        "EcsClusterDetails": {
          "documentation": "<p>Contains information about the details of the ECS Cluster.</p>",
          "locationName": "ecsClusterDetails",
          "shape": "EcsClusterDetails"
        },
        "EksClusterDetails": {
          "documentation": "<p>Details about the EKS cluster involved in a Kubernetes finding.</p>",
          "locationName": "eksClusterDetails",
          "shape": "EksClusterDetails"
        },
        "InstanceDetails": {
          "documentation": "<p>The information about the EC2 instance associated with the activity that prompted GuardDuty to generate a finding.</p>",
          "locationName": "instanceDetails",
          "shape": "InstanceDetails"
        },
        "KubernetesDetails": {
          "documentation": "<p>Details about the Kubernetes user and workload involved in a Kubernetes finding.</p>",
          "locationName": "kubernetesDetails",
          "shape": "KubernetesDetails"
        },
        "ResourceType": {
          "documentation": "<p>The type of Amazon Web Services resource.</p>",
          "locationName": "resourceType",
          "shape": "String"
        },
        "S3BucketDetails": {
          "documentation": "<p>Contains information on the S3 bucket.</p>",
          "locationName": "s3BucketDetails",
          "shape": "S3BucketDetails"
        }
      },
      "type": "structure"
    },
    "ResourceDetails": {
      "documentation": "<p>Represents the resources that were scanned in the scan entry.</p>",
      "members": {
        "InstanceArn": {
          "documentation": "<p>InstanceArn that was scanned in the scan entry.</p>",
          "locationName": "instanceArn",
          "shape": "InstanceArn"
        }
      },
      "type": "structure"
    },
    "ResourceList": {
      "member": {
        "shape": "String"
      },
      "type": "list"
    },
    "S3BucketDetail": {
      "documentation": "<p>Contains information on the S3 bucket.</p>",
      "members": {
        "Arn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the S3 bucket.</p>",
          "locationName": "arn",
          "shape": "String"
        },
        "CreatedAt": {
          "documentation": "<p>The date and time the bucket was created at.</p>",
          "locationName": "createdAt",
          "shape": "Timestamp"
        },
        "DefaultServerSideEncryption": {
          "documentation": "<p>Describes the server side encryption method used in the S3 bucket.</p>",
          "locationName": "defaultServerSideEncryption",
          "shape": "DefaultServerSideEncryption"
        },
        "Name": {
          "documentation": "<p>The name of the S3 bucket.</p>",
          "locationName": "name",
          "shape": "String"
        },
        "Owner": {
          "documentation": "<p>The owner of the S3 bucket.</p>",
          "locationName": "owner",
          "shape": "Owner"
        },
        "PublicAccess": {
          "documentation": "<p>Describes the public access policies that apply to the S3 bucket.</p>",
          "locationName": "publicAccess",
          "shape": "PublicAccess"
        },
        "Tags": {
          "documentation": "<p>All tags attached to the S3 bucket</p>",
          "locationName": "tags",
          "shape": "Tags"
        },
        "Type": {
          "documentation": "<p>Describes whether the bucket is a source or destination bucket.</p>",
          "locationName": "type",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "S3BucketDetails": {
      "member": {
        "shape": "S3BucketDetail"
      },
      "type": "list"
    },
    "S3LogsConfiguration": {
      "documentation": "<p>Describes whether S3 data event logs will be enabled as a data source.</p>",
      "members": {
        "Enable": {
          "documentation": "<p> The status of S3 data event logs as a data source.</p>",
          "locationName": "enable",
          "shape": "Boolean"
        }
      },
      "required": [
        "Enable"
      ],
      "type": "structure"
    },
    "S3LogsConfigurationResult": {
      "documentation": "<p>Describes whether S3 data event logs will be enabled as a data source.</p>",
      "members": {
        "Status": {
          "documentation": "<p>A value that describes whether S3 data event logs are automatically enabled for new members of the organization.</p>",
          "locationName": "status",
          "shape": "DataSourceStatus"
        }
      },
      "required": [
        "Status"
      ],
      "type": "structure"
    },
    "Scan": {
      "documentation": "<p>Contains information about a malware scan.</p>",
      "members": {
        "AccountId": {
          "documentation": "<p>The ID for the account that belongs to the scan.</p>",
          "locationName": "accountId",
          "shape": "AccountId"
        },
        "AdminDetectorId": {
          "documentation": "<p>The unique detector ID of the administrator account that the request is associated with. Note that this value will be the same as the one used for <code>DetectorId</code> if the account is an administrator.</p>",
          "locationName": "adminDetectorId",
          "shape": "DetectorId"
        },
        "AttachedVolumes": {
          "documentation": "<p>List of volumes that were attached to the original instance to be scanned.</p>",
          "locationName": "attachedVolumes",
          "shape": "VolumeDetails"
        },
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector that the request is associated with.</p>",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "FailureReason": {
          "documentation": "<p>Represents the reason for FAILED scan status.</p>",
          "locationName": "failureReason",
          "shape": "NonEmptyString"
        },
        "FileCount": {
          "documentation": "<p>Represents the number of files that were scanned.</p>",
          "locationName": "fileCount",
          "shape": "PositiveLong"
        },
        "ResourceDetails": {
          "documentation": "<p>Represents the resources that were scanned in the scan entry.</p>",
          "locationName": "resourceDetails",
          "shape": "ResourceDetails"
        },
        "ScanEndTime": {
          "documentation": "<p>The timestamp of when the scan was finished.</p>",
          "locationName": "scanEndTime",
          "shape": "Timestamp"
        },
        "ScanId": {
          "documentation": "<p>The unique scan ID associated with a scan entry.</p>",
          "locationName": "scanId",
          "shape": "NonEmptyString"
        },
        "ScanResultDetails": {
          "documentation": "<p>Represents the result of the scan.</p>",
          "locationName": "scanResultDetails",
          "shape": "ScanResultDetails"
        },
        "ScanStartTime": {
          "documentation": "<p>The timestamp of when the scan was triggered.</p>",
          "locationName": "scanStartTime",
          "shape": "Timestamp"
        },
        "ScanStatus": {
          "documentation": "<p>An enum value representing possible scan statuses.</p>",
          "locationName": "scanStatus",
          "shape": "ScanStatus"
        },
        "TotalBytes": {
          "documentation": "<p>Represents total bytes that were scanned.</p>",
          "locationName": "totalBytes",
          "shape": "PositiveLong"
        },
        "TriggerDetails": {
          "documentation": "<p>Represents the reason the scan was triggered.</p>",
          "locationName": "triggerDetails",
          "shape": "TriggerDetails"
        }
      },
      "type": "structure"
    },
    "ScanCondition": {
      "documentation": "<p>Contains information about the condition.</p>",
      "members": {
        "MapEquals": {
          "documentation": "<p>Represents an <i>mapEqual</i> <b/> condition to be applied to a single field when triggering for malware scan.</p>",
          "locationName": "mapEquals",
          "shape": "MapEquals"
        }
      },
      "required": [
        "MapEquals"
      ],
      "type": "structure"
    },
    "ScanConditionPair": {
      "documentation": "<p>Represents key, value pair to be matched against given resource property.</p>",
      "members": {
        "Key": {
          "documentation": "<p>Represents <i>key</i> <b/> in the map condition.</p>",
          "locationName": "key",
          "shape": "TagKey"
        },
        "Value": {
          "documentation": "<p>Represents optional <i>value</i> <b/> in the map condition. If not specified, only <i>key</i> <b/> will be matched.</p>",
          "locationName": "value",
          "shape": "TagValue"
        }
      },
      "required": [
        "Key"
      ],
      "type": "structure"
    },
    "ScanCriterion": {
      "documentation": "<p>Represents a map of resource properties that match specified conditions and values when triggering malware scans.</p>",
      "key": {
        "shape": "ScanCriterionKey"
      },
      "type": "map",
      "value": {
        "shape": "ScanCondition"
      }
    },
    "ScanCriterionKey": {
      "documentation": "<p>An enum value representing possible resource properties to match with given scan condition.</p>",
      "enum": [
        "EC2_INSTANCE_TAG"
      ],
      "type": "string"
    },
    "ScanDetections": {
      "documentation": "<p>Contains a complete view providing malware scan result details.</p>",
      "members": {
        "HighestSeverityThreatDetails": {
          "documentation": "<p>Details of the highest severity threat detected during malware scan and number of infected files.</p>",
          "locationName": "highestSeverityThreatDetails",
          "shape": "HighestSeverityThreatDetails"
        },
        "ScannedItemCount": {
          "documentation": "<p>Total number of scanned files.</p>",
          "locationName": "scannedItemCount",
          "shape": "ScannedItemCount"
        },
        "ThreatDetectedByName": {
          "documentation": "<p>Contains details about identified threats organized by threat name.</p>",
          "locationName": "threatDetectedByName",
          "shape": "ThreatDetectedByName"
        },
        "ThreatsDetectedItemCount": {
          "documentation": "<p>Total number of infected files.</p>",
          "locationName": "threatsDetectedItemCount",
          "shape": "ThreatsDetectedItemCount"
        }
      },
      "type": "structure"
    },
    "ScanEc2InstanceWithFindings": {
      "documentation": "<p>Describes whether Malware Protection for EC2 instances with findings will be enabled as a data source.</p>",
      "members": {
        "EbsVolumes": {
          "documentation": "<p>Describes the configuration for scanning EBS volumes as data source.</p>",
          "locationName": "ebsVolumes",
          "shape": "Boolean"
        }
      },
      "type": "structure"
    },
    "ScanEc2InstanceWithFindingsResult": {
      "documentation": "<p>An object that contains information on the status of whether Malware Protection for EC2 instances with findings will be enabled as a data source.</p>",
      "members": {
        "EbsVolumes": {
          "documentation": "<p>Describes the configuration of scanning EBS volumes as a data source.</p>",
          "locationName": "ebsVolumes",
          "shape": "EbsVolumesResult"
        }
      },
      "type": "structure"
    },
    "ScanFilePath": {
      "documentation": "<p>Contains details of infected file including name, file path and hash.</p>",
      "members": {
        "FileName": {
          "documentation": "<p>File name of the infected file.</p>",
          "locationName": "fileName",
          "shape": "String"
        },
        "FilePath": {
          "documentation": "<p>The file path of the infected file.</p>",
          "locationName": "filePath",
          "shape": "String"
        },
        "Hash": {
          "documentation": "<p>The hash value of the infected file.</p>",
          "locationName": "hash",
          "shape": "String"
        },
        "VolumeArn": {
          "documentation": "<p>EBS volume Arn details of the infected file.</p>",
          "locationName": "volumeArn",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ScanResourceCriteria": {
      "documentation": "<p>Contains information about criteria used to filter resources before triggering malware scan.</p>",
      "members": {
        "Exclude": {
          "documentation": "<p>Represents condition that when matched will prevent a malware scan for a certain resource.</p>",
          "locationName": "exclude",
          "shape": "ScanCriterion"
        },
        "Include": {
          "documentation": "<p>Represents condition that when matched will allow a malware scan for a certain resource.</p>",
          "locationName": "include",
          "shape": "ScanCriterion"
        }
      },
      "type": "structure"
    },
    "ScanResult": {
      "enum": [
        "CLEAN",
        "INFECTED"
      ],
      "type": "string"
    },
    "ScanResultDetails": {
      "documentation": "<p>Represents the result of the scan.</p>",
      "members": {
        "ScanResult": {
          "documentation": "<p>An enum value representing possible scan results.</p>",
          "locationName": "scanResult",
          "shape": "ScanResult"
        }
      },
      "type": "structure"
    },
    "ScanStatus": {
      "enum": [
        "RUNNING",
        "COMPLETED",
        "FAILED"
      ],
      "type": "string"
    },
    "ScanThreatName": {
      "documentation": "<p>Contains files infected with the given threat providing details of malware name and severity.</p>",
      "members": {
        "FilePaths": {
          "documentation": "<p>List of infected files in EBS volume with details.</p>",
          "locationName": "filePaths",
          "shape": "FilePaths"
        },
        "ItemCount": {
          "documentation": "<p>Total number of files infected with given threat.</p>",
          "locationName": "itemCount",
          "shape": "Integer"
        },
        "Name": {
          "documentation": "<p>The name of the identified threat.</p>",
          "locationName": "name",
          "shape": "String"
        },
        "Severity": {
          "documentation": "<p>Severity of threat identified as part of the malware scan.</p>",
          "locationName": "severity",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ScanThreatNames": {
      "member": {
        "shape": "ScanThreatName"
      },
      "type": "list"
    },
    "ScannedItemCount": {
      "documentation": "<p>Total number of scanned files.</p>",
      "members": {
        "Files": {
          "documentation": "<p>Number of files scanned.</p>",
          "locationName": "files",
          "shape": "Integer"
        },
        "TotalGb": {
          "documentation": "<p>Total GB of files scanned for malware.</p>",
          "locationName": "totalGb",
          "shape": "Integer"
        },
        "Volumes": {
          "documentation": "<p>Total number of scanned volumes.</p>",
          "locationName": "volumes",
          "shape": "Integer"
        }
      },
      "type": "structure"
    },
    "Scans": {
      "member": {
        "shape": "Scan"
      },
      "type": "list"
    },
    "SecurityContext": {
      "documentation": "<p>Container security context.</p>",
      "members": {
        "Privileged": {
          "documentation": "<p>Whether the container is privileged.</p>",
          "locationName": "privileged",
          "shape": "Boolean"
        }
      },
      "type": "structure"
    },
    "SecurityGroup": {
      "documentation": "<p>Contains information about the security groups associated with the EC2 instance.</p>",
      "members": {
        "GroupId": {
          "documentation": "<p>The security group ID of the EC2 instance.</p>",
          "locationName": "groupId",
          "shape": "String"
        },
        "GroupName": {
          "documentation": "<p>The security group name of the EC2 instance.</p>",
          "locationName": "groupName",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "SecurityGroups": {
      "member": {
        "shape": "SecurityGroup"
      },
      "type": "list"
    },
    "Service": {
      "documentation": "<p>Contains additional information about the generated finding.</p>",
      "members": {
        "Action": {
          "documentation": "<p>Information about the activity that is described in a finding.</p>",
          "locationName": "action",
          "shape": "Action"
        },
        "AdditionalInfo": {
          "documentation": "<p>Contains additional information about the generated finding.</p>",
          "locationName": "additionalInfo",
          "shape": "ServiceAdditionalInfo"
        },
        "Archived": {
          "documentation": "<p>Indicates whether this finding is archived.</p>",
          "locationName": "archived",
          "shape": "Boolean"
        },
        "Count": {
          "documentation": "<p>The total count of the occurrences of this finding type.</p>",
          "locationName": "count",
          "shape": "Integer"
        },
        "DetectorId": {
          "documentation": "<p>The detector ID for the GuardDuty service.</p>",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "EbsVolumeScanDetails": {
          "documentation": "<p>Returns details from the malware scan that created a finding.</p>",
          "locationName": "ebsVolumeScanDetails",
          "shape": "EbsVolumeScanDetails"
        },
        "EventFirstSeen": {
          "documentation": "<p>The first-seen timestamp of the activity that prompted GuardDuty to generate this finding.</p>",
          "locationName": "eventFirstSeen",
          "shape": "String"
        },
        "EventLastSeen": {
          "documentation": "<p>The last-seen timestamp of the activity that prompted GuardDuty to generate this finding.</p>",
          "locationName": "eventLastSeen",
          "shape": "String"
        },
        "Evidence": {
          "documentation": "<p>An evidence object associated with the service.</p>",
          "locationName": "evidence",
          "shape": "Evidence"
        },
        "FeatureName": {
          "documentation": "<p>The name of the feature that generated a finding.</p>",
          "locationName": "featureName",
          "shape": "String"
        },
        "ResourceRole": {
          "documentation": "<p>The resource role information for this finding.</p>",
          "locationName": "resourceRole",
          "shape": "String"
        },
        "ServiceName": {
          "documentation": "<p>The name of the Amazon Web Services service (GuardDuty) that generated a finding.</p>",
          "locationName": "serviceName",
          "shape": "String"
        },
        "UserFeedback": {
          "documentation": "<p>Feedback that was submitted about the finding.</p>",
          "locationName": "userFeedback",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ServiceAdditionalInfo": {
      "documentation": "<p>Additional information about the generated finding.</p>",
      "members": {
        "Type": {
          "documentation": "<p>Describes the type of the additional information.</p>",
          "locationName": "type",
          "shape": "String"
        },
        "Value": {
          "documentation": "<p>This field specifies the value of the additional information.</p>",
          "locationName": "value",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "SortCriteria": {
      "documentation": "<p>Contains information about the criteria used for sorting findings.</p>",
      "members": {
        "AttributeName": {
          "documentation": "<p>Represents the finding attribute (for example, accountId) to sort findings by.</p>",
          "locationName": "attributeName",
          "shape": "String"
        },
        "OrderBy": {
          "documentation": "<p>The order by which the sorted findings are to be displayed.</p>",
          "locationName": "orderBy",
          "shape": "OrderBy"
        }
      },
      "type": "structure"
    },
    "SourceIps": {
      "member": {
        "shape": "String"
      },
      "type": "list"
    },
    "Sources": {
      "member": {
        "shape": "String"
      },
      "type": "list"
    },
    "StartMonitoringMembersRequest": {
      "members": {
        "AccountIds": {
          "documentation": "<p>A list of account IDs of the GuardDuty member accounts to start monitoring.</p>",
          "locationName": "accountIds",
          "shape": "AccountIds"
        },
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector of the GuardDuty administrator account associated with the member accounts to monitor.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId",
        "AccountIds"
      ],
      "type": "structure"
    },
    "StartMonitoringMembersResponse": {
      "members": {
        "UnprocessedAccounts": {
          "documentation": "<p>A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.</p>",
          "locationName": "unprocessedAccounts",
          "shape": "UnprocessedAccounts"
        }
      },
      "required": [
        "UnprocessedAccounts"
      ],
      "type": "structure"
    },
    "StopMonitoringMembersRequest": {
      "members": {
        "AccountIds": {
          "documentation": "<p>A list of account IDs for the member accounts to stop monitoring.</p>",
          "locationName": "accountIds",
          "shape": "AccountIds"
        },
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector associated with the GuardDuty administrator account that is monitoring member accounts.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId",
        "AccountIds"
      ],
      "type": "structure"
    },
    "StopMonitoringMembersResponse": {
      "members": {
        "UnprocessedAccounts": {
          "documentation": "<p>A list of objects that contain an accountId for each account that could not be processed, and a result string that indicates why the account was not processed. </p>",
          "locationName": "unprocessedAccounts",
          "shape": "UnprocessedAccounts"
        }
      },
      "required": [
        "UnprocessedAccounts"
      ],
      "type": "structure"
    },
    "String": {
      "type": "string"
    },
    "Tag": {
      "documentation": "<p>Contains information about a tag associated with the EC2 instance.</p>",
      "members": {
        "Key": {
          "documentation": "<p>The EC2 instance tag key.</p>",
          "locationName": "key",
          "shape": "String"
        },
        "Value": {
          "documentation": "<p>The EC2 instance tag value.</p>",
          "locationName": "value",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "TagKey": {
      "max": 128,
      "min": 1,
      "pattern": "^(?!aws:)[a-zA-Z+-=._:/]+$",
      "type": "string"
    },
    "TagKeyList": {
      "max": 200,
      "member": {
        "shape": "TagKey"
      },
      "min": 1,
      "type": "list"
    },
    "TagMap": {
      "key": {
        "shape": "TagKey"
      },
      "max": 200,
      "min": 1,
      "type": "map",
      "value": {
        "shape": "TagValue"
      }
    },
    "TagResourceRequest": {
      "members": {
        "ResourceArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) for the GuardDuty resource to apply a tag to.</p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "GuardDutyArn"
        },
        "Tags": {
          "documentation": "<p>The tags to be added to a resource.</p>",
          "locationName": "tags",
          "shape": "TagMap"
        }
      },
      "required": [
        "ResourceArn",
        "Tags"
      ],
      "type": "structure"
    },
    "TagResourceResponse": {
      "members": {},
      "type": "structure"
    },
    "TagValue": {
      "max": 256,
      "type": "string"
    },
    "Tags": {
      "member": {
        "shape": "Tag"
      },
      "type": "list"
    },
    "ThreatDetectedByName": {
      "documentation": "<p>Contains details about identified threats organized by threat name.</p>",
      "members": {
        "ItemCount": {
          "documentation": "<p>Total number of infected files identified.</p>",
          "locationName": "itemCount",
          "shape": "Integer"
        },
        "Shortened": {
          "documentation": "<p>Flag to determine if the finding contains every single infected file-path and/or every threat.</p>",
          "locationName": "shortened",
          "shape": "Boolean"
        },
        "ThreatNames": {
          "documentation": "<p>List of identified threats with details, organized by threat name.</p>",
          "locationName": "threatNames",
          "shape": "ScanThreatNames"
        },
        "UniqueThreatNameCount": {
          "documentation": "<p>Total number of unique threats by name identified, as part of the malware scan.</p>",
          "locationName": "uniqueThreatNameCount",
          "shape": "Integer"
        }
      },
      "type": "structure"
    },
    "ThreatIntelSetFormat": {
      "enum": [
        "TXT",
        "STIX",
        "OTX_CSV",
        "ALIEN_VAULT",
        "PROOF_POINT",
        "FIRE_EYE"
      ],
      "max": 300,
      "min": 1,
      "type": "string"
    },
    "ThreatIntelSetIds": {
      "max": 50,
      "member": {
        "shape": "String"
      },
      "min": 0,
      "type": "list"
    },
    "ThreatIntelSetStatus": {
      "enum": [
        "INACTIVE",
        "ACTIVATING",
        "ACTIVE",
        "DEACTIVATING",
        "ERROR",
        "DELETE_PENDING",
        "DELETED"
      ],
      "max": 300,
      "min": 1,
      "type": "string"
    },
    "ThreatIntelligenceDetail": {
      "documentation": "<p>An instance of a threat intelligence detail that constitutes evidence for the finding.</p>",
      "members": {
        "ThreatListName": {
          "documentation": "<p>The name of the threat intelligence list that triggered the finding.</p>",
          "locationName": "threatListName",
          "shape": "String"
        },
        "ThreatNames": {
          "documentation": "<p>A list of names of the threats in the threat intelligence list that triggered the finding.</p>",
          "locationName": "threatNames",
          "shape": "ThreatNames"
        }
      },
      "type": "structure"
    },
    "ThreatIntelligenceDetails": {
      "member": {
        "shape": "ThreatIntelligenceDetail"
      },
      "type": "list"
    },
    "ThreatNames": {
      "member": {
        "shape": "String"
      },
      "type": "list"
    },
    "ThreatsDetectedItemCount": {
      "documentation": "<p>Contains total number of infected files.</p>",
      "members": {
        "Files": {
          "documentation": "<p>Total number of infected files.</p>",
          "locationName": "files",
          "shape": "Integer"
        }
      },
      "type": "structure"
    },
    "Timestamp": {
      "type": "timestamp"
    },
    "Total": {
      "documentation": "<p>Contains the total usage with the corresponding currency unit for that value.</p>",
      "members": {
        "Amount": {
          "documentation": "<p>The total usage.</p>",
          "locationName": "amount",
          "shape": "String"
        },
        "Unit": {
          "documentation": "<p>The currency unit that the amount is given in.</p>",
          "locationName": "unit",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "TriggerDetails": {
      "documentation": "<p>Represents the reason the scan was triggered.</p>",
      "members": {
        "Description": {
          "documentation": "<p>The description of the scan trigger.</p>",
          "locationName": "description",
          "shape": "NonEmptyString"
        },
        "GuardDutyFindingId": {
          "documentation": "<p>The ID of the GuardDuty finding that triggered the BirdDog scan.</p>",
          "locationName": "guardDutyFindingId",
          "shape": "NonEmptyString"
        }
      },
      "type": "structure"
    },
    "UnarchiveFindingsRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The ID of the detector associated with the findings to unarchive.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "FindingIds": {
          "documentation": "<p>The IDs of the findings to unarchive.</p>",
          "locationName": "findingIds",
          "shape": "FindingIds"
        }
      },
      "required": [
        "DetectorId",
        "FindingIds"
      ],
      "type": "structure"
    },
    "UnarchiveFindingsResponse": {
      "members": {},
      "type": "structure"
    },
    "UnprocessedAccount": {
      "documentation": "<p>Contains information about the accounts that weren't processed.</p>",
      "members": {
        "AccountId": {
          "documentation": "<p>The Amazon Web Services account ID.</p>",
          "locationName": "accountId",
          "shape": "AccountId"
        },
        "Result": {
          "documentation": "<p>A reason why the account hasn't been processed.</p>",
          "locationName": "result",
          "shape": "String"
        }
      },
      "required": [
        "AccountId",
        "Result"
      ],
      "type": "structure"
    },
    "UnprocessedAccounts": {
      "max": 50,
      "member": {
        "shape": "UnprocessedAccount"
      },
      "min": 0,
      "type": "list"
    },
    "UnprocessedDataSourcesResult": {
      "documentation": "<p>Specifies the names of the data sources that couldn't be enabled.</p>",
      "members": {
        "MalwareProtection": {
          "locationName": "malwareProtection",
          "shape": "MalwareProtectionConfigurationResult"
        }
      },
      "type": "structure"
    },
    "UntagResourceRequest": {
      "members": {
        "ResourceArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) for the resource to remove tags from.</p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "GuardDutyArn"
        },
        "TagKeys": {
          "documentation": "<p>The tag keys to remove from the resource.</p>",
          "location": "querystring",
          "locationName": "tagKeys",
          "shape": "TagKeyList"
        }
      },
      "required": [
        "ResourceArn",
        "TagKeys"
      ],
      "type": "structure"
    },
    "UntagResourceResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateDetectorRequest": {
      "members": {
        "DataSources": {
          "documentation": "<p>Describes which data sources will be updated.</p>",
          "locationName": "dataSources",
          "shape": "DataSourceConfigurations"
        },
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector to update.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "Enable": {
          "documentation": "<p>Specifies whether the detector is enabled or not enabled.</p>",
          "locationName": "enable",
          "shape": "Boolean"
        },
        "FindingPublishingFrequency": {
          "documentation": "<p>An enum value that specifies how frequently findings are exported, such as to CloudWatch Events.</p>",
          "locationName": "findingPublishingFrequency",
          "shape": "FindingPublishingFrequency"
        }
      },
      "required": [
        "DetectorId"
      ],
      "type": "structure"
    },
    "UpdateDetectorResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateFilterRequest": {
      "members": {
        "Action": {
          "documentation": "<p>Specifies the action that is to be applied to the findings that match the filter.</p>",
          "locationName": "action",
          "shape": "FilterAction"
        },
        "Description": {
          "documentation": "<p>The description of the filter.</p>",
          "locationName": "description",
          "shape": "FilterDescription"
        },
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector that specifies the GuardDuty service where you want to update a filter.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "FilterName": {
          "documentation": "<p>The name of the filter.</p>",
          "location": "uri",
          "locationName": "filterName",
          "shape": "String"
        },
        "FindingCriteria": {
          "documentation": "<p>Represents the criteria to be used in the filter for querying findings.</p>",
          "locationName": "findingCriteria",
          "shape": "FindingCriteria"
        },
        "Rank": {
          "documentation": "<p>Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.</p>",
          "locationName": "rank",
          "shape": "FilterRank"
        }
      },
      "required": [
        "DetectorId",
        "FilterName"
      ],
      "type": "structure"
    },
    "UpdateFilterResponse": {
      "members": {
        "Name": {
          "documentation": "<p>The name of the filter.</p>",
          "locationName": "name",
          "shape": "FilterName"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "UpdateFindingsFeedbackRequest": {
      "members": {
        "Comments": {
          "documentation": "<p>Additional feedback about the GuardDuty findings.</p>",
          "locationName": "comments",
          "shape": "String"
        },
        "DetectorId": {
          "documentation": "<p>The ID of the detector associated with the findings to update feedback for.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "Feedback": {
          "documentation": "<p>The feedback for the finding.</p>",
          "locationName": "feedback",
          "shape": "Feedback"
        },
        "FindingIds": {
          "documentation": "<p>The IDs of the findings that you want to mark as useful or not useful.</p>",
          "locationName": "findingIds",
          "shape": "FindingIds"
        }
      },
      "required": [
        "DetectorId",
        "FindingIds",
        "Feedback"
      ],
      "type": "structure"
    },
    "UpdateFindingsFeedbackResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateIPSetRequest": {
      "members": {
        "Activate": {
          "documentation": "<p>The updated Boolean value that specifies whether the IPSet is active or not.</p>",
          "locationName": "activate",
          "shape": "Boolean"
        },
        "DetectorId": {
          "documentation": "<p>The detectorID that specifies the GuardDuty service whose IPSet you want to update.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "IpSetId": {
          "documentation": "<p>The unique ID that specifies the IPSet that you want to update.</p>",
          "location": "uri",
          "locationName": "ipSetId",
          "shape": "String"
        },
        "Location": {
          "documentation": "<p>The updated URI of the file that contains the IPSet. </p>",
          "locationName": "location",
          "shape": "Location"
        },
        "Name": {
          "documentation": "<p>The unique ID that specifies the IPSet that you want to update.</p>",
          "locationName": "name",
          "shape": "Name"
        }
      },
      "required": [
        "DetectorId",
        "IpSetId"
      ],
      "type": "structure"
    },
    "UpdateIPSetResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateMalwareScanSettingsRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector that specifies the GuardDuty service where you want to update scan settings.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "EbsSnapshotPreservation": {
          "documentation": "<p>An enum value representing possible snapshot preservation settings.</p>",
          "locationName": "ebsSnapshotPreservation",
          "shape": "EbsSnapshotPreservation"
        },
        "ScanResourceCriteria": {
          "documentation": "<p>Represents the criteria to be used in the filter for selecting resources to scan.</p>",
          "locationName": "scanResourceCriteria",
          "shape": "ScanResourceCriteria"
        }
      },
      "required": [
        "DetectorId"
      ],
      "type": "structure"
    },
    "UpdateMalwareScanSettingsResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateMemberDetectorsRequest": {
      "members": {
        "AccountIds": {
          "documentation": "<p>A list of member account IDs to be updated.</p>",
          "locationName": "accountIds",
          "shape": "AccountIds"
        },
        "DataSources": {
          "documentation": "<p>Describes which data sources will be updated.</p>",
          "locationName": "dataSources",
          "shape": "DataSourceConfigurations"
        },
        "DetectorId": {
          "documentation": "<p>The detector ID of the administrator account.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId",
        "AccountIds"
      ],
      "type": "structure"
    },
    "UpdateMemberDetectorsResponse": {
      "members": {
        "UnprocessedAccounts": {
          "documentation": "<p>A list of member account IDs that were unable to be processed along with an explanation for why they were not processed.</p>",
          "locationName": "unprocessedAccounts",
          "shape": "UnprocessedAccounts"
        }
      },
      "required": [
        "UnprocessedAccounts"
      ],
      "type": "structure"
    },
    "UpdateOrganizationConfigurationRequest": {
      "members": {
        "AutoEnable": {
          "documentation": "<p>Indicates whether to automatically enable member accounts in the organization.</p>",
          "locationName": "autoEnable",
          "shape": "Boolean"
        },
        "DataSources": {
          "documentation": "<p>Describes which data sources will be updated.</p>",
          "locationName": "dataSources",
          "shape": "OrganizationDataSourceConfigurations"
        },
        "DetectorId": {
          "documentation": "<p>The ID of the detector to update the delegated administrator for.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId",
        "AutoEnable"
      ],
      "type": "structure"
    },
    "UpdateOrganizationConfigurationResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdatePublishingDestinationRequest": {
      "members": {
        "DestinationId": {
          "documentation": "<p>The ID of the publishing destination to update.</p>",
          "location": "uri",
          "locationName": "destinationId",
          "shape": "String"
        },
        "DestinationProperties": {
          "documentation": "<p>A <code>DestinationProperties</code> object that includes the <code>DestinationArn</code> and <code>KmsKeyArn</code> of the publishing destination.</p>",
          "locationName": "destinationProperties",
          "shape": "DestinationProperties"
        },
        "DetectorId": {
          "documentation": "<p>The ID of the detector associated with the publishing destinations to update.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId",
        "DestinationId"
      ],
      "type": "structure"
    },
    "UpdatePublishingDestinationResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateThreatIntelSetRequest": {
      "members": {
        "Activate": {
          "documentation": "<p>The updated Boolean value that specifies whether the ThreateIntelSet is active or not.</p>",
          "locationName": "activate",
          "shape": "Boolean"
        },
        "DetectorId": {
          "documentation": "<p>The detectorID that specifies the GuardDuty service whose ThreatIntelSet you want to update.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "Location": {
          "documentation": "<p>The updated URI of the file that contains the ThreateIntelSet.</p>",
          "locationName": "location",
          "shape": "Location"
        },
        "Name": {
          "documentation": "<p>The unique ID that specifies the ThreatIntelSet that you want to update.</p>",
          "locationName": "name",
          "shape": "Name"
        },
        "ThreatIntelSetId": {
          "documentation": "<p>The unique ID that specifies the ThreatIntelSet that you want to update.</p>",
          "location": "uri",
          "locationName": "threatIntelSetId",
          "shape": "String"
        }
      },
      "required": [
        "DetectorId",
        "ThreatIntelSetId"
      ],
      "type": "structure"
    },
    "UpdateThreatIntelSetResponse": {
      "members": {},
      "type": "structure"
    },
    "UsageAccountResult": {
      "documentation": "<p>Contains information on the total of usage based on account IDs.</p>",
      "members": {
        "AccountId": {
          "documentation": "<p>The Account ID that generated usage.</p>",
          "locationName": "accountId",
          "shape": "AccountId"
        },
        "Total": {
          "documentation": "<p>Represents the total of usage for the Account ID.</p>",
          "locationName": "total",
          "shape": "Total"
        }
      },
      "type": "structure"
    },
    "UsageAccountResultList": {
      "member": {
        "shape": "UsageAccountResult"
      },
      "type": "list"
    },
    "UsageCriteria": {
      "documentation": "<p>Contains information about the criteria used to query usage statistics.</p>",
      "members": {
        "AccountIds": {
          "documentation": "<p>The account IDs to aggregate usage statistics from.</p>",
          "locationName": "accountIds",
          "shape": "AccountIds"
        },
        "DataSources": {
          "documentation": "<p>The data sources to aggregate usage statistics from.</p>",
          "locationName": "dataSources",
          "shape": "DataSourceList"
        },
        "Resources": {
          "documentation": "<p>The resources to aggregate usage statistics from. Only accepts exact resource names.</p>",
          "locationName": "resources",
          "shape": "ResourceList"
        }
      },
      "required": [
        "DataSources"
      ],
      "type": "structure"
    },
    "UsageDataSourceResult": {
      "documentation": "<p>Contains information on the result of usage based on data source type.</p>",
      "members": {
        "DataSource": {
          "documentation": "<p>The data source type that generated usage.</p>",
          "locationName": "dataSource",
          "shape": "DataSource"
        },
        "Total": {
          "documentation": "<p>Represents the total of usage for the specified data source.</p>",
          "locationName": "total",
          "shape": "Total"
        }
      },
      "type": "structure"
    },
    "UsageDataSourceResultList": {
      "member": {
        "shape": "UsageDataSourceResult"
      },
      "type": "list"
    },
    "UsageResourceResult": {
      "documentation": "<p>Contains information on the sum of usage based on an Amazon Web Services resource.</p>",
      "members": {
        "Resource": {
          "documentation": "<p>The Amazon Web Services resource that generated usage.</p>",
          "locationName": "resource",
          "shape": "String"
        },
        "Total": {
          "documentation": "<p>Represents the sum total of usage for the specified resource type.</p>",
          "locationName": "total",
          "shape": "Total"
        }
      },
      "type": "structure"
    },
    "UsageResourceResultList": {
      "member": {
        "shape": "UsageResourceResult"
      },
      "type": "list"
    },
    "UsageStatisticType": {
      "enum": [
        "SUM_BY_ACCOUNT",
        "SUM_BY_DATA_SOURCE",
        "SUM_BY_RESOURCE",
        "TOP_RESOURCES"
      ],
      "type": "string"
    },
    "UsageStatistics": {
      "documentation": "<p>Contains the result of GuardDuty usage. If a UsageStatisticType is provided the result for other types will be null. </p>",
      "members": {
        "SumByAccount": {
          "documentation": "<p>The usage statistic sum organized by account ID.</p>",
          "locationName": "sumByAccount",
          "shape": "UsageAccountResultList"
        },
        "SumByDataSource": {
          "documentation": "<p>The usage statistic sum organized by on data source.</p>",
          "locationName": "sumByDataSource",
          "shape": "UsageDataSourceResultList"
        },
        "SumByResource": {
          "documentation": "<p>The usage statistic sum organized by resource.</p>",
          "locationName": "sumByResource",
          "shape": "UsageResourceResultList"
        },
        "TopResources": {
          "documentation": "<p>Lists the top 50 resources that have generated the most GuardDuty usage, in order from most to least expensive.</p>",
          "locationName": "topResources",
          "shape": "UsageResourceResultList"
        }
      },
      "type": "structure"
    },
    "Volume": {
      "documentation": "<p>Volume used by the Kubernetes workload.</p>",
      "members": {
        "HostPath": {
          "documentation": "<p>Represents a pre-existing file or directory on the host machine that the volume maps to.</p>",
          "locationName": "hostPath",
          "shape": "HostPath"
        },
        "Name": {
          "documentation": "<p>Volume name.</p>",
          "locationName": "name",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "VolumeDetail": {
      "documentation": "<p>Contains EBS volume details.</p>",
      "members": {
        "DeviceName": {
          "documentation": "<p>The device name for the EBS volume.</p>",
          "locationName": "deviceName",
          "shape": "String"
        },
        "EncryptionType": {
          "documentation": "<p>EBS volume encryption type.</p>",
          "locationName": "encryptionType",
          "shape": "String"
        },
        "KmsKeyArn": {
          "documentation": "<p>KMS key Arn used to encrypt the EBS volume.</p>",
          "locationName": "kmsKeyArn",
          "shape": "String"
        },
        "SnapshotArn": {
          "documentation": "<p>Snapshot Arn of the EBS volume.</p>",
          "locationName": "snapshotArn",
          "shape": "String"
        },
        "VolumeArn": {
          "documentation": "<p>EBS volume Arn information.</p>",
          "locationName": "volumeArn",
          "shape": "String"
        },
        "VolumeSizeInGB": {
          "documentation": "<p>EBS volume size in GB.</p>",
          "locationName": "volumeSizeInGB",
          "shape": "Integer"
        },
        "VolumeType": {
          "documentation": "<p>The EBS volume type.</p>",
          "locationName": "volumeType",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "VolumeDetails": {
      "member": {
        "shape": "VolumeDetail"
      },
      "type": "list"
    },
    "VolumeMount": {
      "documentation": "<p>Container volume mount.</p>",
      "members": {
        "MountPath": {
          "documentation": "<p>Volume mount path.</p>",
          "locationName": "mountPath",
          "shape": "String"
        },
        "Name": {
          "documentation": "<p>Volume mount name.</p>",
          "locationName": "name",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "VolumeMounts": {
      "member": {
        "shape": "VolumeMount"
      },
      "type": "list"
    },
    "Volumes": {
      "member": {
        "shape": "Volume"
      },
      "type": "list"
    }
  },
  "version": "2.0"
}
