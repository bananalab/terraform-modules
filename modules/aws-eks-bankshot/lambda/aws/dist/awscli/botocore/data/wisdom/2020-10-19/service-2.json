{
  "documentation": "<p>Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use the Amazon Connect Wisdom APIs to create an assistant and a knowledge base, for example, or manage content by uploading custom files.</p>",
  "metadata": {
    "apiVersion": "2020-10-19",
    "endpointPrefix": "wisdom",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "Amazon Connect Wisdom Service",
    "serviceId": "Wisdom",
    "signatureVersion": "v4",
    "signingName": "wisdom",
    "uid": "wisdom-2020-10-19"
  },
  "operations": {
    "CreateAssistant": {
      "documentation": "<p>Creates an Amazon Connect Wisdom assistant.</p>",
      "errors": [
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/assistants",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "CreateAssistantRequest"
      },
      "name": "CreateAssistant",
      "output": {
        "shape": "CreateAssistantResponse"
      }
    },
    "CreateAssistantAssociation": {
      "documentation": "<p>Creates an association between an Amazon Connect Wisdom assistant and another resource. Currently, the only supported association is with a knowledge base. An assistant can have only a single association.</p>",
      "errors": [
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/assistants/{assistantId}/associations",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "CreateAssistantAssociationRequest"
      },
      "name": "CreateAssistantAssociation",
      "output": {
        "shape": "CreateAssistantAssociationResponse"
      }
    },
    "CreateContent": {
      "documentation": "<p>Creates Wisdom content. Before to calling this API, use <a href=\"https://docs.aws.amazon.com/wisdom/latest/APIReference/API_StartContentUpload.html\">StartContentUpload</a> to upload an asset.</p>",
      "errors": [
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/knowledgeBases/{knowledgeBaseId}/contents",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "CreateContentRequest"
      },
      "name": "CreateContent",
      "output": {
        "shape": "CreateContentResponse"
      }
    },
    "CreateKnowledgeBase": {
      "documentation": "<p>Creates a knowledge base.</p> <note> <p>When using this API, you cannot reuse <a href=\"https://docs.aws.amazon.com/appintegrations/latest/APIReference/Welcome.html\">Amazon AppIntegrations</a> DataIntegrations with external knowledge bases such as Salesforce and ServiceNow. If you do, you'll get an <code>InvalidRequestException</code> error. </p> <pre><code> &lt;p&gt;For example, you're programmatically managing your external knowledge base, and you want to add or remove one of the fields that is being ingested from Salesforce. Do the following:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Call &lt;a href=&quot;https://docs.aws.amazon.com/wisdom/latest/APIReference/API_DeleteKnowledgeBase.html&quot;&gt;DeleteKnowledgeBase&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Call &lt;a href=&quot;https://docs.aws.amazon.com/appintegrations/latest/APIReference/API_DeleteDataIntegration.html&quot;&gt;DeleteDataIntegration&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Call &lt;a href=&quot;https://docs.aws.amazon.com/appintegrations/latest/APIReference/API_CreateDataIntegration.html&quot;&gt;CreateDataIntegration&lt;/a&gt; to recreate the DataIntegration or a create different one.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Call CreateKnowledgeBase.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;/note&gt; </code></pre>",
      "errors": [
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/knowledgeBases",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "CreateKnowledgeBaseRequest"
      },
      "name": "CreateKnowledgeBase",
      "output": {
        "shape": "CreateKnowledgeBaseResponse"
      }
    },
    "CreateSession": {
      "documentation": "<p>Creates a session. A session is a contextual container used for generating recommendations. Amazon Connect creates a new Wisdom session for each contact on which Wisdom is enabled.</p>",
      "errors": [
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/assistants/{assistantId}/sessions",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "CreateSessionRequest"
      },
      "name": "CreateSession",
      "output": {
        "shape": "CreateSessionResponse"
      }
    },
    "DeleteAssistant": {
      "documentation": "<p>Deletes an assistant.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/assistants/{assistantId}",
        "responseCode": 204
      },
      "idempotent": true,
      "input": {
        "shape": "DeleteAssistantRequest"
      },
      "name": "DeleteAssistant",
      "output": {
        "shape": "DeleteAssistantResponse"
      }
    },
    "DeleteAssistantAssociation": {
      "documentation": "<p>Deletes an assistant association.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/assistants/{assistantId}/associations/{assistantAssociationId}",
        "responseCode": 204
      },
      "idempotent": true,
      "input": {
        "shape": "DeleteAssistantAssociationRequest"
      },
      "name": "DeleteAssistantAssociation",
      "output": {
        "shape": "DeleteAssistantAssociationResponse"
      }
    },
    "DeleteContent": {
      "documentation": "<p>Deletes the content.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/knowledgeBases/{knowledgeBaseId}/contents/{contentId}",
        "responseCode": 204
      },
      "idempotent": true,
      "input": {
        "shape": "DeleteContentRequest"
      },
      "name": "DeleteContent",
      "output": {
        "shape": "DeleteContentResponse"
      }
    },
    "DeleteKnowledgeBase": {
      "documentation": "<p>Deletes the knowledge base.</p> <note> <p>When you use this API to delete an external knowledge base such as Salesforce or ServiceNow, you must also delete the <a href=\"https://docs.aws.amazon.com/appintegrations/latest/APIReference/Welcome.html\">Amazon AppIntegrations</a> DataIntegration. This is because you can't reuse the DataIntegration after it's been associated with an external knowledge base. However, you can delete and recreate it. See <a href=\"https://docs.aws.amazon.com/appintegrations/latest/APIReference/API_DeleteDataIntegration.html\">DeleteDataIntegration</a> and <a href=\"https://docs.aws.amazon.com/appintegrations/latest/APIReference/API_CreateDataIntegration.html\">CreateDataIntegration</a> in the <i>Amazon AppIntegrations API Reference</i>.</p> </note>",
      "errors": [
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/knowledgeBases/{knowledgeBaseId}",
        "responseCode": 204
      },
      "idempotent": true,
      "input": {
        "shape": "DeleteKnowledgeBaseRequest"
      },
      "name": "DeleteKnowledgeBase",
      "output": {
        "shape": "DeleteKnowledgeBaseResponse"
      }
    },
    "GetAssistant": {
      "documentation": "<p>Retrieves information about an assistant.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/assistants/{assistantId}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetAssistantRequest"
      },
      "name": "GetAssistant",
      "output": {
        "shape": "GetAssistantResponse"
      }
    },
    "GetAssistantAssociation": {
      "documentation": "<p>Retrieves information about an assistant association.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/assistants/{assistantId}/associations/{assistantAssociationId}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetAssistantAssociationRequest"
      },
      "name": "GetAssistantAssociation",
      "output": {
        "shape": "GetAssistantAssociationResponse"
      }
    },
    "GetContent": {
      "documentation": "<p>Retrieves content, including a pre-signed URL to download the content.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/knowledgeBases/{knowledgeBaseId}/contents/{contentId}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetContentRequest"
      },
      "name": "GetContent",
      "output": {
        "shape": "GetContentResponse"
      }
    },
    "GetContentSummary": {
      "documentation": "<p>Retrieves summary information about the content.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/knowledgeBases/{knowledgeBaseId}/contents/{contentId}/summary",
        "responseCode": 200
      },
      "input": {
        "shape": "GetContentSummaryRequest"
      },
      "name": "GetContentSummary",
      "output": {
        "shape": "GetContentSummaryResponse"
      }
    },
    "GetKnowledgeBase": {
      "documentation": "<p>Retrieves information about the knowledge base.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/knowledgeBases/{knowledgeBaseId}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetKnowledgeBaseRequest"
      },
      "name": "GetKnowledgeBase",
      "output": {
        "shape": "GetKnowledgeBaseResponse"
      }
    },
    "GetRecommendations": {
      "documentation": "<p>Retrieves recommendations for the specified session. To avoid retrieving the same recommendations in subsequent calls, use <a href=\"https://docs.aws.amazon.com/wisdom/latest/APIReference/API_NotifyRecommendationsReceived.html\">NotifyRecommendationsReceived</a>. This API supports long-polling behavior with the <code>waitTimeSeconds</code> parameter. Short poll is the default behavior and only returns recommendations already available. To perform a manual query against an assistant, use <a href=\"https://docs.aws.amazon.com/wisdom/latest/APIReference/API_QueryAssistant.html\">QueryAssistant</a>.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/assistants/{assistantId}/sessions/{sessionId}/recommendations",
        "responseCode": 200
      },
      "input": {
        "shape": "GetRecommendationsRequest"
      },
      "name": "GetRecommendations",
      "output": {
        "shape": "GetRecommendationsResponse"
      }
    },
    "GetSession": {
      "documentation": "<p>Retrieves information for a specified session.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/assistants/{assistantId}/sessions/{sessionId}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetSessionRequest"
      },
      "name": "GetSession",
      "output": {
        "shape": "GetSessionResponse"
      }
    },
    "ListAssistantAssociations": {
      "documentation": "<p>Lists information about assistant associations.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/assistants/{assistantId}/associations",
        "responseCode": 200
      },
      "input": {
        "shape": "ListAssistantAssociationsRequest"
      },
      "name": "ListAssistantAssociations",
      "output": {
        "shape": "ListAssistantAssociationsResponse"
      }
    },
    "ListAssistants": {
      "documentation": "<p>Lists information about assistants.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/assistants",
        "responseCode": 200
      },
      "input": {
        "shape": "ListAssistantsRequest"
      },
      "name": "ListAssistants",
      "output": {
        "shape": "ListAssistantsResponse"
      }
    },
    "ListContents": {
      "documentation": "<p>Lists the content.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/knowledgeBases/{knowledgeBaseId}/contents",
        "responseCode": 200
      },
      "input": {
        "shape": "ListContentsRequest"
      },
      "name": "ListContents",
      "output": {
        "shape": "ListContentsResponse"
      }
    },
    "ListKnowledgeBases": {
      "documentation": "<p>Lists the knowledge bases.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/knowledgeBases",
        "responseCode": 200
      },
      "input": {
        "shape": "ListKnowledgeBasesRequest"
      },
      "name": "ListKnowledgeBases",
      "output": {
        "shape": "ListKnowledgeBasesResponse"
      }
    },
    "ListTagsForResource": {
      "documentation": "<p>Lists the tags for the specified resource.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/tags/{resourceArn}",
        "responseCode": 200
      },
      "input": {
        "shape": "ListTagsForResourceRequest"
      },
      "name": "ListTagsForResource",
      "output": {
        "shape": "ListTagsForResourceResponse"
      }
    },
    "NotifyRecommendationsReceived": {
      "documentation": "<p>Removes the specified recommendations from the specified assistant's queue of newly available recommendations. You can use this API in conjunction with <a href=\"https://docs.aws.amazon.com/wisdom/latest/APIReference/API_GetRecommendations.html\">GetRecommendations</a> and a <code>waitTimeSeconds</code> input for long-polling behavior and avoiding duplicate recommendations.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/assistants/{assistantId}/sessions/{sessionId}/recommendations/notify",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "NotifyRecommendationsReceivedRequest"
      },
      "name": "NotifyRecommendationsReceived",
      "output": {
        "shape": "NotifyRecommendationsReceivedResponse"
      }
    },
    "QueryAssistant": {
      "documentation": "<p>Performs a manual search against the specified assistant. To retrieve recommendations for an assistant, use <a href=\"https://docs.aws.amazon.com/wisdom/latest/APIReference/API_GetRecommendations.html\">GetRecommendations</a>. </p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/assistants/{assistantId}/query",
        "responseCode": 200
      },
      "input": {
        "shape": "QueryAssistantRequest"
      },
      "name": "QueryAssistant",
      "output": {
        "shape": "QueryAssistantResponse"
      }
    },
    "RemoveKnowledgeBaseTemplateUri": {
      "documentation": "<p>Removes a URI template from a knowledge base.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/knowledgeBases/{knowledgeBaseId}/templateUri",
        "responseCode": 204
      },
      "input": {
        "shape": "RemoveKnowledgeBaseTemplateUriRequest"
      },
      "name": "RemoveKnowledgeBaseTemplateUri",
      "output": {
        "shape": "RemoveKnowledgeBaseTemplateUriResponse"
      }
    },
    "SearchContent": {
      "documentation": "<p>Searches for content in a specified knowledge base. Can be used to get a specific content resource by its name.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/knowledgeBases/{knowledgeBaseId}/search",
        "responseCode": 200
      },
      "input": {
        "shape": "SearchContentRequest"
      },
      "name": "SearchContent",
      "output": {
        "shape": "SearchContentResponse"
      }
    },
    "SearchSessions": {
      "documentation": "<p>Searches for sessions.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/assistants/{assistantId}/searchSessions",
        "responseCode": 200
      },
      "input": {
        "shape": "SearchSessionsRequest"
      },
      "name": "SearchSessions",
      "output": {
        "shape": "SearchSessionsResponse"
      }
    },
    "StartContentUpload": {
      "documentation": "<p>Get a URL to upload content to a knowledge base. To upload content, first make a PUT request to the returned URL with your file, making sure to include the required headers. Then use <a href=\"https://docs.aws.amazon.com/wisdom/latest/APIReference/API_CreateContent.html\">CreateContent</a> to finalize the content creation process or <a href=\"https://docs.aws.amazon.com/wisdom/latest/APIReference/API_UpdateContent.html\">UpdateContent</a> to modify an existing resource. You can only upload content to a knowledge base of type CUSTOM.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/knowledgeBases/{knowledgeBaseId}/upload",
        "responseCode": 200
      },
      "input": {
        "shape": "StartContentUploadRequest"
      },
      "name": "StartContentUpload",
      "output": {
        "shape": "StartContentUploadResponse"
      }
    },
    "TagResource": {
      "documentation": "<p>Adds the specified tags to the specified resource.</p>",
      "errors": [
        {
          "shape": "TooManyTagsException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/tags/{resourceArn}",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "TagResourceRequest"
      },
      "name": "TagResource",
      "output": {
        "shape": "TagResourceResponse"
      }
    },
    "UntagResource": {
      "documentation": "<p>Removes the specified tags from the specified resource.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/tags/{resourceArn}",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "UntagResourceRequest"
      },
      "name": "UntagResource",
      "output": {
        "shape": "UntagResourceResponse"
      }
    },
    "UpdateContent": {
      "documentation": "<p>Updates information about the content.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "PreconditionFailedException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/knowledgeBases/{knowledgeBaseId}/contents/{contentId}",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateContentRequest"
      },
      "name": "UpdateContent",
      "output": {
        "shape": "UpdateContentResponse"
      }
    },
    "UpdateKnowledgeBaseTemplateUri": {
      "documentation": "<p>Updates the template URI of a knowledge base. This is only supported for knowledge bases of type EXTERNAL. Include a single variable in <code>${variable}</code> format; this interpolated by Wisdom using ingested content. For example, if you ingest a Salesforce article, it has an <code>Id</code> value, and you can set the template URI to <code>https://myInstanceName.lightning.force.com/lightning/r/Knowledge__kav/*${Id}*/view</code>. </p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/knowledgeBases/{knowledgeBaseId}/templateUri",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateKnowledgeBaseTemplateUriRequest"
      },
      "name": "UpdateKnowledgeBaseTemplateUri",
      "output": {
        "shape": "UpdateKnowledgeBaseTemplateUriResponse"
      }
    }
  },
  "shapes": {
    "AccessDeniedException": {
      "documentation": "<p>You do not have sufficient access to perform this action.</p>",
      "error": {
        "httpStatusCode": 403,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "AppIntegrationsConfiguration": {
      "documentation": "<p>Configuration information for Amazon AppIntegrations to automatically ingest content.</p>",
      "members": {
        "appIntegrationArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the AppIntegrations DataIntegration to use for ingesting content.</p>",
          "shape": "GenericArn"
        },
        "objectFields": {
          "documentation": "<p>The fields from the source that are made available to your agents in Wisdom. </p> <ul> <li> <p> For <a href=\"https://developer.salesforce.com/docs/atlas.en-us.knowledge_dev.meta/knowledge_dev/sforce_api_objects_knowledge__kav.htm\"> Salesforce</a>, you must include at least <code>Id</code>, <code>ArticleNumber</code>, <code>VersionNumber</code>, <code>Title</code>, <code>PublishStatus</code>, and <code>IsDeleted</code>. </p> </li> <li> <p>For <a href=\"https://developer.servicenow.com/dev.do#!/reference/api/rome/rest/knowledge-management-api\"> ServiceNow</a>, you must include at least <code>number</code>, <code>short_description</code>, <code>sys_mod_count</code>, <code>workflow_state</code>, and <code>active</code>. </p> </li> </ul> <p>Make sure to include additional fields. These fields are indexed and used to source recommendations. </p>",
          "shape": "ObjectFieldsList"
        }
      },
      "required": [
        "appIntegrationArn",
        "objectFields"
      ],
      "type": "structure"
    },
    "Arn": {
      "pattern": "^arn:[a-z-]*?:wisdom:[a-z0-9-]*?:[0-9]{12}:[a-z-]*?/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(?:/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})?$",
      "type": "string"
    },
    "AssistantAssociationData": {
      "documentation": "<p>Information about the assistant association.</p>",
      "members": {
        "assistantArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the Wisdom assistant.</p>",
          "shape": "Arn"
        },
        "assistantAssociationArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the assistant association.</p>",
          "shape": "Arn"
        },
        "assistantAssociationId": {
          "documentation": "<p>The identifier of the assistant association.</p>",
          "shape": "Uuid"
        },
        "assistantId": {
          "documentation": "<p>The identifier of the Wisdom assistant.</p>",
          "shape": "Uuid"
        },
        "associationData": {
          "documentation": "<p>A union type that currently has a single argument, the knowledge base ID.</p>",
          "shape": "AssistantAssociationOutputData"
        },
        "associationType": {
          "documentation": "<p>The type of association.</p>",
          "shape": "AssociationType"
        },
        "tags": {
          "documentation": "<p>The tags used to organize, track, or control access for this resource.</p>",
          "shape": "Tags"
        }
      },
      "required": [
        "assistantArn",
        "assistantAssociationArn",
        "assistantAssociationId",
        "assistantId",
        "associationData",
        "associationType"
      ],
      "type": "structure"
    },
    "AssistantAssociationInputData": {
      "documentation": "<p>The data that is input into Wisdom as a result of the assistant association.</p>",
      "members": {
        "knowledgeBaseId": {
          "documentation": "<p>The identifier of the knowledge base.</p>",
          "shape": "Uuid"
        }
      },
      "type": "structure",
      "union": true
    },
    "AssistantAssociationOutputData": {
      "documentation": "<p>The data that is output as a result of the assistant association.</p>",
      "members": {
        "knowledgeBaseAssociation": {
          "documentation": "<p>The knowledge base where output data is sent.</p>",
          "shape": "KnowledgeBaseAssociationData"
        }
      },
      "type": "structure",
      "union": true
    },
    "AssistantAssociationSummary": {
      "documentation": "<p>Summary information about the assistant association.</p>",
      "members": {
        "assistantArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the Wisdom assistant.</p>",
          "shape": "Arn"
        },
        "assistantAssociationArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the assistant association.</p>",
          "shape": "Arn"
        },
        "assistantAssociationId": {
          "documentation": "<p>The identifier of the assistant association.</p>",
          "shape": "Uuid"
        },
        "assistantId": {
          "documentation": "<p>The identifier of the Wisdom assistant.</p>",
          "shape": "Uuid"
        },
        "associationData": {
          "documentation": "<p>The association data.</p>",
          "shape": "AssistantAssociationOutputData"
        },
        "associationType": {
          "documentation": "<p>The type of association.</p>",
          "shape": "AssociationType"
        },
        "tags": {
          "documentation": "<p>The tags used to organize, track, or control access for this resource.</p>",
          "shape": "Tags"
        }
      },
      "required": [
        "assistantArn",
        "assistantAssociationArn",
        "assistantAssociationId",
        "assistantId",
        "associationData",
        "associationType"
      ],
      "type": "structure"
    },
    "AssistantAssociationSummaryList": {
      "member": {
        "shape": "AssistantAssociationSummary"
      },
      "type": "list"
    },
    "AssistantData": {
      "documentation": "<p>The assistant data.</p>",
      "members": {
        "assistantArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the Wisdom assistant.</p>",
          "shape": "Arn"
        },
        "assistantId": {
          "documentation": "<p>The identifier of the Wisdom assistant.</p>",
          "shape": "Uuid"
        },
        "description": {
          "documentation": "<p>The description.</p>",
          "shape": "Description"
        },
        "name": {
          "documentation": "<p>The name.</p>",
          "shape": "Name"
        },
        "serverSideEncryptionConfiguration": {
          "documentation": "<p>The KMS key used for encryption.</p>",
          "shape": "ServerSideEncryptionConfiguration"
        },
        "status": {
          "documentation": "<p>The status of the assistant.</p>",
          "shape": "AssistantStatus"
        },
        "tags": {
          "documentation": "<p>The tags used to organize, track, or control access for this resource.</p>",
          "shape": "Tags"
        },
        "type": {
          "documentation": "<p>The type of assistant.</p>",
          "shape": "AssistantType"
        }
      },
      "required": [
        "assistantArn",
        "assistantId",
        "name",
        "status",
        "type"
      ],
      "type": "structure"
    },
    "AssistantList": {
      "member": {
        "shape": "AssistantSummary"
      },
      "type": "list"
    },
    "AssistantStatus": {
      "enum": [
        "CREATE_IN_PROGRESS",
        "CREATE_FAILED",
        "ACTIVE",
        "DELETE_IN_PROGRESS",
        "DELETE_FAILED",
        "DELETED"
      ],
      "type": "string"
    },
    "AssistantSummary": {
      "documentation": "<p>Summary information about the assistant.</p>",
      "members": {
        "assistantArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the Wisdom assistant.</p>",
          "shape": "Arn"
        },
        "assistantId": {
          "documentation": "<p>The identifier of the Wisdom assistant.</p>",
          "shape": "Uuid"
        },
        "description": {
          "documentation": "<p>The description of the assistant.</p>",
          "shape": "Description"
        },
        "name": {
          "documentation": "<p>The name of the assistant.</p>",
          "shape": "Name"
        },
        "serverSideEncryptionConfiguration": {
          "documentation": "<p>The KMS key used for encryption.</p>",
          "shape": "ServerSideEncryptionConfiguration"
        },
        "status": {
          "documentation": "<p>The status of the assistant.</p>",
          "shape": "AssistantStatus"
        },
        "tags": {
          "documentation": "<p>The tags used to organize, track, or control access for this resource.</p>",
          "shape": "Tags"
        },
        "type": {
          "documentation": "<p>The type of the assistant.</p>",
          "shape": "AssistantType"
        }
      },
      "required": [
        "assistantArn",
        "assistantId",
        "name",
        "status",
        "type"
      ],
      "type": "structure"
    },
    "AssistantType": {
      "enum": [
        "AGENT"
      ],
      "type": "string"
    },
    "AssociationType": {
      "enum": [
        "KNOWLEDGE_BASE"
      ],
      "type": "string"
    },
    "Boolean": {
      "box": true,
      "type": "boolean"
    },
    "ClientToken": {
      "max": 4096,
      "min": 1,
      "type": "string"
    },
    "ConflictException": {
      "documentation": "<p>The request could not be processed because of conflict in the current state of the resource. For example, if you're using a <code>Create</code> API (such as <code>CreateAssistant</code>) that accepts name, a conflicting resource (usually with the same name) is being created or mutated.</p>",
      "error": {
        "httpStatusCode": 409,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ContentData": {
      "documentation": "<p>Information about the content.</p>",
      "members": {
        "contentArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the content.</p>",
          "shape": "Arn"
        },
        "contentId": {
          "documentation": "<p>The identifier of the content.</p>",
          "shape": "Uuid"
        },
        "contentType": {
          "documentation": "<p>The media type of the content.</p>",
          "shape": "ContentType"
        },
        "knowledgeBaseArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the knowledge base.</p>",
          "shape": "Arn"
        },
        "knowledgeBaseId": {
          "documentation": "<p>The identifier of the knowledge base.</p>",
          "shape": "Uuid"
        },
        "linkOutUri": {
          "documentation": "<p>The URI of the content.</p>",
          "shape": "Uri"
        },
        "metadata": {
          "documentation": "<p>A key/value map to store attributes without affecting tagging or recommendations. For example, when synchronizing data between an external system and Wisdom, you can store an external version identifier as metadata to utilize for determining drift.</p>",
          "shape": "ContentMetadata"
        },
        "name": {
          "documentation": "<p>The name of the content.</p>",
          "shape": "Name"
        },
        "revisionId": {
          "documentation": "<p>The identifier of the content revision.</p>",
          "shape": "NonEmptyString"
        },
        "status": {
          "documentation": "<p>The status of the content.</p>",
          "shape": "ContentStatus"
        },
        "tags": {
          "documentation": "<p>The tags used to organize, track, or control access for this resource.</p>",
          "shape": "Tags"
        },
        "title": {
          "documentation": "<p>The title of the content.</p>",
          "shape": "ContentTitle"
        },
        "url": {
          "documentation": "<p>The URL of the content.</p>",
          "shape": "Url"
        },
        "urlExpiry": {
          "documentation": "<p>The expiration time of the URL as an epoch timestamp.</p>",
          "shape": "SyntheticTimestamp_epoch_seconds"
        }
      },
      "required": [
        "contentArn",
        "contentId",
        "contentType",
        "knowledgeBaseArn",
        "knowledgeBaseId",
        "metadata",
        "name",
        "revisionId",
        "status",
        "title",
        "url",
        "urlExpiry"
      ],
      "type": "structure"
    },
    "ContentMetadata": {
      "key": {
        "shape": "NonEmptyString"
      },
      "max": 10,
      "min": 0,
      "type": "map",
      "value": {
        "shape": "NonEmptyString"
      }
    },
    "ContentReference": {
      "documentation": "<p>Reference information about the content.</p>",
      "members": {
        "contentArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the content.</p>",
          "shape": "Arn"
        },
        "contentId": {
          "documentation": "<p>The identifier of the content.</p>",
          "shape": "Uuid"
        },
        "knowledgeBaseArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the knowledge base.</p>",
          "shape": "Arn"
        },
        "knowledgeBaseId": {
          "documentation": "<p>The identifier of the knowledge base.</p>",
          "shape": "Uuid"
        }
      },
      "type": "structure"
    },
    "ContentStatus": {
      "enum": [
        "CREATE_IN_PROGRESS",
        "CREATE_FAILED",
        "ACTIVE",
        "DELETE_IN_PROGRESS",
        "DELETE_FAILED",
        "DELETED",
        "UPDATE_FAILED"
      ],
      "type": "string"
    },
    "ContentSummary": {
      "documentation": "<p>Summary information about the content.</p>",
      "members": {
        "contentArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the content.</p>",
          "shape": "Arn"
        },
        "contentId": {
          "documentation": "<p>The identifier of the content.</p>",
          "shape": "Uuid"
        },
        "contentType": {
          "documentation": "<p>The media type of the content.</p>",
          "shape": "ContentType"
        },
        "knowledgeBaseArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the knowledge base.</p>",
          "shape": "Arn"
        },
        "knowledgeBaseId": {
          "documentation": "<p>The identifier of the knowledge base.</p>",
          "shape": "Uuid"
        },
        "metadata": {
          "documentation": "<p>A key/value map to store attributes without affecting tagging or recommendations. For example, when synchronizing data between an external system and Wisdom, you can store an external version identifier as metadata to utilize for determining drift.</p>",
          "shape": "ContentMetadata"
        },
        "name": {
          "documentation": "<p>The name of the content.</p>",
          "shape": "Name"
        },
        "revisionId": {
          "documentation": "<p>The identifier of the revision of the content.</p>",
          "shape": "NonEmptyString"
        },
        "status": {
          "documentation": "<p>The status of the content.</p>",
          "shape": "ContentStatus"
        },
        "tags": {
          "documentation": "<p>The tags used to organize, track, or control access for this resource.</p>",
          "shape": "Tags"
        },
        "title": {
          "documentation": "<p>The title of the content.</p>",
          "shape": "ContentTitle"
        }
      },
      "required": [
        "contentArn",
        "contentId",
        "contentType",
        "knowledgeBaseArn",
        "knowledgeBaseId",
        "metadata",
        "name",
        "revisionId",
        "status",
        "title"
      ],
      "type": "structure"
    },
    "ContentSummaryList": {
      "member": {
        "shape": "ContentSummary"
      },
      "type": "list"
    },
    "ContentTitle": {
      "max": 255,
      "min": 1,
      "type": "string"
    },
    "ContentType": {
      "pattern": "^(text/(plain|html))|(application/x\\.wisdom-json;source=(salesforce|servicenow|zendesk))$",
      "type": "string"
    },
    "CreateAssistantAssociationRequest": {
      "members": {
        "assistantId": {
          "documentation": "<p>The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>",
          "location": "uri",
          "locationName": "assistantId",
          "shape": "UuidOrArn"
        },
        "association": {
          "documentation": "<p>The identifier of the associated resource.</p>",
          "shape": "AssistantAssociationInputData"
        },
        "associationType": {
          "documentation": "<p>The type of association.</p>",
          "shape": "AssociationType"
        },
        "clientToken": {
          "documentation": "<p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>",
          "idempotencyToken": true,
          "shape": "ClientToken"
        },
        "tags": {
          "documentation": "<p>The tags used to organize, track, or control access for this resource.</p>",
          "shape": "Tags"
        }
      },
      "required": [
        "assistantId",
        "association",
        "associationType"
      ],
      "type": "structure"
    },
    "CreateAssistantAssociationResponse": {
      "members": {
        "assistantAssociation": {
          "documentation": "<p>The assistant association.</p>",
          "shape": "AssistantAssociationData"
        }
      },
      "type": "structure"
    },
    "CreateAssistantRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>",
          "idempotencyToken": true,
          "shape": "ClientToken"
        },
        "description": {
          "documentation": "<p>The description of the assistant.</p>",
          "shape": "Description"
        },
        "name": {
          "documentation": "<p>The name of the assistant.</p>",
          "shape": "Name"
        },
        "serverSideEncryptionConfiguration": {
          "documentation": "<p>The KMS key used for encryption.</p>",
          "shape": "ServerSideEncryptionConfiguration"
        },
        "tags": {
          "documentation": "<p>The tags used to organize, track, or control access for this resource.</p>",
          "shape": "Tags"
        },
        "type": {
          "documentation": "<p>The type of assistant.</p>",
          "shape": "AssistantType"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "structure"
    },
    "CreateAssistantResponse": {
      "members": {
        "assistant": {
          "documentation": "<p>Information about the assistant.</p>",
          "shape": "AssistantData"
        }
      },
      "type": "structure"
    },
    "CreateContentRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>",
          "idempotencyToken": true,
          "shape": "NonEmptyString"
        },
        "knowledgeBaseId": {
          "documentation": "<p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>",
          "location": "uri",
          "locationName": "knowledgeBaseId",
          "shape": "UuidOrArn"
        },
        "metadata": {
          "documentation": "<p>A key/value map to store attributes without affecting tagging or recommendations. For example, when synchronizing data between an external system and Wisdom, you can store an external version identifier as metadata to utilize for determining drift.</p>",
          "shape": "ContentMetadata"
        },
        "name": {
          "documentation": "<p>The name of the content. Each piece of content in a knowledge base must have a unique name. You can retrieve a piece of content using only its knowledge base and its name with the <a href=\"https://docs.aws.amazon.com/wisdom/latest/APIReference/API_SearchContent.html\">SearchContent</a> API.</p>",
          "shape": "Name"
        },
        "overrideLinkOutUri": {
          "documentation": "<p>The URI you want to use for the article. If the knowledge base has a templateUri, setting this argument overrides it for this piece of content.</p>",
          "shape": "Uri"
        },
        "tags": {
          "documentation": "<p>The tags used to organize, track, or control access for this resource.</p>",
          "shape": "Tags"
        },
        "title": {
          "documentation": "<p>The title of the content. If not set, the title is equal to the name.</p>",
          "shape": "ContentTitle"
        },
        "uploadId": {
          "documentation": "<p>A pointer to the uploaded asset. This value is returned by <a href=\"https://docs.aws.amazon.com/wisdom/latest/APIReference/API_StartContentUpload.html\">StartContentUpload</a>.</p>",
          "shape": "NonEmptyString"
        }
      },
      "required": [
        "knowledgeBaseId",
        "name",
        "uploadId"
      ],
      "type": "structure"
    },
    "CreateContentResponse": {
      "members": {
        "content": {
          "documentation": "<p>The content.</p>",
          "shape": "ContentData"
        }
      },
      "type": "structure"
    },
    "CreateKnowledgeBaseRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>",
          "idempotencyToken": true,
          "shape": "NonEmptyString"
        },
        "description": {
          "documentation": "<p>The description.</p>",
          "shape": "Description"
        },
        "knowledgeBaseType": {
          "documentation": "<p>The type of knowledge base. Only CUSTOM knowledge bases allow you to upload your own content. EXTERNAL knowledge bases support integrations with third-party systems whose content is synchronized automatically. </p>",
          "shape": "KnowledgeBaseType"
        },
        "name": {
          "documentation": "<p>The name of the knowledge base.</p>",
          "shape": "Name"
        },
        "renderingConfiguration": {
          "documentation": "<p>Information about how to render the content.</p>",
          "shape": "RenderingConfiguration"
        },
        "serverSideEncryptionConfiguration": {
          "documentation": "<p>The KMS key used for encryption.</p>",
          "shape": "ServerSideEncryptionConfiguration"
        },
        "sourceConfiguration": {
          "documentation": "<p>The source of the knowledge base content. Only set this argument for EXTERNAL knowledge bases.</p>",
          "shape": "SourceConfiguration"
        },
        "tags": {
          "documentation": "<p>The tags used to organize, track, or control access for this resource.</p>",
          "shape": "Tags"
        }
      },
      "required": [
        "knowledgeBaseType",
        "name"
      ],
      "type": "structure"
    },
    "CreateKnowledgeBaseResponse": {
      "members": {
        "knowledgeBase": {
          "documentation": "<p>The knowledge base.</p>",
          "shape": "KnowledgeBaseData"
        }
      },
      "type": "structure"
    },
    "CreateSessionRequest": {
      "members": {
        "assistantId": {
          "documentation": "<p>The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>",
          "location": "uri",
          "locationName": "assistantId",
          "shape": "UuidOrArn"
        },
        "clientToken": {
          "documentation": "<p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>",
          "idempotencyToken": true,
          "shape": "ClientToken"
        },
        "description": {
          "documentation": "<p>The description.</p>",
          "shape": "Description"
        },
        "name": {
          "documentation": "<p>The name of the session.</p>",
          "shape": "Name"
        },
        "tags": {
          "documentation": "<p>The tags used to organize, track, or control access for this resource.</p>",
          "shape": "Tags"
        }
      },
      "required": [
        "assistantId",
        "name"
      ],
      "type": "structure"
    },
    "CreateSessionResponse": {
      "members": {
        "session": {
          "documentation": "<p>The session.</p>",
          "shape": "SessionData"
        }
      },
      "type": "structure"
    },
    "DeleteAssistantAssociationRequest": {
      "members": {
        "assistantAssociationId": {
          "documentation": "<p>The identifier of the assistant association. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>",
          "location": "uri",
          "locationName": "assistantAssociationId",
          "shape": "UuidOrArn"
        },
        "assistantId": {
          "documentation": "<p>The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>",
          "location": "uri",
          "locationName": "assistantId",
          "shape": "UuidOrArn"
        }
      },
      "required": [
        "assistantAssociationId",
        "assistantId"
      ],
      "type": "structure"
    },
    "DeleteAssistantAssociationResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteAssistantRequest": {
      "members": {
        "assistantId": {
          "documentation": "<p>The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>",
          "location": "uri",
          "locationName": "assistantId",
          "shape": "UuidOrArn"
        }
      },
      "required": [
        "assistantId"
      ],
      "type": "structure"
    },
    "DeleteAssistantResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteContentRequest": {
      "members": {
        "contentId": {
          "documentation": "<p>The identifier of the content. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>",
          "location": "uri",
          "locationName": "contentId",
          "shape": "UuidOrArn"
        },
        "knowledgeBaseId": {
          "documentation": "<p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>",
          "location": "uri",
          "locationName": "knowledgeBaseId",
          "shape": "UuidOrArn"
        }
      },
      "required": [
        "contentId",
        "knowledgeBaseId"
      ],
      "type": "structure"
    },
    "DeleteContentResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteKnowledgeBaseRequest": {
      "members": {
        "knowledgeBaseId": {
          "documentation": "<p>The knowledge base to delete content from. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>",
          "location": "uri",
          "locationName": "knowledgeBaseId",
          "shape": "UuidOrArn"
        }
      },
      "required": [
        "knowledgeBaseId"
      ],
      "type": "structure"
    },
    "DeleteKnowledgeBaseResponse": {
      "members": {},
      "type": "structure"
    },
    "Description": {
      "max": 255,
      "min": 1,
      "pattern": "^[a-zA-Z0-9\\s_.,-]+",
      "type": "string"
    },
    "Document": {
      "documentation": "<p>The document.</p>",
      "members": {
        "contentReference": {
          "documentation": "<p>A reference to the content resource.</p>",
          "shape": "ContentReference"
        },
        "excerpt": {
          "documentation": "<p>The excerpt from the document.</p>",
          "shape": "DocumentText"
        },
        "title": {
          "documentation": "<p>The title of the document.</p>",
          "shape": "DocumentText"
        }
      },
      "required": [
        "contentReference"
      ],
      "type": "structure"
    },
    "DocumentText": {
      "documentation": "<p>The text of the document.</p>",
      "members": {
        "highlights": {
          "documentation": "<p>Highlights in the document text.</p>",
          "shape": "Highlights"
        },
        "text": {
          "documentation": "<p>Text in the document.</p>",
          "shape": "SensitiveString"
        }
      },
      "type": "structure"
    },
    "Filter": {
      "documentation": "<p>A search filter.</p>",
      "members": {
        "field": {
          "documentation": "<p>The field on which to filter.</p>",
          "shape": "FilterField"
        },
        "operator": {
          "documentation": "<p>The operator to use for comparing the field\u2019s value with the provided value.</p>",
          "shape": "FilterOperator"
        },
        "value": {
          "documentation": "<p>The desired field value on which to filter.</p>",
          "shape": "NonEmptyString"
        }
      },
      "required": [
        "field",
        "operator",
        "value"
      ],
      "type": "structure"
    },
    "FilterField": {
      "enum": [
        "NAME"
      ],
      "type": "string"
    },
    "FilterList": {
      "member": {
        "shape": "Filter"
      },
      "type": "list"
    },
    "FilterOperator": {
      "enum": [
        "EQUALS"
      ],
      "type": "string"
    },
    "GenericArn": {
      "max": 2048,
      "min": 1,
      "pattern": "^arn:[a-z-]+?:[a-z-]+?:[a-z0-9-]*?:([0-9]{12})?:[a-zA-Z0-9-:/]+$",
      "type": "string"
    },
    "GetAssistantAssociationRequest": {
      "members": {
        "assistantAssociationId": {
          "documentation": "<p>The identifier of the assistant association. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>",
          "location": "uri",
          "locationName": "assistantAssociationId",
          "shape": "UuidOrArn"
        },
        "assistantId": {
          "documentation": "<p>The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>",
          "location": "uri",
          "locationName": "assistantId",
          "shape": "UuidOrArn"
        }
      },
      "required": [
        "assistantAssociationId",
        "assistantId"
      ],
      "type": "structure"
    },
    "GetAssistantAssociationResponse": {
      "members": {
        "assistantAssociation": {
          "documentation": "<p>The assistant association.</p>",
          "shape": "AssistantAssociationData"
        }
      },
      "type": "structure"
    },
    "GetAssistantRequest": {
      "members": {
        "assistantId": {
          "documentation": "<p>The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>",
          "location": "uri",
          "locationName": "assistantId",
          "shape": "UuidOrArn"
        }
      },
      "required": [
        "assistantId"
      ],
      "type": "structure"
    },
    "GetAssistantResponse": {
      "members": {
        "assistant": {
          "documentation": "<p>Information about the assistant.</p>",
          "shape": "AssistantData"
        }
      },
      "type": "structure"
    },
    "GetContentRequest": {
      "members": {
        "contentId": {
          "documentation": "<p>The identifier of the content. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>",
          "location": "uri",
          "locationName": "contentId",
          "shape": "UuidOrArn"
        },
        "knowledgeBaseId": {
          "documentation": "<p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>",
          "location": "uri",
          "locationName": "knowledgeBaseId",
          "shape": "UuidOrArn"
        }
      },
      "required": [
        "contentId",
        "knowledgeBaseId"
      ],
      "type": "structure"
    },
    "GetContentResponse": {
      "members": {
        "content": {
          "documentation": "<p>The content.</p>",
          "shape": "ContentData"
        }
      },
      "type": "structure"
    },
    "GetContentSummaryRequest": {
      "members": {
        "contentId": {
          "documentation": "<p>The identifier of the content. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>",
          "location": "uri",
          "locationName": "contentId",
          "shape": "UuidOrArn"
        },
        "knowledgeBaseId": {
          "documentation": "<p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>",
          "location": "uri",
          "locationName": "knowledgeBaseId",
          "shape": "UuidOrArn"
        }
      },
      "required": [
        "contentId",
        "knowledgeBaseId"
      ],
      "type": "structure"
    },
    "GetContentSummaryResponse": {
      "members": {
        "contentSummary": {
          "documentation": "<p>The content summary.</p>",
          "shape": "ContentSummary"
        }
      },
      "type": "structure"
    },
    "GetKnowledgeBaseRequest": {
      "members": {
        "knowledgeBaseId": {
          "documentation": "<p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>",
          "location": "uri",
          "locationName": "knowledgeBaseId",
          "shape": "UuidOrArn"
        }
      },
      "required": [
        "knowledgeBaseId"
      ],
      "type": "structure"
    },
    "GetKnowledgeBaseResponse": {
      "members": {
        "knowledgeBase": {
          "documentation": "<p>The knowledge base.</p>",
          "shape": "KnowledgeBaseData"
        }
      },
      "type": "structure"
    },
    "GetRecommendationsRequest": {
      "members": {
        "assistantId": {
          "documentation": "<p>The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>",
          "location": "uri",
          "locationName": "assistantId",
          "shape": "UuidOrArn"
        },
        "maxResults": {
          "documentation": "<p>The maximum number of results to return per page.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "sessionId": {
          "documentation": "<p>The identifier of the session. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>",
          "location": "uri",
          "locationName": "sessionId",
          "shape": "UuidOrArn"
        },
        "waitTimeSeconds": {
          "documentation": "<p>The duration (in seconds) for which the call waits for a recommendation to be made available before returning. If a recommendation is available, the call returns sooner than <code>WaitTimeSeconds</code>. If no messages are available and the wait time expires, the call returns successfully with an empty list.</p>",
          "location": "querystring",
          "locationName": "waitTimeSeconds",
          "shape": "WaitTimeSeconds"
        }
      },
      "required": [
        "assistantId",
        "sessionId"
      ],
      "type": "structure"
    },
    "GetRecommendationsResponse": {
      "members": {
        "recommendations": {
          "documentation": "<p>The recommendations.</p>",
          "shape": "RecommendationList"
        },
        "triggers": {
          "documentation": "<p>The triggers corresponding to recommendations.</p>",
          "shape": "RecommendationTriggerList"
        }
      },
      "required": [
        "recommendations"
      ],
      "type": "structure"
    },
    "GetSessionRequest": {
      "members": {
        "assistantId": {
          "documentation": "<p>The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>",
          "location": "uri",
          "locationName": "assistantId",
          "shape": "UuidOrArn"
        },
        "sessionId": {
          "documentation": "<p>The identifier of the session. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>",
          "location": "uri",
          "locationName": "sessionId",
          "shape": "UuidOrArn"
        }
      },
      "required": [
        "assistantId",
        "sessionId"
      ],
      "type": "structure"
    },
    "GetSessionResponse": {
      "members": {
        "session": {
          "documentation": "<p>The session.</p>",
          "shape": "SessionData"
        }
      },
      "type": "structure"
    },
    "Headers": {
      "key": {
        "shape": "NonEmptyString"
      },
      "type": "map",
      "value": {
        "shape": "NonEmptyString"
      }
    },
    "Highlight": {
      "documentation": "<p>Offset specification to describe highlighting of document excerpts for rendering search results and recommendations.</p>",
      "members": {
        "beginOffsetInclusive": {
          "documentation": "<p>The offset for the start of the highlight.</p>",
          "shape": "HighlightOffset"
        },
        "endOffsetExclusive": {
          "documentation": "<p>The offset for the end of the highlight.</p>",
          "shape": "HighlightOffset"
        }
      },
      "type": "structure"
    },
    "HighlightOffset": {
      "type": "integer"
    },
    "Highlights": {
      "member": {
        "shape": "Highlight"
      },
      "type": "list"
    },
    "KnowledgeBaseAssociationData": {
      "documentation": "<p>Association information about the knowledge base.</p>",
      "members": {
        "knowledgeBaseArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the knowledge base.</p>",
          "shape": "Arn"
        },
        "knowledgeBaseId": {
          "documentation": "<p>The identifier of the knowledge base.</p>",
          "shape": "Uuid"
        }
      },
      "type": "structure"
    },
    "KnowledgeBaseData": {
      "documentation": "<p>Information about the knowledge base.</p>",
      "members": {
        "description": {
          "documentation": "<p>The description.</p>",
          "shape": "Description"
        },
        "knowledgeBaseArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the knowledge base.</p>",
          "shape": "Arn"
        },
        "knowledgeBaseId": {
          "documentation": "<p>The identifier of the knowledge base.</p>",
          "shape": "Uuid"
        },
        "knowledgeBaseType": {
          "documentation": "<p>The type of knowledge base.</p>",
          "shape": "KnowledgeBaseType"
        },
        "lastContentModificationTime": {
          "documentation": "<p>An epoch timestamp indicating the most recent content modification inside the knowledge base. If no content exists in a knowledge base, this value is unset.</p>",
          "shape": "SyntheticTimestamp_epoch_seconds"
        },
        "name": {
          "documentation": "<p>The name of the knowledge base.</p>",
          "shape": "Name"
        },
        "renderingConfiguration": {
          "documentation": "<p>Information about how to render the content.</p>",
          "shape": "RenderingConfiguration"
        },
        "serverSideEncryptionConfiguration": {
          "documentation": "<p>The KMS key used for encryption.</p>",
          "shape": "ServerSideEncryptionConfiguration"
        },
        "sourceConfiguration": {
          "documentation": "<p>Source configuration information about the knowledge base.</p>",
          "shape": "SourceConfiguration"
        },
        "status": {
          "documentation": "<p>The status of the knowledge base.</p>",
          "shape": "KnowledgeBaseStatus"
        },
        "tags": {
          "documentation": "<p>The tags used to organize, track, or control access for this resource.</p>",
          "shape": "Tags"
        }
      },
      "required": [
        "knowledgeBaseArn",
        "knowledgeBaseId",
        "knowledgeBaseType",
        "name",
        "status"
      ],
      "type": "structure"
    },
    "KnowledgeBaseList": {
      "member": {
        "shape": "KnowledgeBaseSummary"
      },
      "type": "list"
    },
    "KnowledgeBaseStatus": {
      "enum": [
        "CREATE_IN_PROGRESS",
        "CREATE_FAILED",
        "ACTIVE",
        "DELETE_IN_PROGRESS",
        "DELETE_FAILED",
        "DELETED"
      ],
      "type": "string"
    },
    "KnowledgeBaseSummary": {
      "documentation": "<p>Summary information about the knowledge base.</p>",
      "members": {
        "description": {
          "documentation": "<p>The description of the knowledge base.</p>",
          "shape": "Description"
        },
        "knowledgeBaseArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the knowledge base.</p>",
          "shape": "Arn"
        },
        "knowledgeBaseId": {
          "documentation": "<p>The identifier of the knowledge base.</p>",
          "shape": "Uuid"
        },
        "knowledgeBaseType": {
          "documentation": "<p>The type of knowledge base.</p>",
          "shape": "KnowledgeBaseType"
        },
        "name": {
          "documentation": "<p>The name of the knowledge base.</p>",
          "shape": "Name"
        },
        "renderingConfiguration": {
          "documentation": "<p>Information about how to render the content.</p>",
          "shape": "RenderingConfiguration"
        },
        "serverSideEncryptionConfiguration": {
          "documentation": "<p>The KMS key used for encryption.</p>",
          "shape": "ServerSideEncryptionConfiguration"
        },
        "sourceConfiguration": {
          "documentation": "<p>Configuration information about the external data source.</p>",
          "shape": "SourceConfiguration"
        },
        "status": {
          "documentation": "<p>The status of the knowledge base summary.</p>",
          "shape": "KnowledgeBaseStatus"
        },
        "tags": {
          "documentation": "<p>The tags used to organize, track, or control access for this resource.</p>",
          "shape": "Tags"
        }
      },
      "required": [
        "knowledgeBaseArn",
        "knowledgeBaseId",
        "knowledgeBaseType",
        "name",
        "status"
      ],
      "type": "structure"
    },
    "KnowledgeBaseType": {
      "enum": [
        "EXTERNAL",
        "CUSTOM"
      ],
      "type": "string"
    },
    "ListAssistantAssociationsRequest": {
      "members": {
        "assistantId": {
          "documentation": "<p>The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>",
          "location": "uri",
          "locationName": "assistantId",
          "shape": "UuidOrArn"
        },
        "maxResults": {
          "documentation": "<p>The maximum number of results to return per page.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        }
      },
      "required": [
        "assistantId"
      ],
      "type": "structure"
    },
    "ListAssistantAssociationsResponse": {
      "members": {
        "assistantAssociationSummaries": {
          "documentation": "<p>Summary information about assistant associations.</p>",
          "shape": "AssistantAssociationSummaryList"
        },
        "nextToken": {
          "documentation": "<p>If there are additional results, this is the token for the next set of results.</p>",
          "shape": "NextToken"
        }
      },
      "required": [
        "assistantAssociationSummaries"
      ],
      "type": "structure"
    },
    "ListAssistantsRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p>The maximum number of results to return per page.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListAssistantsResponse": {
      "members": {
        "assistantSummaries": {
          "documentation": "<p>Information about the assistants.</p>",
          "shape": "AssistantList"
        },
        "nextToken": {
          "documentation": "<p>If there are additional results, this is the token for the next set of results.</p>",
          "shape": "NextToken"
        }
      },
      "required": [
        "assistantSummaries"
      ],
      "type": "structure"
    },
    "ListContentsRequest": {
      "members": {
        "knowledgeBaseId": {
          "documentation": "<p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>",
          "location": "uri",
          "locationName": "knowledgeBaseId",
          "shape": "UuidOrArn"
        },
        "maxResults": {
          "documentation": "<p>The maximum number of results to return per page.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        }
      },
      "required": [
        "knowledgeBaseId"
      ],
      "type": "structure"
    },
    "ListContentsResponse": {
      "members": {
        "contentSummaries": {
          "documentation": "<p>Information about the content.</p>",
          "shape": "ContentSummaryList"
        },
        "nextToken": {
          "documentation": "<p>If there are additional results, this is the token for the next set of results.</p>",
          "shape": "NextToken"
        }
      },
      "required": [
        "contentSummaries"
      ],
      "type": "structure"
    },
    "ListKnowledgeBasesRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p>The maximum number of results to return per page.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NonEmptyString"
        }
      },
      "type": "structure"
    },
    "ListKnowledgeBasesResponse": {
      "members": {
        "knowledgeBaseSummaries": {
          "documentation": "<p>Information about the knowledge bases.</p>",
          "shape": "KnowledgeBaseList"
        },
        "nextToken": {
          "documentation": "<p>If there are additional results, this is the token for the next set of results.</p>",
          "shape": "NonEmptyString"
        }
      },
      "required": [
        "knowledgeBaseSummaries"
      ],
      "type": "structure"
    },
    "ListTagsForResourceRequest": {
      "members": {
        "resourceArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the resource.</p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "Arn"
        }
      },
      "required": [
        "resourceArn"
      ],
      "type": "structure"
    },
    "ListTagsForResourceResponse": {
      "members": {
        "tags": {
          "documentation": "<p>The tags used to organize, track, or control access for this resource.</p>",
          "shape": "Tags"
        }
      },
      "type": "structure"
    },
    "MaxResults": {
      "box": true,
      "max": 100,
      "min": 1,
      "type": "integer"
    },
    "Name": {
      "max": 255,
      "min": 1,
      "pattern": "^[a-zA-Z0-9\\s_.,-]+",
      "type": "string"
    },
    "NextToken": {
      "max": 2048,
      "min": 1,
      "type": "string"
    },
    "NonEmptyString": {
      "max": 4096,
      "min": 1,
      "type": "string"
    },
    "NotifyRecommendationsReceivedError": {
      "documentation": "<p>An error occurred when creating a recommendation.</p>",
      "members": {
        "message": {
          "documentation": "<p>A recommendation is causing an error.</p>",
          "shape": "NotifyRecommendationsReceivedErrorMessage"
        },
        "recommendationId": {
          "documentation": "<p>The identifier of the recommendation that is in error.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "NotifyRecommendationsReceivedErrorList": {
      "member": {
        "shape": "NotifyRecommendationsReceivedError"
      },
      "type": "list"
    },
    "NotifyRecommendationsReceivedErrorMessage": {
      "type": "string"
    },
    "NotifyRecommendationsReceivedRequest": {
      "members": {
        "assistantId": {
          "documentation": "<p>The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>",
          "location": "uri",
          "locationName": "assistantId",
          "shape": "UuidOrArn"
        },
        "recommendationIds": {
          "documentation": "<p>The identifiers of the recommendations.</p>",
          "shape": "RecommendationIdList"
        },
        "sessionId": {
          "documentation": "<p>The identifier of the session. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>",
          "location": "uri",
          "locationName": "sessionId",
          "shape": "UuidOrArn"
        }
      },
      "required": [
        "assistantId",
        "recommendationIds",
        "sessionId"
      ],
      "type": "structure"
    },
    "NotifyRecommendationsReceivedResponse": {
      "members": {
        "errors": {
          "documentation": "<p>The identifiers of recommendations that are causing errors.</p>",
          "shape": "NotifyRecommendationsReceivedErrorList"
        },
        "recommendationIds": {
          "documentation": "<p>The identifiers of the recommendations.</p>",
          "shape": "RecommendationIdList"
        }
      },
      "type": "structure"
    },
    "ObjectFieldsList": {
      "max": 100,
      "member": {
        "shape": "NonEmptyString"
      },
      "min": 1,
      "type": "list"
    },
    "PreconditionFailedException": {
      "documentation": "<p>The provided <code>revisionId</code> does not match, indicating the content has been modified since it was last read.</p>",
      "error": {
        "httpStatusCode": 412,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "QueryAssistantRequest": {
      "members": {
        "assistantId": {
          "documentation": "<p>The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>",
          "location": "uri",
          "locationName": "assistantId",
          "shape": "UuidOrArn"
        },
        "maxResults": {
          "documentation": "<p>The maximum number of results to return per page.</p>",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>",
          "shape": "NextToken"
        },
        "queryText": {
          "documentation": "<p>The text to search for.</p>",
          "shape": "QueryText"
        }
      },
      "required": [
        "assistantId",
        "queryText"
      ],
      "type": "structure"
    },
    "QueryAssistantResponse": {
      "members": {
        "nextToken": {
          "documentation": "<p>If there are additional results, this is the token for the next set of results.</p>",
          "shape": "NextToken"
        },
        "results": {
          "documentation": "<p>The results of the query.</p>",
          "shape": "QueryResultsList"
        }
      },
      "required": [
        "results"
      ],
      "type": "structure"
    },
    "QueryRecommendationTriggerData": {
      "documentation": "<p>Data associated with the QUERY RecommendationTriggerType.</p>",
      "members": {
        "text": {
          "documentation": "<p>The text associated with the recommendation trigger.</p>",
          "shape": "QueryText"
        }
      },
      "type": "structure"
    },
    "QueryResultsList": {
      "member": {
        "shape": "ResultData"
      },
      "type": "list"
    },
    "QueryText": {
      "sensitive": true,
      "type": "string"
    },
    "RecommendationData": {
      "documentation": "<p>Information about the recommendation.</p>",
      "members": {
        "document": {
          "documentation": "<p>The recommended document.</p>",
          "shape": "Document"
        },
        "recommendationId": {
          "documentation": "<p>The identifier of the recommendation.</p>",
          "shape": "String"
        },
        "relevanceLevel": {
          "documentation": "<p>The relevance level of the recommendation.</p>",
          "shape": "RelevanceLevel"
        },
        "relevanceScore": {
          "documentation": "<p>The relevance score of the recommendation.</p>",
          "shape": "RelevanceScore"
        },
        "type": {
          "documentation": "<p>The type of recommendation.</p>",
          "shape": "RecommendationType"
        }
      },
      "required": [
        "document",
        "recommendationId"
      ],
      "type": "structure"
    },
    "RecommendationIdList": {
      "member": {
        "shape": "String"
      },
      "type": "list"
    },
    "RecommendationList": {
      "member": {
        "shape": "RecommendationData"
      },
      "type": "list"
    },
    "RecommendationSourceType": {
      "enum": [
        "ISSUE_DETECTION",
        "RULE_EVALUATION",
        "OTHER"
      ],
      "type": "string"
    },
    "RecommendationTrigger": {
      "documentation": "<p>A recommendation trigger provides context on the event that produced the referenced recommendations. Recommendations are only referenced in <code>recommendationIds</code> by a single RecommendationTrigger.</p>",
      "members": {
        "data": {
          "documentation": "<p>A union type containing information related to the trigger.</p>",
          "shape": "RecommendationTriggerData"
        },
        "id": {
          "documentation": "<p>The identifier of the recommendation trigger.</p>",
          "shape": "Uuid"
        },
        "recommendationIds": {
          "documentation": "<p>The identifiers of the recommendations.</p>",
          "shape": "RecommendationIdList"
        },
        "source": {
          "documentation": "<p>The source of the recommendation trigger.</p> <ul> <li> <p>ISSUE_DETECTION: The corresponding recommendations were triggered by a Contact Lens issue.</p> </li> <li> <p>RULE_EVALUATION: The corresponding recommendations were triggered by a Contact Lens rule.</p> </li> </ul>",
          "shape": "RecommendationSourceType"
        },
        "type": {
          "documentation": "<p>The type of recommendation trigger.</p>",
          "shape": "RecommendationTriggerType"
        }
      },
      "required": [
        "data",
        "id",
        "recommendationIds",
        "source",
        "type"
      ],
      "type": "structure"
    },
    "RecommendationTriggerData": {
      "documentation": "<p>A union type containing information related to the trigger.</p>",
      "members": {
        "query": {
          "documentation": "<p>Data associated with the QUERY RecommendationTriggerType.</p>",
          "shape": "QueryRecommendationTriggerData"
        }
      },
      "type": "structure",
      "union": true
    },
    "RecommendationTriggerList": {
      "member": {
        "shape": "RecommendationTrigger"
      },
      "type": "list"
    },
    "RecommendationTriggerType": {
      "enum": [
        "QUERY"
      ],
      "type": "string"
    },
    "RecommendationType": {
      "enum": [
        "KNOWLEDGE_CONTENT"
      ],
      "type": "string"
    },
    "RelevanceLevel": {
      "enum": [
        "HIGH",
        "MEDIUM",
        "LOW"
      ],
      "type": "string"
    },
    "RelevanceScore": {
      "min": 0.0,
      "type": "double"
    },
    "RemoveKnowledgeBaseTemplateUriRequest": {
      "members": {
        "knowledgeBaseId": {
          "documentation": "<p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>",
          "location": "uri",
          "locationName": "knowledgeBaseId",
          "shape": "UuidOrArn"
        }
      },
      "required": [
        "knowledgeBaseId"
      ],
      "type": "structure"
    },
    "RemoveKnowledgeBaseTemplateUriResponse": {
      "members": {},
      "type": "structure"
    },
    "RenderingConfiguration": {
      "documentation": "<p>Information about how to render the content.</p>",
      "members": {
        "templateUri": {
          "documentation": "<p>A URI template containing exactly one variable in <code>${variableName} </code>format. This can only be set for <code>EXTERNAL</code> knowledge bases. For Salesforce and ServiceNow, the variable must be one of the following:</p> <ul> <li> <p>Salesforce: <code>Id</code>, <code>ArticleNumber</code>, <code>VersionNumber</code>, <code>Title</code>, <code>PublishStatus</code>, or <code>IsDeleted</code> </p> </li> <li> <p>ServiceNow: <code>number</code>, <code>short_description</code>, <code>sys_mod_count</code>, <code>workflow_state</code>, or <code>active</code> </p> </li> </ul> <pre><code> &lt;p&gt;The variable is replaced with the actual value for a piece of content when calling &lt;a href=&quot;https://docs.aws.amazon.com/wisdom/latest/APIReference/API_GetContent.html&quot;&gt;GetContent&lt;/a&gt;. &lt;/p&gt; </code></pre>",
          "shape": "Uri"
        }
      },
      "type": "structure"
    },
    "ResourceNotFoundException": {
      "documentation": "<p>The specified resource does not exist.</p>",
      "error": {
        "httpStatusCode": 404,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "String"
        },
        "resourceName": {
          "documentation": "<p>The specified resource name.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ResultData": {
      "documentation": "<p>Information about the result.</p>",
      "members": {
        "document": {
          "documentation": "<p>The document.</p>",
          "shape": "Document"
        },
        "relevanceScore": {
          "documentation": "<p>The relevance score of the results.</p>",
          "shape": "RelevanceScore"
        },
        "resultId": {
          "documentation": "<p>The identifier of the result data.</p>",
          "shape": "Uuid"
        }
      },
      "required": [
        "document",
        "resultId"
      ],
      "type": "structure"
    },
    "SearchContentRequest": {
      "members": {
        "knowledgeBaseId": {
          "documentation": "<p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>",
          "location": "uri",
          "locationName": "knowledgeBaseId",
          "shape": "UuidOrArn"
        },
        "maxResults": {
          "documentation": "<p>The maximum number of results to return per page.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        },
        "searchExpression": {
          "documentation": "<p>The search expression to filter results.</p>",
          "shape": "SearchExpression"
        }
      },
      "required": [
        "knowledgeBaseId",
        "searchExpression"
      ],
      "type": "structure"
    },
    "SearchContentResponse": {
      "members": {
        "contentSummaries": {
          "documentation": "<p>Summary information about the content.</p>",
          "shape": "ContentSummaryList"
        },
        "nextToken": {
          "documentation": "<p>If there are additional results, this is the token for the next set of results.</p>",
          "shape": "NextToken"
        }
      },
      "required": [
        "contentSummaries"
      ],
      "type": "structure"
    },
    "SearchExpression": {
      "documentation": "<p>The search expression.</p>",
      "members": {
        "filters": {
          "documentation": "<p>The search expression filters.</p>",
          "shape": "FilterList"
        }
      },
      "required": [
        "filters"
      ],
      "type": "structure"
    },
    "SearchSessionsRequest": {
      "members": {
        "assistantId": {
          "documentation": "<p>The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>",
          "location": "uri",
          "locationName": "assistantId",
          "shape": "UuidOrArn"
        },
        "maxResults": {
          "documentation": "<p>The maximum number of results to return per page.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        },
        "searchExpression": {
          "documentation": "<p>The search expression to filter results.</p>",
          "shape": "SearchExpression"
        }
      },
      "required": [
        "assistantId",
        "searchExpression"
      ],
      "type": "structure"
    },
    "SearchSessionsResponse": {
      "members": {
        "nextToken": {
          "documentation": "<p>If there are additional results, this is the token for the next set of results.</p>",
          "shape": "NextToken"
        },
        "sessionSummaries": {
          "documentation": "<p>Summary information about the sessions.</p>",
          "shape": "SessionSummaries"
        }
      },
      "required": [
        "sessionSummaries"
      ],
      "type": "structure"
    },
    "SensitiveString": {
      "sensitive": true,
      "type": "string"
    },
    "ServerSideEncryptionConfiguration": {
      "documentation": "<p>The KMS key used for encryption.</p>",
      "members": {
        "kmsKeyId": {
          "documentation": "<p>The KMS key. For information about valid ID values, see <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id\">Key identifiers (KeyId)</a>.</p>",
          "shape": "NonEmptyString"
        }
      },
      "type": "structure"
    },
    "ServiceQuotaExceededException": {
      "documentation": "<p>You've exceeded your service quota. To perform the requested action, remove some of the relevant resources, or use service quotas to request a service quota increase.</p>",
      "error": {
        "httpStatusCode": 402,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "SessionData": {
      "documentation": "<p>Information about the session.</p>",
      "members": {
        "description": {
          "documentation": "<p>The description of the session.</p>",
          "shape": "Description"
        },
        "name": {
          "documentation": "<p>The name of the session.</p>",
          "shape": "Name"
        },
        "sessionArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the session.</p>",
          "shape": "Arn"
        },
        "sessionId": {
          "documentation": "<p>The identifier of the session.</p>",
          "shape": "Uuid"
        },
        "tags": {
          "documentation": "<p>The tags used to organize, track, or control access for this resource.</p>",
          "shape": "Tags"
        }
      },
      "required": [
        "name",
        "sessionArn",
        "sessionId"
      ],
      "type": "structure"
    },
    "SessionSummaries": {
      "member": {
        "shape": "SessionSummary"
      },
      "type": "list"
    },
    "SessionSummary": {
      "documentation": "<p>Summary information about the session.</p>",
      "members": {
        "assistantArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the Wisdom assistant.</p>",
          "shape": "Arn"
        },
        "assistantId": {
          "documentation": "<p>The identifier of the Wisdom assistant.</p>",
          "shape": "Uuid"
        },
        "sessionArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the session.</p>",
          "shape": "Arn"
        },
        "sessionId": {
          "documentation": "<p>The identifier of the session.</p>",
          "shape": "Uuid"
        }
      },
      "required": [
        "assistantArn",
        "assistantId",
        "sessionArn",
        "sessionId"
      ],
      "type": "structure"
    },
    "SourceConfiguration": {
      "documentation": "<p>Configuration information about the external data source.</p>",
      "members": {
        "appIntegrations": {
          "documentation": "<p>Configuration information for Amazon AppIntegrations to automatically ingest content.</p>",
          "shape": "AppIntegrationsConfiguration"
        }
      },
      "type": "structure",
      "union": true
    },
    "StartContentUploadRequest": {
      "members": {
        "contentType": {
          "documentation": "<p>The type of content to upload.</p>",
          "shape": "ContentType"
        },
        "knowledgeBaseId": {
          "documentation": "<p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>",
          "location": "uri",
          "locationName": "knowledgeBaseId",
          "shape": "UuidOrArn"
        }
      },
      "required": [
        "contentType",
        "knowledgeBaseId"
      ],
      "type": "structure"
    },
    "StartContentUploadResponse": {
      "members": {
        "headersToInclude": {
          "documentation": "<p>The headers to include in the upload.</p>",
          "shape": "Headers"
        },
        "uploadId": {
          "documentation": "<p>The identifier of the upload.</p>",
          "shape": "NonEmptyString"
        },
        "url": {
          "documentation": "<p>The URL of the upload.</p>",
          "shape": "Url"
        },
        "urlExpiry": {
          "documentation": "<p>The expiration time of the URL as an epoch timestamp.</p>",
          "shape": "SyntheticTimestamp_epoch_seconds"
        }
      },
      "required": [
        "headersToInclude",
        "uploadId",
        "url",
        "urlExpiry"
      ],
      "type": "structure"
    },
    "String": {
      "type": "string"
    },
    "SyntheticTimestamp_epoch_seconds": {
      "timestampFormat": "unixTimestamp",
      "type": "timestamp"
    },
    "TagKey": {
      "max": 128,
      "min": 1,
      "pattern": "^(?!aws:)[a-zA-Z+-=._:/]+$",
      "type": "string"
    },
    "TagKeyList": {
      "max": 50,
      "member": {
        "shape": "TagKey"
      },
      "min": 1,
      "type": "list"
    },
    "TagResourceRequest": {
      "members": {
        "resourceArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the resource.</p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "Arn"
        },
        "tags": {
          "documentation": "<p>The tags used to organize, track, or control access for this resource.</p>",
          "shape": "Tags"
        }
      },
      "required": [
        "resourceArn",
        "tags"
      ],
      "type": "structure"
    },
    "TagResourceResponse": {
      "members": {},
      "type": "structure"
    },
    "TagValue": {
      "max": 256,
      "min": 1,
      "type": "string"
    },
    "Tags": {
      "key": {
        "shape": "TagKey"
      },
      "type": "map",
      "value": {
        "shape": "TagValue"
      }
    },
    "TooManyTagsException": {
      "documentation": "<p>Amazon Connect Wisdom throws this exception if you have too many tags in your tag set.</p>",
      "error": {
        "httpStatusCode": 400,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "String"
        },
        "resourceName": {
          "documentation": "<p>The specified resource name.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "UntagResourceRequest": {
      "members": {
        "resourceArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the resource.</p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "Arn"
        },
        "tagKeys": {
          "documentation": "<p>The tag keys.</p>",
          "location": "querystring",
          "locationName": "tagKeys",
          "shape": "TagKeyList"
        }
      },
      "required": [
        "resourceArn",
        "tagKeys"
      ],
      "type": "structure"
    },
    "UntagResourceResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateContentRequest": {
      "members": {
        "contentId": {
          "documentation": "<p>The identifier of the content. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>",
          "location": "uri",
          "locationName": "contentId",
          "shape": "UuidOrArn"
        },
        "knowledgeBaseId": {
          "documentation": "<p>The identifier of the knowledge base. Can be either the ID or the ARN</p>",
          "location": "uri",
          "locationName": "knowledgeBaseId",
          "shape": "UuidOrArn"
        },
        "metadata": {
          "documentation": "<p>A key/value map to store attributes without affecting tagging or recommendations. For example, when synchronizing data between an external system and Wisdom, you can store an external version identifier as metadata to utilize for determining drift.</p>",
          "shape": "ContentMetadata"
        },
        "overrideLinkOutUri": {
          "documentation": "<p>The URI for the article. If the knowledge base has a templateUri, setting this argument overrides it for this piece of content. To remove an existing <code>overrideLinkOurUri</code>, exclude this argument and set <code>removeOverrideLinkOutUri</code> to true.</p>",
          "shape": "Uri"
        },
        "removeOverrideLinkOutUri": {
          "documentation": "<p>Unset the existing <code>overrideLinkOutUri</code> if it exists.</p>",
          "shape": "Boolean"
        },
        "revisionId": {
          "documentation": "<p>The <code>revisionId</code> of the content resource to update, taken from an earlier call to <code>GetContent</code>, <code>GetContentSummary</code>, <code>SearchContent</code>, or <code>ListContents</code>. If included, this argument acts as an optimistic lock to ensure content was not modified since it was last read. If it has been modified, this API throws a <code>PreconditionFailedException</code>.</p>",
          "shape": "NonEmptyString"
        },
        "title": {
          "documentation": "<p>The title of the content.</p>",
          "shape": "ContentTitle"
        },
        "uploadId": {
          "documentation": "<p>A pointer to the uploaded asset. This value is returned by <a href=\"https://docs.aws.amazon.com/wisdom/latest/APIReference/API_StartContentUpload.html\">StartContentUpload</a>. </p>",
          "shape": "NonEmptyString"
        }
      },
      "required": [
        "contentId",
        "knowledgeBaseId"
      ],
      "type": "structure"
    },
    "UpdateContentResponse": {
      "members": {
        "content": {
          "documentation": "<p>The content.</p>",
          "shape": "ContentData"
        }
      },
      "type": "structure"
    },
    "UpdateKnowledgeBaseTemplateUriRequest": {
      "members": {
        "knowledgeBaseId": {
          "documentation": "<p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>",
          "location": "uri",
          "locationName": "knowledgeBaseId",
          "shape": "UuidOrArn"
        },
        "templateUri": {
          "documentation": "<p>The template URI to update.</p>",
          "shape": "Uri"
        }
      },
      "required": [
        "knowledgeBaseId",
        "templateUri"
      ],
      "type": "structure"
    },
    "UpdateKnowledgeBaseTemplateUriResponse": {
      "members": {
        "knowledgeBase": {
          "documentation": "<p>The knowledge base to update.</p>",
          "shape": "KnowledgeBaseData"
        }
      },
      "type": "structure"
    },
    "Uri": {
      "max": 4096,
      "min": 1,
      "type": "string"
    },
    "Url": {
      "max": 4096,
      "min": 1,
      "sensitive": true,
      "type": "string"
    },
    "Uuid": {
      "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
      "type": "string"
    },
    "UuidOrArn": {
      "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$|^arn:[a-z-]*?:wisdom:[a-z0-9-]*?:[0-9]{12}:[a-z-]*?/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(?:/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})?$",
      "type": "string"
    },
    "ValidationException": {
      "documentation": "<p>The input fails to satisfy the constraints specified by a service.</p>",
      "error": {
        "httpStatusCode": 400,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "WaitTimeSeconds": {
      "max": 20,
      "min": 0,
      "type": "integer"
    }
  },
  "version": "2.0"
}
