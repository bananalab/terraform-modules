{
  "documentation": "<p>Amazon EMR on EKS provides a deployment option for Amazon EMR that allows you to run open-source big data frameworks on Amazon Elastic Kubernetes Service (Amazon EKS). With this deployment option, you can focus on running analytics workloads while Amazon EMR on EKS builds, configures, and manages containers for open-source applications. For more information about Amazon EMR on EKS concepts and tasks, see <a href=\"https://docs.aws.amazon.com/emr/latest/EMR-on-EKS-DevelopmentGuide/emr-eks.html\">What is Amazon EMR on EKS</a>.</p> <p> <i>Amazon EMR containers</i> is the API name for Amazon EMR on EKS. The <code>emr-containers</code> prefix is used in the following scenarios: </p> <ul> <li> <p>It is the prefix in the CLI commands for Amazon EMR on EKS. For example, <code>aws emr-containers start-job-run</code>.</p> </li> <li> <p>It is the prefix before IAM policy actions for Amazon EMR on EKS. For example, <code>\"Action\": [ \"emr-containers:StartJobRun\"]</code>. For more information, see <a href=\"https://docs.aws.amazon.com/emr/latest/EMR-on-EKS-DevelopmentGuide/security_iam_service-with-iam.html#security_iam_service-with-iam-id-based-policies-actions\">Policy actions for Amazon EMR on EKS</a>.</p> </li> <li> <p>It is the prefix used in Amazon EMR on EKS service endpoints. For example, <code>emr-containers.us-east-2.amazonaws.com</code>. For more information, see <a href=\"https://docs.aws.amazon.com/emr/latest/EMR-on-EKS-DevelopmentGuide/service-quotas.html#service-endpoints\">Amazon EMR on EKS Service Endpoints</a>.</p> </li> </ul>",
  "metadata": {
    "apiVersion": "2020-10-01",
    "endpointPrefix": "emr-containers",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "Amazon EMR Containers",
    "serviceId": "EMR containers",
    "signatureVersion": "v4",
    "signingName": "emr-containers",
    "uid": "emr-containers-2020-10-01"
  },
  "operations": {
    "CancelJobRun": {
      "documentation": "<p>Cancels a job run. A job run is a unit of work, such as a Spark jar, PySpark script, or SparkSQL query, that you submit to Amazon EMR on EKS.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/virtualclusters/{virtualClusterId}/jobruns/{jobRunId}"
      },
      "input": {
        "shape": "CancelJobRunRequest"
      },
      "name": "CancelJobRun",
      "output": {
        "shape": "CancelJobRunResponse"
      }
    },
    "CreateManagedEndpoint": {
      "documentation": "<p>Creates a managed endpoint. A managed endpoint is a gateway that connects EMR Studio to Amazon EMR on EKS so that EMR Studio can communicate with your virtual cluster.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/virtualclusters/{virtualClusterId}/endpoints"
      },
      "input": {
        "shape": "CreateManagedEndpointRequest"
      },
      "name": "CreateManagedEndpoint",
      "output": {
        "shape": "CreateManagedEndpointResponse"
      }
    },
    "CreateVirtualCluster": {
      "documentation": "<p>Creates a virtual cluster. Virtual cluster is a managed entity on Amazon EMR on EKS. You can create, describe, list and delete virtual clusters. They do not consume any additional resource in your system. A single virtual cluster maps to a single Kubernetes namespace. Given this relationship, you can model virtual clusters the same way you model Kubernetes namespaces to meet your requirements.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/virtualclusters"
      },
      "input": {
        "shape": "CreateVirtualClusterRequest"
      },
      "name": "CreateVirtualCluster",
      "output": {
        "shape": "CreateVirtualClusterResponse"
      }
    },
    "DeleteManagedEndpoint": {
      "documentation": "<p>Deletes a managed endpoint. A managed endpoint is a gateway that connects EMR Studio to Amazon EMR on EKS so that EMR Studio can communicate with your virtual cluster.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/virtualclusters/{virtualClusterId}/endpoints/{endpointId}"
      },
      "input": {
        "shape": "DeleteManagedEndpointRequest"
      },
      "name": "DeleteManagedEndpoint",
      "output": {
        "shape": "DeleteManagedEndpointResponse"
      }
    },
    "DeleteVirtualCluster": {
      "documentation": "<p>Deletes a virtual cluster. Virtual cluster is a managed entity on Amazon EMR on EKS. You can create, describe, list and delete virtual clusters. They do not consume any additional resource in your system. A single virtual cluster maps to a single Kubernetes namespace. Given this relationship, you can model virtual clusters the same way you model Kubernetes namespaces to meet your requirements.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/virtualclusters/{virtualClusterId}"
      },
      "input": {
        "shape": "DeleteVirtualClusterRequest"
      },
      "name": "DeleteVirtualCluster",
      "output": {
        "shape": "DeleteVirtualClusterResponse"
      }
    },
    "DescribeJobRun": {
      "documentation": "<p>Displays detailed information about a job run. A job run is a unit of work, such as a Spark jar, PySpark script, or SparkSQL query, that you submit to Amazon EMR on EKS.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/virtualclusters/{virtualClusterId}/jobruns/{jobRunId}"
      },
      "input": {
        "shape": "DescribeJobRunRequest"
      },
      "name": "DescribeJobRun",
      "output": {
        "shape": "DescribeJobRunResponse"
      }
    },
    "DescribeManagedEndpoint": {
      "documentation": "<p>Displays detailed information about a managed endpoint. A managed endpoint is a gateway that connects EMR Studio to Amazon EMR on EKS so that EMR Studio can communicate with your virtual cluster.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/virtualclusters/{virtualClusterId}/endpoints/{endpointId}"
      },
      "input": {
        "shape": "DescribeManagedEndpointRequest"
      },
      "name": "DescribeManagedEndpoint",
      "output": {
        "shape": "DescribeManagedEndpointResponse"
      }
    },
    "DescribeVirtualCluster": {
      "documentation": "<p>Displays detailed information about a specified virtual cluster. Virtual cluster is a managed entity on Amazon EMR on EKS. You can create, describe, list and delete virtual clusters. They do not consume any additional resource in your system. A single virtual cluster maps to a single Kubernetes namespace. Given this relationship, you can model virtual clusters the same way you model Kubernetes namespaces to meet your requirements.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/virtualclusters/{virtualClusterId}"
      },
      "input": {
        "shape": "DescribeVirtualClusterRequest"
      },
      "name": "DescribeVirtualCluster",
      "output": {
        "shape": "DescribeVirtualClusterResponse"
      }
    },
    "ListJobRuns": {
      "documentation": "<p>Lists job runs based on a set of parameters. A job run is a unit of work, such as a Spark jar, PySpark script, or SparkSQL query, that you submit to Amazon EMR on EKS.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/virtualclusters/{virtualClusterId}/jobruns"
      },
      "input": {
        "shape": "ListJobRunsRequest"
      },
      "name": "ListJobRuns",
      "output": {
        "shape": "ListJobRunsResponse"
      }
    },
    "ListManagedEndpoints": {
      "documentation": "<p>Lists managed endpoints based on a set of parameters. A managed endpoint is a gateway that connects EMR Studio to Amazon EMR on EKS so that EMR Studio can communicate with your virtual cluster.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/virtualclusters/{virtualClusterId}/endpoints"
      },
      "input": {
        "shape": "ListManagedEndpointsRequest"
      },
      "name": "ListManagedEndpoints",
      "output": {
        "shape": "ListManagedEndpointsResponse"
      }
    },
    "ListTagsForResource": {
      "documentation": "<p>Lists the tags assigned to the resources.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/tags/{resourceArn}"
      },
      "input": {
        "shape": "ListTagsForResourceRequest"
      },
      "name": "ListTagsForResource",
      "output": {
        "shape": "ListTagsForResourceResponse"
      }
    },
    "ListVirtualClusters": {
      "documentation": "<p>Lists information about the specified virtual cluster. Virtual cluster is a managed entity on Amazon EMR on EKS. You can create, describe, list and delete virtual clusters. They do not consume any additional resource in your system. A single virtual cluster maps to a single Kubernetes namespace. Given this relationship, you can model virtual clusters the same way you model Kubernetes namespaces to meet your requirements.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/virtualclusters"
      },
      "input": {
        "shape": "ListVirtualClustersRequest"
      },
      "name": "ListVirtualClusters",
      "output": {
        "shape": "ListVirtualClustersResponse"
      }
    },
    "StartJobRun": {
      "documentation": "<p>Starts a job run. A job run is a unit of work, such as a Spark jar, PySpark script, or SparkSQL query, that you submit to Amazon EMR on EKS.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/virtualclusters/{virtualClusterId}/jobruns"
      },
      "input": {
        "shape": "StartJobRunRequest"
      },
      "name": "StartJobRun",
      "output": {
        "shape": "StartJobRunResponse"
      }
    },
    "TagResource": {
      "documentation": "<p>Assigns tags to resources. A tag is a label that you assign to an AWS resource. Each tag consists of a key and an optional value, both of which you define. Tags enable you to categorize your AWS resources by attributes such as purpose, owner, or environment. When you have many resources of the same type, you can quickly identify a specific resource based on the tags you've assigned to it. For example, you can define a set of tags for your Amazon EMR on EKS clusters to help you track each cluster's owner and stack level. We recommend that you devise a consistent set of tag keys for each resource type. You can then search and filter the resources based on the tags that you add.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/tags/{resourceArn}"
      },
      "input": {
        "shape": "TagResourceRequest"
      },
      "name": "TagResource",
      "output": {
        "shape": "TagResourceResponse"
      }
    },
    "UntagResource": {
      "documentation": "<p>Removes tags from resources.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/tags/{resourceArn}"
      },
      "input": {
        "shape": "UntagResourceRequest"
      },
      "name": "UntagResource",
      "output": {
        "shape": "UntagResourceResponse"
      }
    }
  },
  "shapes": {
    "ACMCertArn": {
      "max": 2048,
      "min": 44,
      "pattern": "^arn:(aws[a-zA-Z0-9-]*):acm:.+:(\\d{12}):certificate/.+$",
      "type": "string"
    },
    "Base64Encoded": {
      "max": 5000,
      "pattern": "^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?$",
      "type": "string"
    },
    "CancelJobRunRequest": {
      "members": {
        "id": {
          "documentation": "<p>The ID of the job run to cancel.</p>",
          "location": "uri",
          "locationName": "jobRunId",
          "shape": "ResourceIdString"
        },
        "virtualClusterId": {
          "documentation": "<p>The ID of the virtual cluster for which the job run will be canceled.</p>",
          "location": "uri",
          "locationName": "virtualClusterId",
          "shape": "ResourceIdString"
        }
      },
      "required": [
        "id",
        "virtualClusterId"
      ],
      "type": "structure"
    },
    "CancelJobRunResponse": {
      "members": {
        "id": {
          "documentation": "<p>The output contains the ID of the cancelled job run.</p>",
          "shape": "ResourceIdString"
        },
        "virtualClusterId": {
          "documentation": "<p>The output contains the virtual cluster ID for which the job run is cancelled.</p>",
          "shape": "ResourceIdString"
        }
      },
      "type": "structure"
    },
    "Certificate": {
      "documentation": "<p>The entity representing certificate data generated for managed endpoint.</p>",
      "members": {
        "certificateArn": {
          "documentation": "<p>The ARN of the certificate generated for managed endpoint.</p>",
          "shape": "ACMCertArn"
        },
        "certificateData": {
          "documentation": "<p>The base64 encoded PEM certificate data generated for managed endpoint.</p>",
          "shape": "Base64Encoded"
        }
      },
      "type": "structure"
    },
    "ClientToken": {
      "max": 64,
      "min": 1,
      "pattern": ".*\\S.*",
      "type": "string"
    },
    "CloudWatchMonitoringConfiguration": {
      "documentation": "<p>A configuration for CloudWatch monitoring. You can configure your jobs to send log information to CloudWatch Logs.</p>",
      "members": {
        "logGroupName": {
          "documentation": "<p>The name of the log group for log publishing.</p>",
          "shape": "LogGroupName"
        },
        "logStreamNamePrefix": {
          "documentation": "<p>The specified name prefix for log streams.</p>",
          "shape": "String256"
        }
      },
      "required": [
        "logGroupName"
      ],
      "type": "structure"
    },
    "ClusterId": {
      "max": 100,
      "min": 1,
      "pattern": "^[0-9A-Za-z][A-Za-z0-9\\-_]*",
      "type": "string"
    },
    "Configuration": {
      "documentation": "<p>A configuration specification to be used when provisioning virtual clusters, which can include configurations for applications and software bundled with Amazon EMR on EKS. A configuration consists of a classification, properties, and optional nested configurations. A classification refers to an application-specific configuration file. Properties are the settings you want to change in that file.</p>",
      "members": {
        "classification": {
          "documentation": "<p>The classification within a configuration.</p>",
          "shape": "String1024"
        },
        "configurations": {
          "documentation": "<p>A list of additional configurations to apply within a configuration object.</p>",
          "shape": "ConfigurationList"
        },
        "properties": {
          "documentation": "<p>A set of properties specified within a configuration classification.</p>",
          "shape": "SensitivePropertiesMap"
        }
      },
      "required": [
        "classification"
      ],
      "type": "structure"
    },
    "ConfigurationList": {
      "max": 100,
      "member": {
        "shape": "Configuration"
      },
      "type": "list"
    },
    "ConfigurationOverrides": {
      "documentation": "<p>A configuration specification to be used to override existing configurations.</p>",
      "members": {
        "applicationConfiguration": {
          "documentation": "<p>The configurations for the application running by the job run. </p>",
          "shape": "ConfigurationList"
        },
        "monitoringConfiguration": {
          "documentation": "<p>The configurations for monitoring.</p>",
          "shape": "MonitoringConfiguration"
        }
      },
      "type": "structure"
    },
    "ContainerInfo": {
      "documentation": "<p>The information about the container used for a job run or a managed endpoint.</p>",
      "members": {
        "eksInfo": {
          "documentation": "<p>The information about the EKS cluster.</p>",
          "shape": "EksInfo"
        }
      },
      "type": "structure",
      "union": true
    },
    "ContainerProvider": {
      "documentation": "<p>The information about the container provider.</p>",
      "members": {
        "id": {
          "documentation": "<p>The ID of the container cluster.</p>",
          "shape": "ClusterId"
        },
        "info": {
          "documentation": "<p>The information about the container cluster.</p>",
          "shape": "ContainerInfo"
        },
        "type": {
          "documentation": "<p>The type of the container provider. EKS is the only supported type as of now.</p>",
          "shape": "ContainerProviderType"
        }
      },
      "required": [
        "type",
        "id"
      ],
      "type": "structure"
    },
    "ContainerProviderType": {
      "enum": [
        "EKS"
      ],
      "type": "string"
    },
    "CreateManagedEndpointRequest": {
      "members": {
        "certificateArn": {
          "deprecated": true,
          "deprecatedMessage": "Customer provided certificate-arn is deprecated and would be removed in future.",
          "documentation": "<p>The certificate ARN provided by users for the managed endpoint. This field is under deprecation and will be removed in future releases.</p>",
          "shape": "ACMCertArn"
        },
        "clientToken": {
          "documentation": "<p>The client idempotency token for this create call.</p>",
          "idempotencyToken": true,
          "shape": "ClientToken"
        },
        "configurationOverrides": {
          "documentation": "<p>The configuration settings that will be used to override existing configurations.</p>",
          "shape": "ConfigurationOverrides"
        },
        "executionRoleArn": {
          "documentation": "<p>The ARN of the execution role.</p>",
          "shape": "IAMRoleArn"
        },
        "name": {
          "documentation": "<p>The name of the managed endpoint.</p>",
          "shape": "ResourceNameString"
        },
        "releaseLabel": {
          "documentation": "<p>The Amazon EMR release version.</p>",
          "shape": "ReleaseLabel"
        },
        "tags": {
          "documentation": "<p>The tags of the managed endpoint. </p>",
          "shape": "TagMap"
        },
        "type": {
          "documentation": "<p>The type of the managed endpoint.</p>",
          "shape": "EndpointType"
        },
        "virtualClusterId": {
          "documentation": "<p>The ID of the virtual cluster for which a managed endpoint is created.</p>",
          "location": "uri",
          "locationName": "virtualClusterId",
          "shape": "ResourceIdString"
        }
      },
      "required": [
        "name",
        "virtualClusterId",
        "type",
        "releaseLabel",
        "executionRoleArn",
        "clientToken"
      ],
      "type": "structure"
    },
    "CreateManagedEndpointResponse": {
      "members": {
        "arn": {
          "documentation": "<p>The output contains the ARN of the managed endpoint.</p>",
          "shape": "EndpointArn"
        },
        "id": {
          "documentation": "<p>The output contains the ID of the managed endpoint.</p>",
          "shape": "ResourceIdString"
        },
        "name": {
          "documentation": "<p>The output contains the name of the managed endpoint.</p>",
          "shape": "ResourceNameString"
        },
        "virtualClusterId": {
          "documentation": "<p>The output contains the ID of the virtual cluster.</p>",
          "shape": "ResourceIdString"
        }
      },
      "type": "structure"
    },
    "CreateVirtualClusterRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>The client token of the virtual cluster.</p>",
          "idempotencyToken": true,
          "shape": "ClientToken"
        },
        "containerProvider": {
          "documentation": "<p>The container provider of the virtual cluster.</p>",
          "shape": "ContainerProvider"
        },
        "name": {
          "documentation": "<p>The specified name of the virtual cluster.</p>",
          "shape": "ResourceNameString"
        },
        "tags": {
          "documentation": "<p>The tags assigned to the virtual cluster.</p>",
          "shape": "TagMap"
        }
      },
      "required": [
        "name",
        "containerProvider",
        "clientToken"
      ],
      "type": "structure"
    },
    "CreateVirtualClusterResponse": {
      "members": {
        "arn": {
          "documentation": "<p>This output contains the ARN of virtual cluster.</p>",
          "shape": "VirtualClusterArn"
        },
        "id": {
          "documentation": "<p>This output contains the virtual cluster ID.</p>",
          "shape": "ResourceIdString"
        },
        "name": {
          "documentation": "<p>This output contains the name of the virtual cluster.</p>",
          "shape": "ResourceNameString"
        }
      },
      "type": "structure"
    },
    "Date": {
      "timestampFormat": "iso8601",
      "type": "timestamp"
    },
    "DeleteManagedEndpointRequest": {
      "members": {
        "id": {
          "documentation": "<p>The ID of the managed endpoint.</p>",
          "location": "uri",
          "locationName": "endpointId",
          "shape": "ResourceIdString"
        },
        "virtualClusterId": {
          "documentation": "<p>The ID of the endpoint's virtual cluster.</p>",
          "location": "uri",
          "locationName": "virtualClusterId",
          "shape": "ResourceIdString"
        }
      },
      "required": [
        "id",
        "virtualClusterId"
      ],
      "type": "structure"
    },
    "DeleteManagedEndpointResponse": {
      "members": {
        "id": {
          "documentation": "<p>The output displays the ID of the managed endpoint.</p>",
          "shape": "ResourceIdString"
        },
        "virtualClusterId": {
          "documentation": "<p>The output displays the ID of the endpoint's virtual cluster.</p>",
          "shape": "ResourceIdString"
        }
      },
      "type": "structure"
    },
    "DeleteVirtualClusterRequest": {
      "members": {
        "id": {
          "documentation": "<p>The ID of the virtual cluster that will be deleted.</p>",
          "location": "uri",
          "locationName": "virtualClusterId",
          "shape": "ResourceIdString"
        }
      },
      "required": [
        "id"
      ],
      "type": "structure"
    },
    "DeleteVirtualClusterResponse": {
      "members": {
        "id": {
          "documentation": "<p>This output contains the ID of the virtual cluster that will be deleted. </p>",
          "shape": "ResourceIdString"
        }
      },
      "type": "structure"
    },
    "DescribeJobRunRequest": {
      "members": {
        "id": {
          "documentation": "<p>The ID of the job run request. </p>",
          "location": "uri",
          "locationName": "jobRunId",
          "shape": "ResourceIdString"
        },
        "virtualClusterId": {
          "documentation": "<p>The ID of the virtual cluster for which the job run is submitted.</p>",
          "location": "uri",
          "locationName": "virtualClusterId",
          "shape": "ResourceIdString"
        }
      },
      "required": [
        "id",
        "virtualClusterId"
      ],
      "type": "structure"
    },
    "DescribeJobRunResponse": {
      "members": {
        "jobRun": {
          "documentation": "<p>The output displays information about a job run.</p>",
          "shape": "JobRun"
        }
      },
      "type": "structure"
    },
    "DescribeManagedEndpointRequest": {
      "members": {
        "id": {
          "documentation": "<p>This output displays ID of the managed endpoint.</p>",
          "location": "uri",
          "locationName": "endpointId",
          "shape": "ResourceIdString"
        },
        "virtualClusterId": {
          "documentation": "<p>The ID of the endpoint's virtual cluster.</p>",
          "location": "uri",
          "locationName": "virtualClusterId",
          "shape": "ResourceIdString"
        }
      },
      "required": [
        "id",
        "virtualClusterId"
      ],
      "type": "structure"
    },
    "DescribeManagedEndpointResponse": {
      "members": {
        "endpoint": {
          "documentation": "<p>This output displays information about a managed endpoint.</p>",
          "shape": "Endpoint"
        }
      },
      "type": "structure"
    },
    "DescribeVirtualClusterRequest": {
      "members": {
        "id": {
          "documentation": "<p>The ID of the virtual cluster that will be described.</p>",
          "location": "uri",
          "locationName": "virtualClusterId",
          "shape": "ResourceIdString"
        }
      },
      "required": [
        "id"
      ],
      "type": "structure"
    },
    "DescribeVirtualClusterResponse": {
      "members": {
        "virtualCluster": {
          "documentation": "<p>This output displays information about the specified virtual cluster.</p>",
          "shape": "VirtualCluster"
        }
      },
      "type": "structure"
    },
    "EksInfo": {
      "documentation": "<p>The information about the EKS cluster.</p>",
      "members": {
        "namespace": {
          "documentation": "<p>The namespaces of the EKS cluster.</p>",
          "shape": "KubernetesNamespace"
        }
      },
      "type": "structure"
    },
    "Endpoint": {
      "documentation": "<p>This entity represents the endpoint that is managed by Amazon EMR on EKS.</p>",
      "members": {
        "arn": {
          "documentation": "<p>The ARN of the endpoint.</p>",
          "shape": "EndpointArn"
        },
        "certificateArn": {
          "deprecated": true,
          "deprecatedMessage": "Customer provided certificate-arn is deprecated and would be removed in future.",
          "documentation": "<p>The certificate ARN of the endpoint. This field is under deprecation and will be removed in future.</p>",
          "shape": "ACMCertArn"
        },
        "certificateAuthority": {
          "documentation": "<p>The certificate generated by emr control plane on customer behalf to secure the managed endpoint.</p>",
          "shape": "Certificate"
        },
        "configurationOverrides": {
          "documentation": "<p>The configuration settings that are used to override existing configurations for endpoints.</p>",
          "shape": "ConfigurationOverrides"
        },
        "createdAt": {
          "documentation": "<p>The date and time when the endpoint was created.</p>",
          "shape": "Date"
        },
        "executionRoleArn": {
          "documentation": "<p>The execution role ARN of the endpoint.</p>",
          "shape": "IAMRoleArn"
        },
        "failureReason": {
          "documentation": "<p> The reasons why the endpoint has failed. </p>",
          "shape": "FailureReason"
        },
        "id": {
          "documentation": "<p>The ID of the endpoint.</p>",
          "shape": "ResourceIdString"
        },
        "name": {
          "documentation": "<p>The name of the endpoint.</p>",
          "shape": "ResourceNameString"
        },
        "releaseLabel": {
          "documentation": "<p>The EMR release version to be used for the endpoint.</p>",
          "shape": "ReleaseLabel"
        },
        "securityGroup": {
          "documentation": "<p>The security group configuration of the endpoint. </p>",
          "shape": "String256"
        },
        "serverUrl": {
          "documentation": "<p>The server URL of the endpoint.</p>",
          "shape": "UriString"
        },
        "state": {
          "documentation": "<p>The state of the endpoint.</p>",
          "shape": "EndpointState"
        },
        "stateDetails": {
          "documentation": "<p> Additional details of the endpoint state. </p>",
          "shape": "String256"
        },
        "subnetIds": {
          "documentation": "<p>The subnet IDs of the endpoint. </p>",
          "shape": "SubnetIds"
        },
        "tags": {
          "documentation": "<p>The tags of the endpoint. </p>",
          "shape": "TagMap"
        },
        "type": {
          "documentation": "<p>The type of the endpoint.</p>",
          "shape": "EndpointType"
        },
        "virtualClusterId": {
          "documentation": "<p>The ID of the endpoint's virtual cluster.</p>",
          "shape": "ResourceIdString"
        }
      },
      "type": "structure"
    },
    "EndpointArn": {
      "max": 1024,
      "min": 60,
      "pattern": "^arn:(aws[a-zA-Z0-9-]*):emr-containers:.+:(\\d{12}):\\/virtualclusters\\/[0-9a-zA-Z]+\\/endpoints\\/[0-9a-zA-Z]+$",
      "type": "string"
    },
    "EndpointState": {
      "enum": [
        "CREATING",
        "ACTIVE",
        "TERMINATING",
        "TERMINATED",
        "TERMINATED_WITH_ERRORS"
      ],
      "type": "string"
    },
    "EndpointStates": {
      "max": 10,
      "member": {
        "shape": "EndpointState"
      },
      "type": "list"
    },
    "EndpointType": {
      "max": 64,
      "min": 1,
      "pattern": ".*\\S.*",
      "type": "string"
    },
    "EndpointTypes": {
      "max": 10,
      "member": {
        "shape": "EndpointType"
      },
      "type": "list"
    },
    "Endpoints": {
      "member": {
        "shape": "Endpoint"
      },
      "type": "list"
    },
    "EntryPointArgument": {
      "max": 10280,
      "min": 1,
      "pattern": ".*\\S.*",
      "sensitive": true,
      "type": "string"
    },
    "EntryPointArguments": {
      "member": {
        "shape": "EntryPointArgument"
      },
      "type": "list"
    },
    "EntryPointPath": {
      "max": 256,
      "min": 1,
      "pattern": ".*\\S.*",
      "sensitive": true,
      "type": "string"
    },
    "FailureReason": {
      "enum": [
        "INTERNAL_ERROR",
        "USER_ERROR",
        "VALIDATION_ERROR",
        "CLUSTER_UNAVAILABLE"
      ],
      "type": "string"
    },
    "IAMRoleArn": {
      "max": 2048,
      "min": 20,
      "pattern": "^arn:(aws[a-zA-Z0-9-]*):iam::(\\d{12})?:(role((\\u002F)|(\\u002F[\\u0021-\\u007F]+\\u002F))[\\w+=,.@-]+)$",
      "type": "string"
    },
    "InternalServerException": {
      "documentation": "<p>This is an internal server exception.</p>",
      "error": {
        "httpStatusCode": 500
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "String1024"
        }
      },
      "type": "structure"
    },
    "JavaInteger": {
      "type": "integer"
    },
    "JobArn": {
      "max": 1024,
      "min": 60,
      "pattern": "^arn:(aws[a-zA-Z0-9-]*):emr-containers:.+:(\\d{12}):\\/virtualclusters\\/[0-9a-zA-Z]+\\/jobruns\\/[0-9a-zA-Z]+$",
      "type": "string"
    },
    "JobDriver": {
      "documentation": "<p>Specify the driver that the job runs on.</p>",
      "members": {
        "sparkSqlJobDriver": {
          "documentation": "<p>The job driver for job type.</p>",
          "shape": "SparkSqlJobDriver"
        },
        "sparkSubmitJobDriver": {
          "documentation": "<p>The job driver parameters specified for spark submit.</p>",
          "shape": "SparkSubmitJobDriver"
        }
      },
      "type": "structure"
    },
    "JobRun": {
      "documentation": "<p>This entity describes a job run. A job run is a unit of work, such as a Spark jar, PySpark script, or SparkSQL query, that you submit to Amazon EMR on EKS. </p>",
      "members": {
        "arn": {
          "documentation": "<p>The ARN of job run.</p>",
          "shape": "JobArn"
        },
        "clientToken": {
          "documentation": "<p>The client token used to start a job run.</p>",
          "shape": "ClientToken"
        },
        "configurationOverrides": {
          "documentation": "<p>The configuration settings that are used to override default configuration.</p>",
          "shape": "ConfigurationOverrides"
        },
        "createdAt": {
          "documentation": "<p>The date and time when the job run was created.</p>",
          "shape": "Date"
        },
        "createdBy": {
          "documentation": "<p>The user who created the job run.</p>",
          "shape": "RequestIdentityUserArn"
        },
        "executionRoleArn": {
          "documentation": "<p>The execution role ARN of the job run.</p>",
          "shape": "IAMRoleArn"
        },
        "failureReason": {
          "documentation": "<p>The reasons why the job run has failed.</p>",
          "shape": "FailureReason"
        },
        "finishedAt": {
          "documentation": "<p>The date and time when the job run has finished.</p>",
          "shape": "Date"
        },
        "id": {
          "documentation": "<p>The ID of the job run.</p>",
          "shape": "ResourceIdString"
        },
        "jobDriver": {
          "documentation": "<p>Parameters of job driver for the job run.</p>",
          "shape": "JobDriver"
        },
        "name": {
          "documentation": "<p>The name of the job run.</p>",
          "shape": "ResourceNameString"
        },
        "releaseLabel": {
          "documentation": "<p>The release version of Amazon EMR.</p>",
          "shape": "ReleaseLabel"
        },
        "state": {
          "documentation": "<p>The state of the job run. </p>",
          "shape": "JobRunState"
        },
        "stateDetails": {
          "documentation": "<p>Additional details of the job run state.</p>",
          "shape": "String256"
        },
        "tags": {
          "documentation": "<p>The assigned tags of the job run.</p>",
          "shape": "TagMap"
        },
        "virtualClusterId": {
          "documentation": "<p>The ID of the job run's virtual cluster.</p>",
          "shape": "ResourceIdString"
        }
      },
      "type": "structure"
    },
    "JobRunState": {
      "enum": [
        "PENDING",
        "SUBMITTED",
        "RUNNING",
        "FAILED",
        "CANCELLED",
        "CANCEL_PENDING",
        "COMPLETED"
      ],
      "type": "string"
    },
    "JobRunStates": {
      "max": 10,
      "member": {
        "shape": "JobRunState"
      },
      "type": "list"
    },
    "JobRuns": {
      "member": {
        "shape": "JobRun"
      },
      "type": "list"
    },
    "KubernetesNamespace": {
      "max": 63,
      "min": 1,
      "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?",
      "type": "string"
    },
    "ListJobRunsRequest": {
      "members": {
        "createdAfter": {
          "documentation": "<p>The date and time after which the job runs were submitted.</p>",
          "location": "querystring",
          "locationName": "createdAfter",
          "shape": "Date"
        },
        "createdBefore": {
          "documentation": "<p>The date and time before which the job runs were submitted.</p>",
          "location": "querystring",
          "locationName": "createdBefore",
          "shape": "Date"
        },
        "maxResults": {
          "documentation": "<p>The maximum number of job runs that can be listed.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "JavaInteger"
        },
        "name": {
          "documentation": "<p>The name of the job run.</p>",
          "location": "querystring",
          "locationName": "name",
          "shape": "ResourceNameString"
        },
        "nextToken": {
          "documentation": "<p>The token for the next set of job runs to return.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        },
        "states": {
          "documentation": "<p>The states of the job run.</p>",
          "location": "querystring",
          "locationName": "states",
          "shape": "JobRunStates"
        },
        "virtualClusterId": {
          "documentation": "<p>The ID of the virtual cluster for which to list the job run. </p>",
          "location": "uri",
          "locationName": "virtualClusterId",
          "shape": "ResourceIdString"
        }
      },
      "required": [
        "virtualClusterId"
      ],
      "type": "structure"
    },
    "ListJobRunsResponse": {
      "members": {
        "jobRuns": {
          "documentation": "<p>This output lists information about the specified job runs.</p>",
          "shape": "JobRuns"
        },
        "nextToken": {
          "documentation": "<p>This output displays the token for the next set of job runs.</p>",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListManagedEndpointsRequest": {
      "members": {
        "createdAfter": {
          "documentation": "<p> The date and time after which the endpoints are created.</p>",
          "location": "querystring",
          "locationName": "createdAfter",
          "shape": "Date"
        },
        "createdBefore": {
          "documentation": "<p>The date and time before which the endpoints are created.</p>",
          "location": "querystring",
          "locationName": "createdBefore",
          "shape": "Date"
        },
        "maxResults": {
          "documentation": "<p>The maximum number of managed endpoints that can be listed.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "JavaInteger"
        },
        "nextToken": {
          "documentation": "<p> The token for the next set of managed endpoints to return. </p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        },
        "states": {
          "documentation": "<p>The states of the managed endpoints.</p>",
          "location": "querystring",
          "locationName": "states",
          "shape": "EndpointStates"
        },
        "types": {
          "documentation": "<p>The types of the managed endpoints.</p>",
          "location": "querystring",
          "locationName": "types",
          "shape": "EndpointTypes"
        },
        "virtualClusterId": {
          "documentation": "<p>The ID of the virtual cluster.</p>",
          "location": "uri",
          "locationName": "virtualClusterId",
          "shape": "ResourceIdString"
        }
      },
      "required": [
        "virtualClusterId"
      ],
      "type": "structure"
    },
    "ListManagedEndpointsResponse": {
      "members": {
        "endpoints": {
          "documentation": "<p>The managed endpoints to be listed.</p>",
          "shape": "Endpoints"
        },
        "nextToken": {
          "documentation": "<p> The token for the next set of endpoints to return. </p>",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListTagsForResourceRequest": {
      "members": {
        "resourceArn": {
          "documentation": "<p>The ARN of tagged resources.</p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "RsiArn"
        }
      },
      "required": [
        "resourceArn"
      ],
      "type": "structure"
    },
    "ListTagsForResourceResponse": {
      "members": {
        "tags": {
          "documentation": "<p>The tags assigned to resources.</p>",
          "shape": "TagMap"
        }
      },
      "type": "structure"
    },
    "ListVirtualClustersRequest": {
      "members": {
        "containerProviderId": {
          "documentation": "<p>The container provider ID of the virtual cluster.</p>",
          "location": "querystring",
          "locationName": "containerProviderId",
          "shape": "String1024"
        },
        "containerProviderType": {
          "documentation": "<p>The container provider type of the virtual cluster. EKS is the only supported type as of now.</p>",
          "location": "querystring",
          "locationName": "containerProviderType",
          "shape": "ContainerProviderType"
        },
        "createdAfter": {
          "documentation": "<p>The date and time after which the virtual clusters are created.</p>",
          "location": "querystring",
          "locationName": "createdAfter",
          "shape": "Date"
        },
        "createdBefore": {
          "documentation": "<p>The date and time before which the virtual clusters are created.</p>",
          "location": "querystring",
          "locationName": "createdBefore",
          "shape": "Date"
        },
        "maxResults": {
          "documentation": "<p>The maximum number of virtual clusters that can be listed.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "JavaInteger"
        },
        "nextToken": {
          "documentation": "<p>The token for the next set of virtual clusters to return. </p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        },
        "states": {
          "documentation": "<p>The states of the requested virtual clusters.</p>",
          "location": "querystring",
          "locationName": "states",
          "shape": "VirtualClusterStates"
        }
      },
      "type": "structure"
    },
    "ListVirtualClustersResponse": {
      "members": {
        "nextToken": {
          "documentation": "<p>This output displays the token for the next set of virtual clusters.</p>",
          "shape": "NextToken"
        },
        "virtualClusters": {
          "documentation": "<p>This output lists the specified virtual clusters.</p>",
          "shape": "VirtualClusters"
        }
      },
      "type": "structure"
    },
    "LogGroupName": {
      "max": 512,
      "min": 1,
      "pattern": "[\\.\\-_/#A-Za-z0-9]+",
      "type": "string"
    },
    "MonitoringConfiguration": {
      "documentation": "<p>Configuration setting for monitoring.</p>",
      "members": {
        "cloudWatchMonitoringConfiguration": {
          "documentation": "<p>Monitoring configurations for CloudWatch.</p>",
          "shape": "CloudWatchMonitoringConfiguration"
        },
        "persistentAppUI": {
          "documentation": "<p>Monitoring configurations for the persistent application UI. </p>",
          "shape": "PersistentAppUI"
        },
        "s3MonitoringConfiguration": {
          "documentation": "<p>Amazon S3 configuration for monitoring log publishing.</p>",
          "shape": "S3MonitoringConfiguration"
        }
      },
      "type": "structure"
    },
    "NextToken": {
      "max": 1024,
      "min": 1,
      "pattern": ".*\\S.*",
      "type": "string"
    },
    "PersistentAppUI": {
      "enum": [
        "ENABLED",
        "DISABLED"
      ],
      "type": "string"
    },
    "ReleaseLabel": {
      "max": 64,
      "min": 1,
      "pattern": "[\\.\\-_/A-Za-z0-9]+",
      "type": "string"
    },
    "RequestIdentityUserArn": {
      "max": 2048,
      "min": 20,
      "pattern": "^arn:(aws[a-zA-Z0-9-]*):(iam|sts)::(\\d{12})?:[\\w/+=,.@-]+$",
      "type": "string"
    },
    "ResourceIdString": {
      "max": 64,
      "min": 1,
      "pattern": "[0-9a-z]+",
      "type": "string"
    },
    "ResourceNameString": {
      "max": 64,
      "min": 1,
      "pattern": "[\\.\\-_/#A-Za-z0-9]+",
      "type": "string"
    },
    "ResourceNotFoundException": {
      "documentation": "<p>The specified resource was not found.</p>",
      "error": {
        "httpStatusCode": 400
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "String1024"
        }
      },
      "type": "structure"
    },
    "RsiArn": {
      "max": 500,
      "min": 60,
      "pattern": "^arn:(aws[a-zA-Z0-9-]*):emr-containers:.+:(\\d{12}):/virtualclusters/.+$",
      "type": "string"
    },
    "S3MonitoringConfiguration": {
      "documentation": "<p> Amazon S3 configuration for monitoring log publishing. You can configure your jobs to send log information to Amazon S3.</p>",
      "members": {
        "logUri": {
          "documentation": "<p>Amazon S3 destination URI for log publishing.</p>",
          "shape": "UriString"
        }
      },
      "required": [
        "logUri"
      ],
      "type": "structure"
    },
    "SensitivePropertiesMap": {
      "key": {
        "shape": "String1024"
      },
      "max": 100,
      "sensitive": true,
      "type": "map",
      "value": {
        "shape": "String1024"
      }
    },
    "SparkSqlJobDriver": {
      "documentation": "<p>The job driver for job type.</p>",
      "members": {
        "entryPoint": {
          "documentation": "<p>The SQL file to be executed.</p>",
          "shape": "EntryPointPath"
        },
        "sparkSqlParameters": {
          "documentation": "<p>The Spark parameters to be included in the Spark SQL command.</p>",
          "shape": "SparkSqlParameters"
        }
      },
      "type": "structure"
    },
    "SparkSqlParameters": {
      "max": 102400,
      "min": 1,
      "pattern": ".*\\S.*",
      "sensitive": true,
      "type": "string"
    },
    "SparkSubmitJobDriver": {
      "documentation": "<p>The information about job driver for Spark submit.</p>",
      "members": {
        "entryPoint": {
          "documentation": "<p>The entry point of job application.</p>",
          "shape": "EntryPointPath"
        },
        "entryPointArguments": {
          "documentation": "<p>The arguments for job application.</p>",
          "shape": "EntryPointArguments"
        },
        "sparkSubmitParameters": {
          "documentation": "<p>The Spark submit parameters that are used for job runs.</p>",
          "shape": "SparkSubmitParameters"
        }
      },
      "required": [
        "entryPoint"
      ],
      "type": "structure"
    },
    "SparkSubmitParameters": {
      "max": 102400,
      "min": 1,
      "pattern": ".*\\S.*",
      "sensitive": true,
      "type": "string"
    },
    "StartJobRunRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>The client idempotency token of the job run request. </p>",
          "idempotencyToken": true,
          "shape": "ClientToken"
        },
        "configurationOverrides": {
          "documentation": "<p>The configuration overrides for the job run.</p>",
          "shape": "ConfigurationOverrides"
        },
        "executionRoleArn": {
          "documentation": "<p>The execution role ARN for the job run.</p>",
          "shape": "IAMRoleArn"
        },
        "jobDriver": {
          "documentation": "<p>The job driver for the job run.</p>",
          "shape": "JobDriver"
        },
        "name": {
          "documentation": "<p>The name of the job run.</p>",
          "shape": "ResourceNameString"
        },
        "releaseLabel": {
          "documentation": "<p>The Amazon EMR release version to use for the job run.</p>",
          "shape": "ReleaseLabel"
        },
        "tags": {
          "documentation": "<p>The tags assigned to job runs.</p>",
          "shape": "TagMap"
        },
        "virtualClusterId": {
          "documentation": "<p>The virtual cluster ID for which the job run request is submitted.</p>",
          "location": "uri",
          "locationName": "virtualClusterId",
          "shape": "ResourceIdString"
        }
      },
      "required": [
        "virtualClusterId",
        "clientToken",
        "executionRoleArn",
        "releaseLabel",
        "jobDriver"
      ],
      "type": "structure"
    },
    "StartJobRunResponse": {
      "members": {
        "arn": {
          "documentation": "<p>This output lists the ARN of job run.</p>",
          "shape": "JobArn"
        },
        "id": {
          "documentation": "<p>This output displays the started job run ID.</p>",
          "shape": "ResourceIdString"
        },
        "name": {
          "documentation": "<p>This output displays the name of the started job run.</p>",
          "shape": "ResourceNameString"
        },
        "virtualClusterId": {
          "documentation": "<p>This output displays the virtual cluster ID for which the job run was submitted.</p>",
          "shape": "ResourceIdString"
        }
      },
      "type": "structure"
    },
    "String1024": {
      "max": 1024,
      "min": 1,
      "pattern": ".*\\S.*",
      "type": "string"
    },
    "String128": {
      "max": 128,
      "min": 1,
      "pattern": ".*\\S.*",
      "type": "string"
    },
    "String256": {
      "max": 256,
      "min": 1,
      "pattern": ".*\\S.*",
      "type": "string"
    },
    "StringEmpty256": {
      "max": 256,
      "min": 0,
      "pattern": ".*\\S.*",
      "type": "string"
    },
    "SubnetIds": {
      "member": {
        "shape": "String256"
      },
      "type": "list"
    },
    "TagKeyList": {
      "max": 50,
      "member": {
        "shape": "String128"
      },
      "min": 0,
      "type": "list"
    },
    "TagMap": {
      "key": {
        "shape": "String128"
      },
      "max": 50,
      "min": 0,
      "type": "map",
      "value": {
        "shape": "StringEmpty256"
      }
    },
    "TagResourceRequest": {
      "members": {
        "resourceArn": {
          "documentation": "<p>The ARN of resources.</p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "RsiArn"
        },
        "tags": {
          "documentation": "<p>The tags assigned to resources.</p>",
          "shape": "TagMap"
        }
      },
      "required": [
        "resourceArn",
        "tags"
      ],
      "type": "structure"
    },
    "TagResourceResponse": {
      "members": {},
      "type": "structure"
    },
    "UntagResourceRequest": {
      "members": {
        "resourceArn": {
          "documentation": "<p>The ARN of resources.</p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "RsiArn"
        },
        "tagKeys": {
          "documentation": "<p>The tag keys of the resources.</p>",
          "location": "querystring",
          "locationName": "tagKeys",
          "shape": "TagKeyList"
        }
      },
      "required": [
        "resourceArn",
        "tagKeys"
      ],
      "type": "structure"
    },
    "UntagResourceResponse": {
      "members": {},
      "type": "structure"
    },
    "UriString": {
      "max": 10280,
      "min": 1,
      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDBFF-\\uDC00\\uDFFF\\r\\n\\t]*",
      "type": "string"
    },
    "ValidationException": {
      "documentation": "<p>There are invalid parameters in the client request.</p>",
      "error": {
        "httpStatusCode": 400
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "String1024"
        }
      },
      "type": "structure"
    },
    "VirtualCluster": {
      "documentation": "<p>This entity describes a virtual cluster. A virtual cluster is a Kubernetes namespace that Amazon EMR is registered with. Amazon EMR uses virtual clusters to run jobs and host endpoints. Multiple virtual clusters can be backed by the same physical cluster. However, each virtual cluster maps to one namespace on an EKS cluster. Virtual clusters do not create any active resources that contribute to your bill or that require lifecycle management outside the service.</p>",
      "members": {
        "arn": {
          "documentation": "<p>The ARN of the virtual cluster.</p>",
          "shape": "VirtualClusterArn"
        },
        "containerProvider": {
          "documentation": "<p>The container provider of the virtual cluster.</p>",
          "shape": "ContainerProvider"
        },
        "createdAt": {
          "documentation": "<p>The date and time when the virtual cluster is created.</p>",
          "shape": "Date"
        },
        "id": {
          "documentation": "<p>The ID of the virtual cluster.</p>",
          "shape": "ResourceIdString"
        },
        "name": {
          "documentation": "<p>The name of the virtual cluster.</p>",
          "shape": "ResourceNameString"
        },
        "state": {
          "documentation": "<p>The state of the virtual cluster.</p>",
          "shape": "VirtualClusterState"
        },
        "tags": {
          "documentation": "<p>The assigned tags of the virtual cluster.</p>",
          "shape": "TagMap"
        }
      },
      "type": "structure"
    },
    "VirtualClusterArn": {
      "max": 1024,
      "min": 60,
      "pattern": "^arn:(aws[a-zA-Z0-9-]*):emr-containers:.+:(\\d{12}):\\/virtualclusters\\/[0-9a-zA-Z]+$",
      "type": "string"
    },
    "VirtualClusterState": {
      "enum": [
        "RUNNING",
        "TERMINATING",
        "TERMINATED",
        "ARRESTED"
      ],
      "type": "string"
    },
    "VirtualClusterStates": {
      "max": 10,
      "member": {
        "shape": "VirtualClusterState"
      },
      "type": "list"
    },
    "VirtualClusters": {
      "member": {
        "shape": "VirtualCluster"
      },
      "type": "list"
    }
  },
  "version": "2.0"
}
