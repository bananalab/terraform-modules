{
  "documentation": "<p>AppSync provides API actions for creating and interacting with data sources using GraphQL from your application.</p>",
  "metadata": {
    "apiVersion": "2017-07-25",
    "endpointPrefix": "appsync",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "AWSAppSync",
    "serviceFullName": "AWS AppSync",
    "serviceId": "AppSync",
    "signatureVersion": "v4",
    "signingName": "appsync",
    "uid": "appsync-2017-07-25"
  },
  "operations": {
    "AssociateApi": {
      "documentation": "<p>Maps an endpoint to your custom domain.</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "NotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/v1/domainnames/{domainName}/apiassociation"
      },
      "input": {
        "shape": "AssociateApiRequest"
      },
      "name": "AssociateApi",
      "output": {
        "shape": "AssociateApiResponse"
      }
    },
    "CreateApiCache": {
      "documentation": "<p>Creates a cache for the GraphQL API.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/v1/apis/{apiId}/ApiCaches"
      },
      "input": {
        "shape": "CreateApiCacheRequest"
      },
      "name": "CreateApiCache",
      "output": {
        "shape": "CreateApiCacheResponse"
      }
    },
    "CreateApiKey": {
      "documentation": "<p>Creates a unique key that you can distribute to clients who invoke your API.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "LimitExceededException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "LimitExceededException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ApiKeyLimitExceededException"
        },
        {
          "shape": "ApiKeyValidityOutOfBoundsException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/v1/apis/{apiId}/apikeys"
      },
      "input": {
        "shape": "CreateApiKeyRequest"
      },
      "name": "CreateApiKey",
      "output": {
        "shape": "CreateApiKeyResponse"
      }
    },
    "CreateDataSource": {
      "documentation": "<p>Creates a <code>DataSource</code> object.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/v1/apis/{apiId}/datasources"
      },
      "input": {
        "shape": "CreateDataSourceRequest"
      },
      "name": "CreateDataSource",
      "output": {
        "shape": "CreateDataSourceResponse"
      }
    },
    "CreateDomainName": {
      "documentation": "<p>Creates a custom <code>DomainName</code> object.</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalFailureException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/v1/domainnames"
      },
      "input": {
        "shape": "CreateDomainNameRequest"
      },
      "name": "CreateDomainName",
      "output": {
        "shape": "CreateDomainNameResponse"
      }
    },
    "CreateFunction": {
      "documentation": "<p>Creates a <code>Function</code> object.</p> <p>A function is a reusable entity. You can use multiple functions to compose the resolver logic.</p>",
      "errors": [
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/v1/apis/{apiId}/functions"
      },
      "input": {
        "shape": "CreateFunctionRequest"
      },
      "name": "CreateFunction",
      "output": {
        "shape": "CreateFunctionResponse"
      }
    },
    "CreateGraphqlApi": {
      "documentation": "<p>Creates a <code>GraphqlApi</code> object.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "LimitExceededException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ApiLimitExceededException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/v1/apis"
      },
      "input": {
        "shape": "CreateGraphqlApiRequest"
      },
      "name": "CreateGraphqlApi",
      "output": {
        "shape": "CreateGraphqlApiResponse"
      }
    },
    "CreateResolver": {
      "documentation": "<p>Creates a <code>Resolver</code> object.</p> <p>A resolver converts incoming requests into a format that a data source can understand, and converts the data source's responses into GraphQL.</p>",
      "errors": [
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/v1/apis/{apiId}/types/{typeName}/resolvers"
      },
      "input": {
        "shape": "CreateResolverRequest"
      },
      "name": "CreateResolver",
      "output": {
        "shape": "CreateResolverResponse"
      }
    },
    "CreateType": {
      "documentation": "<p>Creates a <code>Type</code> object.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/v1/apis/{apiId}/types"
      },
      "input": {
        "shape": "CreateTypeRequest"
      },
      "name": "CreateType",
      "output": {
        "shape": "CreateTypeResponse"
      }
    },
    "DeleteApiCache": {
      "documentation": "<p>Deletes an <code>ApiCache</code> object.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/v1/apis/{apiId}/ApiCaches"
      },
      "input": {
        "shape": "DeleteApiCacheRequest"
      },
      "name": "DeleteApiCache",
      "output": {
        "shape": "DeleteApiCacheResponse"
      }
    },
    "DeleteApiKey": {
      "documentation": "<p>Deletes an API key.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/v1/apis/{apiId}/apikeys/{id}"
      },
      "input": {
        "shape": "DeleteApiKeyRequest"
      },
      "name": "DeleteApiKey",
      "output": {
        "shape": "DeleteApiKeyResponse"
      }
    },
    "DeleteDataSource": {
      "documentation": "<p>Deletes a <code>DataSource</code> object.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/v1/apis/{apiId}/datasources/{name}"
      },
      "input": {
        "shape": "DeleteDataSourceRequest"
      },
      "name": "DeleteDataSource",
      "output": {
        "shape": "DeleteDataSourceResponse"
      }
    },
    "DeleteDomainName": {
      "documentation": "<p>Deletes a custom <code>DomainName</code> object.</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "NotFoundException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/v1/domainnames/{domainName}"
      },
      "input": {
        "shape": "DeleteDomainNameRequest"
      },
      "name": "DeleteDomainName",
      "output": {
        "shape": "DeleteDomainNameResponse"
      }
    },
    "DeleteFunction": {
      "documentation": "<p>Deletes a <code>Function</code>.</p>",
      "errors": [
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/v1/apis/{apiId}/functions/{functionId}"
      },
      "input": {
        "shape": "DeleteFunctionRequest"
      },
      "name": "DeleteFunction",
      "output": {
        "shape": "DeleteFunctionResponse"
      }
    },
    "DeleteGraphqlApi": {
      "documentation": "<p>Deletes a <code>GraphqlApi</code> object.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/v1/apis/{apiId}"
      },
      "input": {
        "shape": "DeleteGraphqlApiRequest"
      },
      "name": "DeleteGraphqlApi",
      "output": {
        "shape": "DeleteGraphqlApiResponse"
      }
    },
    "DeleteResolver": {
      "documentation": "<p>Deletes a <code>Resolver</code> object.</p>",
      "errors": [
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/v1/apis/{apiId}/types/{typeName}/resolvers/{fieldName}"
      },
      "input": {
        "shape": "DeleteResolverRequest"
      },
      "name": "DeleteResolver",
      "output": {
        "shape": "DeleteResolverResponse"
      }
    },
    "DeleteType": {
      "documentation": "<p>Deletes a <code>Type</code> object.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/v1/apis/{apiId}/types/{typeName}"
      },
      "input": {
        "shape": "DeleteTypeRequest"
      },
      "name": "DeleteType",
      "output": {
        "shape": "DeleteTypeResponse"
      }
    },
    "DisassociateApi": {
      "documentation": "<p>Removes an <code>ApiAssociation</code> object from a custom domain.</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "NotFoundException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/v1/domainnames/{domainName}/apiassociation"
      },
      "input": {
        "shape": "DisassociateApiRequest"
      },
      "name": "DisassociateApi",
      "output": {
        "shape": "DisassociateApiResponse"
      }
    },
    "EvaluateMappingTemplate": {
      "documentation": "<p>Evaluates a given template and returns the response. The mapping template can be a request or response template.</p> <p>Request templates take the incoming request after a GraphQL operation is parsed and convert it into a request configuration for the selected data source operation. Response templates interpret responses from the data source and map it to the shape of the GraphQL field output type.</p> <p>Mapping templates are written in the Apache Velocity Template Language (VTL).</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "BadRequestException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/v1/dataplane-evaluatetemplate"
      },
      "input": {
        "shape": "EvaluateMappingTemplateRequest"
      },
      "name": "EvaluateMappingTemplate",
      "output": {
        "shape": "EvaluateMappingTemplateResponse"
      }
    },
    "FlushApiCache": {
      "documentation": "<p>Flushes an <code>ApiCache</code> object.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/v1/apis/{apiId}/FlushCache"
      },
      "input": {
        "shape": "FlushApiCacheRequest"
      },
      "name": "FlushApiCache",
      "output": {
        "shape": "FlushApiCacheResponse"
      }
    },
    "GetApiAssociation": {
      "documentation": "<p>Retrieves an <code>ApiAssociation</code> object.</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "NotFoundException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/v1/domainnames/{domainName}/apiassociation"
      },
      "input": {
        "shape": "GetApiAssociationRequest"
      },
      "name": "GetApiAssociation",
      "output": {
        "shape": "GetApiAssociationResponse"
      }
    },
    "GetApiCache": {
      "documentation": "<p>Retrieves an <code>ApiCache</code> object.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/v1/apis/{apiId}/ApiCaches"
      },
      "input": {
        "shape": "GetApiCacheRequest"
      },
      "name": "GetApiCache",
      "output": {
        "shape": "GetApiCacheResponse"
      }
    },
    "GetDataSource": {
      "documentation": "<p>Retrieves a <code>DataSource</code> object.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/v1/apis/{apiId}/datasources/{name}"
      },
      "input": {
        "shape": "GetDataSourceRequest"
      },
      "name": "GetDataSource",
      "output": {
        "shape": "GetDataSourceResponse"
      }
    },
    "GetDomainName": {
      "documentation": "<p>Retrieves a custom <code>DomainName</code> object.</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "NotFoundException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/v1/domainnames/{domainName}"
      },
      "input": {
        "shape": "GetDomainNameRequest"
      },
      "name": "GetDomainName",
      "output": {
        "shape": "GetDomainNameResponse"
      }
    },
    "GetFunction": {
      "documentation": "<p>Get a <code>Function</code>.</p>",
      "errors": [
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "UnauthorizedException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/v1/apis/{apiId}/functions/{functionId}"
      },
      "input": {
        "shape": "GetFunctionRequest"
      },
      "name": "GetFunction",
      "output": {
        "shape": "GetFunctionResponse"
      }
    },
    "GetGraphqlApi": {
      "documentation": "<p>Retrieves a <code>GraphqlApi</code> object.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/v1/apis/{apiId}"
      },
      "input": {
        "shape": "GetGraphqlApiRequest"
      },
      "name": "GetGraphqlApi",
      "output": {
        "shape": "GetGraphqlApiResponse"
      }
    },
    "GetIntrospectionSchema": {
      "documentation": "<p>Retrieves the introspection schema for a GraphQL API.</p>",
      "errors": [
        {
          "shape": "GraphQLSchemaException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/v1/apis/{apiId}/schema"
      },
      "input": {
        "shape": "GetIntrospectionSchemaRequest"
      },
      "name": "GetIntrospectionSchema",
      "output": {
        "shape": "GetIntrospectionSchemaResponse"
      }
    },
    "GetResolver": {
      "documentation": "<p>Retrieves a <code>Resolver</code> object.</p>",
      "errors": [
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "UnauthorizedException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/v1/apis/{apiId}/types/{typeName}/resolvers/{fieldName}"
      },
      "input": {
        "shape": "GetResolverRequest"
      },
      "name": "GetResolver",
      "output": {
        "shape": "GetResolverResponse"
      }
    },
    "GetSchemaCreationStatus": {
      "documentation": "<p>Retrieves the current status of a schema creation operation.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/v1/apis/{apiId}/schemacreation"
      },
      "input": {
        "shape": "GetSchemaCreationStatusRequest"
      },
      "name": "GetSchemaCreationStatus",
      "output": {
        "shape": "GetSchemaCreationStatusResponse"
      }
    },
    "GetType": {
      "documentation": "<p>Retrieves a <code>Type</code> object.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/v1/apis/{apiId}/types/{typeName}"
      },
      "input": {
        "shape": "GetTypeRequest"
      },
      "name": "GetType",
      "output": {
        "shape": "GetTypeResponse"
      }
    },
    "ListApiKeys": {
      "documentation": "<p>Lists the API keys for a given API.</p> <note> <p>API keys are deleted automatically 60 days after they expire. However, they may still be included in the response until they have actually been deleted. You can safely call <code>DeleteApiKey</code> to manually delete a key before it's automatically deleted.</p> </note>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/v1/apis/{apiId}/apikeys"
      },
      "input": {
        "shape": "ListApiKeysRequest"
      },
      "name": "ListApiKeys",
      "output": {
        "shape": "ListApiKeysResponse"
      }
    },
    "ListDataSources": {
      "documentation": "<p>Lists the data sources for a given API.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/v1/apis/{apiId}/datasources"
      },
      "input": {
        "shape": "ListDataSourcesRequest"
      },
      "name": "ListDataSources",
      "output": {
        "shape": "ListDataSourcesResponse"
      }
    },
    "ListDomainNames": {
      "documentation": "<p>Lists multiple custom domain names.</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalFailureException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/v1/domainnames"
      },
      "input": {
        "shape": "ListDomainNamesRequest"
      },
      "name": "ListDomainNames",
      "output": {
        "shape": "ListDomainNamesResponse"
      }
    },
    "ListFunctions": {
      "documentation": "<p>List multiple functions.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/v1/apis/{apiId}/functions"
      },
      "input": {
        "shape": "ListFunctionsRequest"
      },
      "name": "ListFunctions",
      "output": {
        "shape": "ListFunctionsResponse"
      }
    },
    "ListGraphqlApis": {
      "documentation": "<p>Lists your GraphQL APIs.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/v1/apis"
      },
      "input": {
        "shape": "ListGraphqlApisRequest"
      },
      "name": "ListGraphqlApis",
      "output": {
        "shape": "ListGraphqlApisResponse"
      }
    },
    "ListResolvers": {
      "documentation": "<p>Lists the resolvers for a given API and type.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/v1/apis/{apiId}/types/{typeName}/resolvers"
      },
      "input": {
        "shape": "ListResolversRequest"
      },
      "name": "ListResolvers",
      "output": {
        "shape": "ListResolversResponse"
      }
    },
    "ListResolversByFunction": {
      "documentation": "<p>List the resolvers that are associated with a specific function.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/v1/apis/{apiId}/functions/{functionId}/resolvers"
      },
      "input": {
        "shape": "ListResolversByFunctionRequest"
      },
      "name": "ListResolversByFunction",
      "output": {
        "shape": "ListResolversByFunctionResponse"
      }
    },
    "ListTagsForResource": {
      "documentation": "<p>Lists the tags for a resource.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "LimitExceededException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/v1/tags/{resourceArn}"
      },
      "input": {
        "shape": "ListTagsForResourceRequest"
      },
      "name": "ListTagsForResource",
      "output": {
        "shape": "ListTagsForResourceResponse"
      }
    },
    "ListTypes": {
      "documentation": "<p>Lists the types for a given API.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/v1/apis/{apiId}/types"
      },
      "input": {
        "shape": "ListTypesRequest"
      },
      "name": "ListTypes",
      "output": {
        "shape": "ListTypesResponse"
      }
    },
    "StartSchemaCreation": {
      "documentation": "<p>Adds a new schema to your GraphQL API.</p> <p>This operation is asynchronous. Use to determine when it has completed.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/v1/apis/{apiId}/schemacreation"
      },
      "input": {
        "shape": "StartSchemaCreationRequest"
      },
      "name": "StartSchemaCreation",
      "output": {
        "shape": "StartSchemaCreationResponse"
      }
    },
    "TagResource": {
      "documentation": "<p>Tags a resource with user-supplied tags.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "LimitExceededException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/v1/tags/{resourceArn}"
      },
      "input": {
        "shape": "TagResourceRequest"
      },
      "name": "TagResource",
      "output": {
        "shape": "TagResourceResponse"
      }
    },
    "UntagResource": {
      "documentation": "<p>Untags a resource.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "LimitExceededException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/v1/tags/{resourceArn}"
      },
      "input": {
        "shape": "UntagResourceRequest"
      },
      "name": "UntagResource",
      "output": {
        "shape": "UntagResourceResponse"
      }
    },
    "UpdateApiCache": {
      "documentation": "<p>Updates the cache for the GraphQL API.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/v1/apis/{apiId}/ApiCaches/update"
      },
      "input": {
        "shape": "UpdateApiCacheRequest"
      },
      "name": "UpdateApiCache",
      "output": {
        "shape": "UpdateApiCacheResponse"
      }
    },
    "UpdateApiKey": {
      "documentation": "<p>Updates an API key. You can update the key as long as it's not deleted.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "LimitExceededException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ApiKeyValidityOutOfBoundsException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/v1/apis/{apiId}/apikeys/{id}"
      },
      "input": {
        "shape": "UpdateApiKeyRequest"
      },
      "name": "UpdateApiKey",
      "output": {
        "shape": "UpdateApiKeyResponse"
      }
    },
    "UpdateDataSource": {
      "documentation": "<p>Updates a <code>DataSource</code> object.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/v1/apis/{apiId}/datasources/{name}"
      },
      "input": {
        "shape": "UpdateDataSourceRequest"
      },
      "name": "UpdateDataSource",
      "output": {
        "shape": "UpdateDataSourceResponse"
      }
    },
    "UpdateDomainName": {
      "documentation": "<p>Updates a custom <code>DomainName</code> object.</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "NotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/v1/domainnames/{domainName}"
      },
      "input": {
        "shape": "UpdateDomainNameRequest"
      },
      "name": "UpdateDomainName",
      "output": {
        "shape": "UpdateDomainNameResponse"
      }
    },
    "UpdateFunction": {
      "documentation": "<p>Updates a <code>Function</code> object.</p>",
      "errors": [
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/v1/apis/{apiId}/functions/{functionId}"
      },
      "input": {
        "shape": "UpdateFunctionRequest"
      },
      "name": "UpdateFunction",
      "output": {
        "shape": "UpdateFunctionResponse"
      }
    },
    "UpdateGraphqlApi": {
      "documentation": "<p>Updates a <code>GraphqlApi</code> object.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/v1/apis/{apiId}"
      },
      "input": {
        "shape": "UpdateGraphqlApiRequest"
      },
      "name": "UpdateGraphqlApi",
      "output": {
        "shape": "UpdateGraphqlApiResponse"
      }
    },
    "UpdateResolver": {
      "documentation": "<p>Updates a <code>Resolver</code> object.</p>",
      "errors": [
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/v1/apis/{apiId}/types/{typeName}/resolvers/{fieldName}"
      },
      "input": {
        "shape": "UpdateResolverRequest"
      },
      "name": "UpdateResolver",
      "output": {
        "shape": "UpdateResolverResponse"
      }
    },
    "UpdateType": {
      "documentation": "<p>Updates a <code>Type</code> object.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "NotFoundException"
        },
        {
          "shape": "UnauthorizedException"
        },
        {
          "shape": "InternalFailureException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/v1/apis/{apiId}/types/{typeName}"
      },
      "input": {
        "shape": "UpdateTypeRequest"
      },
      "name": "UpdateType",
      "output": {
        "shape": "UpdateTypeResponse"
      }
    }
  },
  "shapes": {
    "AccessDeniedException": {
      "documentation": "<p>You don't have access to perform this operation on this resource.</p>",
      "error": {
        "httpStatusCode": 403
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "AdditionalAuthenticationProvider": {
      "documentation": "<p>Describes an additional authentication provider.</p>",
      "members": {
        "authenticationType": {
          "documentation": "<p>The authentication type: API key, Identity and Access Management (IAM), OpenID Connect (OIDC), Amazon Cognito user pools, or Lambda.</p>",
          "shape": "AuthenticationType"
        },
        "lambdaAuthorizerConfig": {
          "documentation": "<p>Configuration for Lambda function authorization.</p>",
          "shape": "LambdaAuthorizerConfig"
        },
        "openIDConnectConfig": {
          "documentation": "<p>The OIDC configuration.</p>",
          "shape": "OpenIDConnectConfig"
        },
        "userPoolConfig": {
          "documentation": "<p>The Amazon Cognito user pool configuration.</p>",
          "shape": "CognitoUserPoolConfig"
        }
      },
      "type": "structure"
    },
    "AdditionalAuthenticationProviders": {
      "member": {
        "shape": "AdditionalAuthenticationProvider"
      },
      "type": "list"
    },
    "ApiAssociation": {
      "documentation": "<p>Describes an <code>ApiAssociation</code> object.</p>",
      "members": {
        "apiId": {
          "documentation": "<p>The API ID.</p>",
          "shape": "String"
        },
        "associationStatus": {
          "documentation": "<p>Identifies the status of an association.</p> <ul> <li> <p> <b>PROCESSING</b>: The API association is being created. You cannot modify association requests during processing.</p> </li> <li> <p> <b>SUCCESS</b>: The API association was successful. You can modify associations after success.</p> </li> <li> <p> <b>FAILED</b>: The API association has failed. You can modify associations after failure.</p> </li> </ul>",
          "shape": "AssociationStatus"
        },
        "deploymentDetail": {
          "documentation": "<p>Details about the last deployment status.</p>",
          "shape": "String"
        },
        "domainName": {
          "documentation": "<p>The domain name.</p>",
          "shape": "DomainName"
        }
      },
      "type": "structure"
    },
    "ApiCache": {
      "documentation": "<p>The <code>ApiCache</code> object.</p>",
      "members": {
        "apiCachingBehavior": {
          "documentation": "<p>Caching behavior.</p> <ul> <li> <p> <b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</p> </li> <li> <p> <b>PER_RESOLVER_CACHING</b>: Individual resolvers that you specify are cached.</p> </li> </ul>",
          "shape": "ApiCachingBehavior"
        },
        "atRestEncryptionEnabled": {
          "documentation": "<p>At-rest encryption flag for cache. You cannot update this setting after creation.</p>",
          "shape": "Boolean"
        },
        "status": {
          "documentation": "<p>The cache instance status.</p> <ul> <li> <p> <b>AVAILABLE</b>: The instance is available for use.</p> </li> <li> <p> <b>CREATING</b>: The instance is currently creating.</p> </li> <li> <p> <b>DELETING</b>: The instance is currently deleting.</p> </li> <li> <p> <b>MODIFYING</b>: The instance is currently modifying.</p> </li> <li> <p> <b>FAILED</b>: The instance has failed creation.</p> </li> </ul>",
          "shape": "ApiCacheStatus"
        },
        "transitEncryptionEnabled": {
          "documentation": "<p>Transit encryption flag when connecting to cache. You cannot update this setting after creation.</p>",
          "shape": "Boolean"
        },
        "ttl": {
          "documentation": "<p>TTL in seconds for cache entries.</p> <p>Valid values are 1\u20133,600 seconds.</p>",
          "shape": "Long"
        },
        "type": {
          "documentation": "<p>The cache instance type. Valid values are </p> <ul> <li> <p> <code>SMALL</code> </p> </li> <li> <p> <code>MEDIUM</code> </p> </li> <li> <p> <code>LARGE</code> </p> </li> <li> <p> <code>XLARGE</code> </p> </li> <li> <p> <code>LARGE_2X</code> </p> </li> <li> <p> <code>LARGE_4X</code> </p> </li> <li> <p> <code>LARGE_8X</code> (not available in all regions)</p> </li> <li> <p> <code>LARGE_12X</code> </p> </li> </ul> <p>Historically, instance types were identified by an EC2-style value. As of July 2020, this is deprecated, and the generic identifiers above should be used.</p> <p>The following legacy instance types are available, but their use is discouraged:</p> <ul> <li> <p> <b>T2_SMALL</b>: A t2.small instance type.</p> </li> <li> <p> <b>T2_MEDIUM</b>: A t2.medium instance type.</p> </li> <li> <p> <b>R4_LARGE</b>: A r4.large instance type.</p> </li> <li> <p> <b>R4_XLARGE</b>: A r4.xlarge instance type.</p> </li> <li> <p> <b>R4_2XLARGE</b>: A r4.2xlarge instance type.</p> </li> <li> <p> <b>R4_4XLARGE</b>: A r4.4xlarge instance type.</p> </li> <li> <p> <b>R4_8XLARGE</b>: A r4.8xlarge instance type.</p> </li> </ul>",
          "shape": "ApiCacheType"
        }
      },
      "type": "structure"
    },
    "ApiCacheStatus": {
      "enum": [
        "AVAILABLE",
        "CREATING",
        "DELETING",
        "MODIFYING",
        "FAILED"
      ],
      "type": "string"
    },
    "ApiCacheType": {
      "enum": [
        "T2_SMALL",
        "T2_MEDIUM",
        "R4_LARGE",
        "R4_XLARGE",
        "R4_2XLARGE",
        "R4_4XLARGE",
        "R4_8XLARGE",
        "SMALL",
        "MEDIUM",
        "LARGE",
        "XLARGE",
        "LARGE_2X",
        "LARGE_4X",
        "LARGE_8X",
        "LARGE_12X"
      ],
      "type": "string"
    },
    "ApiCachingBehavior": {
      "enum": [
        "FULL_REQUEST_CACHING",
        "PER_RESOLVER_CACHING"
      ],
      "type": "string"
    },
    "ApiKey": {
      "documentation": "<p>Describes an API key.</p> <p>Customers invoke AppSync GraphQL API operations with API keys as an identity mechanism. There are two key versions:</p> <p> <b>da1</b>: We introduced this version at launch in November 2017. These keys always expire after 7 days. Amazon DynamoDB TTL manages key expiration. These keys ceased to be valid after February 21, 2018, and they should no longer be used.</p> <ul> <li> <p> <code>ListApiKeys</code> returns the expiration time in milliseconds.</p> </li> <li> <p> <code>CreateApiKey</code> returns the expiration time in milliseconds.</p> </li> <li> <p> <code>UpdateApiKey</code> is not available for this key version.</p> </li> <li> <p> <code>DeleteApiKey</code> deletes the item from the table.</p> </li> <li> <p>Expiration is stored in DynamoDB as milliseconds. This results in a bug where keys are not automatically deleted because DynamoDB expects the TTL to be stored in seconds. As a one-time action, we deleted these keys from the table on February 21, 2018.</p> </li> </ul> <p> <b>da2</b>: We introduced this version in February 2018 when AppSync added support to extend key expiration.</p> <ul> <li> <p> <code>ListApiKeys</code> returns the expiration time and deletion time in seconds.</p> </li> <li> <p> <code>CreateApiKey</code> returns the expiration time and deletion time in seconds and accepts a user-provided expiration time in seconds.</p> </li> <li> <p> <code>UpdateApiKey</code> returns the expiration time and and deletion time in seconds and accepts a user-provided expiration time in seconds. Expired API keys are kept for 60 days after the expiration time. You can update the key expiration time as long as the key isn't deleted.</p> </li> <li> <p> <code>DeleteApiKey</code> deletes the item from the table.</p> </li> <li> <p>Expiration is stored in DynamoDB as seconds. After the expiration time, using the key to authenticate will fail. However, you can reinstate the key before deletion.</p> </li> <li> <p>Deletion is stored in DynamoDB as seconds. The key is deleted after deletion time.</p> </li> </ul>",
      "members": {
        "deletes": {
          "documentation": "<p>The time after which the API key is deleted. The date is represented as seconds since the epoch, rounded down to the nearest hour.</p>",
          "shape": "Long"
        },
        "description": {
          "documentation": "<p>A description of the purpose of the API key.</p>",
          "shape": "String"
        },
        "expires": {
          "documentation": "<p>The time after which the API key expires. The date is represented as seconds since the epoch, rounded down to the nearest hour.</p>",
          "shape": "Long"
        },
        "id": {
          "documentation": "<p>The API key ID.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ApiKeyLimitExceededException": {
      "documentation": "<p>The API key exceeded a limit. Try your request again.</p>",
      "error": {
        "httpStatusCode": 400
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ApiKeyValidityOutOfBoundsException": {
      "documentation": "<p>The API key expiration must be set to a value between 1 and 365 days from creation (for <code>CreateApiKey</code>) or from update (for <code>UpdateApiKey</code>).</p>",
      "error": {
        "httpStatusCode": 400
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ApiKeys": {
      "member": {
        "shape": "ApiKey"
      },
      "type": "list"
    },
    "ApiLimitExceededException": {
      "documentation": "<p>The GraphQL API exceeded a limit. Try your request again.</p>",
      "error": {
        "httpStatusCode": 400
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "AssociateApiRequest": {
      "members": {
        "apiId": {
          "documentation": "<p>The API ID.</p>",
          "shape": "String"
        },
        "domainName": {
          "documentation": "<p>The domain name.</p>",
          "location": "uri",
          "locationName": "domainName",
          "shape": "DomainName"
        }
      },
      "required": [
        "domainName",
        "apiId"
      ],
      "type": "structure"
    },
    "AssociateApiResponse": {
      "members": {
        "apiAssociation": {
          "documentation": "<p>The <code>ApiAssociation</code> object.</p>",
          "shape": "ApiAssociation"
        }
      },
      "type": "structure"
    },
    "AssociationStatus": {
      "enum": [
        "PROCESSING",
        "FAILED",
        "SUCCESS"
      ],
      "type": "string"
    },
    "AuthenticationType": {
      "enum": [
        "API_KEY",
        "AWS_IAM",
        "AMAZON_COGNITO_USER_POOLS",
        "OPENID_CONNECT",
        "AWS_LAMBDA"
      ],
      "type": "string"
    },
    "AuthorizationConfig": {
      "documentation": "<p>The authorization configuration in case the HTTP endpoint requires authorization.</p>",
      "members": {
        "authorizationType": {
          "documentation": "<p>The authorization type that the HTTP endpoint requires.</p> <ul> <li> <p> <b>AWS_IAM</b>: The authorization type is Signature Version 4 (SigV4).</p> </li> </ul>",
          "shape": "AuthorizationType"
        },
        "awsIamConfig": {
          "documentation": "<p>The Identity and Access Management (IAM) settings.</p>",
          "shape": "AwsIamConfig"
        }
      },
      "required": [
        "authorizationType"
      ],
      "type": "structure"
    },
    "AuthorizationType": {
      "enum": [
        "AWS_IAM"
      ],
      "type": "string"
    },
    "AwsIamConfig": {
      "documentation": "<p>The Identity and Access Management (IAM) configuration.</p>",
      "members": {
        "signingRegion": {
          "documentation": "<p>The signing Amazon Web Services Region for IAM authorization.</p>",
          "shape": "String"
        },
        "signingServiceName": {
          "documentation": "<p>The signing service name for IAM authorization.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "BadRequestException": {
      "documentation": "<p>The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.</p>",
      "error": {
        "httpStatusCode": 400
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "ErrorMessage"
        }
      },
      "type": "structure"
    },
    "Blob": {
      "type": "blob"
    },
    "Boolean": {
      "type": "boolean"
    },
    "BooleanValue": {
      "type": "boolean"
    },
    "CachingConfig": {
      "documentation": "<p>The caching configuration for a resolver that has caching activated.</p>",
      "members": {
        "cachingKeys": {
          "documentation": "<p>The caching keys for a resolver that has caching activated.</p> <p>Valid values are entries from the <code>$context.arguments</code>, <code>$context.source</code>, and <code>$context.identity</code> maps.</p>",
          "shape": "CachingKeys"
        },
        "ttl": {
          "documentation": "<p>The TTL in seconds for a resolver that has caching activated.</p> <p>Valid values are 1\u20133,600 seconds.</p>",
          "shape": "Long"
        }
      },
      "required": [
        "ttl"
      ],
      "type": "structure"
    },
    "CachingKeys": {
      "member": {
        "shape": "String"
      },
      "type": "list"
    },
    "CertificateArn": {
      "max": 2048,
      "min": 20,
      "pattern": "^arn:[a-z-]*:(acm|iam):[a-z0-9-]*:\\d{12}:(certificate|server-certificate)/[0-9A-Za-z_/-]*$",
      "type": "string"
    },
    "CognitoUserPoolConfig": {
      "documentation": "<p>Describes an Amazon Cognito user pool configuration.</p>",
      "members": {
        "appIdClientRegex": {
          "documentation": "<p>A regular expression for validating the incoming Amazon Cognito user pool app client ID. If this value isn't set, no filtering is applied.</p>",
          "shape": "String"
        },
        "awsRegion": {
          "documentation": "<p>The Amazon Web Services Region in which the user pool was created.</p>",
          "shape": "String"
        },
        "userPoolId": {
          "documentation": "<p>The user pool ID.</p>",
          "shape": "String"
        }
      },
      "required": [
        "userPoolId",
        "awsRegion"
      ],
      "type": "structure"
    },
    "ConcurrentModificationException": {
      "documentation": "<p>Another modification is in progress at this time and it must complete before you can make your change.</p>",
      "error": {
        "httpStatusCode": 409
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "ErrorMessage"
        }
      },
      "type": "structure"
    },
    "ConflictDetectionType": {
      "enum": [
        "VERSION",
        "NONE"
      ],
      "type": "string"
    },
    "ConflictHandlerType": {
      "enum": [
        "OPTIMISTIC_CONCURRENCY",
        "LAMBDA",
        "AUTOMERGE",
        "NONE"
      ],
      "type": "string"
    },
    "Context": {
      "max": 28000,
      "min": 2,
      "pattern": "^[\\s\\S]*$",
      "type": "string"
    },
    "CreateApiCacheRequest": {
      "documentation": "<p>Represents the input of a <code>CreateApiCache</code> operation.</p>",
      "members": {
        "apiCachingBehavior": {
          "documentation": "<p>Caching behavior.</p> <ul> <li> <p> <b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</p> </li> <li> <p> <b>PER_RESOLVER_CACHING</b>: Individual resolvers that you specify are cached.</p> </li> </ul>",
          "shape": "ApiCachingBehavior"
        },
        "apiId": {
          "documentation": "<p>The GraphQL API ID.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        },
        "atRestEncryptionEnabled": {
          "documentation": "<p>At-rest encryption flag for cache. You cannot update this setting after creation.</p>",
          "shape": "Boolean"
        },
        "transitEncryptionEnabled": {
          "documentation": "<p>Transit encryption flag when connecting to cache. You cannot update this setting after creation.</p>",
          "shape": "Boolean"
        },
        "ttl": {
          "documentation": "<p>TTL in seconds for cache entries.</p> <p>Valid values are 1\u20133,600 seconds.</p>",
          "shape": "Long"
        },
        "type": {
          "documentation": "<p>The cache instance type. Valid values are </p> <ul> <li> <p> <code>SMALL</code> </p> </li> <li> <p> <code>MEDIUM</code> </p> </li> <li> <p> <code>LARGE</code> </p> </li> <li> <p> <code>XLARGE</code> </p> </li> <li> <p> <code>LARGE_2X</code> </p> </li> <li> <p> <code>LARGE_4X</code> </p> </li> <li> <p> <code>LARGE_8X</code> (not available in all regions)</p> </li> <li> <p> <code>LARGE_12X</code> </p> </li> </ul> <p>Historically, instance types were identified by an EC2-style value. As of July 2020, this is deprecated, and the generic identifiers above should be used.</p> <p>The following legacy instance types are available, but their use is discouraged:</p> <ul> <li> <p> <b>T2_SMALL</b>: A t2.small instance type.</p> </li> <li> <p> <b>T2_MEDIUM</b>: A t2.medium instance type.</p> </li> <li> <p> <b>R4_LARGE</b>: A r4.large instance type.</p> </li> <li> <p> <b>R4_XLARGE</b>: A r4.xlarge instance type.</p> </li> <li> <p> <b>R4_2XLARGE</b>: A r4.2xlarge instance type.</p> </li> <li> <p> <b>R4_4XLARGE</b>: A r4.4xlarge instance type.</p> </li> <li> <p> <b>R4_8XLARGE</b>: A r4.8xlarge instance type.</p> </li> </ul>",
          "shape": "ApiCacheType"
        }
      },
      "required": [
        "apiId",
        "ttl",
        "apiCachingBehavior",
        "type"
      ],
      "type": "structure"
    },
    "CreateApiCacheResponse": {
      "documentation": "<p>Represents the output of a <code>CreateApiCache</code> operation.</p>",
      "members": {
        "apiCache": {
          "documentation": "<p>The <code>ApiCache</code> object.</p>",
          "shape": "ApiCache"
        }
      },
      "type": "structure"
    },
    "CreateApiKeyRequest": {
      "members": {
        "apiId": {
          "documentation": "<p>The ID for your GraphQL API.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        },
        "description": {
          "documentation": "<p>A description of the purpose of the API key.</p>",
          "shape": "String"
        },
        "expires": {
          "documentation": "<p>From the creation time, the time after which the API key expires. The date is represented as seconds since the epoch, rounded down to the nearest hour. The default value for this parameter is 7 days from creation time. For more information, see .</p>",
          "shape": "Long"
        }
      },
      "required": [
        "apiId"
      ],
      "type": "structure"
    },
    "CreateApiKeyResponse": {
      "members": {
        "apiKey": {
          "documentation": "<p>The API key.</p>",
          "shape": "ApiKey"
        }
      },
      "type": "structure"
    },
    "CreateDataSourceRequest": {
      "members": {
        "apiId": {
          "documentation": "<p>The API ID for the GraphQL API for the <code>DataSource</code>.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        },
        "description": {
          "documentation": "<p>A description of the <code>DataSource</code>.</p>",
          "shape": "String"
        },
        "dynamodbConfig": {
          "documentation": "<p>Amazon DynamoDB settings.</p>",
          "shape": "DynamodbDataSourceConfig"
        },
        "elasticsearchConfig": {
          "documentation": "<p>Amazon OpenSearch Service settings.</p> <p>As of September 2021, Amazon Elasticsearch service is Amazon OpenSearch Service. This configuration is deprecated. For new data sources, use <a>CreateDataSourceRequest$openSearchServiceConfig</a> to create an OpenSearch data source.</p>",
          "shape": "ElasticsearchDataSourceConfig"
        },
        "httpConfig": {
          "documentation": "<p>HTTP endpoint settings.</p>",
          "shape": "HttpDataSourceConfig"
        },
        "lambdaConfig": {
          "documentation": "<p>Lambda settings.</p>",
          "shape": "LambdaDataSourceConfig"
        },
        "name": {
          "documentation": "<p>A user-supplied name for the <code>DataSource</code>.</p>",
          "shape": "ResourceName"
        },
        "openSearchServiceConfig": {
          "documentation": "<p>Amazon OpenSearch Service settings.</p>",
          "shape": "OpenSearchServiceDataSourceConfig"
        },
        "relationalDatabaseConfig": {
          "documentation": "<p>Relational database settings.</p>",
          "shape": "RelationalDatabaseDataSourceConfig"
        },
        "serviceRoleArn": {
          "documentation": "<p>The Identity and Access Management (IAM) service role Amazon Resource Name (ARN) for the data source. The system assumes this role when accessing the data source.</p>",
          "shape": "String"
        },
        "type": {
          "documentation": "<p>The type of the <code>DataSource</code>.</p>",
          "shape": "DataSourceType"
        }
      },
      "required": [
        "apiId",
        "name",
        "type"
      ],
      "type": "structure"
    },
    "CreateDataSourceResponse": {
      "members": {
        "dataSource": {
          "documentation": "<p>The <code>DataSource</code> object.</p>",
          "shape": "DataSource"
        }
      },
      "type": "structure"
    },
    "CreateDomainNameRequest": {
      "members": {
        "certificateArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the certificate. This can be an Certificate Manager (ACM) certificate or an Identity and Access Management (IAM) server certificate.</p>",
          "shape": "CertificateArn"
        },
        "description": {
          "documentation": "<p>A description of the <code>DomainName</code>.</p>",
          "shape": "Description"
        },
        "domainName": {
          "documentation": "<p>The domain name.</p>",
          "shape": "DomainName"
        }
      },
      "required": [
        "domainName",
        "certificateArn"
      ],
      "type": "structure"
    },
    "CreateDomainNameResponse": {
      "members": {
        "domainNameConfig": {
          "documentation": "<p>The configuration for the <code>DomainName</code>.</p>",
          "shape": "DomainNameConfig"
        }
      },
      "type": "structure"
    },
    "CreateFunctionRequest": {
      "members": {
        "apiId": {
          "documentation": "<p>The GraphQL API ID.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        },
        "dataSourceName": {
          "documentation": "<p>The <code>Function</code> <code>DataSource</code> name.</p>",
          "shape": "ResourceName"
        },
        "description": {
          "documentation": "<p>The <code>Function</code> description.</p>",
          "shape": "String"
        },
        "functionVersion": {
          "documentation": "<p>The <code>version</code> of the request mapping template. Currently, the supported value is 2018-05-29.</p>",
          "shape": "String"
        },
        "maxBatchSize": {
          "documentation": "<p>The maximum batching size for a resolver.</p>",
          "shape": "MaxBatchSize"
        },
        "name": {
          "documentation": "<p>The <code>Function</code> name. The function name does not have to be unique.</p>",
          "shape": "ResourceName"
        },
        "requestMappingTemplate": {
          "documentation": "<p>The <code>Function</code> request mapping template. Functions support only the 2018-05-29 version of the request mapping template.</p>",
          "shape": "MappingTemplate"
        },
        "responseMappingTemplate": {
          "documentation": "<p>The <code>Function</code> response mapping template.</p>",
          "shape": "MappingTemplate"
        },
        "syncConfig": {
          "shape": "SyncConfig"
        }
      },
      "required": [
        "apiId",
        "name",
        "dataSourceName",
        "functionVersion"
      ],
      "type": "structure"
    },
    "CreateFunctionResponse": {
      "members": {
        "functionConfiguration": {
          "documentation": "<p>The <code>Function</code> object.</p>",
          "shape": "FunctionConfiguration"
        }
      },
      "type": "structure"
    },
    "CreateGraphqlApiRequest": {
      "members": {
        "additionalAuthenticationProviders": {
          "documentation": "<p>A list of additional authentication providers for the <code>GraphqlApi</code> API.</p>",
          "shape": "AdditionalAuthenticationProviders"
        },
        "authenticationType": {
          "documentation": "<p>The authentication type: API key, Identity and Access Management (IAM), OpenID Connect (OIDC), Amazon Cognito user pools, or Lambda.</p>",
          "shape": "AuthenticationType"
        },
        "lambdaAuthorizerConfig": {
          "documentation": "<p>Configuration for Lambda function authorization.</p>",
          "shape": "LambdaAuthorizerConfig"
        },
        "logConfig": {
          "documentation": "<p>The Amazon CloudWatch Logs configuration.</p>",
          "shape": "LogConfig"
        },
        "name": {
          "documentation": "<p>A user-supplied name for the <code>GraphqlApi</code>.</p>",
          "shape": "String"
        },
        "openIDConnectConfig": {
          "documentation": "<p>The OIDC configuration.</p>",
          "shape": "OpenIDConnectConfig"
        },
        "tags": {
          "documentation": "<p>A <code>TagMap</code> object.</p>",
          "shape": "TagMap"
        },
        "userPoolConfig": {
          "documentation": "<p>The Amazon Cognito user pool configuration.</p>",
          "shape": "UserPoolConfig"
        },
        "xrayEnabled": {
          "documentation": "<p>A flag indicating whether to use X-Ray tracing for the <code>GraphqlApi</code>.</p>",
          "shape": "Boolean"
        }
      },
      "required": [
        "name",
        "authenticationType"
      ],
      "type": "structure"
    },
    "CreateGraphqlApiResponse": {
      "members": {
        "graphqlApi": {
          "documentation": "<p>The <code>GraphqlApi</code>.</p>",
          "shape": "GraphqlApi"
        }
      },
      "type": "structure"
    },
    "CreateResolverRequest": {
      "members": {
        "apiId": {
          "documentation": "<p>The ID for the GraphQL API for which the resolver is being created.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        },
        "cachingConfig": {
          "documentation": "<p>The caching configuration for the resolver.</p>",
          "shape": "CachingConfig"
        },
        "dataSourceName": {
          "documentation": "<p>The name of the data source for which the resolver is being created.</p>",
          "shape": "ResourceName"
        },
        "fieldName": {
          "documentation": "<p>The name of the field to attach the resolver to.</p>",
          "shape": "ResourceName"
        },
        "kind": {
          "documentation": "<p>The resolver type.</p> <ul> <li> <p> <b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default resolver type. You can use a UNIT resolver to run a GraphQL query against a single data source.</p> </li> <li> <p> <b>PIPELINE</b>: A PIPELINE resolver type. You can use a PIPELINE resolver to invoke a series of <code>Function</code> objects in a serial manner. You can use a pipeline resolver to run a GraphQL query against multiple data sources.</p> </li> </ul>",
          "shape": "ResolverKind"
        },
        "maxBatchSize": {
          "documentation": "<p>The maximum batching size for a resolver.</p>",
          "shape": "MaxBatchSize"
        },
        "pipelineConfig": {
          "documentation": "<p>The <code>PipelineConfig</code>.</p>",
          "shape": "PipelineConfig"
        },
        "requestMappingTemplate": {
          "documentation": "<p>The mapping template to use for requests.</p> <p>A resolver uses a request mapping template to convert a GraphQL expression into a format that a data source can understand. Mapping templates are written in Apache Velocity Template Language (VTL).</p> <p>VTL request mapping templates are optional when using an Lambda data source. For all other data sources, VTL request and response mapping templates are required.</p>",
          "shape": "MappingTemplate"
        },
        "responseMappingTemplate": {
          "documentation": "<p>The mapping template to use for responses from the data source.</p>",
          "shape": "MappingTemplate"
        },
        "syncConfig": {
          "documentation": "<p>The <code>SyncConfig</code> for a resolver attached to a versioned data source.</p>",
          "shape": "SyncConfig"
        },
        "typeName": {
          "documentation": "<p>The name of the <code>Type</code>.</p>",
          "location": "uri",
          "locationName": "typeName",
          "shape": "ResourceName"
        }
      },
      "required": [
        "apiId",
        "typeName",
        "fieldName"
      ],
      "type": "structure"
    },
    "CreateResolverResponse": {
      "members": {
        "resolver": {
          "documentation": "<p>The <code>Resolver</code> object.</p>",
          "shape": "Resolver"
        }
      },
      "type": "structure"
    },
    "CreateTypeRequest": {
      "members": {
        "apiId": {
          "documentation": "<p>The API ID.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        },
        "definition": {
          "documentation": "<p>The type definition, in GraphQL Schema Definition Language (SDL) format.</p> <p>For more information, see the <a href=\"http://graphql.org/learn/schema/\">GraphQL SDL documentation</a>.</p>",
          "shape": "String"
        },
        "format": {
          "documentation": "<p>The type format: SDL or JSON.</p>",
          "shape": "TypeDefinitionFormat"
        }
      },
      "required": [
        "apiId",
        "definition",
        "format"
      ],
      "type": "structure"
    },
    "CreateTypeResponse": {
      "members": {
        "type": {
          "documentation": "<p>The <code>Type</code> object.</p>",
          "shape": "Type"
        }
      },
      "type": "structure"
    },
    "DataSource": {
      "documentation": "<p>Describes a data source.</p>",
      "members": {
        "dataSourceArn": {
          "documentation": "<p>The data source Amazon Resource Name (ARN).</p>",
          "shape": "String"
        },
        "description": {
          "documentation": "<p>The description of the data source.</p>",
          "shape": "String"
        },
        "dynamodbConfig": {
          "documentation": "<p>DynamoDB settings.</p>",
          "shape": "DynamodbDataSourceConfig"
        },
        "elasticsearchConfig": {
          "documentation": "<p>Amazon OpenSearch Service settings.</p>",
          "shape": "ElasticsearchDataSourceConfig"
        },
        "httpConfig": {
          "documentation": "<p>HTTP endpoint settings.</p>",
          "shape": "HttpDataSourceConfig"
        },
        "lambdaConfig": {
          "documentation": "<p>Lambda settings.</p>",
          "shape": "LambdaDataSourceConfig"
        },
        "name": {
          "documentation": "<p>The name of the data source.</p>",
          "shape": "ResourceName"
        },
        "openSearchServiceConfig": {
          "documentation": "<p>Amazon OpenSearch Service settings.</p>",
          "shape": "OpenSearchServiceDataSourceConfig"
        },
        "relationalDatabaseConfig": {
          "documentation": "<p>Relational database settings.</p>",
          "shape": "RelationalDatabaseDataSourceConfig"
        },
        "serviceRoleArn": {
          "documentation": "<p>The Identity and Access Management (IAM) service role Amazon Resource Name (ARN) for the data source. The system assumes this role when accessing the data source.</p>",
          "shape": "String"
        },
        "type": {
          "documentation": "<p>The type of the data source.</p> <ul> <li> <p> <b>AWS_LAMBDA</b>: The data source is an Lambda function.</p> </li> <li> <p> <b>AMAZON_DYNAMODB</b>: The data source is an Amazon DynamoDB table.</p> </li> <li> <p> <b>AMAZON_ELASTICSEARCH</b>: The data source is an Amazon OpenSearch Service domain.</p> </li> <li> <p> <b>AMAZON_OPENSEARCH_SERVICE</b>: The data source is an Amazon OpenSearch Service domain.</p> </li> <li> <p> <b>NONE</b>: There is no data source. Use this type when you want to invoke a GraphQL operation without connecting to a data source, such as when you're performing data transformation with resolvers or invoking a subscription from a mutation.</p> </li> <li> <p> <b>HTTP</b>: The data source is an HTTP endpoint.</p> </li> <li> <p> <b>RELATIONAL_DATABASE</b>: The data source is a relational database.</p> </li> </ul>",
          "shape": "DataSourceType"
        }
      },
      "type": "structure"
    },
    "DataSourceType": {
      "enum": [
        "AWS_LAMBDA",
        "AMAZON_DYNAMODB",
        "AMAZON_ELASTICSEARCH",
        "NONE",
        "HTTP",
        "RELATIONAL_DATABASE",
        "AMAZON_OPENSEARCH_SERVICE"
      ],
      "type": "string"
    },
    "DataSources": {
      "member": {
        "shape": "DataSource"
      },
      "type": "list"
    },
    "DefaultAction": {
      "enum": [
        "ALLOW",
        "DENY"
      ],
      "type": "string"
    },
    "DeleteApiCacheRequest": {
      "documentation": "<p>Represents the input of a <code>DeleteApiCache</code> operation.</p>",
      "members": {
        "apiId": {
          "documentation": "<p>The API ID.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        }
      },
      "required": [
        "apiId"
      ],
      "type": "structure"
    },
    "DeleteApiCacheResponse": {
      "documentation": "<p>Represents the output of a <code>DeleteApiCache</code> operation.</p>",
      "members": {},
      "type": "structure"
    },
    "DeleteApiKeyRequest": {
      "members": {
        "apiId": {
          "documentation": "<p>The API ID.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        },
        "id": {
          "documentation": "<p>The ID for the API key.</p>",
          "location": "uri",
          "locationName": "id",
          "shape": "String"
        }
      },
      "required": [
        "apiId",
        "id"
      ],
      "type": "structure"
    },
    "DeleteApiKeyResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteDataSourceRequest": {
      "members": {
        "apiId": {
          "documentation": "<p>The API ID.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        },
        "name": {
          "documentation": "<p>The name of the data source.</p>",
          "location": "uri",
          "locationName": "name",
          "shape": "ResourceName"
        }
      },
      "required": [
        "apiId",
        "name"
      ],
      "type": "structure"
    },
    "DeleteDataSourceResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteDomainNameRequest": {
      "members": {
        "domainName": {
          "documentation": "<p>The domain name.</p>",
          "location": "uri",
          "locationName": "domainName",
          "shape": "DomainName"
        }
      },
      "required": [
        "domainName"
      ],
      "type": "structure"
    },
    "DeleteDomainNameResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteFunctionRequest": {
      "members": {
        "apiId": {
          "documentation": "<p>The GraphQL API ID.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        },
        "functionId": {
          "documentation": "<p>The <code>Function</code> ID.</p>",
          "location": "uri",
          "locationName": "functionId",
          "shape": "ResourceName"
        }
      },
      "required": [
        "apiId",
        "functionId"
      ],
      "type": "structure"
    },
    "DeleteFunctionResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteGraphqlApiRequest": {
      "members": {
        "apiId": {
          "documentation": "<p>The API ID.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        }
      },
      "required": [
        "apiId"
      ],
      "type": "structure"
    },
    "DeleteGraphqlApiResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteResolverRequest": {
      "members": {
        "apiId": {
          "documentation": "<p>The API ID.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        },
        "fieldName": {
          "documentation": "<p>The resolver field name.</p>",
          "location": "uri",
          "locationName": "fieldName",
          "shape": "ResourceName"
        },
        "typeName": {
          "documentation": "<p>The name of the resolver type.</p>",
          "location": "uri",
          "locationName": "typeName",
          "shape": "ResourceName"
        }
      },
      "required": [
        "apiId",
        "typeName",
        "fieldName"
      ],
      "type": "structure"
    },
    "DeleteResolverResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteTypeRequest": {
      "members": {
        "apiId": {
          "documentation": "<p>The API ID.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        },
        "typeName": {
          "documentation": "<p>The type name.</p>",
          "location": "uri",
          "locationName": "typeName",
          "shape": "ResourceName"
        }
      },
      "required": [
        "apiId",
        "typeName"
      ],
      "type": "structure"
    },
    "DeleteTypeResponse": {
      "members": {},
      "type": "structure"
    },
    "DeltaSyncConfig": {
      "documentation": "<p>Describes a Delta Sync configuration.</p>",
      "members": {
        "baseTableTTL": {
          "documentation": "<p>The number of minutes that an Item is stored in the data source.</p>",
          "shape": "Long"
        },
        "deltaSyncTableName": {
          "documentation": "<p>The Delta Sync table name.</p>",
          "shape": "String"
        },
        "deltaSyncTableTTL": {
          "documentation": "<p>The number of minutes that a Delta Sync log entry is stored in the Delta Sync table.</p>",
          "shape": "Long"
        }
      },
      "type": "structure"
    },
    "Description": {
      "max": 255,
      "min": 0,
      "pattern": "^.*$",
      "type": "string"
    },
    "DisassociateApiRequest": {
      "members": {
        "domainName": {
          "documentation": "<p>The domain name.</p>",
          "location": "uri",
          "locationName": "domainName",
          "shape": "DomainName"
        }
      },
      "required": [
        "domainName"
      ],
      "type": "structure"
    },
    "DisassociateApiResponse": {
      "members": {},
      "type": "structure"
    },
    "DomainName": {
      "max": 253,
      "min": 1,
      "pattern": "^(\\*[\\w\\d-]*\\.)?([\\w\\d-]+\\.)+[\\w\\d-]+$",
      "type": "string"
    },
    "DomainNameConfig": {
      "documentation": "<p>Describes a configuration for a custom domain.</p>",
      "members": {
        "appsyncDomainName": {
          "documentation": "<p>The domain name that AppSync provides.</p>",
          "shape": "String"
        },
        "certificateArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the certificate. This can be an Certificate Manager (ACM) certificate or an Identity and Access Management (IAM) server certificate.</p>",
          "shape": "CertificateArn"
        },
        "description": {
          "documentation": "<p>A description of the <code>DomainName</code> configuration.</p>",
          "shape": "Description"
        },
        "domainName": {
          "documentation": "<p>The domain name.</p>",
          "shape": "DomainName"
        },
        "hostedZoneId": {
          "documentation": "<p>The ID of your Amazon Route\u00a053 hosted zone.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "DomainNameConfigs": {
      "member": {
        "shape": "DomainNameConfig"
      },
      "type": "list"
    },
    "DynamodbDataSourceConfig": {
      "documentation": "<p>Describes an Amazon DynamoDB data source configuration.</p>",
      "members": {
        "awsRegion": {
          "documentation": "<p>The Amazon Web Services Region.</p>",
          "shape": "String"
        },
        "deltaSyncConfig": {
          "documentation": "<p>The <code>DeltaSyncConfig</code> for a versioned data source.</p>",
          "shape": "DeltaSyncConfig"
        },
        "tableName": {
          "documentation": "<p>The table name.</p>",
          "shape": "String"
        },
        "useCallerCredentials": {
          "documentation": "<p>Set to TRUE to use Amazon Cognito credentials with this data source.</p>",
          "shape": "Boolean"
        },
        "versioned": {
          "documentation": "<p>Set to TRUE to use Conflict Detection and Resolution with this data source.</p>",
          "shape": "Boolean"
        }
      },
      "required": [
        "tableName",
        "awsRegion"
      ],
      "type": "structure"
    },
    "ElasticsearchDataSourceConfig": {
      "documentation": "<p>Describes an OpenSearch data source configuration.</p> <p>As of September 2021, Amazon Elasticsearch service is Amazon OpenSearch Service. This configuration is deprecated. For new data sources, use <a>OpenSearchServiceDataSourceConfig</a> to specify an OpenSearch data source.</p>",
      "members": {
        "awsRegion": {
          "documentation": "<p>The Amazon Web Services Region.</p>",
          "shape": "String"
        },
        "endpoint": {
          "documentation": "<p>The endpoint.</p>",
          "shape": "String"
        }
      },
      "required": [
        "endpoint",
        "awsRegion"
      ],
      "type": "structure"
    },
    "ErrorDetail": {
      "documentation": "<p>Contains the list of errors generated when attempting to evaluate a mapping template.</p>",
      "members": {
        "message": {
          "documentation": "<p>The error payload.</p>",
          "shape": "ErrorMessage"
        }
      },
      "type": "structure"
    },
    "ErrorMessage": {
      "type": "string"
    },
    "EvaluateMappingTemplateRequest": {
      "members": {
        "context": {
          "documentation": "<p>The map that holds all of the contextual information for your resolver invocation. A <code>context</code> is required for this action.</p>",
          "shape": "Context"
        },
        "template": {
          "documentation": "<p>The mapping template; this can be a request or response template. A <code>template</code> is required for this action.</p>",
          "shape": "Template"
        }
      },
      "required": [
        "template",
        "context"
      ],
      "type": "structure"
    },
    "EvaluateMappingTemplateResponse": {
      "members": {
        "error": {
          "documentation": "<p>The <code>ErrorDetail</code> object.</p>",
          "shape": "ErrorDetail"
        },
        "evaluationResult": {
          "documentation": "<p>The mapping template; this can be a request or response template.</p>",
          "shape": "EvaluationResult"
        }
      },
      "type": "structure"
    },
    "EvaluationResult": {
      "max": 65536,
      "min": 0,
      "pattern": "^[\\s\\S]*$",
      "type": "string"
    },
    "FieldLogLevel": {
      "enum": [
        "NONE",
        "ERROR",
        "ALL"
      ],
      "type": "string"
    },
    "FlushApiCacheRequest": {
      "documentation": "<p>Represents the input of a <code>FlushApiCache</code> operation.</p>",
      "members": {
        "apiId": {
          "documentation": "<p>The API ID.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        }
      },
      "required": [
        "apiId"
      ],
      "type": "structure"
    },
    "FlushApiCacheResponse": {
      "documentation": "<p>Represents the output of a <code>FlushApiCache</code> operation.</p>",
      "members": {},
      "type": "structure"
    },
    "FunctionConfiguration": {
      "documentation": "<p>A function is a reusable entity. You can use multiple functions to compose the resolver logic.</p>",
      "members": {
        "dataSourceName": {
          "documentation": "<p>The name of the <code>DataSource</code>.</p>",
          "shape": "ResourceName"
        },
        "description": {
          "documentation": "<p>The <code>Function</code> description.</p>",
          "shape": "String"
        },
        "functionArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the <code>Function</code> object.</p>",
          "shape": "String"
        },
        "functionId": {
          "documentation": "<p>A unique ID representing the <code>Function</code> object.</p>",
          "shape": "String"
        },
        "functionVersion": {
          "documentation": "<p>The version of the request mapping template. Currently, only the 2018-05-29 version of the template is supported.</p>",
          "shape": "String"
        },
        "maxBatchSize": {
          "documentation": "<p>The maximum batching size for a resolver.</p>",
          "shape": "MaxBatchSize"
        },
        "name": {
          "documentation": "<p>The name of the <code>Function</code> object.</p>",
          "shape": "ResourceName"
        },
        "requestMappingTemplate": {
          "documentation": "<p>The <code>Function</code> request mapping template. Functions support only the 2018-05-29 version of the request mapping template.</p>",
          "shape": "MappingTemplate"
        },
        "responseMappingTemplate": {
          "documentation": "<p>The <code>Function</code> response mapping template.</p>",
          "shape": "MappingTemplate"
        },
        "syncConfig": {
          "shape": "SyncConfig"
        }
      },
      "type": "structure"
    },
    "Functions": {
      "member": {
        "shape": "FunctionConfiguration"
      },
      "type": "list"
    },
    "FunctionsIds": {
      "member": {
        "shape": "String"
      },
      "type": "list"
    },
    "GetApiAssociationRequest": {
      "members": {
        "domainName": {
          "documentation": "<p>The domain name.</p>",
          "location": "uri",
          "locationName": "domainName",
          "shape": "DomainName"
        }
      },
      "required": [
        "domainName"
      ],
      "type": "structure"
    },
    "GetApiAssociationResponse": {
      "members": {
        "apiAssociation": {
          "documentation": "<p>The <code>ApiAssociation</code> object.</p>",
          "shape": "ApiAssociation"
        }
      },
      "type": "structure"
    },
    "GetApiCacheRequest": {
      "documentation": "<p>Represents the input of a <code>GetApiCache</code> operation.</p>",
      "members": {
        "apiId": {
          "documentation": "<p>The API ID.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        }
      },
      "required": [
        "apiId"
      ],
      "type": "structure"
    },
    "GetApiCacheResponse": {
      "documentation": "<p>Represents the output of a <code>GetApiCache</code> operation.</p>",
      "members": {
        "apiCache": {
          "documentation": "<p>The <code>ApiCache</code> object.</p>",
          "shape": "ApiCache"
        }
      },
      "type": "structure"
    },
    "GetDataSourceRequest": {
      "members": {
        "apiId": {
          "documentation": "<p>The API ID.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        },
        "name": {
          "documentation": "<p>The name of the data source.</p>",
          "location": "uri",
          "locationName": "name",
          "shape": "ResourceName"
        }
      },
      "required": [
        "apiId",
        "name"
      ],
      "type": "structure"
    },
    "GetDataSourceResponse": {
      "members": {
        "dataSource": {
          "documentation": "<p>The <code>DataSource</code> object.</p>",
          "shape": "DataSource"
        }
      },
      "type": "structure"
    },
    "GetDomainNameRequest": {
      "members": {
        "domainName": {
          "documentation": "<p>The domain name.</p>",
          "location": "uri",
          "locationName": "domainName",
          "shape": "DomainName"
        }
      },
      "required": [
        "domainName"
      ],
      "type": "structure"
    },
    "GetDomainNameResponse": {
      "members": {
        "domainNameConfig": {
          "documentation": "<p>The configuration for the <code>DomainName</code>.</p>",
          "shape": "DomainNameConfig"
        }
      },
      "type": "structure"
    },
    "GetFunctionRequest": {
      "members": {
        "apiId": {
          "documentation": "<p>The GraphQL API ID.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        },
        "functionId": {
          "documentation": "<p>The <code>Function</code> ID.</p>",
          "location": "uri",
          "locationName": "functionId",
          "shape": "ResourceName"
        }
      },
      "required": [
        "apiId",
        "functionId"
      ],
      "type": "structure"
    },
    "GetFunctionResponse": {
      "members": {
        "functionConfiguration": {
          "documentation": "<p>The <code>Function</code> object.</p>",
          "shape": "FunctionConfiguration"
        }
      },
      "type": "structure"
    },
    "GetGraphqlApiRequest": {
      "members": {
        "apiId": {
          "documentation": "<p>The API ID for the GraphQL API.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        }
      },
      "required": [
        "apiId"
      ],
      "type": "structure"
    },
    "GetGraphqlApiResponse": {
      "members": {
        "graphqlApi": {
          "documentation": "<p>The <code>GraphqlApi</code> object.</p>",
          "shape": "GraphqlApi"
        }
      },
      "type": "structure"
    },
    "GetIntrospectionSchemaRequest": {
      "members": {
        "apiId": {
          "documentation": "<p>The API ID.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        },
        "format": {
          "documentation": "<p>The schema format: SDL or JSON.</p>",
          "location": "querystring",
          "locationName": "format",
          "shape": "OutputType"
        },
        "includeDirectives": {
          "documentation": "<p>A flag that specifies whether the schema introspection should contain directives.</p>",
          "location": "querystring",
          "locationName": "includeDirectives",
          "shape": "BooleanValue"
        }
      },
      "required": [
        "apiId",
        "format"
      ],
      "type": "structure"
    },
    "GetIntrospectionSchemaResponse": {
      "members": {
        "schema": {
          "documentation": "<p>The schema, in GraphQL Schema Definition Language (SDL) format.</p> <p>For more information, see the <a href=\"http://graphql.org/learn/schema/\">GraphQL SDL documentation</a>.</p>",
          "shape": "Blob"
        }
      },
      "payload": "schema",
      "type": "structure"
    },
    "GetResolverRequest": {
      "members": {
        "apiId": {
          "documentation": "<p>The API ID.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        },
        "fieldName": {
          "documentation": "<p>The resolver field name.</p>",
          "location": "uri",
          "locationName": "fieldName",
          "shape": "ResourceName"
        },
        "typeName": {
          "documentation": "<p>The resolver type name.</p>",
          "location": "uri",
          "locationName": "typeName",
          "shape": "ResourceName"
        }
      },
      "required": [
        "apiId",
        "typeName",
        "fieldName"
      ],
      "type": "structure"
    },
    "GetResolverResponse": {
      "members": {
        "resolver": {
          "documentation": "<p>The <code>Resolver</code> object.</p>",
          "shape": "Resolver"
        }
      },
      "type": "structure"
    },
    "GetSchemaCreationStatusRequest": {
      "members": {
        "apiId": {
          "documentation": "<p>The API ID.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        }
      },
      "required": [
        "apiId"
      ],
      "type": "structure"
    },
    "GetSchemaCreationStatusResponse": {
      "members": {
        "details": {
          "documentation": "<p>Detailed information about the status of the schema creation operation.</p>",
          "shape": "String"
        },
        "status": {
          "documentation": "<p>The current state of the schema (PROCESSING, FAILED, SUCCESS, or NOT_APPLICABLE). When the schema is in the ACTIVE state, you can add data.</p>",
          "shape": "SchemaStatus"
        }
      },
      "type": "structure"
    },
    "GetTypeRequest": {
      "members": {
        "apiId": {
          "documentation": "<p>The API ID.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        },
        "format": {
          "documentation": "<p>The type format: SDL or JSON.</p>",
          "location": "querystring",
          "locationName": "format",
          "shape": "TypeDefinitionFormat"
        },
        "typeName": {
          "documentation": "<p>The type name.</p>",
          "location": "uri",
          "locationName": "typeName",
          "shape": "ResourceName"
        }
      },
      "required": [
        "apiId",
        "typeName",
        "format"
      ],
      "type": "structure"
    },
    "GetTypeResponse": {
      "members": {
        "type": {
          "documentation": "<p>The <code>Type</code> object.</p>",
          "shape": "Type"
        }
      },
      "type": "structure"
    },
    "GraphQLSchemaException": {
      "documentation": "<p>The GraphQL schema is not valid.</p>",
      "error": {
        "httpStatusCode": 400
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "ErrorMessage"
        }
      },
      "type": "structure"
    },
    "GraphqlApi": {
      "documentation": "<p>Describes a GraphQL API.</p>",
      "members": {
        "additionalAuthenticationProviders": {
          "documentation": "<p>A list of additional authentication providers for the <code>GraphqlApi</code> API.</p>",
          "shape": "AdditionalAuthenticationProviders"
        },
        "apiId": {
          "documentation": "<p>The API ID.</p>",
          "shape": "String"
        },
        "arn": {
          "documentation": "<p>The Amazon Resource Name (ARN).</p>",
          "shape": "String"
        },
        "authenticationType": {
          "documentation": "<p>The authentication type.</p>",
          "shape": "AuthenticationType"
        },
        "lambdaAuthorizerConfig": {
          "documentation": "<p>Configuration for Lambda function authorization.</p>",
          "shape": "LambdaAuthorizerConfig"
        },
        "logConfig": {
          "documentation": "<p>The Amazon CloudWatch Logs configuration.</p>",
          "shape": "LogConfig"
        },
        "name": {
          "documentation": "<p>The API name.</p>",
          "shape": "ResourceName"
        },
        "openIDConnectConfig": {
          "documentation": "<p>The OpenID Connect configuration.</p>",
          "shape": "OpenIDConnectConfig"
        },
        "tags": {
          "documentation": "<p>The tags.</p>",
          "shape": "TagMap"
        },
        "uris": {
          "documentation": "<p>The URIs.</p>",
          "shape": "MapOfStringToString"
        },
        "userPoolConfig": {
          "documentation": "<p>The Amazon Cognito user pool configuration.</p>",
          "shape": "UserPoolConfig"
        },
        "wafWebAclArn": {
          "documentation": "<p>The ARN of the WAF access control list (ACL) associated with this <code>GraphqlApi</code>, if one exists.</p>",
          "shape": "String"
        },
        "xrayEnabled": {
          "documentation": "<p>A flag indicating whether to use X-Ray tracing for this <code>GraphqlApi</code>.</p>",
          "shape": "Boolean"
        }
      },
      "type": "structure"
    },
    "GraphqlApis": {
      "member": {
        "shape": "GraphqlApi"
      },
      "type": "list"
    },
    "HttpDataSourceConfig": {
      "documentation": "<p>Describes an HTTP data source configuration.</p>",
      "members": {
        "authorizationConfig": {
          "documentation": "<p>The authorization configuration in case the HTTP endpoint requires authorization.</p>",
          "shape": "AuthorizationConfig"
        },
        "endpoint": {
          "documentation": "<p>The HTTP URL endpoint. You can specify either the domain name or IP, and port combination, and the URL scheme must be HTTP or HTTPS. If you don't specify the port, AppSync uses the default port 80 for the HTTP endpoint and port 443 for HTTPS endpoints.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "InternalFailureException": {
      "documentation": "<p>An internal AppSync error occurred. Try your request again.</p>",
      "error": {
        "httpStatusCode": 500
      },
      "exception": true,
      "fault": true,
      "members": {
        "message": {
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "LambdaAuthorizerConfig": {
      "documentation": "<p>A <code>LambdaAuthorizerConfig</code> specifies how to authorize AppSync API access when using the <code>AWS_LAMBDA</code> authorizer mode. Be aware that an AppSync API can have only one Lambda authorizer configured at a time.</p>",
      "members": {
        "authorizerResultTtlInSeconds": {
          "documentation": "<p>The number of seconds a response should be cached for. The default is 5 minutes (300 seconds). The Lambda function can override this by returning a <code>ttlOverride</code> key in its response. A value of 0 disables caching of responses.</p>",
          "shape": "TTL"
        },
        "authorizerUri": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the Lambda function to be called for authorization. This can be a standard Lambda ARN, a version ARN (<code>.../v3</code>), or an alias ARN. </p> <p> <b>Note</b>: This Lambda function must have the following resource-based policy assigned to it. When configuring Lambda authorizers in the console, this is done for you. To use the Command Line Interface (CLI), run the following:</p> <p> <code>aws lambda add-permission --function-name \"arn:aws:lambda:us-east-2:111122223333:function:my-function\" --statement-id \"appsync\" --principal appsync.amazonaws.com --action lambda:InvokeFunction</code> </p>",
          "shape": "String"
        },
        "identityValidationExpression": {
          "documentation": "<p>A regular expression for validation of tokens before the Lambda function is called.</p>",
          "shape": "String"
        }
      },
      "required": [
        "authorizerUri"
      ],
      "type": "structure"
    },
    "LambdaConflictHandlerConfig": {
      "documentation": "<p>The <code>LambdaConflictHandlerConfig</code> object when configuring <code>LAMBDA</code> as the Conflict Handler.</p>",
      "members": {
        "lambdaConflictHandlerArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) for the Lambda function to use as the Conflict Handler.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "LambdaDataSourceConfig": {
      "documentation": "<p>Describes an Lambda data source configuration.</p>",
      "members": {
        "lambdaFunctionArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) for the Lambda function.</p>",
          "shape": "String"
        }
      },
      "required": [
        "lambdaFunctionArn"
      ],
      "type": "structure"
    },
    "LimitExceededException": {
      "documentation": "<p>The request exceeded a limit. Try your request again.</p>",
      "error": {
        "httpStatusCode": 429
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ListApiKeysRequest": {
      "members": {
        "apiId": {
          "documentation": "<p>The API ID.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        },
        "maxResults": {
          "documentation": "<p>The maximum number of results that you want the request to return.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>An identifier that was returned from the previous call to this operation, which you can use to return the next set of items in the list.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "PaginationToken"
        }
      },
      "required": [
        "apiId"
      ],
      "type": "structure"
    },
    "ListApiKeysResponse": {
      "members": {
        "apiKeys": {
          "documentation": "<p>The <code>ApiKey</code> objects.</p>",
          "shape": "ApiKeys"
        },
        "nextToken": {
          "documentation": "<p>An identifier to pass in the next request to this operation to return the next set of items in the list.</p>",
          "shape": "PaginationToken"
        }
      },
      "type": "structure"
    },
    "ListDataSourcesRequest": {
      "members": {
        "apiId": {
          "documentation": "<p>The API ID.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        },
        "maxResults": {
          "documentation": "<p>The maximum number of results that you want the request to return.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>An identifier that was returned from the previous call to this operation, which you can use to return the next set of items in the list.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "PaginationToken"
        }
      },
      "required": [
        "apiId"
      ],
      "type": "structure"
    },
    "ListDataSourcesResponse": {
      "members": {
        "dataSources": {
          "documentation": "<p>The <code>DataSource</code> objects.</p>",
          "shape": "DataSources"
        },
        "nextToken": {
          "documentation": "<p>An identifier to pass in the next request to this operation to return the next set of items in the list.</p>",
          "shape": "PaginationToken"
        }
      },
      "type": "structure"
    },
    "ListDomainNamesRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p>The maximum number of results that you want the request to return.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>The API token.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "PaginationToken"
        }
      },
      "type": "structure"
    },
    "ListDomainNamesResponse": {
      "members": {
        "domainNameConfigs": {
          "documentation": "<p>Lists configurations for multiple domain names.</p>",
          "shape": "DomainNameConfigs"
        },
        "nextToken": {
          "documentation": "<p>The API token.</p>",
          "shape": "PaginationToken"
        }
      },
      "type": "structure"
    },
    "ListFunctionsRequest": {
      "members": {
        "apiId": {
          "documentation": "<p>The GraphQL API ID.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        },
        "maxResults": {
          "documentation": "<p>The maximum number of results that you want the request to return.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>An identifier that was returned from the previous call to this operation, which you can use to return the next set of items in the list.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "PaginationToken"
        }
      },
      "required": [
        "apiId"
      ],
      "type": "structure"
    },
    "ListFunctionsResponse": {
      "members": {
        "functions": {
          "documentation": "<p>A list of <code>Function</code> objects.</p>",
          "shape": "Functions"
        },
        "nextToken": {
          "documentation": "<p>An identifier that was returned from the previous call to this operation, which you can use to return the next set of items in the list.</p>",
          "shape": "PaginationToken"
        }
      },
      "type": "structure"
    },
    "ListGraphqlApisRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p>The maximum number of results that you want the request to return.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>An identifier that was returned from the previous call to this operation, which you can use to return the next set of items in the list.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "PaginationToken"
        }
      },
      "type": "structure"
    },
    "ListGraphqlApisResponse": {
      "members": {
        "graphqlApis": {
          "documentation": "<p>The <code>GraphqlApi</code> objects.</p>",
          "shape": "GraphqlApis"
        },
        "nextToken": {
          "documentation": "<p>An identifier to pass in the next request to this operation to return the next set of items in the list.</p>",
          "shape": "PaginationToken"
        }
      },
      "type": "structure"
    },
    "ListResolversByFunctionRequest": {
      "members": {
        "apiId": {
          "documentation": "<p>The API ID.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        },
        "functionId": {
          "documentation": "<p>The function ID.</p>",
          "location": "uri",
          "locationName": "functionId",
          "shape": "String"
        },
        "maxResults": {
          "documentation": "<p>The maximum number of results that you want the request to return.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>An identifier that was returned from the previous call to this operation, which you can use to return the next set of items in the list.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "PaginationToken"
        }
      },
      "required": [
        "apiId",
        "functionId"
      ],
      "type": "structure"
    },
    "ListResolversByFunctionResponse": {
      "members": {
        "nextToken": {
          "documentation": "<p>An identifier that you can use to return the next set of items in the list.</p>",
          "shape": "PaginationToken"
        },
        "resolvers": {
          "documentation": "<p>The list of resolvers.</p>",
          "shape": "Resolvers"
        }
      },
      "type": "structure"
    },
    "ListResolversRequest": {
      "members": {
        "apiId": {
          "documentation": "<p>The API ID.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        },
        "maxResults": {
          "documentation": "<p>The maximum number of results that you want the request to return.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>An identifier that was returned from the previous call to this operation, which you can use to return the next set of items in the list.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "PaginationToken"
        },
        "typeName": {
          "documentation": "<p>The type name.</p>",
          "location": "uri",
          "locationName": "typeName",
          "shape": "String"
        }
      },
      "required": [
        "apiId",
        "typeName"
      ],
      "type": "structure"
    },
    "ListResolversResponse": {
      "members": {
        "nextToken": {
          "documentation": "<p>An identifier to pass in the next request to this operation to return the next set of items in the list.</p>",
          "shape": "PaginationToken"
        },
        "resolvers": {
          "documentation": "<p>The <code>Resolver</code> objects.</p>",
          "shape": "Resolvers"
        }
      },
      "type": "structure"
    },
    "ListTagsForResourceRequest": {
      "members": {
        "resourceArn": {
          "documentation": "<p>The <code>GraphqlApi</code> Amazon Resource Name (ARN).</p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "ResourceArn"
        }
      },
      "required": [
        "resourceArn"
      ],
      "type": "structure"
    },
    "ListTagsForResourceResponse": {
      "members": {
        "tags": {
          "documentation": "<p>A <code>TagMap</code> object.</p>",
          "shape": "TagMap"
        }
      },
      "type": "structure"
    },
    "ListTypesRequest": {
      "members": {
        "apiId": {
          "documentation": "<p>The API ID.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        },
        "format": {
          "documentation": "<p>The type format: SDL or JSON.</p>",
          "location": "querystring",
          "locationName": "format",
          "shape": "TypeDefinitionFormat"
        },
        "maxResults": {
          "documentation": "<p>The maximum number of results that you want the request to return.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>An identifier that was returned from the previous call to this operation, which you can use to return the next set of items in the list.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "PaginationToken"
        }
      },
      "required": [
        "apiId",
        "format"
      ],
      "type": "structure"
    },
    "ListTypesResponse": {
      "members": {
        "nextToken": {
          "documentation": "<p>An identifier to pass in the next request to this operation to return the next set of items in the list.</p>",
          "shape": "PaginationToken"
        },
        "types": {
          "documentation": "<p>The <code>Type</code> objects.</p>",
          "shape": "TypeList"
        }
      },
      "type": "structure"
    },
    "LogConfig": {
      "documentation": "<p>The Amazon CloudWatch Logs configuration.</p>",
      "members": {
        "cloudWatchLogsRoleArn": {
          "documentation": "<p>The service role that AppSync assumes to publish to CloudWatch logs in your account.</p>",
          "shape": "String"
        },
        "excludeVerboseContent": {
          "documentation": "<p>Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging level.</p>",
          "shape": "Boolean"
        },
        "fieldLogLevel": {
          "documentation": "<p>The field logging level. Values can be NONE, ERROR, or ALL.</p> <ul> <li> <p> <b>NONE</b>: No field-level logs are captured.</p> </li> <li> <p> <b>ERROR</b>: Logs the following information only for the fields that are in error:</p> <ul> <li> <p>The error section in the server response.</p> </li> <li> <p>Field-level errors.</p> </li> <li> <p>The generated request/response functions that got resolved for error fields.</p> </li> </ul> </li> <li> <p> <b>ALL</b>: The following information is logged for all fields in the query:</p> <ul> <li> <p>Field-level tracing information.</p> </li> <li> <p>The generated request/response functions that got resolved for each field.</p> </li> </ul> </li> </ul>",
          "shape": "FieldLogLevel"
        }
      },
      "required": [
        "fieldLogLevel",
        "cloudWatchLogsRoleArn"
      ],
      "type": "structure"
    },
    "Long": {
      "type": "long"
    },
    "MapOfStringToString": {
      "key": {
        "shape": "String"
      },
      "type": "map",
      "value": {
        "shape": "String"
      }
    },
    "MappingTemplate": {
      "max": 65536,
      "min": 1,
      "pattern": "^.*$",
      "type": "string"
    },
    "MaxBatchSize": {
      "max": 2000,
      "min": 0,
      "type": "integer"
    },
    "MaxResults": {
      "max": 25,
      "min": 0,
      "type": "integer"
    },
    "NotFoundException": {
      "documentation": "<p>The resource specified in the request was not found. Check the resource, and then try again.</p>",
      "error": {
        "httpStatusCode": 404
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "OpenIDConnectConfig": {
      "documentation": "<p>Describes an OpenID Connect (OIDC) configuration.</p>",
      "members": {
        "authTTL": {
          "documentation": "<p>The number of milliseconds that a token is valid after being authenticated.</p>",
          "shape": "Long"
        },
        "clientId": {
          "documentation": "<p>The client identifier of the relying party at the OpenID identity provider. This identifier is typically obtained when the relying party is registered with the OpenID identity provider. You can specify a regular expression so that AppSync can validate against multiple client identifiers at a time.</p>",
          "shape": "String"
        },
        "iatTTL": {
          "documentation": "<p>The number of milliseconds that a token is valid after it's issued to a user.</p>",
          "shape": "Long"
        },
        "issuer": {
          "documentation": "<p>The issuer for the OIDC configuration. The issuer returned by discovery must exactly match the value of <code>iss</code> in the ID token.</p>",
          "shape": "String"
        }
      },
      "required": [
        "issuer"
      ],
      "type": "structure"
    },
    "OpenSearchServiceDataSourceConfig": {
      "documentation": "<p>Describes an OpenSearch data source configuration.</p>",
      "members": {
        "awsRegion": {
          "documentation": "<p>The Amazon Web Services Region.</p>",
          "shape": "String"
        },
        "endpoint": {
          "documentation": "<p>The endpoint.</p>",
          "shape": "String"
        }
      },
      "required": [
        "endpoint",
        "awsRegion"
      ],
      "type": "structure"
    },
    "OutputType": {
      "enum": [
        "SDL",
        "JSON"
      ],
      "type": "string"
    },
    "PaginationToken": {
      "max": 65536,
      "min": 1,
      "pattern": "[\\\\S]+",
      "type": "string"
    },
    "PipelineConfig": {
      "documentation": "<p>The pipeline configuration for a resolver of kind <code>PIPELINE</code>.</p>",
      "members": {
        "functions": {
          "documentation": "<p>A list of <code>Function</code> objects.</p>",
          "shape": "FunctionsIds"
        }
      },
      "type": "structure"
    },
    "RdsHttpEndpointConfig": {
      "documentation": "<p>The Amazon Relational Database Service (Amazon RDS) HTTP endpoint configuration.</p>",
      "members": {
        "awsRegion": {
          "documentation": "<p>Amazon Web Services Region for Amazon RDS HTTP endpoint.</p>",
          "shape": "String"
        },
        "awsSecretStoreArn": {
          "documentation": "<p>Amazon Web Services secret store Amazon Resource Name (ARN) for database credentials.</p>",
          "shape": "String"
        },
        "databaseName": {
          "documentation": "<p>Logical database name.</p>",
          "shape": "String"
        },
        "dbClusterIdentifier": {
          "documentation": "<p>Amazon RDS cluster Amazon Resource Name (ARN).</p>",
          "shape": "String"
        },
        "schema": {
          "documentation": "<p>Logical schema name.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "RelationalDatabaseDataSourceConfig": {
      "documentation": "<p>Describes a relational database data source configuration.</p>",
      "members": {
        "rdsHttpEndpointConfig": {
          "documentation": "<p>Amazon RDS HTTP endpoint settings.</p>",
          "shape": "RdsHttpEndpointConfig"
        },
        "relationalDatabaseSourceType": {
          "documentation": "<p>Source type for the relational database.</p> <ul> <li> <p> <b>RDS_HTTP_ENDPOINT</b>: The relational database source type is an Amazon Relational Database Service (Amazon RDS) HTTP endpoint.</p> </li> </ul>",
          "shape": "RelationalDatabaseSourceType"
        }
      },
      "type": "structure"
    },
    "RelationalDatabaseSourceType": {
      "enum": [
        "RDS_HTTP_ENDPOINT"
      ],
      "type": "string"
    },
    "Resolver": {
      "documentation": "<p>Describes a resolver.</p>",
      "members": {
        "cachingConfig": {
          "documentation": "<p>The caching configuration for the resolver.</p>",
          "shape": "CachingConfig"
        },
        "dataSourceName": {
          "documentation": "<p>The resolver data source name.</p>",
          "shape": "ResourceName"
        },
        "fieldName": {
          "documentation": "<p>The resolver field name.</p>",
          "shape": "ResourceName"
        },
        "kind": {
          "documentation": "<p>The resolver type.</p> <ul> <li> <p> <b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default resolver type. You can use a UNIT resolver to run a GraphQL query against a single data source.</p> </li> <li> <p> <b>PIPELINE</b>: A PIPELINE resolver type. You can use a PIPELINE resolver to invoke a series of <code>Function</code> objects in a serial manner. You can use a pipeline resolver to run a GraphQL query against multiple data sources.</p> </li> </ul>",
          "shape": "ResolverKind"
        },
        "maxBatchSize": {
          "documentation": "<p>The maximum batching size for a resolver.</p>",
          "shape": "MaxBatchSize"
        },
        "pipelineConfig": {
          "documentation": "<p>The <code>PipelineConfig</code>.</p>",
          "shape": "PipelineConfig"
        },
        "requestMappingTemplate": {
          "documentation": "<p>The request mapping template.</p>",
          "shape": "MappingTemplate"
        },
        "resolverArn": {
          "documentation": "<p>The resolver Amazon Resource Name (ARN).</p>",
          "shape": "String"
        },
        "responseMappingTemplate": {
          "documentation": "<p>The response mapping template.</p>",
          "shape": "MappingTemplate"
        },
        "syncConfig": {
          "documentation": "<p>The <code>SyncConfig</code> for a resolver attached to a versioned data source.</p>",
          "shape": "SyncConfig"
        },
        "typeName": {
          "documentation": "<p>The resolver type name.</p>",
          "shape": "ResourceName"
        }
      },
      "type": "structure"
    },
    "ResolverKind": {
      "enum": [
        "UNIT",
        "PIPELINE"
      ],
      "type": "string"
    },
    "Resolvers": {
      "member": {
        "shape": "Resolver"
      },
      "type": "list"
    },
    "ResourceArn": {
      "max": 75,
      "min": 70,
      "pattern": "^arn:aws:appsync:[A-Za-z0-9_/.-]{0,63}:\\d{12}:apis/[0-9A-Za-z_-]{26}$",
      "type": "string"
    },
    "ResourceName": {
      "max": 65536,
      "min": 1,
      "pattern": "[_A-Za-z][_0-9A-Za-z]*",
      "type": "string"
    },
    "SchemaStatus": {
      "enum": [
        "PROCESSING",
        "ACTIVE",
        "DELETING",
        "FAILED",
        "SUCCESS",
        "NOT_APPLICABLE"
      ],
      "type": "string"
    },
    "StartSchemaCreationRequest": {
      "members": {
        "apiId": {
          "documentation": "<p>The API ID.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        },
        "definition": {
          "documentation": "<p>The schema definition, in GraphQL schema language format.</p>",
          "shape": "Blob"
        }
      },
      "required": [
        "apiId",
        "definition"
      ],
      "type": "structure"
    },
    "StartSchemaCreationResponse": {
      "members": {
        "status": {
          "documentation": "<p>The current state of the schema (PROCESSING, FAILED, SUCCESS, or NOT_APPLICABLE). When the schema is in the ACTIVE state, you can add data.</p>",
          "shape": "SchemaStatus"
        }
      },
      "type": "structure"
    },
    "String": {
      "type": "string"
    },
    "SyncConfig": {
      "documentation": "<p>Describes a Sync configuration for a resolver.</p> <p>Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.</p>",
      "members": {
        "conflictDetection": {
          "documentation": "<p>The Conflict Detection strategy to use.</p> <ul> <li> <p> <b>VERSION</b>: Detect conflicts based on object versions for this resolver.</p> </li> <li> <p> <b>NONE</b>: Do not detect conflicts when invoking this resolver.</p> </li> </ul>",
          "shape": "ConflictDetectionType"
        },
        "conflictHandler": {
          "documentation": "<p>The Conflict Resolution strategy to perform in the event of a conflict.</p> <ul> <li> <p> <b>OPTIMISTIC_CONCURRENCY</b>: Resolve conflicts by rejecting mutations when versions don't match the latest version at the server.</p> </li> <li> <p> <b>AUTOMERGE</b>: Resolve conflicts with the Automerge conflict resolution strategy.</p> </li> <li> <p> <b>LAMBDA</b>: Resolve conflicts with an Lambda function supplied in the <code>LambdaConflictHandlerConfig</code>.</p> </li> </ul>",
          "shape": "ConflictHandlerType"
        },
        "lambdaConflictHandlerConfig": {
          "documentation": "<p>The <code>LambdaConflictHandlerConfig</code> when configuring <code>LAMBDA</code> as the Conflict Handler.</p>",
          "shape": "LambdaConflictHandlerConfig"
        }
      },
      "type": "structure"
    },
    "TTL": {
      "max": 3600,
      "min": 0,
      "type": "integer"
    },
    "TagKey": {
      "documentation": "<p>The key for the tag.</p>",
      "max": 128,
      "min": 1,
      "pattern": "^(?!aws:)[ a-zA-Z+-=._:/]+$",
      "type": "string"
    },
    "TagKeyList": {
      "max": 50,
      "member": {
        "shape": "TagKey"
      },
      "min": 1,
      "type": "list"
    },
    "TagMap": {
      "documentation": "<p>A map with keys of <code>TagKey</code> objects and values of <code>TagValue</code> objects.</p>",
      "key": {
        "shape": "TagKey"
      },
      "max": 50,
      "min": 1,
      "type": "map",
      "value": {
        "shape": "TagValue"
      }
    },
    "TagResourceRequest": {
      "members": {
        "resourceArn": {
          "documentation": "<p>The <code>GraphqlApi</code> Amazon Resource Name (ARN).</p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "ResourceArn"
        },
        "tags": {
          "documentation": "<p>A <code>TagMap</code> object.</p>",
          "shape": "TagMap"
        }
      },
      "required": [
        "resourceArn",
        "tags"
      ],
      "type": "structure"
    },
    "TagResourceResponse": {
      "members": {},
      "type": "structure"
    },
    "TagValue": {
      "documentation": "<p>The value for the tag.</p>",
      "max": 256,
      "pattern": "^[\\s\\w+-=\\.:/@]*$",
      "type": "string"
    },
    "Template": {
      "max": 65536,
      "min": 2,
      "pattern": "^[\\s\\S]*$",
      "type": "string"
    },
    "Type": {
      "documentation": "<p>Describes a type.</p>",
      "members": {
        "arn": {
          "documentation": "<p>The type Amazon Resource Name (ARN).</p>",
          "shape": "String"
        },
        "definition": {
          "documentation": "<p>The type definition.</p>",
          "shape": "String"
        },
        "description": {
          "documentation": "<p>The type description.</p>",
          "shape": "String"
        },
        "format": {
          "documentation": "<p>The type format: SDL or JSON.</p>",
          "shape": "TypeDefinitionFormat"
        },
        "name": {
          "documentation": "<p>The type name.</p>",
          "shape": "ResourceName"
        }
      },
      "type": "structure"
    },
    "TypeDefinitionFormat": {
      "enum": [
        "SDL",
        "JSON"
      ],
      "type": "string"
    },
    "TypeList": {
      "member": {
        "shape": "Type"
      },
      "type": "list"
    },
    "UnauthorizedException": {
      "documentation": "<p>You aren't authorized to perform this operation.</p>",
      "error": {
        "httpStatusCode": 401
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "UntagResourceRequest": {
      "members": {
        "resourceArn": {
          "documentation": "<p>The <code>GraphqlApi</code> Amazon Resource Name (ARN).</p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "ResourceArn"
        },
        "tagKeys": {
          "documentation": "<p>A list of <code>TagKey</code> objects.</p>",
          "location": "querystring",
          "locationName": "tagKeys",
          "shape": "TagKeyList"
        }
      },
      "required": [
        "resourceArn",
        "tagKeys"
      ],
      "type": "structure"
    },
    "UntagResourceResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateApiCacheRequest": {
      "documentation": "<p>Represents the input of a <code>UpdateApiCache</code> operation.</p>",
      "members": {
        "apiCachingBehavior": {
          "documentation": "<p>Caching behavior.</p> <ul> <li> <p> <b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</p> </li> <li> <p> <b>PER_RESOLVER_CACHING</b>: Individual resolvers that you specify are cached.</p> </li> </ul>",
          "shape": "ApiCachingBehavior"
        },
        "apiId": {
          "documentation": "<p>The GraphQL API ID.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        },
        "ttl": {
          "documentation": "<p>TTL in seconds for cache entries.</p> <p>Valid values are 1\u20133,600 seconds.</p>",
          "shape": "Long"
        },
        "type": {
          "documentation": "<p>The cache instance type. Valid values are </p> <ul> <li> <p> <code>SMALL</code> </p> </li> <li> <p> <code>MEDIUM</code> </p> </li> <li> <p> <code>LARGE</code> </p> </li> <li> <p> <code>XLARGE</code> </p> </li> <li> <p> <code>LARGE_2X</code> </p> </li> <li> <p> <code>LARGE_4X</code> </p> </li> <li> <p> <code>LARGE_8X</code> (not available in all regions)</p> </li> <li> <p> <code>LARGE_12X</code> </p> </li> </ul> <p>Historically, instance types were identified by an EC2-style value. As of July 2020, this is deprecated, and the generic identifiers above should be used.</p> <p>The following legacy instance types are available, but their use is discouraged:</p> <ul> <li> <p> <b>T2_SMALL</b>: A t2.small instance type.</p> </li> <li> <p> <b>T2_MEDIUM</b>: A t2.medium instance type.</p> </li> <li> <p> <b>R4_LARGE</b>: A r4.large instance type.</p> </li> <li> <p> <b>R4_XLARGE</b>: A r4.xlarge instance type.</p> </li> <li> <p> <b>R4_2XLARGE</b>: A r4.2xlarge instance type.</p> </li> <li> <p> <b>R4_4XLARGE</b>: A r4.4xlarge instance type.</p> </li> <li> <p> <b>R4_8XLARGE</b>: A r4.8xlarge instance type.</p> </li> </ul>",
          "shape": "ApiCacheType"
        }
      },
      "required": [
        "apiId",
        "ttl",
        "apiCachingBehavior",
        "type"
      ],
      "type": "structure"
    },
    "UpdateApiCacheResponse": {
      "documentation": "<p>Represents the output of a <code>UpdateApiCache</code> operation.</p>",
      "members": {
        "apiCache": {
          "documentation": "<p>The <code>ApiCache</code> object.</p>",
          "shape": "ApiCache"
        }
      },
      "type": "structure"
    },
    "UpdateApiKeyRequest": {
      "members": {
        "apiId": {
          "documentation": "<p>The ID for the GraphQL API.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        },
        "description": {
          "documentation": "<p>A description of the purpose of the API key.</p>",
          "shape": "String"
        },
        "expires": {
          "documentation": "<p>From the update time, the time after which the API key expires. The date is represented as seconds since the epoch. For more information, see .</p>",
          "shape": "Long"
        },
        "id": {
          "documentation": "<p>The API key ID.</p>",
          "location": "uri",
          "locationName": "id",
          "shape": "String"
        }
      },
      "required": [
        "apiId",
        "id"
      ],
      "type": "structure"
    },
    "UpdateApiKeyResponse": {
      "members": {
        "apiKey": {
          "documentation": "<p>The API key.</p>",
          "shape": "ApiKey"
        }
      },
      "type": "structure"
    },
    "UpdateDataSourceRequest": {
      "members": {
        "apiId": {
          "documentation": "<p>The API ID.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        },
        "description": {
          "documentation": "<p>The new description for the data source.</p>",
          "shape": "String"
        },
        "dynamodbConfig": {
          "documentation": "<p>The new Amazon DynamoDB configuration.</p>",
          "shape": "DynamodbDataSourceConfig"
        },
        "elasticsearchConfig": {
          "documentation": "<p>The new OpenSearch configuration.</p> <p>As of September 2021, Amazon Elasticsearch service is Amazon OpenSearch Service. This configuration is deprecated. Instead, use <a>UpdateDataSourceRequest$openSearchServiceConfig</a> to update an OpenSearch data source.</p>",
          "shape": "ElasticsearchDataSourceConfig"
        },
        "httpConfig": {
          "documentation": "<p>The new HTTP endpoint configuration.</p>",
          "shape": "HttpDataSourceConfig"
        },
        "lambdaConfig": {
          "documentation": "<p>The new Lambda configuration.</p>",
          "shape": "LambdaDataSourceConfig"
        },
        "name": {
          "documentation": "<p>The new name for the data source.</p>",
          "location": "uri",
          "locationName": "name",
          "shape": "ResourceName"
        },
        "openSearchServiceConfig": {
          "documentation": "<p>The new OpenSearch configuration.</p>",
          "shape": "OpenSearchServiceDataSourceConfig"
        },
        "relationalDatabaseConfig": {
          "documentation": "<p>The new relational database configuration.</p>",
          "shape": "RelationalDatabaseDataSourceConfig"
        },
        "serviceRoleArn": {
          "documentation": "<p>The new service role Amazon Resource Name (ARN) for the data source.</p>",
          "shape": "String"
        },
        "type": {
          "documentation": "<p>The new data source type.</p>",
          "shape": "DataSourceType"
        }
      },
      "required": [
        "apiId",
        "name",
        "type"
      ],
      "type": "structure"
    },
    "UpdateDataSourceResponse": {
      "members": {
        "dataSource": {
          "documentation": "<p>The updated <code>DataSource</code> object.</p>",
          "shape": "DataSource"
        }
      },
      "type": "structure"
    },
    "UpdateDomainNameRequest": {
      "members": {
        "description": {
          "documentation": "<p>A description of the <code>DomainName</code>.</p>",
          "shape": "Description"
        },
        "domainName": {
          "documentation": "<p>The domain name.</p>",
          "location": "uri",
          "locationName": "domainName",
          "shape": "DomainName"
        }
      },
      "required": [
        "domainName"
      ],
      "type": "structure"
    },
    "UpdateDomainNameResponse": {
      "members": {
        "domainNameConfig": {
          "documentation": "<p>The configuration for the <code>DomainName</code>.</p>",
          "shape": "DomainNameConfig"
        }
      },
      "type": "structure"
    },
    "UpdateFunctionRequest": {
      "members": {
        "apiId": {
          "documentation": "<p>The GraphQL API ID.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        },
        "dataSourceName": {
          "documentation": "<p>The <code>Function</code> <code>DataSource</code> name.</p>",
          "shape": "ResourceName"
        },
        "description": {
          "documentation": "<p>The <code>Function</code> description.</p>",
          "shape": "String"
        },
        "functionId": {
          "documentation": "<p>The function ID.</p>",
          "location": "uri",
          "locationName": "functionId",
          "shape": "ResourceName"
        },
        "functionVersion": {
          "documentation": "<p>The <code>version</code> of the request mapping template. Currently, the supported value is 2018-05-29.</p>",
          "shape": "String"
        },
        "maxBatchSize": {
          "documentation": "<p>The maximum batching size for a resolver.</p>",
          "shape": "MaxBatchSize"
        },
        "name": {
          "documentation": "<p>The <code>Function</code> name.</p>",
          "shape": "ResourceName"
        },
        "requestMappingTemplate": {
          "documentation": "<p>The <code>Function</code> request mapping template. Functions support only the 2018-05-29 version of the request mapping template.</p>",
          "shape": "MappingTemplate"
        },
        "responseMappingTemplate": {
          "documentation": "<p>The <code>Function</code> request mapping template.</p>",
          "shape": "MappingTemplate"
        },
        "syncConfig": {
          "shape": "SyncConfig"
        }
      },
      "required": [
        "apiId",
        "name",
        "functionId",
        "dataSourceName",
        "functionVersion"
      ],
      "type": "structure"
    },
    "UpdateFunctionResponse": {
      "members": {
        "functionConfiguration": {
          "documentation": "<p>The <code>Function</code> object.</p>",
          "shape": "FunctionConfiguration"
        }
      },
      "type": "structure"
    },
    "UpdateGraphqlApiRequest": {
      "members": {
        "additionalAuthenticationProviders": {
          "documentation": "<p>A list of additional authentication providers for the <code>GraphqlApi</code> API.</p>",
          "shape": "AdditionalAuthenticationProviders"
        },
        "apiId": {
          "documentation": "<p>The API ID.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        },
        "authenticationType": {
          "documentation": "<p>The new authentication type for the <code>GraphqlApi</code> object.</p>",
          "shape": "AuthenticationType"
        },
        "lambdaAuthorizerConfig": {
          "documentation": "<p>Configuration for Lambda function authorization.</p>",
          "shape": "LambdaAuthorizerConfig"
        },
        "logConfig": {
          "documentation": "<p>The Amazon CloudWatch Logs configuration for the <code>GraphqlApi</code> object.</p>",
          "shape": "LogConfig"
        },
        "name": {
          "documentation": "<p>The new name for the <code>GraphqlApi</code> object.</p>",
          "shape": "String"
        },
        "openIDConnectConfig": {
          "documentation": "<p>The OpenID Connect configuration for the <code>GraphqlApi</code> object.</p>",
          "shape": "OpenIDConnectConfig"
        },
        "userPoolConfig": {
          "documentation": "<p>The new Amazon Cognito user pool configuration for the <code>~GraphqlApi</code> object.</p>",
          "shape": "UserPoolConfig"
        },
        "xrayEnabled": {
          "documentation": "<p>A flag indicating whether to use X-Ray tracing for the <code>GraphqlApi</code>.</p>",
          "shape": "Boolean"
        }
      },
      "required": [
        "apiId",
        "name"
      ],
      "type": "structure"
    },
    "UpdateGraphqlApiResponse": {
      "members": {
        "graphqlApi": {
          "documentation": "<p>The updated <code>GraphqlApi</code> object.</p>",
          "shape": "GraphqlApi"
        }
      },
      "type": "structure"
    },
    "UpdateResolverRequest": {
      "members": {
        "apiId": {
          "documentation": "<p>The API ID.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        },
        "cachingConfig": {
          "documentation": "<p>The caching configuration for the resolver.</p>",
          "shape": "CachingConfig"
        },
        "dataSourceName": {
          "documentation": "<p>The new data source name.</p>",
          "shape": "ResourceName"
        },
        "fieldName": {
          "documentation": "<p>The new field name.</p>",
          "location": "uri",
          "locationName": "fieldName",
          "shape": "ResourceName"
        },
        "kind": {
          "documentation": "<p>The resolver type.</p> <ul> <li> <p> <b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default resolver type. You can use a UNIT resolver to run a GraphQL query against a single data source.</p> </li> <li> <p> <b>PIPELINE</b>: A PIPELINE resolver type. You can use a PIPELINE resolver to invoke a series of <code>Function</code> objects in a serial manner. You can use a pipeline resolver to run a GraphQL query against multiple data sources.</p> </li> </ul>",
          "shape": "ResolverKind"
        },
        "maxBatchSize": {
          "documentation": "<p>The maximum batching size for a resolver.</p>",
          "shape": "MaxBatchSize"
        },
        "pipelineConfig": {
          "documentation": "<p>The <code>PipelineConfig</code>.</p>",
          "shape": "PipelineConfig"
        },
        "requestMappingTemplate": {
          "documentation": "<p>The new request mapping template.</p> <p>A resolver uses a request mapping template to convert a GraphQL expression into a format that a data source can understand. Mapping templates are written in Apache Velocity Template Language (VTL).</p> <p>VTL request mapping templates are optional when using an Lambda data source. For all other data sources, VTL request and response mapping templates are required.</p>",
          "shape": "MappingTemplate"
        },
        "responseMappingTemplate": {
          "documentation": "<p>The new response mapping template.</p>",
          "shape": "MappingTemplate"
        },
        "syncConfig": {
          "documentation": "<p>The <code>SyncConfig</code> for a resolver attached to a versioned data source.</p>",
          "shape": "SyncConfig"
        },
        "typeName": {
          "documentation": "<p>The new type name.</p>",
          "location": "uri",
          "locationName": "typeName",
          "shape": "ResourceName"
        }
      },
      "required": [
        "apiId",
        "typeName",
        "fieldName"
      ],
      "type": "structure"
    },
    "UpdateResolverResponse": {
      "members": {
        "resolver": {
          "documentation": "<p>The updated <code>Resolver</code> object.</p>",
          "shape": "Resolver"
        }
      },
      "type": "structure"
    },
    "UpdateTypeRequest": {
      "members": {
        "apiId": {
          "documentation": "<p>The API ID.</p>",
          "location": "uri",
          "locationName": "apiId",
          "shape": "String"
        },
        "definition": {
          "documentation": "<p>The new definition.</p>",
          "shape": "String"
        },
        "format": {
          "documentation": "<p>The new type format: SDL or JSON.</p>",
          "shape": "TypeDefinitionFormat"
        },
        "typeName": {
          "documentation": "<p>The new type name.</p>",
          "location": "uri",
          "locationName": "typeName",
          "shape": "ResourceName"
        }
      },
      "required": [
        "apiId",
        "typeName",
        "format"
      ],
      "type": "structure"
    },
    "UpdateTypeResponse": {
      "members": {
        "type": {
          "documentation": "<p>The updated <code>Type</code> object.</p>",
          "shape": "Type"
        }
      },
      "type": "structure"
    },
    "UserPoolConfig": {
      "documentation": "<p>Describes an Amazon Cognito user pool configuration.</p>",
      "members": {
        "appIdClientRegex": {
          "documentation": "<p>A regular expression for validating the incoming Amazon Cognito user pool app client ID. If this value isn't set, no filtering is applied.</p>",
          "shape": "String"
        },
        "awsRegion": {
          "documentation": "<p>The Amazon Web Services Region in which the user pool was created.</p>",
          "shape": "String"
        },
        "defaultAction": {
          "documentation": "<p>The action that you want your GraphQL API to take when a request that uses Amazon Cognito user pool authentication doesn't match the Amazon Cognito user pool configuration.</p>",
          "shape": "DefaultAction"
        },
        "userPoolId": {
          "documentation": "<p>The user pool ID.</p>",
          "shape": "String"
        }
      },
      "required": [
        "userPoolId",
        "awsRegion",
        "defaultAction"
      ],
      "type": "structure"
    }
  },
  "version": "2.0"
}
