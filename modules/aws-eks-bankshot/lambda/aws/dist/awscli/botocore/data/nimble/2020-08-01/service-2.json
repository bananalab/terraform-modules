{
  "documentation": "<p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>",
  "metadata": {
    "apiVersion": "2020-08-01",
    "endpointPrefix": "nimble",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "AmazonNimbleStudio",
    "serviceId": "nimble",
    "signatureVersion": "v4",
    "signingName": "nimble",
    "uid": "nimble-2020-08-01"
  },
  "operations": {
    "AcceptEulas": {
      "documentation": "<p>Accept EULAs.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/2020-08-01/studios/{studioId}/eula-acceptances",
        "responseCode": 200
      },
      "input": {
        "shape": "AcceptEulasRequest"
      },
      "name": "AcceptEulas",
      "output": {
        "shape": "AcceptEulasResponse"
      }
    },
    "CreateLaunchProfile": {
      "documentation": "<p>Create a launch profile.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/2020-08-01/studios/{studioId}/launch-profiles",
        "responseCode": 200
      },
      "input": {
        "shape": "CreateLaunchProfileRequest"
      },
      "name": "CreateLaunchProfile",
      "output": {
        "shape": "CreateLaunchProfileResponse"
      }
    },
    "CreateStreamingImage": {
      "documentation": "<p>Creates a streaming image resource in a studio.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/2020-08-01/studios/{studioId}/streaming-images",
        "responseCode": 200
      },
      "input": {
        "shape": "CreateStreamingImageRequest"
      },
      "name": "CreateStreamingImage",
      "output": {
        "shape": "CreateStreamingImageResponse"
      }
    },
    "CreateStreamingSession": {
      "documentation": "<p>Creates a streaming session in a studio.</p> <p>After invoking this operation, you must poll GetStreamingSession until the streaming session is in state READY.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/2020-08-01/studios/{studioId}/streaming-sessions",
        "responseCode": 200
      },
      "input": {
        "shape": "CreateStreamingSessionRequest"
      },
      "name": "CreateStreamingSession",
      "output": {
        "shape": "CreateStreamingSessionResponse"
      }
    },
    "CreateStreamingSessionStream": {
      "documentation": "<p>Creates a streaming session stream for a streaming session.</p> <p>After invoking this API, invoke GetStreamingSessionStream with the returned streamId to poll the resource until it is in state READY.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}/streams",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "CreateStreamingSessionStreamRequest"
      },
      "name": "CreateStreamingSessionStream",
      "output": {
        "shape": "CreateStreamingSessionStreamResponse"
      }
    },
    "CreateStudio": {
      "documentation": "<p>Create a new Studio.</p> <p>When creating a Studio, two IAM roles must be provided: the admin role and the user Role. These roles are assumed by your users when they log in to the Nimble Studio portal.</p> <p>The user role must have the AmazonNimbleStudio-StudioUser managed policy attached for the portal to function properly.</p> <p>The Admin Role must have the AmazonNimbleStudio-StudioAdmin managed policy attached for the portal to function properly.</p> <p>You may optionally specify a KMS key in the StudioEncryptionConfiguration.</p> <p>In Nimble Studio, resource names, descriptions, initialization scripts, and other data you provide are always encrypted at rest using an KMS key. By default, this key is owned by Amazon Web Services and managed on your behalf. You may provide your own KMS key when calling CreateStudio to encrypt this data using a key you own and manage.</p> <p>When providing an KMS key during studio creation, Nimble Studio creates KMS grants in your account to provide your studio user and admin roles access to these KMS keys.</p> <p>If you delete this grant, the studio will no longer be accessible to your portal users.</p> <p>If you delete the studio KMS key, your studio will no longer be accessible.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/2020-08-01/studios",
        "responseCode": 200
      },
      "input": {
        "shape": "CreateStudioRequest"
      },
      "name": "CreateStudio",
      "output": {
        "shape": "CreateStudioResponse"
      }
    },
    "CreateStudioComponent": {
      "documentation": "<p>Creates a studio component resource.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/2020-08-01/studios/{studioId}/studio-components",
        "responseCode": 200
      },
      "input": {
        "shape": "CreateStudioComponentRequest"
      },
      "name": "CreateStudioComponent",
      "output": {
        "shape": "CreateStudioComponentResponse"
      }
    },
    "DeleteLaunchProfile": {
      "documentation": "<p>Permanently delete a launch profile.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "DeleteLaunchProfileRequest"
      },
      "name": "DeleteLaunchProfile",
      "output": {
        "shape": "DeleteLaunchProfileResponse"
      }
    },
    "DeleteLaunchProfileMember": {
      "documentation": "<p>Delete a user from launch profile membership.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/membership/{principalId}",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "DeleteLaunchProfileMemberRequest"
      },
      "name": "DeleteLaunchProfileMember",
      "output": {
        "shape": "DeleteLaunchProfileMemberResponse"
      }
    },
    "DeleteStreamingImage": {
      "documentation": "<p>Delete streaming image.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/2020-08-01/studios/{studioId}/streaming-images/{streamingImageId}",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "DeleteStreamingImageRequest"
      },
      "name": "DeleteStreamingImage",
      "output": {
        "shape": "DeleteStreamingImageResponse"
      }
    },
    "DeleteStreamingSession": {
      "documentation": "<p>Deletes streaming session resource.</p> <p>After invoking this operation, use GetStreamingSession to poll the resource until it transitions to a DELETED state.</p> <p>A streaming session will count against your streaming session quota until it is marked DELETED.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "DeleteStreamingSessionRequest"
      },
      "name": "DeleteStreamingSession",
      "output": {
        "shape": "DeleteStreamingSessionResponse"
      }
    },
    "DeleteStudio": {
      "documentation": "<p>Delete a studio resource.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/2020-08-01/studios/{studioId}",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "DeleteStudioRequest"
      },
      "name": "DeleteStudio",
      "output": {
        "shape": "DeleteStudioResponse"
      }
    },
    "DeleteStudioComponent": {
      "documentation": "<p>Deletes a studio component resource.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/2020-08-01/studios/{studioId}/studio-components/{studioComponentId}",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "DeleteStudioComponentRequest"
      },
      "name": "DeleteStudioComponent",
      "output": {
        "shape": "DeleteStudioComponentResponse"
      }
    },
    "DeleteStudioMember": {
      "documentation": "<p>Delete a user from studio membership.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/2020-08-01/studios/{studioId}/membership/{principalId}",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "DeleteStudioMemberRequest"
      },
      "name": "DeleteStudioMember",
      "output": {
        "shape": "DeleteStudioMemberResponse"
      }
    },
    "GetEula": {
      "documentation": "<p>Get Eula.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/2020-08-01/eulas/{eulaId}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetEulaRequest"
      },
      "name": "GetEula",
      "output": {
        "shape": "GetEulaResponse"
      }
    },
    "GetLaunchProfile": {
      "documentation": "<p>Get a launch profile.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetLaunchProfileRequest"
      },
      "name": "GetLaunchProfile",
      "output": {
        "shape": "GetLaunchProfileResponse"
      }
    },
    "GetLaunchProfileDetails": {
      "documentation": "<p>Launch profile details include the launch profile resource and summary information of resources that are used by, or available to, the launch profile. This includes the name and description of all studio components used by the launch profiles, and the name and description of streaming images that can be used with this launch profile.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/details",
        "responseCode": 200
      },
      "input": {
        "shape": "GetLaunchProfileDetailsRequest"
      },
      "name": "GetLaunchProfileDetails",
      "output": {
        "shape": "GetLaunchProfileDetailsResponse"
      }
    },
    "GetLaunchProfileInitialization": {
      "documentation": "<p>Get a launch profile initialization.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/init",
        "responseCode": 200
      },
      "input": {
        "shape": "GetLaunchProfileInitializationRequest"
      },
      "name": "GetLaunchProfileInitialization",
      "output": {
        "shape": "GetLaunchProfileInitializationResponse"
      }
    },
    "GetLaunchProfileMember": {
      "documentation": "<p>Get a user persona in launch profile membership.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/membership/{principalId}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetLaunchProfileMemberRequest"
      },
      "name": "GetLaunchProfileMember",
      "output": {
        "shape": "GetLaunchProfileMemberResponse"
      }
    },
    "GetStreamingImage": {
      "documentation": "<p>Get streaming image.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/2020-08-01/studios/{studioId}/streaming-images/{streamingImageId}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetStreamingImageRequest"
      },
      "name": "GetStreamingImage",
      "output": {
        "shape": "GetStreamingImageResponse"
      }
    },
    "GetStreamingSession": {
      "documentation": "<p>Gets StreamingSession resource.</p> <p>Invoke this operation to poll for a streaming session state while creating or deleting a session.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetStreamingSessionRequest"
      },
      "name": "GetStreamingSession",
      "output": {
        "shape": "GetStreamingSessionResponse"
      }
    },
    "GetStreamingSessionStream": {
      "documentation": "<p>Gets a StreamingSessionStream for a streaming session.</p> <p>Invoke this operation to poll the resource after invoking CreateStreamingSessionStream.</p> <p>After the StreamingSessionStream changes to the state READY, the url property will contain a stream to be used with the DCV streaming client.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}/streams/{streamId}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetStreamingSessionStreamRequest"
      },
      "name": "GetStreamingSessionStream",
      "output": {
        "shape": "GetStreamingSessionStreamResponse"
      }
    },
    "GetStudio": {
      "documentation": "<p>Get a Studio resource.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/2020-08-01/studios/{studioId}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetStudioRequest"
      },
      "name": "GetStudio",
      "output": {
        "shape": "GetStudioResponse"
      }
    },
    "GetStudioComponent": {
      "documentation": "<p>Gets a studio component resource.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/2020-08-01/studios/{studioId}/studio-components/{studioComponentId}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetStudioComponentRequest"
      },
      "name": "GetStudioComponent",
      "output": {
        "shape": "GetStudioComponentResponse"
      }
    },
    "GetStudioMember": {
      "documentation": "<p>Get a user's membership in a studio.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/2020-08-01/studios/{studioId}/membership/{principalId}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetStudioMemberRequest"
      },
      "name": "GetStudioMember",
      "output": {
        "shape": "GetStudioMemberResponse"
      }
    },
    "ListEulaAcceptances": {
      "documentation": "<p>List Eula Acceptances.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/2020-08-01/studios/{studioId}/eula-acceptances",
        "responseCode": 200
      },
      "input": {
        "shape": "ListEulaAcceptancesRequest"
      },
      "name": "ListEulaAcceptances",
      "output": {
        "shape": "ListEulaAcceptancesResponse"
      }
    },
    "ListEulas": {
      "documentation": "<p>List Eulas.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/2020-08-01/eulas",
        "responseCode": 200
      },
      "input": {
        "shape": "ListEulasRequest"
      },
      "name": "ListEulas",
      "output": {
        "shape": "ListEulasResponse"
      }
    },
    "ListLaunchProfileMembers": {
      "documentation": "<p>Get all users in a given launch profile membership.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/membership",
        "responseCode": 200
      },
      "input": {
        "shape": "ListLaunchProfileMembersRequest"
      },
      "name": "ListLaunchProfileMembers",
      "output": {
        "shape": "ListLaunchProfileMembersResponse"
      }
    },
    "ListLaunchProfiles": {
      "documentation": "<p>List all the launch profiles a studio.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/2020-08-01/studios/{studioId}/launch-profiles",
        "responseCode": 200
      },
      "input": {
        "shape": "ListLaunchProfilesRequest"
      },
      "name": "ListLaunchProfiles",
      "output": {
        "shape": "ListLaunchProfilesResponse"
      }
    },
    "ListStreamingImages": {
      "documentation": "<p>List the streaming image resources available to this studio.</p> <p>This list will contain both images provided by Amazon Web Services, as well as streaming images that you have created in your studio.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/2020-08-01/studios/{studioId}/streaming-images",
        "responseCode": 200
      },
      "input": {
        "shape": "ListStreamingImagesRequest"
      },
      "name": "ListStreamingImages",
      "output": {
        "shape": "ListStreamingImagesResponse"
      }
    },
    "ListStreamingSessions": {
      "documentation": "<p>Lists the streaming sessions in a studio.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/2020-08-01/studios/{studioId}/streaming-sessions",
        "responseCode": 200
      },
      "input": {
        "shape": "ListStreamingSessionsRequest"
      },
      "name": "ListStreamingSessions",
      "output": {
        "shape": "ListStreamingSessionsResponse"
      }
    },
    "ListStudioComponents": {
      "documentation": "<p>Lists the StudioComponents in a studio.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/2020-08-01/studios/{studioId}/studio-components",
        "responseCode": 200
      },
      "input": {
        "shape": "ListStudioComponentsRequest"
      },
      "name": "ListStudioComponents",
      "output": {
        "shape": "ListStudioComponentsResponse"
      }
    },
    "ListStudioMembers": {
      "documentation": "<p>Get all users in a given studio membership.</p> <note> <p> <code>ListStudioMembers</code> only returns admin members.</p> </note>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/2020-08-01/studios/{studioId}/membership",
        "responseCode": 200
      },
      "input": {
        "shape": "ListStudioMembersRequest"
      },
      "name": "ListStudioMembers",
      "output": {
        "shape": "ListStudioMembersResponse"
      }
    },
    "ListStudios": {
      "documentation": "<p>List studios in your Amazon Web Services account in the requested Amazon Web Services Region.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/2020-08-01/studios",
        "responseCode": 200
      },
      "input": {
        "shape": "ListStudiosRequest"
      },
      "name": "ListStudios",
      "output": {
        "shape": "ListStudiosResponse"
      }
    },
    "ListTagsForResource": {
      "documentation": "<p>Gets the tags for a resource, given its Amazon Resource Names (ARN).</p> <p>This operation supports ARNs for all resource types in Nimble Studio that support tags, including studio, studio component, launch profile, streaming image, and streaming session. All resources that can be tagged will contain an ARN property, so you do not have to create this ARN yourself.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/2020-08-01/tags/{resourceArn}",
        "responseCode": 200
      },
      "input": {
        "shape": "ListTagsForResourceRequest"
      },
      "name": "ListTagsForResource",
      "output": {
        "shape": "ListTagsForResourceResponse"
      }
    },
    "PutLaunchProfileMembers": {
      "documentation": "<p>Add/update users with given persona to launch profile membership.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/membership",
        "responseCode": 200
      },
      "input": {
        "shape": "PutLaunchProfileMembersRequest"
      },
      "name": "PutLaunchProfileMembers",
      "output": {
        "shape": "PutLaunchProfileMembersResponse"
      }
    },
    "PutStudioMembers": {
      "documentation": "<p>Add/update users with given persona to studio membership.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/2020-08-01/studios/{studioId}/membership",
        "responseCode": 200
      },
      "input": {
        "shape": "PutStudioMembersRequest"
      },
      "name": "PutStudioMembers",
      "output": {
        "shape": "PutStudioMembersResponse"
      }
    },
    "StartStreamingSession": {
      "documentation": "<p> Transitions sessions from the STOPPED state into the READY state. The START_IN_PROGRESS state is the intermediate state between the STOPPED and READY states.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}/start",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "StartStreamingSessionRequest"
      },
      "name": "StartStreamingSession",
      "output": {
        "shape": "StartStreamingSessionResponse"
      }
    },
    "StartStudioSSOConfigurationRepair": {
      "documentation": "<p>Repairs the IAM Identity Center configuration for a given studio.</p> <p>If the studio has a valid IAM Identity Center configuration currently associated with it, this operation will fail with a validation error.</p> <p>If the studio does not have a valid IAM Identity Center configuration currently associated with it, then a new IAM Identity Center application is created for the studio and the studio is changed to the READY state.</p> <p>After the IAM Identity Center application is repaired, you must use the Amazon Nimble Studio console to add administrators and users to your studio.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/2020-08-01/studios/{studioId}/sso-configuration",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "StartStudioSSOConfigurationRepairRequest"
      },
      "name": "StartStudioSSOConfigurationRepair",
      "output": {
        "shape": "StartStudioSSOConfigurationRepairResponse"
      }
    },
    "StopStreamingSession": {
      "documentation": "<p>Transitions sessions from the READY state into the STOPPED state. The STOP_IN_PROGRESS state is the intermediate state between the READY and STOPPED states.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}/stop",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "StopStreamingSessionRequest"
      },
      "name": "StopStreamingSession",
      "output": {
        "shape": "StopStreamingSessionResponse"
      }
    },
    "TagResource": {
      "documentation": "<p>Creates tags for a resource, given its ARN.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/2020-08-01/tags/{resourceArn}",
        "responseCode": 204
      },
      "input": {
        "shape": "TagResourceRequest"
      },
      "name": "TagResource",
      "output": {
        "shape": "TagResourceResponse"
      }
    },
    "UntagResource": {
      "documentation": "<p>Deletes the tags for a resource.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/2020-08-01/tags/{resourceArn}",
        "responseCode": 204
      },
      "idempotent": true,
      "input": {
        "shape": "UntagResourceRequest"
      },
      "name": "UntagResource",
      "output": {
        "shape": "UntagResourceResponse"
      }
    },
    "UpdateLaunchProfile": {
      "documentation": "<p>Update a launch profile.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateLaunchProfileRequest"
      },
      "name": "UpdateLaunchProfile",
      "output": {
        "shape": "UpdateLaunchProfileResponse"
      }
    },
    "UpdateLaunchProfileMember": {
      "documentation": "<p>Update a user persona in launch profile membership.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/membership/{principalId}",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateLaunchProfileMemberRequest"
      },
      "name": "UpdateLaunchProfileMember",
      "output": {
        "shape": "UpdateLaunchProfileMemberResponse"
      }
    },
    "UpdateStreamingImage": {
      "documentation": "<p>Update streaming image.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/2020-08-01/studios/{studioId}/streaming-images/{streamingImageId}",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateStreamingImageRequest"
      },
      "name": "UpdateStreamingImage",
      "output": {
        "shape": "UpdateStreamingImageResponse"
      }
    },
    "UpdateStudio": {
      "documentation": "<p>Update a Studio resource.</p> <p>Currently, this operation only supports updating the displayName of your studio.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/2020-08-01/studios/{studioId}",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateStudioRequest"
      },
      "name": "UpdateStudio",
      "output": {
        "shape": "UpdateStudioResponse"
      }
    },
    "UpdateStudioComponent": {
      "documentation": "<p>Updates a studio component resource.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerErrorException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/2020-08-01/studios/{studioId}/studio-components/{studioComponentId}",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateStudioComponentRequest"
      },
      "name": "UpdateStudioComponent",
      "output": {
        "shape": "UpdateStudioComponentResponse"
      }
    }
  },
  "shapes": {
    "AcceptEulasRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don\u2019t specify a client token, the AWS SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>",
          "idempotencyToken": true,
          "location": "header",
          "locationName": "X-Amz-Client-Token",
          "shape": "ClientToken"
        },
        "eulaIds": {
          "documentation": "<p>The EULA ID.</p>",
          "shape": "EulaIdList"
        },
        "studioId": {
          "documentation": "<p>The studio ID.</p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        }
      },
      "required": [
        "studioId"
      ],
      "type": "structure"
    },
    "AcceptEulasResponse": {
      "members": {
        "eulaAcceptances": {
          "documentation": "<p>A collection of EULA acceptances.</p>",
          "shape": "EulaAcceptanceList"
        }
      },
      "type": "structure"
    },
    "AccessDeniedException": {
      "documentation": "<p>You are not authorized to perform this operation. Check your IAM policies, and ensure that you are using the correct access keys.</p>",
      "error": {
        "httpStatusCode": 403,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "code": {
          "documentation": "<p>A more specific error code.</p>",
          "shape": "String"
        },
        "context": {
          "documentation": "<p>The exception context.</p>",
          "shape": "ExceptionContext"
        },
        "message": {
          "documentation": "<p>A human-readable description of the error.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ActiveDirectoryComputerAttribute": {
      "documentation": "<p>An LDAP attribute of an Active Directory computer account, in the form of a name:value pair.</p>",
      "members": {
        "name": {
          "documentation": "<p>The name for the LDAP attribute.</p>",
          "shape": "ActiveDirectoryComputerAttributeName"
        },
        "value": {
          "documentation": "<p>The value for the LDAP attribute.</p>",
          "shape": "ActiveDirectoryComputerAttributeValue"
        }
      },
      "type": "structure"
    },
    "ActiveDirectoryComputerAttributeList": {
      "documentation": "<p>A collection of LDAP attributes to apply to Active Directory computer accounts that are created for streaming sessions.</p>",
      "max": 50,
      "member": {
        "shape": "ActiveDirectoryComputerAttribute"
      },
      "min": 0,
      "sensitive": true,
      "type": "list"
    },
    "ActiveDirectoryComputerAttributeName": {
      "documentation": "<p>The name for the LDAP attribute.</p>",
      "max": 40,
      "min": 1,
      "type": "string"
    },
    "ActiveDirectoryComputerAttributeValue": {
      "documentation": "<p>The value for the LDAP attribute.</p>",
      "max": 64,
      "min": 1,
      "type": "string"
    },
    "ActiveDirectoryConfiguration": {
      "documentation": "<p>The configuration for a Microsoft Active Directory (Microsoft AD) studio resource.</p>",
      "members": {
        "computerAttributes": {
          "documentation": "<p>A collection of custom attributes for an Active Directory computer.</p>",
          "shape": "ActiveDirectoryComputerAttributeList"
        },
        "directoryId": {
          "documentation": "<p>The directory ID of the Directory Service for Microsoft Active Directory to access using this studio component.</p>",
          "shape": "DirectoryId"
        },
        "organizationalUnitDistinguishedName": {
          "documentation": "<p>The distinguished name (DN) and organizational unit (OU) of an Active Directory computer.</p>",
          "shape": "ActiveDirectoryOrganizationalUnitDistinguishedName"
        }
      },
      "type": "structure"
    },
    "ActiveDirectoryDnsIpAddress": {
      "type": "string"
    },
    "ActiveDirectoryDnsIpAddressList": {
      "max": 10,
      "member": {
        "shape": "ActiveDirectoryDnsIpAddress"
      },
      "min": 0,
      "type": "list"
    },
    "ActiveDirectoryOrganizationalUnitDistinguishedName": {
      "documentation": "<p>The fully-qualified distinguished name of the organizational unit to place the computer account in.</p>",
      "max": 2000,
      "min": 1,
      "type": "string"
    },
    "ClientToken": {
      "max": 64,
      "min": 1,
      "type": "string"
    },
    "ComputeFarmConfiguration": {
      "documentation": "<p>The configuration for a render farm that is associated with a studio resource.</p>",
      "members": {
        "activeDirectoryUser": {
          "documentation": "<p>The name of an Active Directory user that is used on ComputeFarm worker instances.</p>",
          "shape": "String"
        },
        "endpoint": {
          "documentation": "<p>The endpoint of the ComputeFarm that is accessed by the studio component resource.</p>",
          "shape": "SensitiveString"
        }
      },
      "type": "structure"
    },
    "ConflictException": {
      "documentation": "<p>Another operation is in progress. </p>",
      "error": {
        "httpStatusCode": 409,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "code": {
          "documentation": "<p>A more specific error code.</p>",
          "shape": "String"
        },
        "context": {
          "documentation": "<p>The exception context.</p>",
          "shape": "ExceptionContext"
        },
        "message": {
          "documentation": "<p>A human-readable description of the error.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "CreateLaunchProfileRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don\u2019t specify a client token, the AWS SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>",
          "idempotencyToken": true,
          "location": "header",
          "locationName": "X-Amz-Client-Token",
          "shape": "ClientToken"
        },
        "description": {
          "documentation": "<p>The description.</p>",
          "shape": "LaunchProfileDescription"
        },
        "ec2SubnetIds": {
          "documentation": "<p>Specifies the IDs of the EC2 subnets where streaming sessions will be accessible from. These subnets must support the specified instance types. </p>",
          "shape": "EC2SubnetIdList"
        },
        "launchProfileProtocolVersions": {
          "documentation": "<p>The version number of the protocol that is used by the launch profile. The only valid version is \"2021-03-31\".</p>",
          "shape": "LaunchProfileProtocolVersionList"
        },
        "name": {
          "documentation": "<p>The name for the launch profile.</p>",
          "shape": "LaunchProfileName"
        },
        "streamConfiguration": {
          "documentation": "<p>A configuration for a streaming session.</p>",
          "shape": "StreamConfigurationCreate"
        },
        "studioComponentIds": {
          "documentation": "<p>Unique identifiers for a collection of studio components that can be used with this launch profile.</p>",
          "shape": "LaunchProfileStudioComponentIdList"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        },
        "tags": {
          "documentation": "<p>A collection of labels, in the form of key:value pairs, that apply to this resource.</p>",
          "shape": "Tags"
        }
      },
      "required": [
        "ec2SubnetIds",
        "launchProfileProtocolVersions",
        "name",
        "streamConfiguration",
        "studioComponentIds",
        "studioId"
      ],
      "type": "structure"
    },
    "CreateLaunchProfileResponse": {
      "members": {
        "launchProfile": {
          "documentation": "<p>The launch profile.</p>",
          "shape": "LaunchProfile"
        }
      },
      "type": "structure"
    },
    "CreateStreamingImageRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don\u2019t specify a client token, the AWS SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>",
          "idempotencyToken": true,
          "location": "header",
          "locationName": "X-Amz-Client-Token",
          "shape": "ClientToken"
        },
        "description": {
          "documentation": "<p>A human-readable description of the streaming image.</p>",
          "shape": "StreamingImageDescription"
        },
        "ec2ImageId": {
          "documentation": "<p>The ID of an EC2 machine image with which to create this streaming image.</p>",
          "shape": "EC2ImageId"
        },
        "name": {
          "documentation": "<p>A friendly name for a streaming image resource.</p>",
          "shape": "StreamingImageName"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        },
        "tags": {
          "documentation": "<p>A collection of labels, in the form of key:value pairs, that apply to this resource.</p>",
          "shape": "Tags"
        }
      },
      "required": [
        "ec2ImageId",
        "name",
        "studioId"
      ],
      "type": "structure"
    },
    "CreateStreamingImageResponse": {
      "members": {
        "streamingImage": {
          "documentation": "<p>The streaming image.</p>",
          "shape": "StreamingImage"
        }
      },
      "type": "structure"
    },
    "CreateStreamingSessionRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don\u2019t specify a client token, the AWS SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>",
          "idempotencyToken": true,
          "location": "header",
          "locationName": "X-Amz-Client-Token",
          "shape": "ClientToken"
        },
        "ec2InstanceType": {
          "documentation": "<p>The EC2 Instance type used for the streaming session.</p>",
          "shape": "StreamingInstanceType"
        },
        "launchProfileId": {
          "documentation": "<p>The launch profile ID.</p>",
          "shape": "String"
        },
        "ownedBy": {
          "documentation": "<p>The user ID of the user that owns the streaming session. The user that owns the session will be logging into the session and interacting with the virtual workstation.</p>",
          "shape": "String"
        },
        "streamingImageId": {
          "documentation": "<p>The ID of the streaming image.</p>",
          "shape": "StreamingImageId"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        },
        "tags": {
          "documentation": "<p>A collection of labels, in the form of key:value pairs, that apply to this resource.</p>",
          "shape": "Tags"
        }
      },
      "required": [
        "studioId"
      ],
      "type": "structure"
    },
    "CreateStreamingSessionResponse": {
      "members": {
        "session": {
          "documentation": "<p>The session.</p>",
          "shape": "StreamingSession"
        }
      },
      "type": "structure"
    },
    "CreateStreamingSessionStreamRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don\u2019t specify a client token, the AWS SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>",
          "idempotencyToken": true,
          "location": "header",
          "locationName": "X-Amz-Client-Token",
          "shape": "ClientToken"
        },
        "expirationInSeconds": {
          "documentation": "<p>The expiration time in seconds.</p>",
          "shape": "StreamingSessionStreamExpirationInSeconds"
        },
        "sessionId": {
          "documentation": "<p>The streaming session ID.</p>",
          "location": "uri",
          "locationName": "sessionId",
          "shape": "String"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        }
      },
      "required": [
        "sessionId",
        "studioId"
      ],
      "type": "structure"
    },
    "CreateStreamingSessionStreamResponse": {
      "members": {
        "stream": {
          "documentation": "<p>The stream.</p>",
          "shape": "StreamingSessionStream"
        }
      },
      "type": "structure"
    },
    "CreateStudioComponentRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don\u2019t specify a client token, the AWS SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>",
          "idempotencyToken": true,
          "location": "header",
          "locationName": "X-Amz-Client-Token",
          "shape": "ClientToken"
        },
        "configuration": {
          "documentation": "<p>The configuration of the studio component, based on component type.</p>",
          "shape": "StudioComponentConfiguration"
        },
        "description": {
          "documentation": "<p>The description.</p>",
          "shape": "StudioComponentDescription"
        },
        "ec2SecurityGroupIds": {
          "documentation": "<p>The EC2 security groups that control access to the studio component.</p>",
          "shape": "StudioComponentSecurityGroupIdList"
        },
        "initializationScripts": {
          "documentation": "<p>Initialization scripts for studio components.</p>",
          "shape": "StudioComponentInitializationScriptList"
        },
        "name": {
          "documentation": "<p>The name for the studio component.</p>",
          "shape": "StudioComponentName"
        },
        "runtimeRoleArn": {
          "documentation": "<p>An IAM role attached to a Studio Component that gives the studio component access to AWS resources at anytime while the instance is running. </p>",
          "shape": "RoleArn"
        },
        "scriptParameters": {
          "documentation": "<p>Parameters for the studio component scripts.</p>",
          "shape": "StudioComponentScriptParameterKeyValueList"
        },
        "secureInitializationRoleArn": {
          "documentation": "<p>An IAM role attached to Studio Component when the system initialization script runs which give the studio component access to AWS resources when the system initialization script runs.</p>",
          "shape": "RoleArn"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        },
        "subtype": {
          "documentation": "<p>The specific subtype of a studio component.</p>",
          "shape": "StudioComponentSubtype"
        },
        "tags": {
          "documentation": "<p>A collection of labels, in the form of key:value pairs, that apply to this resource.</p>",
          "shape": "Tags"
        },
        "type": {
          "documentation": "<p>The type of the studio component.</p>",
          "shape": "StudioComponentType"
        }
      },
      "required": [
        "name",
        "studioId",
        "type"
      ],
      "type": "structure"
    },
    "CreateStudioComponentResponse": {
      "members": {
        "studioComponent": {
          "documentation": "<p>Information about the studio component.</p>",
          "shape": "StudioComponent"
        }
      },
      "type": "structure"
    },
    "CreateStudioRequest": {
      "members": {
        "adminRoleArn": {
          "documentation": "<p>The IAM role that Studio Admins will assume when logging in to the Nimble Studio portal.</p>",
          "shape": "RoleArn"
        },
        "clientToken": {
          "documentation": "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don\u2019t specify a client token, the AWS SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>",
          "idempotencyToken": true,
          "location": "header",
          "locationName": "X-Amz-Client-Token",
          "shape": "ClientToken"
        },
        "displayName": {
          "documentation": "<p>A friendly name for the studio.</p>",
          "shape": "StudioDisplayName"
        },
        "studioEncryptionConfiguration": {
          "documentation": "<p>The studio encryption configuration.</p>",
          "shape": "StudioEncryptionConfiguration"
        },
        "studioName": {
          "documentation": "<p>The studio name that is used in the URL of the Nimble Studio portal when accessed by Nimble Studio users.</p>",
          "shape": "StudioName"
        },
        "tags": {
          "documentation": "<p>A collection of labels, in the form of key:value pairs, that apply to this resource.</p>",
          "shape": "Tags"
        },
        "userRoleArn": {
          "documentation": "<p>The IAM role that Studio Users will assume when logging in to the Nimble Studio portal.</p>",
          "shape": "RoleArn"
        }
      },
      "required": [
        "adminRoleArn",
        "displayName",
        "studioName",
        "userRoleArn"
      ],
      "type": "structure"
    },
    "CreateStudioResponse": {
      "members": {
        "studio": {
          "documentation": "<p>Information about a studio.</p>",
          "shape": "Studio"
        }
      },
      "type": "structure"
    },
    "DeleteLaunchProfileMemberRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don\u2019t specify a client token, the AWS SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>",
          "idempotencyToken": true,
          "location": "header",
          "locationName": "X-Amz-Client-Token",
          "shape": "ClientToken"
        },
        "launchProfileId": {
          "documentation": "<p>The Launch Profile ID.</p>",
          "location": "uri",
          "locationName": "launchProfileId",
          "shape": "String"
        },
        "principalId": {
          "documentation": "<p>The principal ID. This currently supports a IAM Identity Center UserId. </p>",
          "location": "uri",
          "locationName": "principalId",
          "shape": "String"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        }
      },
      "required": [
        "launchProfileId",
        "principalId",
        "studioId"
      ],
      "type": "structure"
    },
    "DeleteLaunchProfileMemberResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteLaunchProfileRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don\u2019t specify a client token, the AWS SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>",
          "idempotencyToken": true,
          "location": "header",
          "locationName": "X-Amz-Client-Token",
          "shape": "ClientToken"
        },
        "launchProfileId": {
          "documentation": "<p>The Launch Profile ID.</p>",
          "location": "uri",
          "locationName": "launchProfileId",
          "shape": "String"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        }
      },
      "required": [
        "launchProfileId",
        "studioId"
      ],
      "type": "structure"
    },
    "DeleteLaunchProfileResponse": {
      "members": {
        "launchProfile": {
          "documentation": "<p>The launch profile.</p>",
          "shape": "LaunchProfile"
        }
      },
      "type": "structure"
    },
    "DeleteStreamingImageRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don\u2019t specify a client token, the AWS SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>",
          "idempotencyToken": true,
          "location": "header",
          "locationName": "X-Amz-Client-Token",
          "shape": "ClientToken"
        },
        "streamingImageId": {
          "documentation": "<p>The streaming image ID.</p>",
          "location": "uri",
          "locationName": "streamingImageId",
          "shape": "String"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        }
      },
      "required": [
        "streamingImageId",
        "studioId"
      ],
      "type": "structure"
    },
    "DeleteStreamingImageResponse": {
      "members": {
        "streamingImage": {
          "documentation": "<p>The streaming image.</p>",
          "shape": "StreamingImage"
        }
      },
      "type": "structure"
    },
    "DeleteStreamingSessionRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don\u2019t specify a client token, the AWS SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>",
          "idempotencyToken": true,
          "location": "header",
          "locationName": "X-Amz-Client-Token",
          "shape": "ClientToken"
        },
        "sessionId": {
          "documentation": "<p>The streaming session ID.</p>",
          "location": "uri",
          "locationName": "sessionId",
          "shape": "String"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        }
      },
      "required": [
        "sessionId",
        "studioId"
      ],
      "type": "structure"
    },
    "DeleteStreamingSessionResponse": {
      "members": {
        "session": {
          "documentation": "<p>The session.</p>",
          "shape": "StreamingSession"
        }
      },
      "type": "structure"
    },
    "DeleteStudioComponentRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don\u2019t specify a client token, the AWS SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>",
          "idempotencyToken": true,
          "location": "header",
          "locationName": "X-Amz-Client-Token",
          "shape": "ClientToken"
        },
        "studioComponentId": {
          "documentation": "<p>The studio component ID.</p>",
          "location": "uri",
          "locationName": "studioComponentId",
          "shape": "String"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        }
      },
      "required": [
        "studioComponentId",
        "studioId"
      ],
      "type": "structure"
    },
    "DeleteStudioComponentResponse": {
      "members": {
        "studioComponent": {
          "documentation": "<p>Information about the studio component.</p>",
          "shape": "StudioComponent"
        }
      },
      "type": "structure"
    },
    "DeleteStudioMemberRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don\u2019t specify a client token, the AWS SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>",
          "idempotencyToken": true,
          "location": "header",
          "locationName": "X-Amz-Client-Token",
          "shape": "ClientToken"
        },
        "principalId": {
          "documentation": "<p>The principal ID. This currently supports a IAM Identity Center UserId. </p>",
          "location": "uri",
          "locationName": "principalId",
          "shape": "String"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        }
      },
      "required": [
        "principalId",
        "studioId"
      ],
      "type": "structure"
    },
    "DeleteStudioMemberResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteStudioRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don\u2019t specify a client token, the AWS SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>",
          "idempotencyToken": true,
          "location": "header",
          "locationName": "X-Amz-Client-Token",
          "shape": "ClientToken"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        }
      },
      "required": [
        "studioId"
      ],
      "type": "structure"
    },
    "DeleteStudioResponse": {
      "members": {
        "studio": {
          "documentation": "<p>Information about a studio.</p>",
          "shape": "Studio"
        }
      },
      "required": [
        "studio"
      ],
      "type": "structure"
    },
    "DirectoryId": {
      "type": "string"
    },
    "EC2ImageId": {
      "pattern": "^ami-[0-9A-z]+$",
      "type": "string"
    },
    "EC2SubnetId": {
      "type": "string"
    },
    "EC2SubnetIdList": {
      "max": 6,
      "member": {
        "shape": "EC2SubnetId"
      },
      "min": 0,
      "type": "list"
    },
    "Eula": {
      "documentation": "<p>Represents a EULA resource.</p>",
      "members": {
        "content": {
          "documentation": "<p>The EULA content.</p>",
          "shape": "String"
        },
        "createdAt": {
          "documentation": "<p>The Unix epoch timestamp in seconds for when the resource was created.</p>",
          "shape": "Timestamp"
        },
        "eulaId": {
          "documentation": "<p>The EULA ID.</p>",
          "shape": "EulaId"
        },
        "name": {
          "documentation": "<p>The name for the EULA.</p>",
          "shape": "EulaName"
        },
        "updatedAt": {
          "documentation": "<p>The Unix epoch timestamp in seconds for when the resource was updated.</p>",
          "shape": "Timestamp"
        }
      },
      "type": "structure"
    },
    "EulaAcceptance": {
      "documentation": "<p>The acceptance of a EULA, required to use Amazon-provided streaming images.</p>",
      "members": {
        "acceptedAt": {
          "documentation": "<p>The Unix epoch timestamp in seconds for when the EULA was accepted.</p>",
          "shape": "Timestamp"
        },
        "acceptedBy": {
          "documentation": "<p>The ID of the person who accepted the EULA.</p>",
          "shape": "String"
        },
        "accepteeId": {
          "documentation": "<p>The ID of the acceptee.</p>",
          "shape": "String"
        },
        "eulaAcceptanceId": {
          "documentation": "<p>The EULA acceptance ID.</p>",
          "shape": "EulaAcceptanceId"
        },
        "eulaId": {
          "documentation": "<p>The EULA ID.</p>",
          "shape": "EulaId"
        }
      },
      "type": "structure"
    },
    "EulaAcceptanceId": {
      "documentation": "<p>The EULA acceptance ID.</p>",
      "max": 22,
      "min": 0,
      "pattern": "^[a-zA-Z0-9-_]*$",
      "type": "string"
    },
    "EulaAcceptanceList": {
      "member": {
        "shape": "EulaAcceptance"
      },
      "type": "list"
    },
    "EulaId": {
      "documentation": "<p>Represents a EULA resource.</p>",
      "max": 22,
      "min": 0,
      "pattern": "^[a-zA-Z0-9-_]*$",
      "type": "string"
    },
    "EulaIdList": {
      "member": {
        "shape": "String"
      },
      "type": "list"
    },
    "EulaList": {
      "member": {
        "shape": "Eula"
      },
      "type": "list"
    },
    "EulaName": {
      "max": 64,
      "min": 0,
      "type": "string"
    },
    "ExceptionContext": {
      "documentation": "<p>ExceptionContext is a set of key-value pairs that provide you with more information about the error that occurred. For example, when the service returns a 404 ResourceNotFound error, ExceptionContext will contain the key `resourceId` with the value of resource that was not found.</p> <p>ExceptionContext enables scripts and other programmatic clients to provide for better error handling.</p>",
      "key": {
        "shape": "String"
      },
      "type": "map",
      "value": {
        "shape": "String"
      }
    },
    "GetEulaRequest": {
      "members": {
        "eulaId": {
          "documentation": "<p>The EULA ID.</p>",
          "location": "uri",
          "locationName": "eulaId",
          "shape": "String"
        }
      },
      "required": [
        "eulaId"
      ],
      "type": "structure"
    },
    "GetEulaResponse": {
      "members": {
        "eula": {
          "documentation": "<p>The EULA.</p>",
          "shape": "Eula"
        }
      },
      "type": "structure"
    },
    "GetLaunchProfileDetailsRequest": {
      "members": {
        "launchProfileId": {
          "documentation": "<p>The Launch Profile ID.</p>",
          "location": "uri",
          "locationName": "launchProfileId",
          "shape": "String"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        }
      },
      "required": [
        "launchProfileId",
        "studioId"
      ],
      "type": "structure"
    },
    "GetLaunchProfileDetailsResponse": {
      "members": {
        "launchProfile": {
          "documentation": "<p>The launch profile.</p>",
          "shape": "LaunchProfile"
        },
        "streamingImages": {
          "documentation": "<p>A collection of streaming images.</p>",
          "shape": "StreamingImageList"
        },
        "studioComponentSummaries": {
          "documentation": "<p>A collection of studio component summaries.</p>",
          "shape": "StudioComponentSummaryList"
        }
      },
      "type": "structure"
    },
    "GetLaunchProfileInitializationRequest": {
      "members": {
        "launchProfileId": {
          "documentation": "<p>The Launch Profile ID.</p>",
          "location": "uri",
          "locationName": "launchProfileId",
          "shape": "String"
        },
        "launchProfileProtocolVersions": {
          "documentation": "<p>The launch profile protocol versions supported by the client.</p>",
          "location": "querystring",
          "locationName": "launchProfileProtocolVersions",
          "shape": "StringList"
        },
        "launchPurpose": {
          "documentation": "<p>The launch purpose.</p>",
          "location": "querystring",
          "locationName": "launchPurpose",
          "shape": "String"
        },
        "platform": {
          "documentation": "<p>The platform where this Launch Profile will be used, either WINDOWS or LINUX.</p>",
          "location": "querystring",
          "locationName": "platform",
          "shape": "String"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        }
      },
      "required": [
        "launchProfileId",
        "launchProfileProtocolVersions",
        "launchPurpose",
        "platform",
        "studioId"
      ],
      "type": "structure"
    },
    "GetLaunchProfileInitializationResponse": {
      "members": {
        "launchProfileInitialization": {
          "documentation": "<p>The launch profile initialization.</p>",
          "shape": "LaunchProfileInitialization"
        }
      },
      "type": "structure"
    },
    "GetLaunchProfileMemberRequest": {
      "members": {
        "launchProfileId": {
          "documentation": "<p>The Launch Profile ID.</p>",
          "location": "uri",
          "locationName": "launchProfileId",
          "shape": "String"
        },
        "principalId": {
          "documentation": "<p>The principal ID. This currently supports a IAM Identity Center UserId. </p>",
          "location": "uri",
          "locationName": "principalId",
          "shape": "String"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        }
      },
      "required": [
        "launchProfileId",
        "principalId",
        "studioId"
      ],
      "type": "structure"
    },
    "GetLaunchProfileMemberResponse": {
      "members": {
        "member": {
          "documentation": "<p>The member.</p>",
          "shape": "LaunchProfileMembership"
        }
      },
      "type": "structure"
    },
    "GetLaunchProfileRequest": {
      "members": {
        "launchProfileId": {
          "documentation": "<p>The Launch Profile ID.</p>",
          "location": "uri",
          "locationName": "launchProfileId",
          "shape": "String"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        }
      },
      "required": [
        "launchProfileId",
        "studioId"
      ],
      "type": "structure"
    },
    "GetLaunchProfileResponse": {
      "members": {
        "launchProfile": {
          "documentation": "<p>The launch profile.</p>",
          "shape": "LaunchProfile"
        }
      },
      "type": "structure"
    },
    "GetStreamingImageRequest": {
      "members": {
        "streamingImageId": {
          "documentation": "<p>The streaming image ID.</p>",
          "location": "uri",
          "locationName": "streamingImageId",
          "shape": "String"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        }
      },
      "required": [
        "streamingImageId",
        "studioId"
      ],
      "type": "structure"
    },
    "GetStreamingImageResponse": {
      "members": {
        "streamingImage": {
          "documentation": "<p>The streaming image.</p>",
          "shape": "StreamingImage"
        }
      },
      "type": "structure"
    },
    "GetStreamingSessionRequest": {
      "members": {
        "sessionId": {
          "documentation": "<p>The streaming session ID.</p>",
          "location": "uri",
          "locationName": "sessionId",
          "shape": "String"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        }
      },
      "required": [
        "sessionId",
        "studioId"
      ],
      "type": "structure"
    },
    "GetStreamingSessionResponse": {
      "members": {
        "session": {
          "documentation": "<p>The session.</p>",
          "shape": "StreamingSession"
        }
      },
      "type": "structure"
    },
    "GetStreamingSessionStreamRequest": {
      "members": {
        "sessionId": {
          "documentation": "<p>The streaming session ID.</p>",
          "location": "uri",
          "locationName": "sessionId",
          "shape": "String"
        },
        "streamId": {
          "documentation": "<p>The streaming session stream ID.</p>",
          "location": "uri",
          "locationName": "streamId",
          "shape": "String"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        }
      },
      "required": [
        "sessionId",
        "streamId",
        "studioId"
      ],
      "type": "structure"
    },
    "GetStreamingSessionStreamResponse": {
      "members": {
        "stream": {
          "documentation": "<p>The stream.</p>",
          "shape": "StreamingSessionStream"
        }
      },
      "type": "structure"
    },
    "GetStudioComponentRequest": {
      "members": {
        "studioComponentId": {
          "documentation": "<p>The studio component ID.</p>",
          "location": "uri",
          "locationName": "studioComponentId",
          "shape": "String"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        }
      },
      "required": [
        "studioComponentId",
        "studioId"
      ],
      "type": "structure"
    },
    "GetStudioComponentResponse": {
      "members": {
        "studioComponent": {
          "documentation": "<p>Information about the studio component.</p>",
          "shape": "StudioComponent"
        }
      },
      "type": "structure"
    },
    "GetStudioMemberRequest": {
      "members": {
        "principalId": {
          "documentation": "<p>The principal ID. This currently supports a IAM Identity Center UserId. </p>",
          "location": "uri",
          "locationName": "principalId",
          "shape": "String"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        }
      },
      "required": [
        "principalId",
        "studioId"
      ],
      "type": "structure"
    },
    "GetStudioMemberResponse": {
      "members": {
        "member": {
          "documentation": "<p>The member.</p>",
          "shape": "StudioMembership"
        }
      },
      "type": "structure"
    },
    "GetStudioRequest": {
      "members": {
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        }
      },
      "required": [
        "studioId"
      ],
      "type": "structure"
    },
    "GetStudioResponse": {
      "members": {
        "studio": {
          "documentation": "<p>Information about a studio.</p>",
          "shape": "Studio"
        }
      },
      "required": [
        "studio"
      ],
      "type": "structure"
    },
    "InternalServerErrorException": {
      "documentation": "<p>An internal error has occurred. Please retry your request.</p>",
      "error": {
        "httpStatusCode": 500
      },
      "exception": true,
      "fault": true,
      "members": {
        "code": {
          "documentation": "<p>A more specific error code.</p>",
          "shape": "String"
        },
        "context": {
          "documentation": "<p>The exception context.</p>",
          "shape": "ExceptionContext"
        },
        "message": {
          "documentation": "<p>A human-readable description of the error.</p>",
          "shape": "String"
        }
      },
      "retryable": {
        "throttling": false
      },
      "type": "structure"
    },
    "LaunchProfile": {
      "documentation": "<p>A launch profile controls your artist workforce\u2019s access to studio components, like compute farms, shared file systems, managed file systems, and license server configurations, as well as instance types and Amazon Machine Images (AMIs). </p> <pre><code> &lt;p&gt;Studio administrators create launch profiles in the Nimble Studio console. Artists can use their launch profiles to launch an instance from the Nimble Studio portal. Each user\u2019s launch profile defines how they can launch a streaming session. By default, studio admins can use all launch profiles.&lt;/p&gt; </code></pre>",
      "members": {
        "arn": {
          "documentation": "<p>The ARN of the resource.</p>",
          "shape": "String"
        },
        "createdAt": {
          "documentation": "<p>The Unix epoch timestamp in seconds for when the resource was created.</p>",
          "shape": "Timestamp"
        },
        "createdBy": {
          "documentation": "<p>The user ID of the user that created the launch profile.</p>",
          "shape": "String"
        },
        "description": {
          "documentation": "<p>A human-readable description of the launch profile.</p>",
          "shape": "LaunchProfileDescription"
        },
        "ec2SubnetIds": {
          "documentation": "<p>Unique identifiers for a collection of EC2 subnets.</p>",
          "shape": "EC2SubnetIdList"
        },
        "launchProfileId": {
          "documentation": "<p>The launch profile ID.</p>",
          "shape": "LaunchProfileId"
        },
        "launchProfileProtocolVersions": {
          "documentation": "<p>The version number of the protocol that is used by the launch profile. The only valid version is \"2021-03-31\".</p>",
          "shape": "LaunchProfileProtocolVersionList"
        },
        "name": {
          "documentation": "<p>A friendly name for the launch profile.</p>",
          "shape": "LaunchProfileName"
        },
        "state": {
          "documentation": "<p>The current state.</p>",
          "shape": "LaunchProfileState"
        },
        "statusCode": {
          "documentation": "<p>The status code.</p>",
          "shape": "LaunchProfileStatusCode"
        },
        "statusMessage": {
          "documentation": "<p>The status message for the launch profile.</p>",
          "shape": "String"
        },
        "streamConfiguration": {
          "documentation": "<p>A configuration for a streaming session.</p>",
          "shape": "StreamConfiguration"
        },
        "studioComponentIds": {
          "documentation": "<p>Unique identifiers for a collection of studio components that can be used with this launch profile.</p>",
          "shape": "LaunchProfileStudioComponentIdList"
        },
        "tags": {
          "documentation": "<p>A collection of labels, in the form of key:value pairs, that apply to this resource.</p>",
          "shape": "Tags"
        },
        "updatedAt": {
          "documentation": "<p>The Unix epoch timestamp in seconds for when the resource was updated.</p>",
          "shape": "Timestamp"
        },
        "updatedBy": {
          "documentation": "<p>The user ID of the user that most recently updated the resource.</p>",
          "shape": "String"
        },
        "validationResults": {
          "documentation": "<p>The list of the latest validation results.</p>",
          "shape": "ValidationResults"
        }
      },
      "type": "structure"
    },
    "LaunchProfileDescription": {
      "documentation": "<p>A human-readable description of the launch profile.</p>",
      "max": 256,
      "min": 0,
      "sensitive": true,
      "type": "string"
    },
    "LaunchProfileId": {
      "max": 22,
      "min": 0,
      "pattern": "^[a-zA-Z0-9-_]*$",
      "type": "string"
    },
    "LaunchProfileInitialization": {
      "documentation": "<p>A Launch Profile Initialization contains information required for a workstation or server to connect to a launch profile.</p> <p>This includes scripts, endpoints, security groups, subnets, and other configuration.</p>",
      "members": {
        "activeDirectory": {
          "documentation": "<p>A LaunchProfileInitializationActiveDirectory resource.</p>",
          "shape": "LaunchProfileInitializationActiveDirectory"
        },
        "ec2SecurityGroupIds": {
          "documentation": "<p>The EC2 security groups that control access to the studio component.</p>",
          "shape": "LaunchProfileSecurityGroupIdList"
        },
        "launchProfileId": {
          "documentation": "<p>The launch profile ID.</p>",
          "shape": "LaunchProfileId"
        },
        "launchProfileProtocolVersion": {
          "documentation": "<p>The version number of the protocol that is used by the launch profile. The only valid version is \"2021-03-31\".</p>",
          "shape": "LaunchProfileProtocolVersion"
        },
        "launchPurpose": {
          "documentation": "<p>The launch purpose.</p>",
          "shape": "LaunchPurpose"
        },
        "name": {
          "documentation": "<p>The name for the launch profile.</p>",
          "shape": "LaunchProfileName"
        },
        "platform": {
          "documentation": "<p>The platform of the launch platform, either WINDOWS or LINUX.</p>",
          "shape": "LaunchProfilePlatform"
        },
        "systemInitializationScripts": {
          "documentation": "<p>The system initializtion scripts.</p>",
          "shape": "LaunchProfileInitializationScriptList"
        },
        "userInitializationScripts": {
          "documentation": "<p>The user initializtion scripts.</p>",
          "shape": "LaunchProfileInitializationScriptList"
        }
      },
      "type": "structure"
    },
    "LaunchProfileInitializationActiveDirectory": {
      "documentation": "<p>The Launch Profile Initialization Active Directory contains information required for the launch profile to connect to the Active Directory.</p>",
      "members": {
        "computerAttributes": {
          "documentation": "<p>A collection of custom attributes for an Active Directory computer.</p>",
          "shape": "ActiveDirectoryComputerAttributeList"
        },
        "directoryId": {
          "documentation": "<p>The directory ID of the Directory Service for Microsoft Active Directory to access using this launch profile.</p>",
          "shape": "DirectoryId"
        },
        "directoryName": {
          "documentation": "<p>The directory name.</p>",
          "shape": "String"
        },
        "dnsIpAddresses": {
          "documentation": "<p>The DNS IP address.</p>",
          "shape": "ActiveDirectoryDnsIpAddressList"
        },
        "organizationalUnitDistinguishedName": {
          "documentation": "<p>The name for the organizational unit distinguished name.</p>",
          "shape": "ActiveDirectoryOrganizationalUnitDistinguishedName"
        },
        "studioComponentId": {
          "documentation": "<p>The unique identifier for a studio component resource.</p>",
          "shape": "StudioComponentId"
        },
        "studioComponentName": {
          "documentation": "<p>The name for the studio component.</p>",
          "shape": "StudioComponentName"
        }
      },
      "type": "structure"
    },
    "LaunchProfileInitializationScript": {
      "documentation": "<p>The Launch Profile Initialization Script is used when start streaming session runs.</p>",
      "members": {
        "runtimeRoleArn": {
          "documentation": "<p>An IAM role attached to a Studio Component that gives the studio component access to AWS resources at anytime while the instance is running. </p>",
          "shape": "RoleArn"
        },
        "script": {
          "documentation": "<p>The initialization script.</p>",
          "shape": "StudioComponentInitializationScriptContent"
        },
        "secureInitializationRoleArn": {
          "documentation": "<p>An IAM role attached to Studio Component when the system initialization script runs which give the studio component access to AWS resources when the system initialization script runs.</p>",
          "shape": "RoleArn"
        },
        "studioComponentId": {
          "documentation": "<p>The unique identifier for a studio component resource.</p>",
          "shape": "StudioComponentId"
        },
        "studioComponentName": {
          "documentation": "<p>The name for the studio component.</p>",
          "shape": "StudioComponentName"
        }
      },
      "type": "structure"
    },
    "LaunchProfileInitializationScriptList": {
      "member": {
        "shape": "LaunchProfileInitializationScript"
      },
      "type": "list"
    },
    "LaunchProfileList": {
      "member": {
        "shape": "LaunchProfile"
      },
      "type": "list"
    },
    "LaunchProfileMembership": {
      "documentation": "<p>Launch profile membership enables your studio admins to delegate launch profile access to other studio users in the Nimble Studio portal without needing to write or maintain complex IAM policies. A launch profile member is a user association from your studio identity source who is granted permissions to a launch profile.</p> <p>A launch profile member (type USER) provides the following permissions to that launch profile:</p> <ul> <li> <p>GetLaunchProfile</p> </li> <li> <p>GetLaunchProfileInitialization</p> </li> <li> <p>GetLaunchProfileMembers</p> </li> <li> <p>GetLaunchProfileMember</p> </li> <li> <p>CreateStreamingSession</p> </li> <li> <p>GetLaunchProfileDetails</p> </li> </ul>",
      "members": {
        "identityStoreId": {
          "documentation": "<p>The ID of the identity store.</p>",
          "shape": "String"
        },
        "persona": {
          "documentation": "<p>The persona.</p>",
          "shape": "LaunchProfilePersona"
        },
        "principalId": {
          "documentation": "<p>The principal ID.</p>",
          "shape": "String"
        },
        "sid": {
          "documentation": "<p>The Active Directory Security Identifier for this user, if available.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "LaunchProfileMembershipList": {
      "max": 20,
      "member": {
        "shape": "LaunchProfileMembership"
      },
      "min": 0,
      "type": "list"
    },
    "LaunchProfileName": {
      "max": 64,
      "min": 1,
      "sensitive": true,
      "type": "string"
    },
    "LaunchProfilePersona": {
      "enum": [
        "USER"
      ],
      "type": "string"
    },
    "LaunchProfilePlatform": {
      "enum": [
        "LINUX",
        "WINDOWS"
      ],
      "type": "string"
    },
    "LaunchProfileProtocolVersion": {
      "documentation": "<p>The version number of the protocol that is used by the launch profile. The only valid version is \"2021-03-31\".</p>",
      "max": 10,
      "min": 0,
      "pattern": "^2021\\-03\\-31$",
      "type": "string"
    },
    "LaunchProfileProtocolVersionList": {
      "member": {
        "shape": "LaunchProfileProtocolVersion"
      },
      "type": "list"
    },
    "LaunchProfileSecurityGroupIdList": {
      "member": {
        "shape": "SecurityGroupId"
      },
      "min": 1,
      "type": "list"
    },
    "LaunchProfileState": {
      "enum": [
        "CREATE_IN_PROGRESS",
        "READY",
        "UPDATE_IN_PROGRESS",
        "DELETE_IN_PROGRESS",
        "DELETED",
        "DELETE_FAILED",
        "CREATE_FAILED",
        "UPDATE_FAILED"
      ],
      "type": "string"
    },
    "LaunchProfileStateList": {
      "member": {
        "shape": "LaunchProfileState"
      },
      "type": "list"
    },
    "LaunchProfileStatusCode": {
      "enum": [
        "LAUNCH_PROFILE_CREATED",
        "LAUNCH_PROFILE_UPDATED",
        "LAUNCH_PROFILE_DELETED",
        "LAUNCH_PROFILE_CREATE_IN_PROGRESS",
        "LAUNCH_PROFILE_UPDATE_IN_PROGRESS",
        "LAUNCH_PROFILE_DELETE_IN_PROGRESS",
        "INTERNAL_ERROR",
        "STREAMING_IMAGE_NOT_FOUND",
        "STREAMING_IMAGE_NOT_READY",
        "LAUNCH_PROFILE_WITH_STREAM_SESSIONS_NOT_DELETED",
        "ENCRYPTION_KEY_ACCESS_DENIED",
        "ENCRYPTION_KEY_NOT_FOUND",
        "INVALID_SUBNETS_PROVIDED",
        "INVALID_INSTANCE_TYPES_PROVIDED",
        "INVALID_SUBNETS_COMBINATION"
      ],
      "type": "string"
    },
    "LaunchProfileStudioComponentIdList": {
      "max": 100,
      "member": {
        "shape": "String"
      },
      "min": 1,
      "type": "list"
    },
    "LaunchProfileValidationState": {
      "enum": [
        "VALIDATION_NOT_STARTED",
        "VALIDATION_IN_PROGRESS",
        "VALIDATION_SUCCESS",
        "VALIDATION_FAILED",
        "VALIDATION_FAILED_INTERNAL_SERVER_ERROR"
      ],
      "type": "string"
    },
    "LaunchProfileValidationStatusCode": {
      "enum": [
        "VALIDATION_NOT_STARTED",
        "VALIDATION_IN_PROGRESS",
        "VALIDATION_SUCCESS",
        "VALIDATION_FAILED_INVALID_SUBNET_ROUTE_TABLE_ASSOCIATION",
        "VALIDATION_FAILED_SUBNET_NOT_FOUND",
        "VALIDATION_FAILED_INVALID_SECURITY_GROUP_ASSOCIATION",
        "VALIDATION_FAILED_INVALID_ACTIVE_DIRECTORY",
        "VALIDATION_FAILED_UNAUTHORIZED",
        "VALIDATION_FAILED_INTERNAL_SERVER_ERROR"
      ],
      "type": "string"
    },
    "LaunchProfileValidationStatusMessage": {
      "type": "string"
    },
    "LaunchProfileValidationType": {
      "enum": [
        "VALIDATE_ACTIVE_DIRECTORY_STUDIO_COMPONENT",
        "VALIDATE_SUBNET_ASSOCIATION",
        "VALIDATE_NETWORK_ACL_ASSOCIATION",
        "VALIDATE_SECURITY_GROUP_ASSOCIATION"
      ],
      "type": "string"
    },
    "LaunchPurpose": {
      "documentation": "<p>The launch purpose.</p>",
      "max": 64,
      "min": 0,
      "pattern": "^[A-Z0-9_]+$",
      "type": "string"
    },
    "LicenseServiceConfiguration": {
      "documentation": "<p>The configuration for a license service that is associated with a studio resource.</p>",
      "members": {
        "endpoint": {
          "documentation": "<p>The endpoint of the license service that is accessed by the studio component resource.</p>",
          "shape": "SensitiveString"
        }
      },
      "type": "structure"
    },
    "LinuxMountPoint": {
      "max": 128,
      "min": 0,
      "pattern": "^(/?|(\\$HOME)?(/[^/\\n\\s\\\\]+)*)$",
      "sensitive": true,
      "type": "string"
    },
    "ListEulaAcceptancesRequest": {
      "members": {
        "eulaIds": {
          "documentation": "<p>The list of EULA IDs that have been previously accepted.</p>",
          "location": "querystring",
          "locationName": "eulaIds",
          "shape": "StringList"
        },
        "nextToken": {
          "documentation": "<p>The token to request the next page of results. </p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "String"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        }
      },
      "required": [
        "studioId"
      ],
      "type": "structure"
    },
    "ListEulaAcceptancesResponse": {
      "members": {
        "eulaAcceptances": {
          "documentation": "<p>A collection of EULA acceptances.</p>",
          "shape": "EulaAcceptanceList"
        },
        "nextToken": {
          "documentation": "<p>The token for the next set of results, or null if there are no more results.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ListEulasRequest": {
      "members": {
        "eulaIds": {
          "documentation": "<p>The list of EULA IDs that should be returned</p>",
          "location": "querystring",
          "locationName": "eulaIds",
          "shape": "StringList"
        },
        "nextToken": {
          "documentation": "<p>The token to request the next page of results. </p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ListEulasResponse": {
      "members": {
        "eulas": {
          "documentation": "<p>A collection of EULA resources.</p>",
          "shape": "EulaList"
        },
        "nextToken": {
          "documentation": "<p>The token for the next set of results, or null if there are no more results.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ListLaunchProfileMembersRequest": {
      "members": {
        "launchProfileId": {
          "documentation": "<p>The Launch Profile ID.</p>",
          "location": "uri",
          "locationName": "launchProfileId",
          "shape": "String"
        },
        "maxResults": {
          "documentation": "<p>The max number of results to return in the response.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>The token to request the next page of results. </p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "String"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        }
      },
      "required": [
        "launchProfileId",
        "studioId"
      ],
      "type": "structure"
    },
    "ListLaunchProfileMembersResponse": {
      "members": {
        "members": {
          "documentation": "<p>A list of members.</p>",
          "shape": "LaunchProfileMembershipList"
        },
        "nextToken": {
          "documentation": "<p>The token for the next set of results, or null if there are no more results.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ListLaunchProfilesRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p>The max number of results to return in the response.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>The token to request the next page of results. </p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "String"
        },
        "principalId": {
          "documentation": "<p>The principal ID. This currently supports a IAM Identity Center UserId. </p>",
          "location": "querystring",
          "locationName": "principalId",
          "shape": "String"
        },
        "states": {
          "documentation": "<p>Filter this request to launch profiles in any of the given states.</p>",
          "location": "querystring",
          "locationName": "states",
          "shape": "LaunchProfileStateList"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        }
      },
      "required": [
        "studioId"
      ],
      "type": "structure"
    },
    "ListLaunchProfilesResponse": {
      "members": {
        "launchProfiles": {
          "documentation": "<p>A collection of launch profiles.</p>",
          "shape": "LaunchProfileList"
        },
        "nextToken": {
          "documentation": "<p>The token for the next set of results, or null if there are no more results.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ListStreamingImagesRequest": {
      "members": {
        "nextToken": {
          "documentation": "<p>The token to request the next page of results. </p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "String"
        },
        "owner": {
          "documentation": "<p>Filter this request to streaming images with the given owner</p>",
          "location": "querystring",
          "locationName": "owner",
          "shape": "String"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        }
      },
      "required": [
        "studioId"
      ],
      "type": "structure"
    },
    "ListStreamingImagesResponse": {
      "members": {
        "nextToken": {
          "documentation": "<p>The token for the next set of results, or null if there are no more results.</p>",
          "shape": "String"
        },
        "streamingImages": {
          "documentation": "<p>A collection of streaming images.</p>",
          "shape": "StreamingImageList"
        }
      },
      "type": "structure"
    },
    "ListStreamingSessionsRequest": {
      "members": {
        "createdBy": {
          "documentation": "<p>Filters the request to streaming sessions created by the given user.</p>",
          "location": "querystring",
          "locationName": "createdBy",
          "shape": "String"
        },
        "nextToken": {
          "documentation": "<p>The token to request the next page of results. </p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "String"
        },
        "ownedBy": {
          "documentation": "<p>Filters the request to streaming session owned by the given user</p>",
          "location": "querystring",
          "locationName": "ownedBy",
          "shape": "String"
        },
        "sessionIds": {
          "documentation": "<p>Filters the request to only the provided session IDs.</p>",
          "location": "querystring",
          "locationName": "sessionIds",
          "shape": "String"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        }
      },
      "required": [
        "studioId"
      ],
      "type": "structure"
    },
    "ListStreamingSessionsResponse": {
      "members": {
        "nextToken": {
          "documentation": "<p>The token for the next set of results, or null if there are no more results.</p>",
          "shape": "String"
        },
        "sessions": {
          "documentation": "<p>A collection of streaming sessions.</p>",
          "shape": "StreamingSessionList"
        }
      },
      "type": "structure"
    },
    "ListStudioComponentsRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p>The max number of results to return in the response.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>The token to request the next page of results. </p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "String"
        },
        "states": {
          "documentation": "<p>Filters the request to studio components that are in one of the given states. </p>",
          "location": "querystring",
          "locationName": "states",
          "shape": "StudioComponentStateList"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        },
        "types": {
          "documentation": "<p>Filters the request to studio components that are of one of the given types.</p>",
          "location": "querystring",
          "locationName": "types",
          "shape": "StudioComponentTypeList"
        }
      },
      "required": [
        "studioId"
      ],
      "type": "structure"
    },
    "ListStudioComponentsResponse": {
      "members": {
        "nextToken": {
          "documentation": "<p>The token for the next set of results, or null if there are no more results.</p>",
          "shape": "String"
        },
        "studioComponents": {
          "documentation": "<p>A collection of studio components.</p>",
          "shape": "StudioComponentList"
        }
      },
      "type": "structure"
    },
    "ListStudioMembersRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p>The max number of results to return in the response.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>The token to request the next page of results. </p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "String"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        }
      },
      "required": [
        "studioId"
      ],
      "type": "structure"
    },
    "ListStudioMembersResponse": {
      "members": {
        "members": {
          "documentation": "<p>A list of admin members.</p>",
          "shape": "StudioMembershipList"
        },
        "nextToken": {
          "documentation": "<p>The token for the next set of results, or null if there are no more results.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ListStudiosRequest": {
      "members": {
        "nextToken": {
          "documentation": "<p>The token to request the next page of results. </p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ListStudiosResponse": {
      "members": {
        "nextToken": {
          "documentation": "<p>The token for the next set of results, or null if there are no more results.</p>",
          "shape": "String"
        },
        "studios": {
          "documentation": "<p>A collection of studios.</p>",
          "shape": "StudioList"
        }
      },
      "required": [
        "studios"
      ],
      "type": "structure"
    },
    "ListTagsForResourceRequest": {
      "members": {
        "resourceArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the resource for which you want to list tags.</p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "String"
        }
      },
      "required": [
        "resourceArn"
      ],
      "type": "structure"
    },
    "ListTagsForResourceResponse": {
      "members": {
        "tags": {
          "documentation": "<p>A collection of labels, in the form of key:value pairs, that apply to this resource.</p>",
          "shape": "Tags"
        }
      },
      "type": "structure"
    },
    "MaxResults": {
      "max": 100,
      "min": 1,
      "type": "integer"
    },
    "NewLaunchProfileMember": {
      "documentation": "<p>A new member that is added to a launch profile.</p>",
      "members": {
        "persona": {
          "documentation": "<p>The persona.</p>",
          "shape": "LaunchProfilePersona"
        },
        "principalId": {
          "documentation": "<p>The principal ID.</p>",
          "shape": "String"
        }
      },
      "required": [
        "persona",
        "principalId"
      ],
      "type": "structure"
    },
    "NewLaunchProfileMemberList": {
      "max": 20,
      "member": {
        "shape": "NewLaunchProfileMember"
      },
      "min": 1,
      "type": "list"
    },
    "NewStudioMember": {
      "documentation": "<p>A new studio user's membership.</p>",
      "members": {
        "persona": {
          "documentation": "<p>The persona.</p>",
          "shape": "StudioPersona"
        },
        "principalId": {
          "documentation": "<p>The principal ID.</p>",
          "shape": "String"
        }
      },
      "required": [
        "persona",
        "principalId"
      ],
      "type": "structure"
    },
    "NewStudioMemberList": {
      "max": 20,
      "member": {
        "shape": "NewStudioMember"
      },
      "min": 1,
      "type": "list"
    },
    "PutLaunchProfileMembersRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don\u2019t specify a client token, the AWS SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>",
          "idempotencyToken": true,
          "location": "header",
          "locationName": "X-Amz-Client-Token",
          "shape": "ClientToken"
        },
        "identityStoreId": {
          "documentation": "<p>The ID of the identity store.</p>",
          "shape": "String"
        },
        "launchProfileId": {
          "documentation": "<p>The Launch Profile ID.</p>",
          "location": "uri",
          "locationName": "launchProfileId",
          "shape": "String"
        },
        "members": {
          "documentation": "<p>A list of members.</p>",
          "shape": "NewLaunchProfileMemberList"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        }
      },
      "required": [
        "identityStoreId",
        "launchProfileId",
        "members",
        "studioId"
      ],
      "type": "structure"
    },
    "PutLaunchProfileMembersResponse": {
      "members": {},
      "type": "structure"
    },
    "PutStudioMembersRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don\u2019t specify a client token, the AWS SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>",
          "idempotencyToken": true,
          "location": "header",
          "locationName": "X-Amz-Client-Token",
          "shape": "ClientToken"
        },
        "identityStoreId": {
          "documentation": "<p>The ID of the identity store.</p>",
          "shape": "String"
        },
        "members": {
          "documentation": "<p>A list of members.</p>",
          "shape": "NewStudioMemberList"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        }
      },
      "required": [
        "identityStoreId",
        "members",
        "studioId"
      ],
      "type": "structure"
    },
    "PutStudioMembersResponse": {
      "members": {},
      "type": "structure"
    },
    "Region": {
      "max": 50,
      "min": 0,
      "pattern": "[a-z]{2}-?(iso|gov)?-{1}[a-z]*-{1}[0-9]",
      "type": "string"
    },
    "ResourceNotFoundException": {
      "documentation": "<p>The specified resource could not be found.</p>",
      "error": {
        "httpStatusCode": 404,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "code": {
          "documentation": "<p>A more specific error code.</p>",
          "shape": "String"
        },
        "context": {
          "documentation": "<p>The exception context.</p>",
          "shape": "ExceptionContext"
        },
        "message": {
          "documentation": "<p>A human-readable description of the error.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "RoleArn": {
      "max": 2048,
      "min": 0,
      "type": "string"
    },
    "ScriptParameterKey": {
      "documentation": "<p>A script parameter key.</p>",
      "max": 64,
      "min": 1,
      "pattern": "^[a-zA-Z_][a-zA-Z0-9_]+$",
      "type": "string"
    },
    "ScriptParameterKeyValue": {
      "documentation": "<p>A parameter for a studio component script, in the form of a key:value pair.</p>",
      "members": {
        "key": {
          "documentation": "<p>A script parameter key.</p>",
          "shape": "ScriptParameterKey"
        },
        "value": {
          "documentation": "<p>A script parameter value.</p>",
          "shape": "ScriptParameterValue"
        }
      },
      "type": "structure"
    },
    "ScriptParameterValue": {
      "documentation": "<p>A script parameter value.</p>",
      "max": 256,
      "min": 1,
      "type": "string"
    },
    "SecurityGroupId": {
      "type": "string"
    },
    "SensitiveString": {
      "sensitive": true,
      "type": "string"
    },
    "ServiceQuotaExceededException": {
      "documentation": "<p>Your current quota does not allow you to perform the request action. You can request increases for some quotas, and other quotas cannot be increased.</p> <p>Please use AWS Service Quotas to request an increase. </p>",
      "error": {
        "httpStatusCode": 402,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "code": {
          "documentation": "<p>A more specific error code.</p>",
          "shape": "String"
        },
        "context": {
          "documentation": "<p>The exception context.</p>",
          "shape": "ExceptionContext"
        },
        "message": {
          "documentation": "<p>A human-readable description of the error.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "SharedFileSystemConfiguration": {
      "documentation": "<p>The configuration for a shared file storage system that is associated with a studio resource.</p>",
      "members": {
        "endpoint": {
          "documentation": "<p>The endpoint of the shared file system that is accessed by the studio component resource.</p>",
          "shape": "SensitiveString"
        },
        "fileSystemId": {
          "documentation": "<p>The unique identifier for a file system.</p>",
          "shape": "String"
        },
        "linuxMountPoint": {
          "documentation": "<p>The mount location for a shared file system on a Linux virtual workstation.</p>",
          "shape": "LinuxMountPoint"
        },
        "shareName": {
          "documentation": "<p>The name of the file share.</p>",
          "shape": "SensitiveString"
        },
        "windowsMountDrive": {
          "documentation": "<p>The mount location for a shared file system on a Windows virtual workstation.</p>",
          "shape": "WindowsMountDrive"
        }
      },
      "type": "structure"
    },
    "StartStreamingSessionRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don\u2019t specify a client token, the AWS SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>",
          "idempotencyToken": true,
          "location": "header",
          "locationName": "X-Amz-Client-Token",
          "shape": "ClientToken"
        },
        "sessionId": {
          "documentation": "<p>The streaming session ID for the StartStreamingSessionRequest.</p>",
          "location": "uri",
          "locationName": "sessionId",
          "shape": "String"
        },
        "studioId": {
          "documentation": "<p>The studio ID for the StartStreamingSessionRequest.</p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        }
      },
      "required": [
        "sessionId",
        "studioId"
      ],
      "type": "structure"
    },
    "StartStreamingSessionResponse": {
      "members": {
        "session": {
          "shape": "StreamingSession"
        }
      },
      "type": "structure"
    },
    "StartStudioSSOConfigurationRepairRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don\u2019t specify a client token, the AWS SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>",
          "idempotencyToken": true,
          "location": "header",
          "locationName": "X-Amz-Client-Token",
          "shape": "ClientToken"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        }
      },
      "required": [
        "studioId"
      ],
      "type": "structure"
    },
    "StartStudioSSOConfigurationRepairResponse": {
      "members": {
        "studio": {
          "documentation": "<p>Information about a studio.</p>",
          "shape": "Studio"
        }
      },
      "required": [
        "studio"
      ],
      "type": "structure"
    },
    "StopStreamingSessionRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don\u2019t specify a client token, the AWS SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>",
          "idempotencyToken": true,
          "location": "header",
          "locationName": "X-Amz-Client-Token",
          "shape": "ClientToken"
        },
        "sessionId": {
          "documentation": "<p>The streaming session ID for the StopStreamingSessionRequest.</p>",
          "location": "uri",
          "locationName": "sessionId",
          "shape": "String"
        },
        "studioId": {
          "documentation": "<p>The studioId for the StopStreamingSessionRequest.</p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        }
      },
      "required": [
        "sessionId",
        "studioId"
      ],
      "type": "structure"
    },
    "StopStreamingSessionResponse": {
      "members": {
        "session": {
          "shape": "StreamingSession"
        }
      },
      "type": "structure"
    },
    "StreamConfiguration": {
      "documentation": "<p>A configuration for a streaming session.</p>",
      "members": {
        "clipboardMode": {
          "documentation": "<p>Enable or disable the use of the system clipboard to copy and paste between the streaming session and streaming client.</p>",
          "shape": "StreamingClipboardMode"
        },
        "ec2InstanceTypes": {
          "documentation": "<p>The EC2 instance types that users can select from when launching a streaming session with this launch profile.</p>",
          "shape": "StreamingInstanceTypeList"
        },
        "maxSessionLengthInMinutes": {
          "documentation": "<p>The length of time, in minutes, that a streaming session can be active before it is stopped or terminated. After this point, Nimble Studio automatically terminates or stops the session. The default length of time is 690 minutes, and the maximum length of time is 30 days.</p>",
          "shape": "StreamConfigurationMaxSessionLengthInMinutes"
        },
        "maxStoppedSessionLengthInMinutes": {
          "documentation": "<p>Integer that determines if you can start and stop your sessions and how long a session can stay in the STOPPED state. The default value is 0. The maximum value is 5760.</p> <p>If the value is missing or set to 0, your sessions can\u2019t be stopped. If you then call <code>StopStreamingSession</code>, the session fails. If the time that a session stays in the READY state exceeds the <code>maxSessionLengthInMinutes</code> value, the session will automatically be terminated (instead of stopped).</p> <p>If the value is set to a positive number, the session can be stopped. You can call <code>StopStreamingSession</code> to stop sessions in the READY state. If the time that a session stays in the READY state exceeds the <code>maxSessionLengthInMinutes</code> value, the session will automatically be stopped (instead of terminated).</p>",
          "shape": "StreamConfigurationMaxStoppedSessionLengthInMinutes"
        },
        "sessionStorage": {
          "documentation": "<p>(Optional) The upload storage for a streaming session.</p>",
          "shape": "StreamConfigurationSessionStorage"
        },
        "streamingImageIds": {
          "documentation": "<p>The streaming images that users can select from when launching a streaming session with this launch profile.</p>",
          "shape": "StreamingImageIdList"
        }
      },
      "required": [
        "clipboardMode",
        "ec2InstanceTypes",
        "streamingImageIds"
      ],
      "type": "structure"
    },
    "StreamConfigurationCreate": {
      "documentation": "<p>Configuration for streaming workstations created using this launch profile.</p>",
      "members": {
        "clipboardMode": {
          "documentation": "<p>Enable or disable the use of the system clipboard to copy and paste between the streaming session and streaming client.</p>",
          "shape": "StreamingClipboardMode"
        },
        "ec2InstanceTypes": {
          "documentation": "<p>The EC2 instance types that users can select from when launching a streaming session with this launch profile.</p>",
          "shape": "StreamingInstanceTypeList"
        },
        "maxSessionLengthInMinutes": {
          "documentation": "<p>The length of time, in minutes, that a streaming session can be active before it is stopped or terminated. After this point, Nimble Studio automatically terminates or stops the session. The default length of time is 690 minutes, and the maximum length of time is 30 days.</p>",
          "shape": "StreamConfigurationMaxSessionLengthInMinutes"
        },
        "maxStoppedSessionLengthInMinutes": {
          "documentation": "<p>Integer that determines if you can start and stop your sessions and how long a session can stay in the STOPPED state. The default value is 0. The maximum value is 5760.</p> <p>If the value is missing or set to 0, your sessions can\u2019t be stopped. If you then call <code>StopStreamingSession</code>, the session fails. If the time that a session stays in the READY state exceeds the <code>maxSessionLengthInMinutes</code> value, the session will automatically be terminated (instead of stopped).</p> <p>If the value is set to a positive number, the session can be stopped. You can call <code>StopStreamingSession</code> to stop sessions in the READY state. If the time that a session stays in the READY state exceeds the <code>maxSessionLengthInMinutes</code> value, the session will automatically be stopped (instead of terminated).</p>",
          "shape": "StreamConfigurationMaxStoppedSessionLengthInMinutes"
        },
        "sessionStorage": {
          "documentation": "<p>(Optional) The upload storage for a streaming workstation that is created using this launch profile.</p>",
          "shape": "StreamConfigurationSessionStorage"
        },
        "streamingImageIds": {
          "documentation": "<p>The streaming images that users can select from when launching a streaming session with this launch profile.</p>",
          "shape": "StreamingImageIdList"
        }
      },
      "required": [
        "clipboardMode",
        "ec2InstanceTypes",
        "streamingImageIds"
      ],
      "type": "structure"
    },
    "StreamConfigurationMaxSessionLengthInMinutes": {
      "max": 43200,
      "min": 1,
      "type": "integer"
    },
    "StreamConfigurationMaxStoppedSessionLengthInMinutes": {
      "max": 5760,
      "min": 0,
      "type": "integer"
    },
    "StreamConfigurationSessionStorage": {
      "documentation": "<p>The configuration for a streaming session\u2019s upload storage.</p>",
      "members": {
        "mode": {
          "documentation": "<p>Allows artists to upload files to their workstations. The only valid option is <code>UPLOAD</code>.</p>",
          "shape": "StreamingSessionStorageModeList"
        },
        "root": {
          "documentation": "<p>The configuration for the upload storage root of the streaming session.</p>",
          "shape": "StreamingSessionStorageRoot"
        }
      },
      "required": [
        "mode"
      ],
      "type": "structure"
    },
    "StreamingClipboardMode": {
      "enum": [
        "ENABLED",
        "DISABLED"
      ],
      "type": "string"
    },
    "StreamingImage": {
      "documentation": "<p>Represents a streaming image resource.</p> <p>Streaming images are used by studio users to select which operating system and software they want to use in a Nimble Studio streaming session.</p> <p>Amazon provides a number of streaming images that include popular 3rd-party software.</p> <p>You can create your own streaming images using an Amazon Elastic Compute Cloud (Amazon EC2) machine image that you create for this purpose. You can also include software that your users require.</p>",
      "members": {
        "arn": {
          "documentation": "<p>The ARN of the resource.</p>",
          "shape": "String"
        },
        "description": {
          "documentation": "<p>A human-readable description of the streaming image.</p>",
          "shape": "StreamingImageDescription"
        },
        "ec2ImageId": {
          "documentation": "<p>The ID of an EC2 machine image with which to create the streaming image.</p>",
          "shape": "EC2ImageId"
        },
        "encryptionConfiguration": {
          "documentation": "<p>The encryption configuration.</p>",
          "shape": "StreamingImageEncryptionConfiguration"
        },
        "eulaIds": {
          "documentation": "<p>The list of EULAs that must be accepted before a Streaming Session can be started using this streaming image.</p>",
          "shape": "EulaIdList"
        },
        "name": {
          "documentation": "<p>A friendly name for a streaming image resource.</p>",
          "shape": "StreamingImageName"
        },
        "owner": {
          "documentation": "<p>The owner of the streaming image, either the studioId that contains the streaming image, or 'amazon' for images that are provided by Amazon Nimble Studio.</p>",
          "shape": "StreamingImageOwner"
        },
        "platform": {
          "documentation": "<p>The platform of the streaming image, either WINDOWS or LINUX.</p>",
          "shape": "StreamingImagePlatform"
        },
        "state": {
          "documentation": "<p>The current state.</p>",
          "shape": "StreamingImageState"
        },
        "statusCode": {
          "documentation": "<p>The status code.</p>",
          "shape": "StreamingImageStatusCode"
        },
        "statusMessage": {
          "documentation": "<p>The status message for the streaming image.</p>",
          "shape": "String"
        },
        "streamingImageId": {
          "documentation": "<p>The ID of the streaming image.</p>",
          "shape": "StreamingImageId"
        },
        "tags": {
          "documentation": "<p>A collection of labels, in the form of key:value pairs, that apply to this resource.</p>",
          "shape": "Tags"
        }
      },
      "type": "structure"
    },
    "StreamingImageDescription": {
      "documentation": "<p>The description.</p>",
      "max": 256,
      "min": 0,
      "sensitive": true,
      "type": "string"
    },
    "StreamingImageEncryptionConfiguration": {
      "documentation": "<p>Specifies how a streaming image is encrypted.</p>",
      "members": {
        "keyArn": {
          "documentation": "<p>The ARN for a KMS key that is used to encrypt studio data.</p>",
          "shape": "StreamingImageEncryptionConfigurationKeyArn"
        },
        "keyType": {
          "documentation": "<p>The type of KMS key that is used to encrypt studio data.</p>",
          "shape": "StreamingImageEncryptionConfigurationKeyType"
        }
      },
      "required": [
        "keyType"
      ],
      "type": "structure"
    },
    "StreamingImageEncryptionConfigurationKeyArn": {
      "min": 4,
      "pattern": "^arn:.*",
      "type": "string"
    },
    "StreamingImageEncryptionConfigurationKeyType": {
      "enum": [
        "CUSTOMER_MANAGED_KEY"
      ],
      "type": "string"
    },
    "StreamingImageId": {
      "max": 22,
      "min": 0,
      "pattern": "^[a-zA-Z0-9-_]*$",
      "type": "string"
    },
    "StreamingImageIdList": {
      "documentation": "<p>A list of streaming image IDs that users can select from when launching a streaming session with this launch profile.</p>",
      "max": 20,
      "member": {
        "shape": "StreamingImageId"
      },
      "min": 1,
      "type": "list"
    },
    "StreamingImageList": {
      "member": {
        "shape": "StreamingImage"
      },
      "type": "list"
    },
    "StreamingImageName": {
      "documentation": "<p>A friendly name for a streaming image resource.</p>",
      "max": 64,
      "min": 0,
      "sensitive": true,
      "type": "string"
    },
    "StreamingImageOwner": {
      "documentation": "<p>StreamingImageOwner is the owner of a particular streaming image.</p> <p>This string is either the studioId that contains the streaming image, or the word 'AMAZON' for images provided by Nimble Studio.</p>",
      "type": "string"
    },
    "StreamingImagePlatform": {
      "documentation": "<p>The platform of this Streaming Image, either WINDOWS or LINUX.</p>",
      "pattern": "^[a-zA-Z]*$",
      "type": "string"
    },
    "StreamingImageState": {
      "enum": [
        "CREATE_IN_PROGRESS",
        "READY",
        "DELETE_IN_PROGRESS",
        "DELETED",
        "UPDATE_IN_PROGRESS",
        "UPDATE_FAILED",
        "CREATE_FAILED",
        "DELETE_FAILED"
      ],
      "type": "string"
    },
    "StreamingImageStatusCode": {
      "documentation": "<p>The status code.</p>",
      "enum": [
        "STREAMING_IMAGE_CREATE_IN_PROGRESS",
        "STREAMING_IMAGE_READY",
        "STREAMING_IMAGE_DELETE_IN_PROGRESS",
        "STREAMING_IMAGE_DELETED",
        "STREAMING_IMAGE_UPDATE_IN_PROGRESS",
        "INTERNAL_ERROR",
        "ACCESS_DENIED"
      ],
      "type": "string"
    },
    "StreamingInstanceType": {
      "enum": [
        "g4dn.xlarge",
        "g4dn.2xlarge",
        "g4dn.4xlarge",
        "g4dn.8xlarge",
        "g4dn.12xlarge",
        "g4dn.16xlarge",
        "g3.4xlarge",
        "g3s.xlarge",
        "g5.xlarge",
        "g5.2xlarge",
        "g5.4xlarge",
        "g5.8xlarge",
        "g5.16xlarge"
      ],
      "type": "string"
    },
    "StreamingInstanceTypeList": {
      "documentation": "<p>The EC2 instance types that users can select from when launching a streaming session with this launch profile.</p>",
      "max": 30,
      "member": {
        "shape": "StreamingInstanceType"
      },
      "min": 1,
      "type": "list"
    },
    "StreamingSession": {
      "documentation": "<p>A streaming session is a virtual workstation created using a particular launch profile.</p>",
      "members": {
        "arn": {
          "documentation": "<p>The ARN of the resource.</p>",
          "shape": "String"
        },
        "createdAt": {
          "documentation": "<p>The Unix epoch timestamp in seconds for when the resource was created.</p>",
          "shape": "Timestamp"
        },
        "createdBy": {
          "documentation": "<p>The user ID of the user that created the streaming session.</p>",
          "shape": "String"
        },
        "ec2InstanceType": {
          "documentation": "<p>The EC2 Instance type used for the streaming session.</p>",
          "shape": "String"
        },
        "launchProfileId": {
          "documentation": "<p>The ID of the launch profile used to control access from the streaming session.</p>",
          "shape": "String"
        },
        "ownedBy": {
          "documentation": "<p>The user ID of the user that owns the streaming session. The user that owns the session will be logging into the session and interacting with the virtual workstation.</p>",
          "shape": "String"
        },
        "sessionId": {
          "documentation": "<p>The session ID.</p>",
          "shape": "StreamingSessionId"
        },
        "startedAt": {
          "documentation": "<p>The time the session entered START_IN_PROGRESS state.</p>",
          "shape": "Timestamp"
        },
        "startedBy": {
          "documentation": "<p>The user ID of the user that started the streaming session.</p>",
          "shape": "String"
        },
        "state": {
          "documentation": "<p>The current state.</p>",
          "shape": "StreamingSessionState"
        },
        "statusCode": {
          "documentation": "<p>The status code.</p>",
          "shape": "StreamingSessionStatusCode"
        },
        "statusMessage": {
          "documentation": "<p>The status message for the streaming session.</p>",
          "shape": "String"
        },
        "stopAt": {
          "documentation": "<p>The time the streaming session will automatically be stopped if the user doesn\u2019t stop the session themselves. </p>",
          "shape": "Timestamp"
        },
        "stoppedAt": {
          "documentation": "<p>The time the session entered STOP_IN_PROGRESS state.</p>",
          "shape": "Timestamp"
        },
        "stoppedBy": {
          "documentation": "<p>The user ID of the user that stopped the streaming session.</p>",
          "shape": "String"
        },
        "streamingImageId": {
          "documentation": "<p>The ID of the streaming image.</p>",
          "shape": "StreamingImageId"
        },
        "tags": {
          "documentation": "<p>A collection of labels, in the form of key:value pairs, that apply to this resource.</p>",
          "shape": "Tags"
        },
        "terminateAt": {
          "documentation": "<p>The time the streaming session will automatically terminate if not terminated by the user.</p>",
          "shape": "Timestamp"
        },
        "updatedAt": {
          "documentation": "<p>The Unix epoch timestamp in seconds for when the resource was updated.</p>",
          "shape": "Timestamp"
        },
        "updatedBy": {
          "documentation": "<p>The user ID of the user that most recently updated the resource.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "StreamingSessionId": {
      "type": "string"
    },
    "StreamingSessionList": {
      "member": {
        "shape": "StreamingSession"
      },
      "type": "list"
    },
    "StreamingSessionState": {
      "documentation": "<p>The streaming session state.</p>",
      "enum": [
        "CREATE_IN_PROGRESS",
        "DELETE_IN_PROGRESS",
        "READY",
        "DELETED",
        "CREATE_FAILED",
        "DELETE_FAILED",
        "STOP_IN_PROGRESS",
        "START_IN_PROGRESS",
        "STOPPED",
        "STOP_FAILED",
        "START_FAILED"
      ],
      "type": "string"
    },
    "StreamingSessionStatusCode": {
      "enum": [
        "STREAMING_SESSION_READY",
        "STREAMING_SESSION_DELETED",
        "STREAMING_SESSION_CREATE_IN_PROGRESS",
        "STREAMING_SESSION_DELETE_IN_PROGRESS",
        "INTERNAL_ERROR",
        "INSUFFICIENT_CAPACITY",
        "ACTIVE_DIRECTORY_DOMAIN_JOIN_ERROR",
        "NETWORK_CONNECTION_ERROR",
        "INITIALIZATION_SCRIPT_ERROR",
        "DECRYPT_STREAMING_IMAGE_ERROR",
        "NETWORK_INTERFACE_ERROR",
        "STREAMING_SESSION_STOPPED",
        "STREAMING_SESSION_STARTED",
        "STREAMING_SESSION_STOP_IN_PROGRESS",
        "STREAMING_SESSION_START_IN_PROGRESS",
        "AMI_VALIDATION_ERROR"
      ],
      "type": "string"
    },
    "StreamingSessionStorageMode": {
      "enum": [
        "UPLOAD"
      ],
      "type": "string"
    },
    "StreamingSessionStorageModeList": {
      "member": {
        "shape": "StreamingSessionStorageMode"
      },
      "min": 1,
      "type": "list"
    },
    "StreamingSessionStorageRoot": {
      "documentation": "<p>The upload storage root location (folder) on streaming workstations where files are uploaded.</p>",
      "members": {
        "linux": {
          "documentation": "<p>The folder path in Linux workstations where files are uploaded.</p>",
          "shape": "StreamingSessionStorageRootPathLinux"
        },
        "windows": {
          "documentation": "<p>The folder path in Windows workstations where files are uploaded.</p>",
          "shape": "StreamingSessionStorageRootPathWindows"
        }
      },
      "type": "structure"
    },
    "StreamingSessionStorageRootPathLinux": {
      "max": 128,
      "min": 1,
      "pattern": "^(\\$HOME|/)[/]?([A-Za-z0-9-_]+/)*([A-Za-z0-9_-]+)$",
      "sensitive": true,
      "type": "string"
    },
    "StreamingSessionStorageRootPathWindows": {
      "max": 128,
      "min": 1,
      "pattern": "^((\\%HOMEPATH\\%)|[a-zA-Z]:)[\\\\/](?:[a-zA-Z0-9_-]+[\\\\/])*[a-zA-Z0-9_-]+$",
      "sensitive": true,
      "type": "string"
    },
    "StreamingSessionStream": {
      "documentation": "<p>A stream is an active connection to a streaming session, enabling a studio user to control the streaming session using a compatible client. Streaming session streams are compatible with the NICE DCV web client, included in the Nimble Studio portal, or the NICE DCV desktop client.</p>",
      "members": {
        "createdAt": {
          "documentation": "<p>The Unix epoch timestamp in seconds for when the resource was created.</p>",
          "shape": "Timestamp"
        },
        "createdBy": {
          "documentation": "<p>The user ID of the user that created the streaming session stream.</p>",
          "shape": "String"
        },
        "expiresAt": {
          "documentation": "<p>The Unix epoch timestamp in seconds for when the resource expires.</p>",
          "shape": "Timestamp"
        },
        "ownedBy": {
          "documentation": "<p>The user ID of the user that owns the streaming session. The user that owns the session will be logging into the session and interacting with the virtual workstation.</p>",
          "shape": "String"
        },
        "state": {
          "documentation": "<p>The current state.</p>",
          "shape": "StreamingSessionStreamState"
        },
        "statusCode": {
          "documentation": "<p>The streaming session stream status code.</p>",
          "shape": "StreamingSessionStreamStatusCode"
        },
        "streamId": {
          "documentation": "<p>The stream ID.</p>",
          "shape": "String"
        },
        "url": {
          "documentation": "<p>The URL to connect to this stream using the DCV client.</p>",
          "shape": "SensitiveString"
        }
      },
      "type": "structure"
    },
    "StreamingSessionStreamExpirationInSeconds": {
      "max": 3600,
      "min": 60,
      "type": "integer"
    },
    "StreamingSessionStreamState": {
      "enum": [
        "READY",
        "CREATE_IN_PROGRESS",
        "DELETE_IN_PROGRESS",
        "DELETED",
        "CREATE_FAILED",
        "DELETE_FAILED"
      ],
      "type": "string"
    },
    "StreamingSessionStreamStatusCode": {
      "enum": [
        "STREAM_CREATE_IN_PROGRESS",
        "STREAM_READY",
        "STREAM_DELETE_IN_PROGRESS",
        "STREAM_DELETED",
        "INTERNAL_ERROR",
        "NETWORK_CONNECTION_ERROR"
      ],
      "type": "string"
    },
    "String": {
      "type": "string"
    },
    "StringList": {
      "member": {
        "shape": "String"
      },
      "type": "list"
    },
    "Studio": {
      "documentation": "<p>Represents a studio resource.</p> <p>A studio is the core resource used with Nimble Studio. You must create a studio first, before any other resource type can be created. All other resources you create and manage in Nimble Studio are contained within a studio.</p> <p>When creating a studio, you must provides two IAM roles for use with the Nimble Studio portal. These roles are assumed by your users when they log in to the Nimble Studio portal via IAM Identity Center and your identity source.</p> <p>The user role must have the AmazonNimbleStudio-StudioUser managed policy attached for the portal to function properly.</p> <p>The admin role must have the AmazonNimbleStudio-StudioAdmin managed policy attached for the portal to function properly.</p> <p>Your studio roles must trust the identity.nimble.amazonaws.com service principal to function properly.</p>",
      "members": {
        "adminRoleArn": {
          "documentation": "<p>The IAM role that studio admins assume when logging in to the Nimble Studio portal.</p>",
          "shape": "RoleArn"
        },
        "arn": {
          "documentation": "<p>The Amazon Resource Name (ARN) that is assigned to a studio resource and uniquely identifies it. ARNs are unique across all Regions.</p>",
          "shape": "String"
        },
        "createdAt": {
          "documentation": "<p>The Unix epoch timestamp in seconds for when the resource was created.</p>",
          "shape": "Timestamp"
        },
        "displayName": {
          "documentation": "<p>A friendly name for the studio.</p>",
          "shape": "StudioDisplayName"
        },
        "homeRegion": {
          "documentation": "<p>The Amazon Web Services Region where the studio resource is located.</p>",
          "shape": "Region"
        },
        "ssoClientId": {
          "documentation": "<p>The IAM Identity Center application client ID used to integrate with IAM Identity Center to enable IAM Identity Center users to log in to Nimble Studio portal.</p>",
          "shape": "String"
        },
        "state": {
          "documentation": "<p>The current state of the studio resource.</p>",
          "shape": "StudioState"
        },
        "statusCode": {
          "documentation": "<p>Status codes that provide additional detail on the studio state.</p>",
          "shape": "StudioStatusCode"
        },
        "statusMessage": {
          "documentation": "<p>Additional detail on the studio state.</p>",
          "shape": "String"
        },
        "studioEncryptionConfiguration": {
          "documentation": "<p>Configuration of the encryption method that is used for the studio.</p>",
          "shape": "StudioEncryptionConfiguration"
        },
        "studioId": {
          "documentation": "<p>The unique identifier for a studio resource. In Nimble Studio, all other resources are contained in a studio resource.</p>",
          "shape": "String"
        },
        "studioName": {
          "documentation": "<p>The name of the studio, as included in the URL when accessing it in the Nimble Studio portal.</p>",
          "shape": "StudioName"
        },
        "studioUrl": {
          "documentation": "<p>The address of the web page for the studio.</p>",
          "shape": "String"
        },
        "tags": {
          "documentation": "<p>A collection of labels, in the form of key:value pairs, that apply to this resource.</p>",
          "shape": "Tags"
        },
        "updatedAt": {
          "documentation": "<p>The Unix epoch timestamp in seconds for when the resource was updated.</p>",
          "shape": "Timestamp"
        },
        "userRoleArn": {
          "documentation": "<p>The IAM role that studio users assume when logging in to the Nimble Studio portal.</p>",
          "shape": "RoleArn"
        }
      },
      "type": "structure"
    },
    "StudioComponent": {
      "documentation": "<p>A studio component represents a network resource to be used by a studio's users and workflows. A typical studio contains studio components for each of the following: render farm, Active Directory, licensing, and file system.</p> <p>Access to a studio component is managed by specifying security groups for the resource, as well as its endpoint.</p> <p>A studio component also has a set of initialization scripts that are returned by <code>GetLaunchProfileInitialization</code>. These initialization scripts run on streaming sessions when they start. They provide users with flexibility in controlling how the studio resources are configured on a streaming session.</p>",
      "members": {
        "arn": {
          "documentation": "<p>The ARN of the resource.</p>",
          "shape": "String"
        },
        "configuration": {
          "documentation": "<p>The configuration of the studio component, based on component type.</p>",
          "shape": "StudioComponentConfiguration"
        },
        "createdAt": {
          "documentation": "<p>The Unix epoch timestamp in seconds for when the resource was created.</p>",
          "shape": "Timestamp"
        },
        "createdBy": {
          "documentation": "<p>The user ID of the user that created the studio component.</p>",
          "shape": "String"
        },
        "description": {
          "documentation": "<p>A human-readable description for the studio component resource.</p>",
          "shape": "StudioComponentDescription"
        },
        "ec2SecurityGroupIds": {
          "documentation": "<p>The EC2 security groups that control access to the studio component.</p>",
          "shape": "StudioComponentSecurityGroupIdList"
        },
        "initializationScripts": {
          "documentation": "<p>Initialization scripts for studio components.</p>",
          "shape": "StudioComponentInitializationScriptList"
        },
        "name": {
          "documentation": "<p>A friendly name for the studio component resource.</p>",
          "shape": "StudioComponentName"
        },
        "runtimeRoleArn": {
          "documentation": "<p>An IAM role attached to a Studio Component that gives the studio component access to AWS resources at anytime while the instance is running. </p>",
          "shape": "RoleArn"
        },
        "scriptParameters": {
          "documentation": "<p>Parameters for the studio component scripts.</p>",
          "shape": "StudioComponentScriptParameterKeyValueList"
        },
        "secureInitializationRoleArn": {
          "documentation": "<p>An IAM role attached to Studio Component when the system initialization script runs which give the studio component access to AWS resources when the system initialization script runs.</p>",
          "shape": "RoleArn"
        },
        "state": {
          "documentation": "<p>The current state.</p>",
          "shape": "StudioComponentState"
        },
        "statusCode": {
          "documentation": "<p>The status code.</p>",
          "shape": "StudioComponentStatusCode"
        },
        "statusMessage": {
          "documentation": "<p>The status message for the studio component.</p>",
          "shape": "String"
        },
        "studioComponentId": {
          "documentation": "<p>The unique identifier for a studio component resource.</p>",
          "shape": "StudioComponentId"
        },
        "subtype": {
          "documentation": "<p>The specific subtype of a studio component.</p>",
          "shape": "StudioComponentSubtype"
        },
        "tags": {
          "documentation": "<p>A collection of labels, in the form of key:value pairs, that apply to this resource.</p>",
          "shape": "Tags"
        },
        "type": {
          "documentation": "<p>The type of the studio component.</p>",
          "shape": "StudioComponentType"
        },
        "updatedAt": {
          "documentation": "<p>The Unix epoch timestamp in seconds for when the resource was updated.</p>",
          "shape": "Timestamp"
        },
        "updatedBy": {
          "documentation": "<p>The user ID of the user that most recently updated the resource.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "StudioComponentConfiguration": {
      "documentation": "<p>The configuration of the studio component, based on component type.</p>",
      "members": {
        "activeDirectoryConfiguration": {
          "documentation": "<p>The configuration for a Microsoft Active Directory (Microsoft AD) studio resource.</p>",
          "shape": "ActiveDirectoryConfiguration"
        },
        "computeFarmConfiguration": {
          "documentation": "<p>The configuration for a render farm that is associated with a studio resource.</p>",
          "shape": "ComputeFarmConfiguration"
        },
        "licenseServiceConfiguration": {
          "documentation": "<p>The configuration for a license service that is associated with a studio resource.</p>",
          "shape": "LicenseServiceConfiguration"
        },
        "sharedFileSystemConfiguration": {
          "documentation": "<p>The configuration for a shared file storage system that is associated with a studio resource.</p>",
          "shape": "SharedFileSystemConfiguration"
        }
      },
      "type": "structure",
      "union": true
    },
    "StudioComponentDescription": {
      "max": 256,
      "min": 0,
      "sensitive": true,
      "type": "string"
    },
    "StudioComponentId": {
      "max": 22,
      "min": 0,
      "pattern": "^[a-zA-Z0-9-_]*$",
      "type": "string"
    },
    "StudioComponentInitializationScript": {
      "documentation": "<p>Initialization scripts for studio components.</p>",
      "members": {
        "launchProfileProtocolVersion": {
          "documentation": "<p>The version number of the protocol that is used by the launch profile. The only valid version is \"2021-03-31\".</p>",
          "shape": "LaunchProfileProtocolVersion"
        },
        "platform": {
          "documentation": "<p>The platform of the initialization script, either WINDOWS or LINUX.</p>",
          "shape": "LaunchProfilePlatform"
        },
        "runContext": {
          "documentation": "<p>The method to use when running the initialization script.</p>",
          "shape": "StudioComponentInitializationScriptRunContext"
        },
        "script": {
          "documentation": "<p>The initialization script.</p>",
          "shape": "StudioComponentInitializationScriptContent"
        }
      },
      "type": "structure"
    },
    "StudioComponentInitializationScriptContent": {
      "max": 5120,
      "min": 1,
      "sensitive": true,
      "type": "string"
    },
    "StudioComponentInitializationScriptList": {
      "member": {
        "shape": "StudioComponentInitializationScript"
      },
      "type": "list"
    },
    "StudioComponentInitializationScriptRunContext": {
      "enum": [
        "SYSTEM_INITIALIZATION",
        "USER_INITIALIZATION"
      ],
      "type": "string"
    },
    "StudioComponentList": {
      "max": 50,
      "member": {
        "shape": "StudioComponent"
      },
      "min": 0,
      "type": "list"
    },
    "StudioComponentName": {
      "max": 64,
      "min": 0,
      "sensitive": true,
      "type": "string"
    },
    "StudioComponentScriptParameterKeyValueList": {
      "max": 30,
      "member": {
        "shape": "ScriptParameterKeyValue"
      },
      "min": 0,
      "sensitive": true,
      "type": "list"
    },
    "StudioComponentSecurityGroupIdList": {
      "max": 30,
      "member": {
        "shape": "SecurityGroupId"
      },
      "min": 0,
      "type": "list"
    },
    "StudioComponentState": {
      "documentation": "<p>The current state of the studio component resource.</p> <p>While a studio component is being created, modified, or deleted, its state will equal \"CREATE_IN_PROGRESS\", \"UPDATE_IN_PROGRESS\", or \"DELETE_IN_PROGRESS\"</p> <p>These are called 'transition states'.</p> <p>No modifications may be made to the studio component while it is in a transition state.</p> <p>If creation of the resource fails, the state will change to `CREATE_FAILED`. The resource StatusCode and StatusMessage will provide more information of why creation failed. The resource in this state will automatically be deleted from your account after a period of time.</p> <p>If updating the resource fails, the state will change to `UPDATE_FAILED`. The resource StatusCode and StatusMessage will provide more information of why the update failed. The resource will be returned to the state it was in when the update request was invoked.</p> <p>If deleting the resource fails, the state will change to `DELETE_FAILED`. The resource StatusCode and StatusMessage will provide more information of why the update failed. The resource will be returned to the state it was in when the update request was invoked. After the resource is deleted successfully, it will change to the \"DELETED\" state. The resource will no longer count against service quotas and cannot be used or acted upon any futher. It will be removed from your account after a period of time.</p>",
      "enum": [
        "CREATE_IN_PROGRESS",
        "READY",
        "UPDATE_IN_PROGRESS",
        "DELETE_IN_PROGRESS",
        "DELETED",
        "DELETE_FAILED",
        "CREATE_FAILED",
        "UPDATE_FAILED"
      ],
      "type": "string"
    },
    "StudioComponentStateList": {
      "member": {
        "shape": "StudioComponentState"
      },
      "type": "list"
    },
    "StudioComponentStatusCode": {
      "documentation": "<p>The current status of the studio component resource.</p> <p>When the resource is in the 'READY' state, the status code signals what the last mutation made to the resource was.</p> <p>When the resource is in a CREATE_FAILED/UPDATE_FAILED/DELETE_FAILED state, the status code signals what went wrong and why the mutation failed.</p>",
      "enum": [
        "ACTIVE_DIRECTORY_ALREADY_EXISTS",
        "STUDIO_COMPONENT_CREATED",
        "STUDIO_COMPONENT_UPDATED",
        "STUDIO_COMPONENT_DELETED",
        "ENCRYPTION_KEY_ACCESS_DENIED",
        "ENCRYPTION_KEY_NOT_FOUND",
        "STUDIO_COMPONENT_CREATE_IN_PROGRESS",
        "STUDIO_COMPONENT_UPDATE_IN_PROGRESS",
        "STUDIO_COMPONENT_DELETE_IN_PROGRESS",
        "INTERNAL_ERROR"
      ],
      "type": "string"
    },
    "StudioComponentSubtype": {
      "enum": [
        "AWS_MANAGED_MICROSOFT_AD",
        "AMAZON_FSX_FOR_WINDOWS",
        "AMAZON_FSX_FOR_LUSTRE",
        "CUSTOM"
      ],
      "type": "string"
    },
    "StudioComponentSummary": {
      "documentation": "<p>The studio component's summary.</p>",
      "members": {
        "createdAt": {
          "documentation": "<p>The Unix epoch timestamp in seconds for when the resource was created.</p>",
          "shape": "Timestamp"
        },
        "createdBy": {
          "documentation": "<p>The user ID of the user that created the studio component.</p>",
          "shape": "String"
        },
        "description": {
          "documentation": "<p>The description.</p>",
          "shape": "StudioComponentDescription"
        },
        "name": {
          "documentation": "<p>The name for the studio component.</p>",
          "shape": "StudioComponentName"
        },
        "studioComponentId": {
          "documentation": "<p>The unique identifier for a studio component resource.</p>",
          "shape": "StudioComponentId"
        },
        "subtype": {
          "documentation": "<p>The specific subtype of a studio component.</p>",
          "shape": "StudioComponentSubtype"
        },
        "type": {
          "documentation": "<p>The type of the studio component.</p>",
          "shape": "StudioComponentType"
        },
        "updatedAt": {
          "documentation": "<p>The Unix epoch timestamp in seconds for when the resource was updated.</p>",
          "shape": "Timestamp"
        },
        "updatedBy": {
          "documentation": "<p>The user ID of the user that most recently updated the resource.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "StudioComponentSummaryList": {
      "member": {
        "shape": "StudioComponentSummary"
      },
      "type": "list"
    },
    "StudioComponentType": {
      "enum": [
        "ACTIVE_DIRECTORY",
        "SHARED_FILE_SYSTEM",
        "COMPUTE_FARM",
        "LICENSE_SERVICE",
        "CUSTOM"
      ],
      "type": "string"
    },
    "StudioComponentTypeList": {
      "member": {
        "shape": "StudioComponentType"
      },
      "type": "list"
    },
    "StudioDisplayName": {
      "max": 64,
      "min": 0,
      "sensitive": true,
      "type": "string"
    },
    "StudioEncryptionConfiguration": {
      "documentation": "<p>Configuration of the encryption method that is used for the studio.</p>",
      "members": {
        "keyArn": {
          "documentation": "<p>The ARN for a KMS key that is used to encrypt studio data.</p>",
          "shape": "StudioEncryptionConfigurationKeyArn"
        },
        "keyType": {
          "documentation": "<p>The type of KMS key that is used to encrypt studio data.</p>",
          "shape": "StudioEncryptionConfigurationKeyType"
        }
      },
      "required": [
        "keyType"
      ],
      "type": "structure"
    },
    "StudioEncryptionConfigurationKeyArn": {
      "documentation": "<p>The Amazon Resource Name (ARN) for a KMS key that is used to encrypt studio data.</p>",
      "min": 4,
      "pattern": "^arn:.*",
      "type": "string"
    },
    "StudioEncryptionConfigurationKeyType": {
      "documentation": "<p>The type of KMS key that is used to encrypt studio data.</p>",
      "enum": [
        "AWS_OWNED_KEY",
        "CUSTOMER_MANAGED_KEY"
      ],
      "type": "string"
    },
    "StudioList": {
      "member": {
        "shape": "Studio"
      },
      "type": "list"
    },
    "StudioMembership": {
      "documentation": "<p>A studio member is an association of a user from your studio identity source to elevated permissions that they are granted in the studio.</p> <p>When you add a user to your studio using the Nimble Studio console, they are given access to the studio's IAM Identity Center application and are given access to log in to the Nimble Studio portal. These users have the permissions provided by the studio's user IAM role and do not appear in the studio membership collection. Only studio admins appear in studio membership.</p> <p>When you add a user to studio membership with the persona ADMIN, upon logging in to the Nimble Studio portal, they are granted permissions specified by the Studio's Admin IAM role.</p>",
      "members": {
        "identityStoreId": {
          "documentation": "<p>The ID of the identity store.</p>",
          "shape": "String"
        },
        "persona": {
          "documentation": "<p>The persona.</p>",
          "shape": "StudioPersona"
        },
        "principalId": {
          "documentation": "<p>The principal ID.</p>",
          "shape": "String"
        },
        "sid": {
          "documentation": "<p>The Active Directory Security Identifier for this user, if available.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "StudioMembershipList": {
      "max": 20,
      "member": {
        "shape": "StudioMembership"
      },
      "min": 0,
      "type": "list"
    },
    "StudioName": {
      "max": 64,
      "min": 3,
      "pattern": "^[a-z0-9]*$",
      "type": "string"
    },
    "StudioPersona": {
      "enum": [
        "ADMINISTRATOR"
      ],
      "type": "string"
    },
    "StudioState": {
      "enum": [
        "CREATE_IN_PROGRESS",
        "READY",
        "UPDATE_IN_PROGRESS",
        "DELETE_IN_PROGRESS",
        "DELETED",
        "DELETE_FAILED",
        "CREATE_FAILED",
        "UPDATE_FAILED"
      ],
      "type": "string"
    },
    "StudioStatusCode": {
      "documentation": "<p>The status code.</p>",
      "enum": [
        "STUDIO_CREATED",
        "STUDIO_DELETED",
        "STUDIO_UPDATED",
        "STUDIO_CREATE_IN_PROGRESS",
        "STUDIO_UPDATE_IN_PROGRESS",
        "STUDIO_DELETE_IN_PROGRESS",
        "STUDIO_WITH_LAUNCH_PROFILES_NOT_DELETED",
        "STUDIO_WITH_STUDIO_COMPONENTS_NOT_DELETED",
        "STUDIO_WITH_STREAMING_IMAGES_NOT_DELETED",
        "AWS_SSO_NOT_ENABLED",
        "AWS_SSO_ACCESS_DENIED",
        "ROLE_NOT_OWNED_BY_STUDIO_OWNER",
        "ROLE_COULD_NOT_BE_ASSUMED",
        "INTERNAL_ERROR",
        "ENCRYPTION_KEY_NOT_FOUND",
        "ENCRYPTION_KEY_ACCESS_DENIED",
        "AWS_SSO_CONFIGURATION_REPAIRED",
        "AWS_SSO_CONFIGURATION_REPAIR_IN_PROGRESS"
      ],
      "type": "string"
    },
    "TagResourceRequest": {
      "members": {
        "resourceArn": {
          "documentation": "<p> The Amazon Resource Name (ARN) of the resource you want to add tags to. </p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "String"
        },
        "tags": {
          "documentation": "<p>A collection of labels, in the form of key:value pairs, that apply to this resource.</p>",
          "shape": "Tags"
        }
      },
      "required": [
        "resourceArn"
      ],
      "type": "structure"
    },
    "TagResourceResponse": {
      "members": {},
      "type": "structure"
    },
    "Tags": {
      "key": {
        "shape": "String"
      },
      "type": "map",
      "value": {
        "shape": "String"
      }
    },
    "ThrottlingException": {
      "documentation": "<p>The request throughput limit was exceeded.</p>",
      "error": {
        "httpStatusCode": 429,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "code": {
          "documentation": "<p>A more specific error code.</p>",
          "shape": "String"
        },
        "context": {
          "documentation": "<p>The exception context.</p>",
          "shape": "ExceptionContext"
        },
        "message": {
          "documentation": "<p>A human-readable description of the error.</p>",
          "shape": "String"
        }
      },
      "retryable": {
        "throttling": false
      },
      "type": "structure"
    },
    "Timestamp": {
      "timestampFormat": "iso8601",
      "type": "timestamp"
    },
    "UntagResourceRequest": {
      "members": {
        "resourceArn": {
          "documentation": "<p>Identifies the Amazon Resource Name(ARN) key from which you are removing tags. </p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "String"
        },
        "tagKeys": {
          "documentation": "<p>One or more tag keys. Specify only the tag keys, not the tag values.</p>",
          "location": "querystring",
          "locationName": "tagKeys",
          "shape": "StringList"
        }
      },
      "required": [
        "resourceArn",
        "tagKeys"
      ],
      "type": "structure"
    },
    "UntagResourceResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateLaunchProfileMemberRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don\u2019t specify a client token, the AWS SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>",
          "idempotencyToken": true,
          "location": "header",
          "locationName": "X-Amz-Client-Token",
          "shape": "ClientToken"
        },
        "launchProfileId": {
          "documentation": "<p>The Launch Profile ID.</p>",
          "location": "uri",
          "locationName": "launchProfileId",
          "shape": "String"
        },
        "persona": {
          "documentation": "<p>The persona.</p>",
          "shape": "LaunchProfilePersona"
        },
        "principalId": {
          "documentation": "<p>The principal ID. This currently supports a IAM Identity Center UserId. </p>",
          "location": "uri",
          "locationName": "principalId",
          "shape": "String"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        }
      },
      "required": [
        "launchProfileId",
        "persona",
        "principalId",
        "studioId"
      ],
      "type": "structure"
    },
    "UpdateLaunchProfileMemberResponse": {
      "members": {
        "member": {
          "documentation": "<p>The updated member. </p>",
          "shape": "LaunchProfileMembership"
        }
      },
      "type": "structure"
    },
    "UpdateLaunchProfileRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don\u2019t specify a client token, the AWS SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>",
          "idempotencyToken": true,
          "location": "header",
          "locationName": "X-Amz-Client-Token",
          "shape": "ClientToken"
        },
        "description": {
          "documentation": "<p>The description.</p>",
          "shape": "LaunchProfileDescription"
        },
        "launchProfileId": {
          "documentation": "<p>The Launch Profile ID.</p>",
          "location": "uri",
          "locationName": "launchProfileId",
          "shape": "String"
        },
        "launchProfileProtocolVersions": {
          "documentation": "<p>The version number of the protocol that is used by the launch profile. The only valid version is \"2021-03-31\".</p>",
          "shape": "LaunchProfileProtocolVersionList"
        },
        "name": {
          "documentation": "<p>The name for the launch profile.</p>",
          "shape": "LaunchProfileName"
        },
        "streamConfiguration": {
          "documentation": "<p>A configuration for a streaming session.</p>",
          "shape": "StreamConfigurationCreate"
        },
        "studioComponentIds": {
          "documentation": "<p>Unique identifiers for a collection of studio components that can be used with this launch profile.</p>",
          "shape": "LaunchProfileStudioComponentIdList"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        }
      },
      "required": [
        "launchProfileId",
        "studioId"
      ],
      "type": "structure"
    },
    "UpdateLaunchProfileResponse": {
      "members": {
        "launchProfile": {
          "documentation": "<p>The launch profile.</p>",
          "shape": "LaunchProfile"
        }
      },
      "type": "structure"
    },
    "UpdateStreamingImageRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don\u2019t specify a client token, the AWS SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>",
          "idempotencyToken": true,
          "location": "header",
          "locationName": "X-Amz-Client-Token",
          "shape": "ClientToken"
        },
        "description": {
          "documentation": "<p>The description.</p>",
          "shape": "StreamingImageDescription"
        },
        "name": {
          "documentation": "<p>The name for the streaming image.</p>",
          "shape": "StreamingImageName"
        },
        "streamingImageId": {
          "documentation": "<p>The streaming image ID.</p>",
          "location": "uri",
          "locationName": "streamingImageId",
          "shape": "String"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        }
      },
      "required": [
        "streamingImageId",
        "studioId"
      ],
      "type": "structure"
    },
    "UpdateStreamingImageResponse": {
      "members": {
        "streamingImage": {
          "shape": "StreamingImage"
        }
      },
      "type": "structure"
    },
    "UpdateStudioComponentRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don\u2019t specify a client token, the AWS SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>",
          "idempotencyToken": true,
          "location": "header",
          "locationName": "X-Amz-Client-Token",
          "shape": "ClientToken"
        },
        "configuration": {
          "documentation": "<p>The configuration of the studio component, based on component type.</p>",
          "shape": "StudioComponentConfiguration"
        },
        "description": {
          "documentation": "<p>The description.</p>",
          "shape": "StudioComponentDescription"
        },
        "ec2SecurityGroupIds": {
          "documentation": "<p>The EC2 security groups that control access to the studio component.</p>",
          "shape": "StudioComponentSecurityGroupIdList"
        },
        "initializationScripts": {
          "documentation": "<p>Initialization scripts for studio components.</p>",
          "shape": "StudioComponentInitializationScriptList"
        },
        "name": {
          "documentation": "<p>The name for the studio component.</p>",
          "shape": "StudioComponentName"
        },
        "runtimeRoleArn": {
          "documentation": "<p>An IAM role attached to a Studio Component that gives the studio component access to AWS resources at anytime while the instance is running. </p>",
          "shape": "RoleArn"
        },
        "scriptParameters": {
          "documentation": "<p>Parameters for the studio component scripts.</p>",
          "shape": "StudioComponentScriptParameterKeyValueList"
        },
        "secureInitializationRoleArn": {
          "documentation": "<p>An IAM role attached to Studio Component when the system initialization script runs which give the studio component access to AWS resources when the system initialization script runs.</p>",
          "shape": "RoleArn"
        },
        "studioComponentId": {
          "documentation": "<p>The studio component ID.</p>",
          "location": "uri",
          "locationName": "studioComponentId",
          "shape": "String"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        },
        "subtype": {
          "documentation": "<p>The specific subtype of a studio component.</p>",
          "shape": "StudioComponentSubtype"
        },
        "type": {
          "documentation": "<p>The type of the studio component.</p>",
          "shape": "StudioComponentType"
        }
      },
      "required": [
        "studioComponentId",
        "studioId"
      ],
      "type": "structure"
    },
    "UpdateStudioComponentResponse": {
      "members": {
        "studioComponent": {
          "documentation": "<p>Information about the studio component.</p>",
          "shape": "StudioComponent"
        }
      },
      "type": "structure"
    },
    "UpdateStudioRequest": {
      "members": {
        "adminRoleArn": {
          "documentation": "<p>The IAM role that Studio Admins will assume when logging in to the Nimble Studio portal.</p>",
          "shape": "RoleArn"
        },
        "clientToken": {
          "documentation": "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don\u2019t specify a client token, the AWS SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>",
          "idempotencyToken": true,
          "location": "header",
          "locationName": "X-Amz-Client-Token",
          "shape": "ClientToken"
        },
        "displayName": {
          "documentation": "<p>A friendly name for the studio.</p>",
          "shape": "StudioDisplayName"
        },
        "studioId": {
          "documentation": "<p>The studio ID. </p>",
          "location": "uri",
          "locationName": "studioId",
          "shape": "String"
        },
        "userRoleArn": {
          "documentation": "<p>The IAM role that Studio Users will assume when logging in to the Nimble Studio portal.</p>",
          "shape": "RoleArn"
        }
      },
      "required": [
        "studioId"
      ],
      "type": "structure"
    },
    "UpdateStudioResponse": {
      "members": {
        "studio": {
          "documentation": "<p>Information about a studio.</p>",
          "shape": "Studio"
        }
      },
      "required": [
        "studio"
      ],
      "type": "structure"
    },
    "ValidationException": {
      "documentation": "<p>One of the parameters in the request is invalid.</p>",
      "error": {
        "httpStatusCode": 400,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "code": {
          "documentation": "<p>A more specific error code.</p>",
          "shape": "String"
        },
        "context": {
          "documentation": "<p>The exception context.</p>",
          "shape": "ExceptionContext"
        },
        "message": {
          "documentation": "<p>A human-readable description of the error.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ValidationResult": {
      "documentation": "<p>The launch profile validation result.</p>",
      "members": {
        "state": {
          "documentation": "<p>The current state.</p>",
          "shape": "LaunchProfileValidationState"
        },
        "statusCode": {
          "documentation": "<p>The status code. This will contain the failure reason if the state is <code>VALIDATION_FAILED</code>.</p>",
          "shape": "LaunchProfileValidationStatusCode"
        },
        "statusMessage": {
          "documentation": "<p>The status message for the validation result.</p>",
          "shape": "LaunchProfileValidationStatusMessage"
        },
        "type": {
          "documentation": "<p>The type of the validation result.</p>",
          "shape": "LaunchProfileValidationType"
        }
      },
      "required": [
        "state",
        "statusCode",
        "statusMessage",
        "type"
      ],
      "type": "structure"
    },
    "ValidationResults": {
      "member": {
        "shape": "ValidationResult"
      },
      "type": "list"
    },
    "WindowsMountDrive": {
      "pattern": "^[A-Z]$",
      "type": "string"
    }
  },
  "version": "2.0"
}
