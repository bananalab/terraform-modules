{
  "documentation": "<p>Amazon Web Services IoT FleetWise is a fully managed service that you can use to collect, model, and transfer vehicle data to the Amazon Web Services cloud at scale. With Amazon Web Services IoT FleetWise, you can standardize all of your vehicle data models, independent of the in-vehicle communication architecture, and define data collection rules to transfer only high-value data to the cloud. </p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/\">What is Amazon Web Services IoT FleetWise?</a> in the <i>Amazon Web Services IoT FleetWise Developer Guide</i>.</p>",
  "metadata": {
    "apiVersion": "2021-06-17",
    "endpointPrefix": "iotfleetwise",
    "jsonVersion": "1.0",
    "protocol": "json",
    "serviceFullName": "AWS IoT FleetWise",
    "serviceId": "IoTFleetWise",
    "signatureVersion": "v4",
    "signingName": "iotfleetwise",
    "targetPrefix": "IoTAutobahnControlPlane",
    "uid": "iotfleetwise-2021-06-17"
  },
  "operations": {
    "AssociateVehicleFleet": {
      "documentation": "<p> Adds, or associates, a vehicle with a fleet. </p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "AssociateVehicleFleetRequest"
      },
      "name": "AssociateVehicleFleet",
      "output": {
        "shape": "AssociateVehicleFleetResponse"
      }
    },
    "BatchCreateVehicle": {
      "documentation": "<p> Creates a group, or batch, of vehicles. </p> <note> <p> You must specify a decoder manifest and a vehicle model (model manifest) for each vehicle. </p> </note> <p>For more information, see <a href=\"https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/create-vehicles-cli.html\">Create multiple vehicles (AWS CLI)</a> in the <i>Amazon Web Services IoT FleetWise Developer Guide</i>. </p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "LimitExceededException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "BatchCreateVehicleRequest"
      },
      "name": "BatchCreateVehicle",
      "output": {
        "shape": "BatchCreateVehicleResponse"
      }
    },
    "BatchUpdateVehicle": {
      "documentation": "<p> Updates a group, or batch, of vehicles.</p> <note> <p> You must specify a decoder manifest and a vehicle model (model manifest) for each vehicle. </p> </note> <p>For more information, see <a href=\"https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/update-vehicles-cli.html\">Update multiple vehicles (AWS CLI)</a> in the <i>Amazon Web Services IoT FleetWise Developer Guide</i>. </p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "BatchUpdateVehicleRequest"
      },
      "name": "BatchUpdateVehicle",
      "output": {
        "shape": "BatchUpdateVehicleResponse"
      }
    },
    "CreateCampaign": {
      "documentation": "<p>Creates an orchestration of data collection rules. The Amazon Web Services IoT FleetWise Edge Agent software running in vehicles uses campaigns to decide how to collect and transfer data to the cloud. You create campaigns in the cloud. After you or your team approve campaigns, Amazon Web Services IoT FleetWise automatically deploys them to vehicles. </p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/campaigns.html\">Collect and transfer data with campaigns</a> in the <i>Amazon Web Services IoT FleetWise Developer Guide</i>.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "LimitExceededException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "idempotent": true,
      "input": {
        "shape": "CreateCampaignRequest"
      },
      "name": "CreateCampaign",
      "output": {
        "shape": "CreateCampaignResponse"
      }
    },
    "CreateDecoderManifest": {
      "documentation": "<p>Creates the decoder manifest associated with a model manifest. To create a decoder manifest, the following must be true:</p> <ul> <li> <p>Every signal decoder has a unique name.</p> </li> <li> <p>Each signal decoder is associated with a network interface.</p> </li> <li> <p>Each network interface has a unique ID.</p> </li> <li> <p>The signal decoders are specified in the model manifest.</p> </li> </ul>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "LimitExceededException"
        },
        {
          "shape": "DecoderManifestValidationException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "idempotent": true,
      "input": {
        "shape": "CreateDecoderManifestRequest"
      },
      "name": "CreateDecoderManifest",
      "output": {
        "shape": "CreateDecoderManifestResponse"
      }
    },
    "CreateFleet": {
      "documentation": "<p> Creates a fleet that represents a group of vehicles. </p> <note> <p>You must create both a signal catalog and vehicles before you can create a fleet. </p> </note> <p>For more information, see <a href=\"https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/fleets.html\">Fleets</a> in the <i>Amazon Web Services IoT FleetWise Developer Guide</i>.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "LimitExceededException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "idempotent": true,
      "input": {
        "shape": "CreateFleetRequest"
      },
      "name": "CreateFleet",
      "output": {
        "shape": "CreateFleetResponse"
      }
    },
    "CreateModelManifest": {
      "documentation": "<p> Creates a vehicle model (model manifest) that specifies signals (attributes, branches, sensors, and actuators). </p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/vehicle-models.html\">Vehicle models</a> in the <i>Amazon Web Services IoT FleetWise Developer Guide</i>.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "LimitExceededException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InvalidSignalsException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "idempotent": true,
      "input": {
        "shape": "CreateModelManifestRequest"
      },
      "name": "CreateModelManifest",
      "output": {
        "shape": "CreateModelManifestResponse"
      }
    },
    "CreateSignalCatalog": {
      "documentation": "<p> Creates a collection of standardized signals that can be reused to create vehicle models.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "LimitExceededException"
        },
        {
          "shape": "InvalidNodeException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InvalidSignalsException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "idempotent": true,
      "input": {
        "shape": "CreateSignalCatalogRequest"
      },
      "name": "CreateSignalCatalog",
      "output": {
        "shape": "CreateSignalCatalogResponse"
      }
    },
    "CreateVehicle": {
      "documentation": "<p> Creates a vehicle, which is an instance of a vehicle model (model manifest). Vehicles created from the same vehicle model consist of the same signals inherited from the vehicle model.</p> <note> <p> If you have an existing Amazon Web Services IoT Thing, you can use Amazon Web Services IoT FleetWise to create a vehicle and collect data from your thing. </p> </note> <p>For more information, see <a href=\"https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/create-vehicle-cli.html\">Create a vehicle (AWS CLI)</a> in the <i>Amazon Web Services IoT FleetWise Developer Guide</i>.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "LimitExceededException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "idempotent": true,
      "input": {
        "shape": "CreateVehicleRequest"
      },
      "name": "CreateVehicle",
      "output": {
        "shape": "CreateVehicleResponse"
      }
    },
    "DeleteCampaign": {
      "documentation": "<p> Deletes a data collection campaign. Deleting a campaign suspends all data collection and removes it from any vehicles. </p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "idempotent": true,
      "input": {
        "shape": "DeleteCampaignRequest"
      },
      "name": "DeleteCampaign",
      "output": {
        "shape": "DeleteCampaignResponse"
      }
    },
    "DeleteDecoderManifest": {
      "documentation": "<p> Deletes a decoder manifest. You can't delete a decoder manifest if it has vehicles associated with it. </p> <note> <p>If the decoder manifest is successfully deleted, Amazon Web Services IoT FleetWise sends back an HTTP 200 response with an empty body.</p> </note>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "idempotent": true,
      "input": {
        "shape": "DeleteDecoderManifestRequest"
      },
      "name": "DeleteDecoderManifest",
      "output": {
        "shape": "DeleteDecoderManifestResponse"
      }
    },
    "DeleteFleet": {
      "documentation": "<p> Deletes a fleet. Before you delete a fleet, all vehicles must be dissociated from the fleet. For more information, see <a href=\"https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/delete-fleet-cli.html\">Delete a fleet (AWS CLI)</a> in the <i>Amazon Web Services IoT FleetWise Developer Guide</i>.</p> <note> <p>If the fleet is successfully deleted, Amazon Web Services IoT FleetWise sends back an HTTP 200 response with an empty body.</p> </note>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "idempotent": true,
      "input": {
        "shape": "DeleteFleetRequest"
      },
      "name": "DeleteFleet",
      "output": {
        "shape": "DeleteFleetResponse"
      }
    },
    "DeleteModelManifest": {
      "documentation": "<p> Deletes a vehicle model (model manifest).</p> <note> <p>If the vehicle model is successfully deleted, Amazon Web Services IoT FleetWise sends back an HTTP 200 response with an empty body.</p> </note>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "idempotent": true,
      "input": {
        "shape": "DeleteModelManifestRequest"
      },
      "name": "DeleteModelManifest",
      "output": {
        "shape": "DeleteModelManifestResponse"
      }
    },
    "DeleteSignalCatalog": {
      "documentation": "<p> Deletes a signal catalog. </p> <note> <p>If the signal catalog is successfully deleted, Amazon Web Services IoT FleetWise sends back an HTTP 200 response with an empty body.</p> </note>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "idempotent": true,
      "input": {
        "shape": "DeleteSignalCatalogRequest"
      },
      "name": "DeleteSignalCatalog",
      "output": {
        "shape": "DeleteSignalCatalogResponse"
      }
    },
    "DeleteVehicle": {
      "documentation": "<p> Deletes a vehicle and removes it from any campaigns.</p> <note> <p>If the vehicle is successfully deleted, Amazon Web Services IoT FleetWise sends back an HTTP 200 response with an empty body.</p> </note>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "idempotent": true,
      "input": {
        "shape": "DeleteVehicleRequest"
      },
      "name": "DeleteVehicle",
      "output": {
        "shape": "DeleteVehicleResponse"
      }
    },
    "DisassociateVehicleFleet": {
      "documentation": "<p>Removes, or disassociates, a vehicle from a fleet. Disassociating a vehicle from a fleet doesn't delete the vehicle.</p> <note> <p>If the vehicle is successfully dissociated from a fleet, Amazon Web Services IoT FleetWise sends back an HTTP 200 response with an empty body.</p> </note>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DisassociateVehicleFleetRequest"
      },
      "name": "DisassociateVehicleFleet",
      "output": {
        "shape": "DisassociateVehicleFleetResponse"
      }
    },
    "GetCampaign": {
      "documentation": "<p> Retrieves information about a campaign. </p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetCampaignRequest"
      },
      "name": "GetCampaign",
      "output": {
        "shape": "GetCampaignResponse"
      }
    },
    "GetDecoderManifest": {
      "documentation": "<p> Retrieves information about a created decoder manifest. </p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetDecoderManifestRequest"
      },
      "name": "GetDecoderManifest",
      "output": {
        "shape": "GetDecoderManifestResponse"
      }
    },
    "GetFleet": {
      "documentation": "<p> Retrieves information about a fleet. </p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetFleetRequest"
      },
      "name": "GetFleet",
      "output": {
        "shape": "GetFleetResponse"
      }
    },
    "GetLoggingOptions": {
      "documentation": "<p>Retrieves the logging options.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetLoggingOptionsRequest"
      },
      "name": "GetLoggingOptions",
      "output": {
        "shape": "GetLoggingOptionsResponse"
      }
    },
    "GetModelManifest": {
      "documentation": "<p> Retrieves information about a vehicle model (model manifest). </p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetModelManifestRequest"
      },
      "name": "GetModelManifest",
      "output": {
        "shape": "GetModelManifestResponse"
      }
    },
    "GetRegisterAccountStatus": {
      "documentation": "<p> Retrieves information about the status of registering your Amazon Web Services account, IAM, and Amazon Timestream resources so that Amazon Web Services IoT FleetWise can transfer your vehicle data to the Amazon Web Services Cloud. </p> <p>For more information, including step-by-step procedures, see <a href=\"https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/setting-up.html\">Setting up Amazon Web Services IoT FleetWise</a>. </p> <note> <p>This API operation doesn't require input parameters.</p> </note>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetRegisterAccountStatusRequest"
      },
      "name": "GetRegisterAccountStatus",
      "output": {
        "shape": "GetRegisterAccountStatusResponse"
      }
    },
    "GetSignalCatalog": {
      "documentation": "<p> Retrieves information about a signal catalog. </p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetSignalCatalogRequest"
      },
      "name": "GetSignalCatalog",
      "output": {
        "shape": "GetSignalCatalogResponse"
      }
    },
    "GetVehicle": {
      "documentation": "<p> Retrieves information about a vehicle. </p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetVehicleRequest"
      },
      "name": "GetVehicle",
      "output": {
        "shape": "GetVehicleResponse"
      }
    },
    "GetVehicleStatus": {
      "documentation": "<p> Retrieves information about the status of a vehicle with any associated campaigns. </p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetVehicleStatusRequest"
      },
      "name": "GetVehicleStatus",
      "output": {
        "shape": "GetVehicleStatusResponse"
      }
    },
    "ImportDecoderManifest": {
      "documentation": "<p> Creates a decoder manifest using your existing CAN DBC file from your local device. </p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "DecoderManifestValidationException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InvalidSignalsException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "ImportDecoderManifestRequest"
      },
      "name": "ImportDecoderManifest",
      "output": {
        "shape": "ImportDecoderManifestResponse"
      }
    },
    "ImportSignalCatalog": {
      "documentation": "<p> Creates a signal catalog using your existing VSS formatted content from your local device. </p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "LimitExceededException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InvalidSignalsException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "idempotent": true,
      "input": {
        "shape": "ImportSignalCatalogRequest"
      },
      "name": "ImportSignalCatalog",
      "output": {
        "shape": "ImportSignalCatalogResponse"
      }
    },
    "ListCampaigns": {
      "documentation": "<p> Lists information about created campaigns. </p> <note> <p>This API operation uses pagination. Specify the <code>nextToken</code> parameter in the request to return more results.</p> </note>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "ListCampaignsRequest"
      },
      "name": "ListCampaigns",
      "output": {
        "shape": "ListCampaignsResponse"
      }
    },
    "ListDecoderManifestNetworkInterfaces": {
      "documentation": "<p> Lists the network interfaces specified in a decoder manifest. </p> <note> <p>This API operation uses pagination. Specify the <code>nextToken</code> parameter in the request to return more results.</p> </note>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "ListDecoderManifestNetworkInterfacesRequest"
      },
      "name": "ListDecoderManifestNetworkInterfaces",
      "output": {
        "shape": "ListDecoderManifestNetworkInterfacesResponse"
      }
    },
    "ListDecoderManifestSignals": {
      "documentation": "<p> A list of information about signal decoders specified in a decoder manifest. </p> <note> <p>This API operation uses pagination. Specify the <code>nextToken</code> parameter in the request to return more results.</p> </note>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "ListDecoderManifestSignalsRequest"
      },
      "name": "ListDecoderManifestSignals",
      "output": {
        "shape": "ListDecoderManifestSignalsResponse"
      }
    },
    "ListDecoderManifests": {
      "documentation": "<p> Lists decoder manifests. </p> <note> <p>This API operation uses pagination. Specify the <code>nextToken</code> parameter in the request to return more results.</p> </note>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "ListDecoderManifestsRequest"
      },
      "name": "ListDecoderManifests",
      "output": {
        "shape": "ListDecoderManifestsResponse"
      }
    },
    "ListFleets": {
      "documentation": "<p> Retrieves information for each created fleet in an Amazon Web Services account. </p> <note> <p>This API operation uses pagination. Specify the <code>nextToken</code> parameter in the request to return more results.</p> </note>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "ListFleetsRequest"
      },
      "name": "ListFleets",
      "output": {
        "shape": "ListFleetsResponse"
      }
    },
    "ListFleetsForVehicle": {
      "documentation": "<p>Retrieves a list of IDs for all fleets that the vehicle is associated with.</p> <note> <p>This API operation uses pagination. Specify the <code>nextToken</code> parameter in the request to return more results.</p> </note>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "ListFleetsForVehicleRequest"
      },
      "name": "ListFleetsForVehicle",
      "output": {
        "shape": "ListFleetsForVehicleResponse"
      }
    },
    "ListModelManifestNodes": {
      "documentation": "<p> Lists information about nodes specified in a vehicle model (model manifest). </p> <note> <p>This API operation uses pagination. Specify the <code>nextToken</code> parameter in the request to return more results.</p> </note>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "LimitExceededException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "ListModelManifestNodesRequest"
      },
      "name": "ListModelManifestNodes",
      "output": {
        "shape": "ListModelManifestNodesResponse"
      }
    },
    "ListModelManifests": {
      "documentation": "<p> Retrieves a list of vehicle models (model manifests). </p> <note> <p>This API operation uses pagination. Specify the <code>nextToken</code> parameter in the request to return more results.</p> </note>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "ListModelManifestsRequest"
      },
      "name": "ListModelManifests",
      "output": {
        "shape": "ListModelManifestsResponse"
      }
    },
    "ListSignalCatalogNodes": {
      "documentation": "<p> Lists of information about the signals (nodes) specified in a signal catalog. </p> <note> <p>This API operation uses pagination. Specify the <code>nextToken</code> parameter in the request to return more results.</p> </note>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "LimitExceededException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "ListSignalCatalogNodesRequest"
      },
      "name": "ListSignalCatalogNodes",
      "output": {
        "shape": "ListSignalCatalogNodesResponse"
      }
    },
    "ListSignalCatalogs": {
      "documentation": "<p> Lists all the created signal catalogs in an Amazon Web Services account. </p> <p>You can use to list information about each signal (node) specified in a signal catalog.</p> <note> <p>This API operation uses pagination. Specify the <code>nextToken</code> parameter in the request to return more results.</p> </note>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "ListSignalCatalogsRequest"
      },
      "name": "ListSignalCatalogs",
      "output": {
        "shape": "ListSignalCatalogsResponse"
      }
    },
    "ListTagsForResource": {
      "documentation": "<p>Lists the tags (metadata) you have assigned to the resource.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "ListTagsForResourceRequest"
      },
      "name": "ListTagsForResource",
      "output": {
        "shape": "ListTagsForResourceResponse"
      }
    },
    "ListVehicles": {
      "documentation": "<p> Retrieves a list of summaries of created vehicles. </p> <note> <p>This API operation uses pagination. Specify the <code>nextToken</code> parameter in the request to return more results.</p> </note>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "ListVehiclesRequest"
      },
      "name": "ListVehicles",
      "output": {
        "shape": "ListVehiclesResponse"
      }
    },
    "ListVehiclesInFleet": {
      "documentation": "<p> Retrieves a list of summaries of all vehicles associated with a fleet. </p> <note> <p>This API operation uses pagination. Specify the <code>nextToken</code> parameter in the request to return more results.</p> </note>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "ListVehiclesInFleetRequest"
      },
      "name": "ListVehiclesInFleet",
      "output": {
        "shape": "ListVehiclesInFleetResponse"
      }
    },
    "PutLoggingOptions": {
      "documentation": "<p>Creates or updates the logging option.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "idempotent": true,
      "input": {
        "shape": "PutLoggingOptionsRequest"
      },
      "name": "PutLoggingOptions",
      "output": {
        "shape": "PutLoggingOptionsResponse"
      }
    },
    "RegisterAccount": {
      "documentation": "<p>Registers your Amazon Web Services account, IAM, and Amazon Timestream resources so Amazon Web Services IoT FleetWise can transfer your vehicle data to the Amazon Web Services Cloud. For more information, including step-by-step procedures, see <a href=\"https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/setting-up.html\">Setting up Amazon Web Services IoT FleetWise</a>. </p> <note> <p>An Amazon Web Services account is <b>not</b> the same thing as a \"user account\". An <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/introduction_identity-management.html#intro-identity-users\">Amazon Web Services user</a> is an identity that you create using Identity and Access Management (IAM) and takes the form of either an <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users.html\">IAM user</a> or an <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html\">IAM role, both with credentials</a>. A single Amazon Web Services account can, and typically does, contain many users and roles.</p> </note>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "RegisterAccountRequest"
      },
      "name": "RegisterAccount",
      "output": {
        "shape": "RegisterAccountResponse"
      }
    },
    "TagResource": {
      "documentation": "<p>Adds to or modifies the tags of the given resource. Tags are metadata which can be used to manage a resource.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "idempotent": true,
      "input": {
        "shape": "TagResourceRequest"
      },
      "name": "TagResource",
      "output": {
        "shape": "TagResourceResponse"
      }
    },
    "UntagResource": {
      "documentation": "<p>Removes the given tags (metadata) from the resource.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "idempotent": true,
      "input": {
        "shape": "UntagResourceRequest"
      },
      "name": "UntagResource",
      "output": {
        "shape": "UntagResourceResponse"
      }
    },
    "UpdateCampaign": {
      "documentation": "<p> Updates a campaign. </p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "UpdateCampaignRequest"
      },
      "name": "UpdateCampaign",
      "output": {
        "shape": "UpdateCampaignResponse"
      }
    },
    "UpdateDecoderManifest": {
      "documentation": "<p> Updates a decoder manifest.</p> <p>A decoder manifest can only be updated when the status is <code>DRAFT</code>. Only <code>ACTIVE</code> decoder manifests can be associated with vehicles.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "LimitExceededException"
        },
        {
          "shape": "DecoderManifestValidationException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "idempotent": true,
      "input": {
        "shape": "UpdateDecoderManifestRequest"
      },
      "name": "UpdateDecoderManifest",
      "output": {
        "shape": "UpdateDecoderManifestResponse"
      }
    },
    "UpdateFleet": {
      "documentation": "<p> Updates the description of an existing fleet. </p> <note> <p>If the fleet is successfully updated, Amazon Web Services IoT FleetWise sends back an HTTP 200 response with an empty HTTP body.</p> </note>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "UpdateFleetRequest"
      },
      "name": "UpdateFleet",
      "output": {
        "shape": "UpdateFleetResponse"
      }
    },
    "UpdateModelManifest": {
      "documentation": "<p> Updates a vehicle model (model manifest). If created vehicles are associated with a vehicle model, it can't be updated.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InvalidSignalsException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "idempotent": true,
      "input": {
        "shape": "UpdateModelManifestRequest"
      },
      "name": "UpdateModelManifest",
      "output": {
        "shape": "UpdateModelManifestResponse"
      }
    },
    "UpdateSignalCatalog": {
      "documentation": "<p> Updates a signal catalog. </p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "LimitExceededException"
        },
        {
          "shape": "InvalidNodeException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InvalidSignalsException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "idempotent": true,
      "input": {
        "shape": "UpdateSignalCatalogRequest"
      },
      "name": "UpdateSignalCatalog",
      "output": {
        "shape": "UpdateSignalCatalogResponse"
      }
    },
    "UpdateVehicle": {
      "documentation": "<p> Updates a vehicle. </p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "UpdateVehicleRequest"
      },
      "name": "UpdateVehicle",
      "output": {
        "shape": "UpdateVehicleResponse"
      }
    }
  },
  "shapes": {
    "AccessDeniedException": {
      "documentation": "<p>You don't have sufficient permission to perform this action.</p>",
      "exception": true,
      "members": {
        "message": {
          "shape": "string"
        }
      },
      "required": [
        "message"
      ],
      "type": "structure"
    },
    "Actuator": {
      "documentation": "<p>A signal that represents a vehicle device such as the engine, heater, and door locks. Data from an actuator reports the state of a certain vehicle device.</p> <note> <p> Updating actuator data can change the state of a device. For example, you can turn on or off the heater by updating its actuator data.</p> </note>",
      "members": {
        "allowedValues": {
          "documentation": "<p>A list of possible values an actuator can take.</p>",
          "shape": "listOfStrings"
        },
        "assignedValue": {
          "documentation": "<p>A specified value for the actuator.</p>",
          "shape": "string"
        },
        "dataType": {
          "documentation": "<p>The specified data type of the actuator. </p>",
          "shape": "NodeDataType"
        },
        "description": {
          "documentation": "<p>A brief description of the actuator.</p>",
          "shape": "description"
        },
        "fullyQualifiedName": {
          "documentation": "<p>The fully qualified name of the actuator. For example, the fully qualified name of an actuator might be <code>Vehicle.Front.Left.Door.Lock</code>.</p>",
          "shape": "string"
        },
        "max": {
          "documentation": "<p>The specified possible maximum value of an actuator.</p>",
          "shape": "double"
        },
        "min": {
          "documentation": "<p>The specified possible minimum value of an actuator.</p>",
          "shape": "double"
        },
        "unit": {
          "documentation": "<p>The scientific unit for the actuator.</p>",
          "shape": "string"
        }
      },
      "required": [
        "fullyQualifiedName",
        "dataType"
      ],
      "type": "structure"
    },
    "AmazonResourceName": {
      "max": 1011,
      "min": 1,
      "type": "string"
    },
    "AssociateVehicleFleetRequest": {
      "members": {
        "fleetId": {
          "documentation": "<p> The ID of a fleet. </p>",
          "shape": "fleetId"
        },
        "vehicleName": {
          "documentation": "<p> The unique ID of the vehicle to associate with the fleet. </p>",
          "shape": "vehicleName"
        }
      },
      "required": [
        "vehicleName",
        "fleetId"
      ],
      "type": "structure"
    },
    "AssociateVehicleFleetResponse": {
      "members": {},
      "type": "structure"
    },
    "Attribute": {
      "documentation": "<p>A signal that represents static information about the vehicle, such as engine type or manufacturing date.</p>",
      "members": {
        "allowedValues": {
          "documentation": "<p>A list of possible values an attribute can be assigned.</p>",
          "shape": "listOfStrings"
        },
        "assignedValue": {
          "documentation": "<p>A specified value for the attribute.</p>",
          "shape": "string"
        },
        "dataType": {
          "documentation": "<p>The specified data type of the attribute. </p>",
          "shape": "NodeDataType"
        },
        "defaultValue": {
          "documentation": "<p>The default value of the attribute.</p>",
          "shape": "string"
        },
        "description": {
          "documentation": "<p>A brief description of the attribute.</p>",
          "shape": "description"
        },
        "fullyQualifiedName": {
          "documentation": "<p>The fully qualified name of the attribute. For example, the fully qualified name of an attribute might be <code>Vehicle.Body.Engine.Type</code>.</p>",
          "shape": "string"
        },
        "max": {
          "documentation": "<p>The specified possible maximum value of the attribute.</p>",
          "shape": "double"
        },
        "min": {
          "documentation": "<p>The specified possible minimum value of the attribute.</p>",
          "shape": "double"
        },
        "unit": {
          "documentation": "<p>The scientific unit for the attribute.</p>",
          "shape": "string"
        }
      },
      "required": [
        "fullyQualifiedName",
        "dataType"
      ],
      "type": "structure"
    },
    "BatchCreateVehicleRequest": {
      "members": {
        "vehicles": {
          "documentation": "<p> A list of information about each vehicle to create. For more information, see the API data type.</p>",
          "shape": "createVehicleRequestItems"
        }
      },
      "required": [
        "vehicles"
      ],
      "type": "structure"
    },
    "BatchCreateVehicleResponse": {
      "members": {
        "errors": {
          "documentation": "<p>A list of information about creation errors, or an empty list if there aren't any errors. </p>",
          "shape": "createVehicleErrors"
        },
        "vehicles": {
          "documentation": "<p> A list of information about a batch of created vehicles. For more information, see the API data type.</p>",
          "shape": "createVehicleResponses"
        }
      },
      "type": "structure"
    },
    "BatchUpdateVehicleRequest": {
      "members": {
        "vehicles": {
          "documentation": "<p> A list of information about the vehicles to update. For more information, see the API data type.</p>",
          "shape": "updateVehicleRequestItems"
        }
      },
      "required": [
        "vehicles"
      ],
      "type": "structure"
    },
    "BatchUpdateVehicleResponse": {
      "members": {
        "errors": {
          "documentation": "<p>A list of information about errors returned while updating a batch of vehicles, or, if there aren't any errors, an empty list.</p>",
          "shape": "updateVehicleErrors"
        },
        "vehicles": {
          "documentation": "<p> A list of information about the batch of updated vehicles. </p> <note> <p>This list contains only unique IDs for the vehicles that were updated.</p> </note>",
          "shape": "updateVehicleResponseItems"
        }
      },
      "type": "structure"
    },
    "Branch": {
      "documentation": "<p>A group of signals that are defined in a hierarchical structure.</p>",
      "members": {
        "description": {
          "documentation": "<p>A brief description of the branch.</p>",
          "shape": "description"
        },
        "fullyQualifiedName": {
          "documentation": "<p>The fully qualified name of the branch. For example, the fully qualified name of a branch might be <code>Vehicle.Body.Engine</code>.</p>",
          "shape": "string"
        }
      },
      "required": [
        "fullyQualifiedName"
      ],
      "type": "structure"
    },
    "CampaignStatus": {
      "enum": [
        "CREATING",
        "WAITING_FOR_APPROVAL",
        "RUNNING",
        "SUSPENDED"
      ],
      "type": "string"
    },
    "CampaignSummary": {
      "documentation": "<p>Information about a campaign. </p> <p>You can use the API operation to return this information about multiple created campaigns.</p>",
      "members": {
        "arn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of a campaign.</p>",
          "shape": "arn"
        },
        "creationTime": {
          "documentation": "<p>The time the campaign was created.</p>",
          "shape": "timestamp"
        },
        "description": {
          "documentation": "<p>The description of the campaign.</p>",
          "shape": "description"
        },
        "lastModificationTime": {
          "documentation": "<p>The last time the campaign was modified.</p>",
          "shape": "timestamp"
        },
        "name": {
          "documentation": "<p>The name of a campaign.</p>",
          "shape": "campaignName"
        },
        "signalCatalogArn": {
          "documentation": "<p>The ARN of the signal catalog associated with the campaign.</p>",
          "shape": "arn"
        },
        "status": {
          "documentation": "<p>The state of a campaign. The status can be one of the following:</p> <ul> <li> <p> <code>CREATING</code> - Amazon Web Services IoT FleetWise is processing your request to create the campaign.</p> </li> <li> <p> <code>WAITING_FOR_APPROVAL</code> - After a campaign is created, it enters the <code>WAITING_FOR_APPROVAL</code> state. To allow Amazon Web Services IoT FleetWise to deploy the campaign to the target vehicle or fleet, use the API operation to approve the campaign. </p> </li> <li> <p> <code>RUNNING</code> - The campaign is active. </p> </li> <li> <p> <code>SUSPENDED</code> - The campaign is suspended. To resume the campaign, use the API operation. </p> </li> </ul>",
          "shape": "CampaignStatus"
        },
        "targetArn": {
          "documentation": "<p>The ARN of a vehicle or fleet to which the campaign is deployed.</p>",
          "shape": "arn"
        }
      },
      "required": [
        "creationTime",
        "lastModificationTime"
      ],
      "type": "structure"
    },
    "CanDbcDefinition": {
      "documentation": "<p>Configurations used to create a decoder manifest.</p>",
      "members": {
        "canDbcFiles": {
          "documentation": "<p>A list of DBC files. You can upload only one DBC file for each network interface and specify up to five (inclusive) files in the list.</p>",
          "shape": "NetworkFilesList"
        },
        "networkInterface": {
          "documentation": "<p>Contains information about a network interface.</p>",
          "shape": "InterfaceId"
        },
        "signalsMap": {
          "documentation": "<p>Pairs every signal specified in your vehicle model with a signal decoder.</p>",
          "shape": "ModelSignalsMap"
        }
      },
      "required": [
        "networkInterface",
        "canDbcFiles"
      ],
      "type": "structure"
    },
    "CanInterface": {
      "documentation": "<p>A single controller area network (CAN) device interface.</p>",
      "members": {
        "name": {
          "documentation": "<p>The unique name of the interface.</p>",
          "shape": "CanInterfaceName"
        },
        "protocolName": {
          "documentation": "<p>The name of the communication protocol for the interface.</p>",
          "shape": "ProtocolName"
        },
        "protocolVersion": {
          "documentation": "<p>The version of the communication protocol for the interface.</p>",
          "shape": "ProtocolVersion"
        }
      },
      "required": [
        "name"
      ],
      "type": "structure"
    },
    "CanInterfaceName": {
      "max": 100,
      "min": 1,
      "type": "string"
    },
    "CanSignal": {
      "documentation": "<p>Information about a single controller area network (CAN) signal and the messages it receives and transmits.</p>",
      "members": {
        "factor": {
          "documentation": "<p>A multiplier used to decode the CAN message.</p>",
          "shape": "double"
        },
        "isBigEndian": {
          "documentation": "<p>Whether the byte ordering of a CAN message is big-endian.</p>",
          "shape": "boolean"
        },
        "isSigned": {
          "documentation": "<p>Whether the message data is specified as a signed value.</p>",
          "shape": "boolean"
        },
        "length": {
          "documentation": "<p>How many bytes of data are in the message.</p>",
          "shape": "nonNegativeInteger"
        },
        "messageId": {
          "documentation": "<p>The ID of the message.</p>",
          "shape": "nonNegativeInteger"
        },
        "name": {
          "documentation": "<p>The name of the signal.</p>",
          "shape": "CanSignalName"
        },
        "offset": {
          "documentation": "<p>Indicates where data appears in the CAN message.</p>",
          "shape": "double"
        },
        "startBit": {
          "documentation": "<p>Indicates the beginning of the CAN message.</p>",
          "shape": "nonNegativeInteger"
        }
      },
      "required": [
        "messageId",
        "isBigEndian",
        "isSigned",
        "startBit",
        "offset",
        "factor",
        "length"
      ],
      "type": "structure"
    },
    "CanSignalName": {
      "max": 100,
      "min": 1,
      "type": "string"
    },
    "CloudWatchLogDeliveryOptions": {
      "documentation": "<p>The log delivery option to send data to Amazon CloudWatch Logs.</p>",
      "members": {
        "logGroupName": {
          "documentation": "<p>The Amazon CloudWatch Logs group the operation sends data to.</p>",
          "shape": "CloudWatchLogGroupName"
        },
        "logType": {
          "documentation": "<p>The type of log to send data to Amazon CloudWatch Logs.</p>",
          "shape": "LogType"
        }
      },
      "required": [
        "logType"
      ],
      "type": "structure"
    },
    "CloudWatchLogGroupName": {
      "max": 512,
      "min": 1,
      "pattern": "[\\.\\-_\\/#A-Za-z0-9]+",
      "type": "string"
    },
    "CollectionScheme": {
      "documentation": "<p>Specifies what data to collect and how often or when to collect it.</p>",
      "members": {
        "conditionBasedCollectionScheme": {
          "documentation": "<p>Information about a collection scheme that uses a simple logical expression to recognize what data to collect.</p>",
          "shape": "ConditionBasedCollectionScheme"
        },
        "timeBasedCollectionScheme": {
          "documentation": "<p>Information about a collection scheme that uses a time period to decide how often to collect data.</p>",
          "shape": "TimeBasedCollectionScheme"
        }
      },
      "type": "structure",
      "union": true
    },
    "Compression": {
      "enum": [
        "OFF",
        "SNAPPY"
      ],
      "type": "string"
    },
    "ConditionBasedCollectionScheme": {
      "documentation": "<p>Information about a collection scheme that uses a simple logical expression to recognize what data to collect.</p>",
      "members": {
        "conditionLanguageVersion": {
          "documentation": "<p>Specifies the version of the conditional expression language.</p>",
          "shape": "languageVersion"
        },
        "expression": {
          "documentation": "<p>The logical expression used to recognize what data to collect. For example, <code>$variable.Vehicle.OutsideAirTemperature &gt;= 105.0</code>.</p>",
          "shape": "eventExpression"
        },
        "minimumTriggerIntervalMs": {
          "documentation": "<p>The minimum duration of time between two triggering events to collect data, in milliseconds.</p> <note> <p>If a signal changes often, you might want to collect data at a slower rate.</p> </note>",
          "shape": "uint32"
        },
        "triggerMode": {
          "documentation": "<p>Whether to collect data for all triggering events (<code>ALWAYS</code>). Specify (<code>RISING_EDGE</code>), or specify only when the condition first evaluates to false. For example, triggering on \"AirbagDeployed\"; Users aren't interested on triggering when the airbag is already exploded; they only care about the change from not deployed =&gt; deployed.</p>",
          "shape": "TriggerMode"
        }
      },
      "required": [
        "expression"
      ],
      "type": "structure"
    },
    "ConflictException": {
      "documentation": "<p>The request has conflicting operations. This can occur if you're trying to perform more than one operation on the same resource at the same time.</p>",
      "exception": true,
      "members": {
        "message": {
          "shape": "string"
        },
        "resource": {
          "documentation": "<p>The resource on which there are conflicting operations.</p>",
          "shape": "string"
        },
        "resourceType": {
          "documentation": "<p>The type of resource on which there are conflicting operations..</p>",
          "shape": "string"
        }
      },
      "required": [
        "message",
        "resource",
        "resourceType"
      ],
      "type": "structure"
    },
    "CreateCampaignRequest": {
      "members": {
        "collectionScheme": {
          "documentation": "<p> The data collection scheme associated with the campaign. You can specify a scheme that collects data based on time or an event.</p>",
          "shape": "CollectionScheme"
        },
        "compression": {
          "documentation": "<p> (Optional) Whether to compress signals before transmitting data to Amazon Web Services IoT FleetWise. If you don't want to compress the signals, use <code>OFF</code>. If it's not specified, <code>SNAPPY</code> is used. </p> <p>Default: <code>SNAPPY</code> </p>",
          "shape": "Compression"
        },
        "dataExtraDimensions": {
          "documentation": "<p> (Optional) A list of vehicle attributes to associate with a campaign. </p> <p>Enrich the data with specified vehicle attributes. For example, add <code>make</code> and <code>model</code> to the campaign, and Amazon Web Services IoT FleetWise will associate the data with those attributes as dimensions in Amazon Timestream. You can then query the data against <code>make</code> and <code>model</code>.</p> <p>Default: An empty array</p>",
          "shape": "DataExtraDimensionNodePathList"
        },
        "description": {
          "documentation": "<p>An optional description of the campaign to help identify its purpose.</p>",
          "shape": "description"
        },
        "diagnosticsMode": {
          "documentation": "<p> (Optional) Option for a vehicle to send diagnostic trouble codes to Amazon Web Services IoT FleetWise. If you want to send diagnostic trouble codes, use <code>SEND_ACTIVE_DTCS</code>. If it's not specified, <code>OFF</code> is used.</p> <p>Default: <code>OFF</code> </p>",
          "shape": "DiagnosticsMode"
        },
        "expiryTime": {
          "documentation": "<p> (Optional) The time the campaign expires, in seconds since epoch (January 1, 1970 at midnight UTC time). Vehicle data won't be collected after the campaign expires. </p> <p>Default: 253402243200 (December 31, 9999, 00:00:00 UTC)</p>",
          "shape": "timestamp"
        },
        "name": {
          "documentation": "<p> The name of the campaign to create. </p>",
          "shape": "campaignName"
        },
        "postTriggerCollectionDuration": {
          "documentation": "<p> (Optional) How long (in milliseconds) to collect raw data after a triggering event initiates the collection. If it's not specified, <code>0</code> is used.</p> <p>Default: <code>0</code> </p>",
          "shape": "uint32"
        },
        "priority": {
          "documentation": "<p>(Optional) A number indicating the priority of one campaign over another campaign for a certain vehicle or fleet. A campaign with the lowest value is deployed to vehicles before any other campaigns. If it's not specified, <code>0</code> is used. </p> <p>Default: <code>0</code> </p>",
          "shape": "priority"
        },
        "signalCatalogArn": {
          "documentation": "<p>(Optional) The Amazon Resource Name (ARN) of the signal catalog to associate with the campaign. </p>",
          "shape": "arn"
        },
        "signalsToCollect": {
          "documentation": "<p>(Optional) A list of information about signals to collect. </p>",
          "shape": "SignalInformationList"
        },
        "spoolingMode": {
          "documentation": "<p>(Optional) Whether to store collected data after a vehicle lost a connection with the cloud. After a connection is re-established, the data is automatically forwarded to Amazon Web Services IoT FleetWise. If you want to store collected data when a vehicle loses connection with the cloud, use <code>TO_DISK</code>. If it's not specified, <code>OFF</code> is used.</p> <p>Default: <code>OFF</code> </p>",
          "shape": "SpoolingMode"
        },
        "startTime": {
          "documentation": "<p>(Optional) The time, in milliseconds, to deliver a campaign after it was approved. If it's not specified, <code>0</code> is used.</p> <p>Default: <code>0</code> </p>",
          "shape": "timestamp"
        },
        "tags": {
          "documentation": "<p>Metadata that can be used to manage the campaign.</p>",
          "shape": "TagList"
        },
        "targetArn": {
          "documentation": "<p> The ARN of the vehicle or fleet to deploy a campaign to. </p>",
          "shape": "arn"
        }
      },
      "required": [
        "name",
        "signalCatalogArn",
        "targetArn",
        "collectionScheme"
      ],
      "type": "structure"
    },
    "CreateCampaignResponse": {
      "members": {
        "arn": {
          "documentation": "<p> The ARN of the created campaign. </p>",
          "shape": "arn"
        },
        "name": {
          "documentation": "<p>The name of the created campaign.</p>",
          "shape": "campaignName"
        }
      },
      "type": "structure"
    },
    "CreateDecoderManifestRequest": {
      "members": {
        "description": {
          "documentation": "<p> A brief description of the decoder manifest. </p>",
          "shape": "description"
        },
        "modelManifestArn": {
          "documentation": "<p> The Amazon Resource Name (ARN) of the vehicle model (model manifest). </p>",
          "shape": "arn"
        },
        "name": {
          "documentation": "<p> The unique name of the decoder manifest to create.</p>",
          "shape": "resourceName"
        },
        "networkInterfaces": {
          "documentation": "<p> A list of information about available network interfaces. </p>",
          "shape": "NetworkInterfaces"
        },
        "signalDecoders": {
          "documentation": "<p> A list of information about signal decoders. </p>",
          "shape": "SignalDecoders"
        },
        "tags": {
          "documentation": "<p>Metadata that can be used to manage the decoder manifest.</p>",
          "shape": "TagList"
        }
      },
      "required": [
        "name",
        "modelManifestArn"
      ],
      "type": "structure"
    },
    "CreateDecoderManifestResponse": {
      "members": {
        "arn": {
          "documentation": "<p> The ARN of the created decoder manifest. </p>",
          "shape": "arn"
        },
        "name": {
          "documentation": "<p> The name of the created decoder manifest. </p>",
          "shape": "resourceName"
        }
      },
      "required": [
        "name",
        "arn"
      ],
      "type": "structure"
    },
    "CreateFleetRequest": {
      "members": {
        "description": {
          "documentation": "<p> A brief description of the fleet to create. </p>",
          "shape": "description"
        },
        "fleetId": {
          "documentation": "<p> The unique ID of the fleet to create. </p>",
          "shape": "fleetId"
        },
        "signalCatalogArn": {
          "documentation": "<p> The Amazon Resource Name (ARN) of a signal catalog. </p>",
          "shape": "arn"
        },
        "tags": {
          "documentation": "<p>Metadata that can be used to manage the fleet.</p>",
          "shape": "TagList"
        }
      },
      "required": [
        "fleetId",
        "signalCatalogArn"
      ],
      "type": "structure"
    },
    "CreateFleetResponse": {
      "members": {
        "arn": {
          "documentation": "<p> The ARN of the created fleet. </p>",
          "shape": "arn"
        },
        "id": {
          "documentation": "<p> The ID of the created fleet. </p>",
          "shape": "fleetId"
        }
      },
      "required": [
        "id",
        "arn"
      ],
      "type": "structure"
    },
    "CreateModelManifestRequest": {
      "members": {
        "description": {
          "documentation": "<p> A brief description of the vehicle model. </p>",
          "shape": "description"
        },
        "name": {
          "documentation": "<p> The name of the vehicle model to create.</p>",
          "shape": "resourceName"
        },
        "nodes": {
          "documentation": "<p> A list of nodes, which are a general abstraction of signals. </p>",
          "shape": "listOfStrings"
        },
        "signalCatalogArn": {
          "documentation": "<p> The Amazon Resource Name (ARN) of a signal catalog. </p>",
          "shape": "arn"
        },
        "tags": {
          "documentation": "<p>Metadata that can be used to manage the vehicle model.</p>",
          "shape": "TagList"
        }
      },
      "required": [
        "name",
        "nodes",
        "signalCatalogArn"
      ],
      "type": "structure"
    },
    "CreateModelManifestResponse": {
      "members": {
        "arn": {
          "documentation": "<p> The ARN of the created vehicle model.</p>",
          "shape": "arn"
        },
        "name": {
          "documentation": "<p> The name of the created vehicle model.</p>",
          "shape": "resourceName"
        }
      },
      "required": [
        "name",
        "arn"
      ],
      "type": "structure"
    },
    "CreateSignalCatalogRequest": {
      "members": {
        "description": {
          "documentation": "<p>A brief description of the signal catalog.</p>",
          "shape": "description"
        },
        "name": {
          "documentation": "<p> The name of the signal catalog to create. </p>",
          "shape": "resourceName"
        },
        "nodes": {
          "documentation": "<p> A list of information about nodes, which are a general abstraction of signals. For more information, see the API data type.</p>",
          "shape": "Nodes"
        },
        "tags": {
          "documentation": "<p>Metadata that can be used to manage the signal catalog.</p>",
          "shape": "TagList"
        }
      },
      "required": [
        "name"
      ],
      "type": "structure"
    },
    "CreateSignalCatalogResponse": {
      "members": {
        "arn": {
          "documentation": "<p> The ARN of the created signal catalog. </p>",
          "shape": "arn"
        },
        "name": {
          "documentation": "<p> The name of the created signal catalog. </p>",
          "shape": "resourceName"
        }
      },
      "required": [
        "name",
        "arn"
      ],
      "type": "structure"
    },
    "CreateVehicleError": {
      "documentation": "<p>An HTTP error resulting from creating a vehicle.</p>",
      "members": {
        "code": {
          "documentation": "<p>An HTTP error code.</p>",
          "shape": "string"
        },
        "message": {
          "documentation": "<p>A description of the HTTP error.</p>",
          "shape": "string"
        },
        "vehicleName": {
          "documentation": "<p>The ID of the vehicle with the error.</p>",
          "shape": "vehicleName"
        }
      },
      "type": "structure"
    },
    "CreateVehicleRequest": {
      "members": {
        "associationBehavior": {
          "documentation": "<p> An option to create a new Amazon Web Services IoT thing when creating a vehicle, or to validate an existing Amazon Web Services IoT thing as a vehicle. </p> <p>Default: <code/> </p>",
          "shape": "VehicleAssociationBehavior"
        },
        "attributes": {
          "documentation": "<p>Static information about a vehicle in a key-value pair. For example: <code>\"engineType\"</code> : <code>\"1.3 L R2\"</code> </p>",
          "shape": "attributesMap"
        },
        "decoderManifestArn": {
          "documentation": "<p> The ARN of a decoder manifest. </p>",
          "shape": "arn"
        },
        "modelManifestArn": {
          "documentation": "<p> The Amazon Resource Name ARN of a vehicle model. </p>",
          "shape": "arn"
        },
        "tags": {
          "documentation": "<p>Metadata that can be used to manage the vehicle.</p>",
          "shape": "TagList"
        },
        "vehicleName": {
          "documentation": "<p> The unique ID of the vehicle to create. </p>",
          "shape": "vehicleName"
        }
      },
      "required": [
        "vehicleName",
        "modelManifestArn",
        "decoderManifestArn"
      ],
      "type": "structure"
    },
    "CreateVehicleRequestItem": {
      "documentation": "<p>Information about the vehicle to create.</p>",
      "members": {
        "associationBehavior": {
          "documentation": "<p>An option to create a new Amazon Web Services IoT thing when creating a vehicle, or to validate an existing thing as a vehicle.</p>",
          "shape": "VehicleAssociationBehavior"
        },
        "attributes": {
          "documentation": "<p>Static information about a vehicle in a key-value pair. For example: <code>\"engine Type\"</code> : <code>\"v6\"</code> </p>",
          "shape": "attributesMap"
        },
        "decoderManifestArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of a decoder manifest associated with the vehicle to create. </p>",
          "shape": "arn"
        },
        "modelManifestArn": {
          "documentation": "<p>The ARN of the vehicle model (model manifest) to create the vehicle from.</p>",
          "shape": "arn"
        },
        "tags": {
          "documentation": "<p>Metadata which can be used to manage the vehicle.</p>",
          "shape": "TagList"
        },
        "vehicleName": {
          "documentation": "<p>The unique ID of the vehicle to create.</p>",
          "shape": "vehicleName"
        }
      },
      "required": [
        "vehicleName",
        "modelManifestArn",
        "decoderManifestArn"
      ],
      "type": "structure"
    },
    "CreateVehicleResponse": {
      "members": {
        "arn": {
          "documentation": "<p> The ARN of the created vehicle. </p>",
          "shape": "arn"
        },
        "thingArn": {
          "documentation": "<p> The ARN of a created or validated Amazon Web Services IoT thing. </p>",
          "shape": "arn"
        },
        "vehicleName": {
          "documentation": "<p>The unique ID of the created vehicle.</p>",
          "shape": "vehicleName"
        }
      },
      "type": "structure"
    },
    "CreateVehicleResponseItem": {
      "documentation": "<p>Information about a created vehicle.</p>",
      "members": {
        "arn": {
          "documentation": "<p>The ARN of the created vehicle.</p>",
          "shape": "arn"
        },
        "thingArn": {
          "documentation": "<p>The ARN of a created or validated Amazon Web Services IoT thing.</p>",
          "shape": "arn"
        },
        "vehicleName": {
          "documentation": "<p>The unique ID of the vehicle to create.</p>",
          "shape": "vehicleName"
        }
      },
      "type": "structure"
    },
    "DataExtraDimensionNodePathList": {
      "max": 5,
      "member": {
        "shape": "NodePath"
      },
      "min": 0,
      "type": "list"
    },
    "DecoderManifestSummary": {
      "documentation": "<p>Information about a created decoder manifest. You can use the API operation to return this information about multiple decoder manifests.</p>",
      "members": {
        "arn": {
          "documentation": "<p>The ARN of a vehicle model (model manifest) associated with the decoder manifest. </p>",
          "shape": "arn"
        },
        "creationTime": {
          "documentation": "<p>The time the decoder manifest was created in seconds since epoch (January 1, 1970 at midnight UTC time).</p>",
          "shape": "timestamp"
        },
        "description": {
          "documentation": "<p>A brief description of the decoder manifest.</p>",
          "shape": "description"
        },
        "lastModificationTime": {
          "documentation": "<p>The time the decoder manifest was last updated in seconds since epoch (January 1, 1970 at midnight UTC time).</p>",
          "shape": "timestamp"
        },
        "modelManifestArn": {
          "documentation": "<p>The ARN of a vehicle model (model manifest) associated with the decoder manifest.</p>",
          "shape": "arn"
        },
        "name": {
          "documentation": "<p>The name of the decoder manifest.</p>",
          "shape": "string"
        },
        "status": {
          "documentation": "<p>The state of the decoder manifest. If the status is <code>ACTIVE</code>, the decoder manifest can't be edited. If the status is marked <code>DRAFT</code>, you can edit the decoder manifest.</p>",
          "shape": "ManifestStatus"
        }
      },
      "required": [
        "creationTime",
        "lastModificationTime"
      ],
      "type": "structure"
    },
    "DecoderManifestValidationException": {
      "documentation": "<p>The request couldn't be completed because it contains signal decoders with one or more validation errors.</p>",
      "exception": true,
      "members": {
        "invalidNetworkInterfaces": {
          "documentation": "<p>The request couldn't be completed because of invalid network interfaces in the request.</p>",
          "shape": "InvalidNetworkInterfaces"
        },
        "invalidSignals": {
          "documentation": "<p>The request couldn't be completed because of invalid signals in the request.</p>",
          "shape": "InvalidSignalDecoders"
        }
      },
      "type": "structure"
    },
    "DeleteCampaignRequest": {
      "members": {
        "name": {
          "documentation": "<p> The name of the campaign to delete. </p>",
          "shape": "campaignName"
        }
      },
      "required": [
        "name"
      ],
      "type": "structure"
    },
    "DeleteCampaignResponse": {
      "members": {
        "arn": {
          "documentation": "<p> The Amazon Resource Name (ARN) of the deleted campaign.</p> <note> <p>The ARN isn\u2019t returned if a campaign doesn\u2019t exist.</p> </note>",
          "shape": "arn"
        },
        "name": {
          "documentation": "<p>The name of the deleted campaign.</p>",
          "shape": "campaignName"
        }
      },
      "type": "structure"
    },
    "DeleteDecoderManifestRequest": {
      "members": {
        "name": {
          "documentation": "<p> The name of the decoder manifest to delete. </p>",
          "shape": "resourceName"
        }
      },
      "required": [
        "name"
      ],
      "type": "structure"
    },
    "DeleteDecoderManifestResponse": {
      "members": {
        "arn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the deleted decoder manifest.</p>",
          "shape": "arn"
        },
        "name": {
          "documentation": "<p>The name of the deleted decoder manifest.</p>",
          "shape": "resourceName"
        }
      },
      "required": [
        "name",
        "arn"
      ],
      "type": "structure"
    },
    "DeleteFleetRequest": {
      "members": {
        "fleetId": {
          "documentation": "<p> The ID of the fleet to delete. </p>",
          "shape": "fleetId"
        }
      },
      "required": [
        "fleetId"
      ],
      "type": "structure"
    },
    "DeleteFleetResponse": {
      "members": {
        "arn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the deleted fleet.</p>",
          "shape": "arn"
        },
        "id": {
          "documentation": "<p>The ID of the deleted fleet.</p>",
          "shape": "fleetId"
        }
      },
      "type": "structure"
    },
    "DeleteModelManifestRequest": {
      "members": {
        "name": {
          "documentation": "<p> The name of the model manifest to delete. </p>",
          "shape": "resourceName"
        }
      },
      "required": [
        "name"
      ],
      "type": "structure"
    },
    "DeleteModelManifestResponse": {
      "members": {
        "arn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the deleted model manifest.</p>",
          "shape": "arn"
        },
        "name": {
          "documentation": "<p>The name of the deleted model manifest.</p>",
          "shape": "resourceName"
        }
      },
      "required": [
        "name",
        "arn"
      ],
      "type": "structure"
    },
    "DeleteSignalCatalogRequest": {
      "members": {
        "name": {
          "documentation": "<p> The name of the signal catalog to delete. </p>",
          "shape": "resourceName"
        }
      },
      "required": [
        "name"
      ],
      "type": "structure"
    },
    "DeleteSignalCatalogResponse": {
      "members": {
        "arn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the deleted signal catalog.</p>",
          "shape": "arn"
        },
        "name": {
          "documentation": "<p>The name of the deleted signal catalog.</p>",
          "shape": "resourceName"
        }
      },
      "required": [
        "name",
        "arn"
      ],
      "type": "structure"
    },
    "DeleteVehicleRequest": {
      "members": {
        "vehicleName": {
          "documentation": "<p>The ID of the vehicle to delete. </p>",
          "shape": "vehicleName"
        }
      },
      "required": [
        "vehicleName"
      ],
      "type": "structure"
    },
    "DeleteVehicleResponse": {
      "members": {
        "arn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the deleted vehicle.</p>",
          "shape": "arn"
        },
        "vehicleName": {
          "documentation": "<p>The ID of the deleted vehicle.</p>",
          "shape": "vehicleName"
        }
      },
      "required": [
        "vehicleName",
        "arn"
      ],
      "type": "structure"
    },
    "DiagnosticsMode": {
      "enum": [
        "OFF",
        "SEND_ACTIVE_DTCS"
      ],
      "type": "string"
    },
    "DisassociateVehicleFleetRequest": {
      "members": {
        "fleetId": {
          "documentation": "<p> The unique ID of a fleet. </p>",
          "shape": "fleetId"
        },
        "vehicleName": {
          "documentation": "<p> The unique ID of the vehicle to disassociate from the fleet.</p>",
          "shape": "vehicleName"
        }
      },
      "required": [
        "vehicleName",
        "fleetId"
      ],
      "type": "structure"
    },
    "DisassociateVehicleFleetResponse": {
      "members": {},
      "type": "structure"
    },
    "FleetSummary": {
      "documentation": "<p>Information about a fleet.</p> <p>You can use the API operation to return this information about multiple fleets.</p>",
      "members": {
        "arn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the fleet.</p>",
          "shape": "arn"
        },
        "creationTime": {
          "documentation": "<p>The time the fleet was created, in seconds since epoch (January 1, 1970 at midnight UTC time).</p>",
          "shape": "timestamp"
        },
        "description": {
          "documentation": "<p>A brief description of the fleet.</p>",
          "shape": "description"
        },
        "id": {
          "documentation": "<p>The unique ID of the fleet.</p>",
          "shape": "fleetId"
        },
        "lastModificationTime": {
          "documentation": "<p>The time the fleet was last updated in seconds since epoch (January 1, 1970 at midnight UTC time).</p>",
          "shape": "timestamp"
        },
        "signalCatalogArn": {
          "documentation": "<p>The ARN of the signal catalog associated with the fleet.</p>",
          "shape": "arn"
        }
      },
      "required": [
        "id",
        "arn",
        "signalCatalogArn",
        "creationTime"
      ],
      "type": "structure"
    },
    "FormattedVss": {
      "documentation": "<p>Vehicle Signal Specification (VSS) is a precise language used to describe and model signals in vehicle networks. The JSON file collects signal specificiations in a VSS format.</p>",
      "members": {
        "vssJson": {
          "documentation": "<p>Provides the VSS in JSON format.</p>",
          "shape": "String"
        }
      },
      "type": "structure",
      "union": true
    },
    "Fqns": {
      "max": 500,
      "member": {
        "shape": "FullyQualifiedName"
      },
      "min": 1,
      "type": "list"
    },
    "FullyQualifiedName": {
      "max": 150,
      "min": 1,
      "type": "string"
    },
    "GetCampaignRequest": {
      "members": {
        "name": {
          "documentation": "<p> The name of the campaign to retrieve information about. </p>",
          "shape": "campaignName"
        }
      },
      "required": [
        "name"
      ],
      "type": "structure"
    },
    "GetCampaignResponse": {
      "members": {
        "arn": {
          "documentation": "<p> The Amazon Resource Name (ARN) of the campaign. </p>",
          "shape": "arn"
        },
        "collectionScheme": {
          "documentation": "<p> Information about the data collection scheme associated with the campaign. </p>",
          "shape": "CollectionScheme"
        },
        "compression": {
          "documentation": "<p> Whether to compress signals before transmitting data to Amazon Web Services IoT FleetWise. If <code>OFF</code> is specified, the signals aren't compressed. If it's not specified, <code>SNAPPY</code> is used. </p>",
          "shape": "Compression"
        },
        "creationTime": {
          "documentation": "<p> The time the campaign was created in seconds since epoch (January 1, 1970 at midnight UTC time). </p>",
          "shape": "timestamp"
        },
        "dataExtraDimensions": {
          "documentation": "<p> A list of vehicle attributes associated with the campaign. </p>",
          "shape": "DataExtraDimensionNodePathList"
        },
        "description": {
          "documentation": "<p>The description of the campaign.</p>",
          "shape": "description"
        },
        "diagnosticsMode": {
          "documentation": "<p> Option for a vehicle to send diagnostic trouble codes to Amazon Web Services IoT FleetWise. </p>",
          "shape": "DiagnosticsMode"
        },
        "expiryTime": {
          "documentation": "<p> The time the campaign expires, in seconds since epoch (January 1, 1970 at midnight UTC time). Vehicle data won't be collected after the campaign expires.</p>",
          "shape": "timestamp"
        },
        "lastModificationTime": {
          "documentation": "<p>The last time the campaign was modified.</p>",
          "shape": "timestamp"
        },
        "name": {
          "documentation": "<p>The name of the campaign.</p>",
          "shape": "campaignName"
        },
        "postTriggerCollectionDuration": {
          "documentation": "<p> How long (in seconds) to collect raw data after a triggering event initiates the collection. </p>",
          "shape": "uint32"
        },
        "priority": {
          "documentation": "<p> A number indicating the priority of one campaign over another campaign for a certain vehicle or fleet. A campaign with the lowest value is deployed to vehicles before any other campaigns.</p>",
          "shape": "priority"
        },
        "signalCatalogArn": {
          "documentation": "<p> The ARN of a signal catalog. </p>",
          "shape": "arn"
        },
        "signalsToCollect": {
          "documentation": "<p> Information about a list of signals to collect data on. </p>",
          "shape": "SignalInformationList"
        },
        "spoolingMode": {
          "documentation": "<p> Whether to store collected data after a vehicle lost a connection with the cloud. After a connection is re-established, the data is automatically forwarded to Amazon Web Services IoT FleetWise. </p>",
          "shape": "SpoolingMode"
        },
        "startTime": {
          "documentation": "<p> The time, in milliseconds, to deliver a campaign after it was approved.</p>",
          "shape": "timestamp"
        },
        "status": {
          "documentation": "<p>The state of the campaign. The status can be one of: <code>CREATING</code>, <code>WAITING_FOR_APPROVAL</code>, <code>RUNNING</code>, and <code>SUSPENDED</code>. </p>",
          "shape": "CampaignStatus"
        },
        "targetArn": {
          "documentation": "<p> The ARN of the vehicle or the fleet targeted by the campaign. </p>",
          "shape": "arn"
        }
      },
      "type": "structure"
    },
    "GetDecoderManifestRequest": {
      "members": {
        "name": {
          "documentation": "<p> The name of the decoder manifest to retrieve information about. </p>",
          "shape": "resourceName"
        }
      },
      "required": [
        "name"
      ],
      "type": "structure"
    },
    "GetDecoderManifestResponse": {
      "members": {
        "arn": {
          "documentation": "<p> The Amazon Resource Name (ARN) of the decoder manifest. </p>",
          "shape": "arn"
        },
        "creationTime": {
          "documentation": "<p> The time the decoder manifest was created in seconds since epoch (January 1, 1970 at midnight UTC time). </p>",
          "shape": "timestamp"
        },
        "description": {
          "documentation": "<p> A brief description of the decoder manifest.</p>",
          "shape": "description"
        },
        "lastModificationTime": {
          "documentation": "<p> The time the decoder manifest was last updated in seconds since epoch (January 1, 1970 at midnight UTC time). </p>",
          "shape": "timestamp"
        },
        "modelManifestArn": {
          "documentation": "<p> The ARN of a vehicle model (model manifest) associated with the decoder manifest.</p>",
          "shape": "arn"
        },
        "name": {
          "documentation": "<p> The name of the decoder manifest. </p>",
          "shape": "string"
        },
        "status": {
          "documentation": "<p> The state of the decoder manifest. If the status is <code>ACTIVE</code>, the decoder manifest can't be edited. If the status is marked <code>DRAFT</code>, you can edit the decoder manifest.</p>",
          "shape": "ManifestStatus"
        }
      },
      "required": [
        "name",
        "arn",
        "creationTime",
        "lastModificationTime"
      ],
      "type": "structure"
    },
    "GetFleetRequest": {
      "members": {
        "fleetId": {
          "documentation": "<p> The ID of the fleet to retrieve information about. </p>",
          "shape": "fleetId"
        }
      },
      "required": [
        "fleetId"
      ],
      "type": "structure"
    },
    "GetFleetResponse": {
      "members": {
        "arn": {
          "documentation": "<p> The Amazon Resource Name (ARN) of the fleet. </p>",
          "shape": "arn"
        },
        "creationTime": {
          "documentation": "<p> The time the fleet was created in seconds since epoch (January 1, 1970 at midnight UTC time). </p>",
          "shape": "timestamp"
        },
        "description": {
          "documentation": "<p> A brief description of the fleet. </p>",
          "shape": "description"
        },
        "id": {
          "documentation": "<p> The ID of the fleet.</p>",
          "shape": "fleetId"
        },
        "lastModificationTime": {
          "documentation": "<p> The time the fleet was last updated, in seconds since epoch (January 1, 1970 at midnight UTC time). </p>",
          "shape": "timestamp"
        },
        "signalCatalogArn": {
          "documentation": "<p> The ARN of a signal catalog associated with the fleet. </p>",
          "shape": "arn"
        }
      },
      "required": [
        "id",
        "arn",
        "signalCatalogArn",
        "creationTime",
        "lastModificationTime"
      ],
      "type": "structure"
    },
    "GetLoggingOptionsRequest": {
      "members": {},
      "type": "structure"
    },
    "GetLoggingOptionsResponse": {
      "members": {
        "cloudWatchLogDelivery": {
          "documentation": "<p>Returns information about log delivery to Amazon CloudWatch Logs.</p>",
          "shape": "CloudWatchLogDeliveryOptions"
        }
      },
      "required": [
        "cloudWatchLogDelivery"
      ],
      "type": "structure"
    },
    "GetModelManifestRequest": {
      "members": {
        "name": {
          "documentation": "<p> The name of the vehicle model to retrieve information about. </p>",
          "shape": "resourceName"
        }
      },
      "required": [
        "name"
      ],
      "type": "structure"
    },
    "GetModelManifestResponse": {
      "members": {
        "arn": {
          "documentation": "<p> The Amazon Resource Name (ARN) of the vehicle model. </p>",
          "shape": "arn"
        },
        "creationTime": {
          "documentation": "<p>The time the vehicle model was created, in seconds since epoch (January 1, 1970 at midnight UTC time).</p>",
          "shape": "timestamp"
        },
        "description": {
          "documentation": "<p> A brief description of the vehicle model. </p>",
          "shape": "description"
        },
        "lastModificationTime": {
          "documentation": "<p>The last time the vehicle model was modified.</p>",
          "shape": "timestamp"
        },
        "name": {
          "documentation": "<p> The name of the vehicle model. </p>",
          "shape": "resourceName"
        },
        "signalCatalogArn": {
          "documentation": "<p> The ARN of the signal catalog associated with the vehicle model. </p>",
          "shape": "arn"
        },
        "status": {
          "documentation": "<p> The state of the vehicle model. If the status is <code>ACTIVE</code>, the vehicle model can't be edited. You can edit the vehicle model if the status is marked <code>DRAFT</code>.</p>",
          "shape": "ManifestStatus"
        }
      },
      "required": [
        "name",
        "arn",
        "creationTime",
        "lastModificationTime"
      ],
      "type": "structure"
    },
    "GetRegisterAccountStatusRequest": {
      "members": {},
      "type": "structure"
    },
    "GetRegisterAccountStatusResponse": {
      "members": {
        "accountStatus": {
          "documentation": "<p> The status of registering your account and resources. The status can be one of:</p> <ul> <li> <p> <code>REGISTRATION_SUCCESS</code> - The Amazon Web Services resource is successfully registered.</p> </li> <li> <p> <code>REGISTRATION_PENDING</code> - Amazon Web Services IoT FleetWise is processing the registration request. This process takes approximately five minutes to complete.</p> </li> <li> <p> <code>REGISTRATION_FAILURE</code> - Amazon Web Services IoT FleetWise can't register the AWS resource. Try again later.</p> </li> </ul>",
          "shape": "RegistrationStatus"
        },
        "creationTime": {
          "documentation": "<p> The time the account was registered, in seconds since epoch (January 1, 1970 at midnight UTC time). </p>",
          "shape": "timestamp"
        },
        "customerAccountId": {
          "documentation": "<p> The unique ID of the Amazon Web Services account, provided at account creation. </p>",
          "shape": "customerAccountId"
        },
        "iamRegistrationResponse": {
          "documentation": "<p> Information about the registered IAM resources or errors, if any. </p>",
          "shape": "IamRegistrationResponse"
        },
        "lastModificationTime": {
          "documentation": "<p> The time this registration was last updated, in seconds since epoch (January 1, 1970 at midnight UTC time). </p>",
          "shape": "timestamp"
        },
        "timestreamRegistrationResponse": {
          "documentation": "<p> Information about the registered Amazon Timestream resources or errors, if any.</p>",
          "shape": "TimestreamRegistrationResponse"
        }
      },
      "required": [
        "customerAccountId",
        "accountStatus",
        "timestreamRegistrationResponse",
        "iamRegistrationResponse",
        "creationTime",
        "lastModificationTime"
      ],
      "type": "structure"
    },
    "GetSignalCatalogRequest": {
      "members": {
        "name": {
          "documentation": "<p> The name of the signal catalog to retrieve information about. </p>",
          "shape": "resourceName"
        }
      },
      "required": [
        "name"
      ],
      "type": "structure"
    },
    "GetSignalCatalogResponse": {
      "members": {
        "arn": {
          "documentation": "<p> The Amazon Resource Name (ARN) of the signal catalog. </p>",
          "shape": "arn"
        },
        "creationTime": {
          "documentation": "<p> The time the signal catalog was created in seconds since epoch (January 1, 1970 at midnight UTC time). </p>",
          "shape": "timestamp"
        },
        "description": {
          "documentation": "<p> A brief description of the signal catalog. </p>",
          "shape": "description"
        },
        "lastModificationTime": {
          "documentation": "<p>The last time the signal catalog was modified.</p>",
          "shape": "timestamp"
        },
        "name": {
          "documentation": "<p> The name of the signal catalog. </p>",
          "shape": "resourceName"
        },
        "nodeCounts": {
          "documentation": "<p> The total number of network nodes specified in a signal catalog. </p>",
          "shape": "NodeCounts"
        }
      },
      "required": [
        "name",
        "arn",
        "creationTime",
        "lastModificationTime"
      ],
      "type": "structure"
    },
    "GetVehicleRequest": {
      "members": {
        "vehicleName": {
          "documentation": "<p> The ID of the vehicle to retrieve information about. </p>",
          "shape": "vehicleName"
        }
      },
      "required": [
        "vehicleName"
      ],
      "type": "structure"
    },
    "GetVehicleResponse": {
      "members": {
        "arn": {
          "documentation": "<p> The Amazon Resource Name (ARN) of the vehicle to retrieve information about. </p>",
          "shape": "arn"
        },
        "attributes": {
          "documentation": "<p>Static information about a vehicle in a key-value pair. For example:</p> <p> <code>\"engineType\"</code> : <code>\"1.3 L R2\"</code> </p>",
          "shape": "attributesMap"
        },
        "creationTime": {
          "documentation": "<p> The time the vehicle was created in seconds since epoch (January 1, 1970 at midnight UTC time). </p>",
          "shape": "timestamp"
        },
        "decoderManifestArn": {
          "documentation": "<p> The ARN of a decoder manifest associated with the vehicle. </p>",
          "shape": "arn"
        },
        "lastModificationTime": {
          "documentation": "<p> The time the vehicle was last updated in seconds since epoch (January 1, 1970 at midnight UTC time). </p>",
          "shape": "timestamp"
        },
        "modelManifestArn": {
          "documentation": "<p> The ARN of a vehicle model (model manifest) associated with the vehicle. </p>",
          "shape": "arn"
        },
        "vehicleName": {
          "documentation": "<p>The ID of the vehicle.</p>",
          "shape": "vehicleName"
        }
      },
      "type": "structure"
    },
    "GetVehicleStatusRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p> The maximum number of items to return, between 1 and 100, inclusive. </p>",
          "shape": "maxResults"
        },
        "nextToken": {
          "documentation": "<p>A pagination token for the next set of results.</p> <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>",
          "shape": "nextToken"
        },
        "vehicleName": {
          "documentation": "<p> The ID of the vehicle to retrieve information about. </p>",
          "shape": "vehicleName"
        }
      },
      "required": [
        "vehicleName"
      ],
      "type": "structure"
    },
    "GetVehicleStatusResponse": {
      "members": {
        "campaigns": {
          "documentation": "<p> Lists information about the state of the vehicle with deployed campaigns. </p>",
          "shape": "VehicleStatusList"
        },
        "nextToken": {
          "documentation": "<p> The token to retrieve the next set of results, or <code>null</code> if there are no more results. </p>",
          "shape": "nextToken"
        }
      },
      "type": "structure"
    },
    "IAMRoleArn": {
      "max": 2048,
      "min": 20,
      "pattern": "arn:(aws[a-zA-Z0-9-]*):iam::(\\d{12})?:(role((\\u002F)|(\\u002F[\\u0021-\\u007F]+\\u002F))[\\w+=,.@-]+)",
      "type": "string"
    },
    "IamRegistrationResponse": {
      "documentation": "<p>Information about registering an Identity and Access Management (IAM) resource so Amazon Web Services IoT FleetWise edge agent software can transfer your vehicle data to Amazon Timestream.</p>",
      "members": {
        "errorMessage": {
          "documentation": "<p>A message associated with a registration error.</p>",
          "shape": "errorMessage"
        },
        "registrationStatus": {
          "documentation": "<p>The status of registering your IAM resource. The status can be one of <code>REGISTRATION_SUCCESS</code>, <code>REGISTRATION_PENDING</code>, <code>REGISTRATION_FAILURE</code>.</p>",
          "shape": "RegistrationStatus"
        },
        "roleArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the IAM role to register.</p>",
          "shape": "arn"
        }
      },
      "required": [
        "roleArn",
        "registrationStatus"
      ],
      "type": "structure"
    },
    "IamResources": {
      "documentation": "<p>The IAM resource that enables Amazon Web Services IoT FleetWise edge agent software to send data to Amazon Timestream. </p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html\">IAM roles</a> in the <i>Identity and Access Management User Guide</i>.</p>",
      "members": {
        "roleArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the IAM resource that allows Amazon Web Services IoT FleetWise to send data to Amazon Timestream. For example, <code>arn:aws:iam::123456789012:role/SERVICE-ROLE-ARN</code>. </p>",
          "shape": "IAMRoleArn"
        }
      },
      "required": [
        "roleArn"
      ],
      "type": "structure"
    },
    "ImportDecoderManifestRequest": {
      "members": {
        "name": {
          "documentation": "<p> The name of the decoder manifest to import. </p>",
          "shape": "resourceName"
        },
        "networkFileDefinitions": {
          "documentation": "<p> The file to load into an Amazon Web Services account. </p>",
          "shape": "NetworkFileDefinitions"
        }
      },
      "required": [
        "name",
        "networkFileDefinitions"
      ],
      "type": "structure"
    },
    "ImportDecoderManifestResponse": {
      "members": {
        "arn": {
          "documentation": "<p> The Amazon Resource Name (ARN) of the decoder manifest that was imported. </p>",
          "shape": "arn"
        },
        "name": {
          "documentation": "<p> The name of the imported decoder manifest. </p>",
          "shape": "resourceName"
        }
      },
      "required": [
        "name",
        "arn"
      ],
      "type": "structure"
    },
    "ImportSignalCatalogRequest": {
      "members": {
        "description": {
          "documentation": "<p> A brief description of the signal catalog. </p>",
          "shape": "description"
        },
        "name": {
          "documentation": "<p>The name of the signal catalog to import.</p>",
          "shape": "resourceName"
        },
        "tags": {
          "documentation": "<p>Metadata that can be used to manage the signal catalog.</p>",
          "shape": "TagList"
        },
        "vss": {
          "documentation": "<p>The contents of the Vehicle Signal Specification (VSS) configuration. VSS is a precise language used to describe and model signals in vehicle networks.</p>",
          "shape": "FormattedVss"
        }
      },
      "required": [
        "name"
      ],
      "type": "structure"
    },
    "ImportSignalCatalogResponse": {
      "members": {
        "arn": {
          "documentation": "<p> The Amazon Resource Name (ARN) of the imported signal catalog.</p>",
          "shape": "arn"
        },
        "name": {
          "documentation": "<p> The name of the imported signal catalog. </p>",
          "shape": "resourceName"
        }
      },
      "required": [
        "name",
        "arn"
      ],
      "type": "structure"
    },
    "InterfaceId": {
      "max": 50,
      "min": 1,
      "type": "string"
    },
    "InterfaceIds": {
      "max": 500,
      "member": {
        "shape": "InterfaceId"
      },
      "min": 1,
      "type": "list"
    },
    "InternalServerException": {
      "documentation": "<p>The request couldn't be completed because the server temporarily failed.</p>",
      "exception": true,
      "fault": true,
      "members": {
        "message": {
          "shape": "string"
        },
        "retryAfterSeconds": {
          "documentation": "<p>The number of seconds to wait before retrying the command.</p>",
          "shape": "RetryAfterSeconds"
        }
      },
      "required": [
        "message"
      ],
      "type": "structure"
    },
    "InvalidNetworkInterface": {
      "documentation": "<p>A reason a vehicle network interface isn't valid.</p>",
      "members": {
        "interfaceId": {
          "documentation": "<p>The ID of the interface that isn't valid.</p>",
          "shape": "InterfaceId"
        },
        "reason": {
          "documentation": "<p>A message about why the interface isn't valid. </p>",
          "shape": "NetworkInterfaceFailureReason"
        }
      },
      "type": "structure"
    },
    "InvalidNetworkInterfaces": {
      "member": {
        "shape": "InvalidNetworkInterface"
      },
      "type": "list"
    },
    "InvalidNodeException": {
      "documentation": "<p>The specified node type doesn't match the expected node type for a node. You can specify the node type as branch, sensor, actuator, or attribute.</p>",
      "exception": true,
      "members": {
        "invalidNodes": {
          "documentation": "<p>The specified node type isn't valid.</p>",
          "shape": "Nodes"
        },
        "reason": {
          "documentation": "<p>The reason the node validation failed.</p>",
          "shape": "string"
        }
      },
      "type": "structure"
    },
    "InvalidSignal": {
      "documentation": "<p>A reason that a signal isn't valid.</p>",
      "members": {
        "name": {
          "documentation": "<p>The name of the signal that isn't valid.</p>",
          "shape": "FullyQualifiedName"
        },
        "reason": {
          "documentation": "<p>A message about why the signal isn't valid.</p>",
          "shape": "string"
        }
      },
      "type": "structure"
    },
    "InvalidSignalDecoder": {
      "documentation": "<p>A reason that a signal decoder isn't valid.</p>",
      "members": {
        "name": {
          "documentation": "<p>The name of a signal decoder that isn't valid.</p>",
          "shape": "FullyQualifiedName"
        },
        "reason": {
          "documentation": "<p>A message about why the signal decoder isn't valid.</p>",
          "shape": "SignalDecoderFailureReason"
        }
      },
      "type": "structure"
    },
    "InvalidSignalDecoders": {
      "member": {
        "shape": "InvalidSignalDecoder"
      },
      "type": "list"
    },
    "InvalidSignals": {
      "member": {
        "shape": "InvalidSignal"
      },
      "type": "list"
    },
    "InvalidSignalsException": {
      "documentation": "<p>The request couldn't be completed because it contains signals that aren't valid.</p>",
      "exception": true,
      "members": {
        "invalidSignals": {
          "documentation": "<p>The signals which caused the exception.</p>",
          "shape": "InvalidSignals"
        },
        "message": {
          "shape": "string"
        }
      },
      "type": "structure"
    },
    "LimitExceededException": {
      "documentation": "<p>A service quota was exceeded. </p>",
      "exception": true,
      "members": {
        "message": {
          "shape": "string"
        },
        "resourceId": {
          "documentation": "<p>The identifier of the resource that was exceeded.</p>",
          "shape": "string"
        },
        "resourceType": {
          "documentation": "<p>The type of resource that was exceeded.</p>",
          "shape": "string"
        }
      },
      "required": [
        "message",
        "resourceId",
        "resourceType"
      ],
      "type": "structure"
    },
    "ListCampaignsRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p> The maximum number of items to return, between 1 and 100, inclusive. </p>",
          "shape": "maxResults"
        },
        "nextToken": {
          "documentation": "<p>A pagination token for the next set of results.</p> <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>",
          "shape": "nextToken"
        },
        "status": {
          "documentation": "<p>Optional parameter to filter the results by the status of each created campaign in your account. The status can be one of: <code>CREATING</code>, <code>WAITING_FOR_APPROVAL</code>, <code>RUNNING</code>, or <code>SUSPENDED</code>.</p>",
          "shape": "status"
        }
      },
      "type": "structure"
    },
    "ListCampaignsResponse": {
      "members": {
        "campaignSummaries": {
          "documentation": "<p> A summary of information about each campaign. </p>",
          "shape": "campaignSummaries"
        },
        "nextToken": {
          "documentation": "<p> The token to retrieve the next set of results, or <code>null</code> if there are no more results. </p>",
          "shape": "nextToken"
        }
      },
      "type": "structure"
    },
    "ListDecoderManifestNetworkInterfacesRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p> The maximum number of items to return, between 1 and 100, inclusive. </p>",
          "shape": "maxResults"
        },
        "name": {
          "documentation": "<p> The name of the decoder manifest to list information about. </p>",
          "shape": "resourceName"
        },
        "nextToken": {
          "documentation": "<p>A pagination token for the next set of results.</p> <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>",
          "shape": "nextToken"
        }
      },
      "required": [
        "name"
      ],
      "type": "structure"
    },
    "ListDecoderManifestNetworkInterfacesResponse": {
      "members": {
        "networkInterfaces": {
          "documentation": "<p> A list of information about network interfaces. </p>",
          "shape": "NetworkInterfaces"
        },
        "nextToken": {
          "documentation": "<p> The token to retrieve the next set of results, or <code>null</code> if there are no more results. </p>",
          "shape": "nextToken"
        }
      },
      "type": "structure"
    },
    "ListDecoderManifestSignalsRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p> The maximum number of items to return, between 1 and 100, inclusive. </p>",
          "shape": "maxResults"
        },
        "name": {
          "documentation": "<p> The name of the decoder manifest to list information about. </p>",
          "shape": "resourceName"
        },
        "nextToken": {
          "documentation": "<p>A pagination token for the next set of results.</p> <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>",
          "shape": "nextToken"
        }
      },
      "required": [
        "name"
      ],
      "type": "structure"
    },
    "ListDecoderManifestSignalsResponse": {
      "members": {
        "nextToken": {
          "documentation": "<p> The token to retrieve the next set of results, or <code>null</code> if there are no more results. </p>",
          "shape": "nextToken"
        },
        "signalDecoders": {
          "documentation": "<p> Information about a list of signals to decode. </p>",
          "shape": "SignalDecoders"
        }
      },
      "type": "structure"
    },
    "ListDecoderManifestsRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p> The maximum number of items to return, between 1 and 100, inclusive. </p>",
          "shape": "maxResults"
        },
        "modelManifestArn": {
          "documentation": "<p> The Amazon Resource Name (ARN) of a vehicle model (model manifest) associated with the decoder manifest. </p>",
          "shape": "arn"
        },
        "nextToken": {
          "documentation": "<p>A pagination token for the next set of results.</p> <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>",
          "shape": "nextToken"
        }
      },
      "type": "structure"
    },
    "ListDecoderManifestsResponse": {
      "members": {
        "nextToken": {
          "documentation": "<p> The token to retrieve the next set of results, or <code>null</code> if there are no more results. </p>",
          "shape": "nextToken"
        },
        "summaries": {
          "documentation": "<p> A list of information about each decoder manifest. </p>",
          "shape": "decoderManifestSummaries"
        }
      },
      "type": "structure"
    },
    "ListFleetsForVehicleRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p> The maximum number of items to return, between 1 and 100, inclusive. </p>",
          "shape": "maxResults"
        },
        "nextToken": {
          "documentation": "<p>A pagination token for the next set of results.</p> <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>",
          "shape": "nextToken"
        },
        "vehicleName": {
          "documentation": "<p> The ID of the vehicle to retrieve information about. </p>",
          "shape": "vehicleName"
        }
      },
      "required": [
        "vehicleName"
      ],
      "type": "structure"
    },
    "ListFleetsForVehicleResponse": {
      "members": {
        "fleets": {
          "documentation": "<p> A list of fleet IDs that the vehicle is associated with. </p>",
          "shape": "fleets"
        },
        "nextToken": {
          "documentation": "<p> The token to retrieve the next set of results, or <code>null</code> if there are no more results. </p>",
          "shape": "nextToken"
        }
      },
      "type": "structure"
    },
    "ListFleetsRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p> The maximum number of items to return, between 1 and 100, inclusive. </p>",
          "shape": "maxResults"
        },
        "nextToken": {
          "documentation": "<p>A pagination token for the next set of results.</p> <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>",
          "shape": "nextToken"
        }
      },
      "type": "structure"
    },
    "ListFleetsResponse": {
      "members": {
        "fleetSummaries": {
          "documentation": "<p> A list of information for each fleet. </p>",
          "shape": "fleetSummaries"
        },
        "nextToken": {
          "documentation": "<p> The token to retrieve the next set of results, or <code>null</code> if there are no more results. </p>",
          "shape": "nextToken"
        }
      },
      "type": "structure"
    },
    "ListModelManifestNodesRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p> The maximum number of items to return, between 1 and 100, inclusive. </p>",
          "shape": "maxResults"
        },
        "name": {
          "documentation": "<p> The name of the vehicle model to list information about. </p>",
          "shape": "resourceName"
        },
        "nextToken": {
          "documentation": "<p>A pagination token for the next set of results.</p> <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>",
          "shape": "nextToken"
        }
      },
      "required": [
        "name"
      ],
      "type": "structure"
    },
    "ListModelManifestNodesResponse": {
      "members": {
        "nextToken": {
          "documentation": "<p> The token to retrieve the next set of results, or <code>null</code> if there are no more results. </p>",
          "shape": "nextToken"
        },
        "nodes": {
          "documentation": "<p> A list of information about nodes. </p>",
          "shape": "Nodes"
        }
      },
      "type": "structure"
    },
    "ListModelManifestsRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p> The maximum number of items to return, between 1 and 100, inclusive. </p>",
          "shape": "maxResults"
        },
        "nextToken": {
          "documentation": "<p>A pagination token for the next set of results.</p> <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>",
          "shape": "nextToken"
        },
        "signalCatalogArn": {
          "documentation": "<p> The ARN of a signal catalog. If you specify a signal catalog, only the vehicle models associated with it are returned.</p>",
          "shape": "arn"
        }
      },
      "type": "structure"
    },
    "ListModelManifestsResponse": {
      "members": {
        "nextToken": {
          "documentation": "<p> The token to retrieve the next set of results, or <code>null</code> if there are no more results. </p>",
          "shape": "nextToken"
        },
        "summaries": {
          "documentation": "<p> A list of information about vehicle models.</p>",
          "shape": "modelManifestSummaries"
        }
      },
      "type": "structure"
    },
    "ListSignalCatalogNodesRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p> The maximum number of items to return, between 1 and 100, inclusive. </p>",
          "shape": "maxResults"
        },
        "name": {
          "documentation": "<p> The name of the signal catalog to list information about. </p>",
          "shape": "resourceName"
        },
        "nextToken": {
          "documentation": "<p>A pagination token for the next set of results.</p> <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>",
          "shape": "nextToken"
        }
      },
      "required": [
        "name"
      ],
      "type": "structure"
    },
    "ListSignalCatalogNodesResponse": {
      "members": {
        "nextToken": {
          "documentation": "<p> The token to retrieve the next set of results, or <code>null</code> if there are no more results. </p>",
          "shape": "nextToken"
        },
        "nodes": {
          "documentation": "<p> A list of information about nodes. </p>",
          "shape": "Nodes"
        }
      },
      "type": "structure"
    },
    "ListSignalCatalogsRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p> The maximum number of items to return, between 1 and 100, inclusive. </p>",
          "shape": "maxResults"
        },
        "nextToken": {
          "documentation": "<p>A pagination token for the next set of results.</p> <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>",
          "shape": "nextToken"
        }
      },
      "type": "structure"
    },
    "ListSignalCatalogsResponse": {
      "members": {
        "nextToken": {
          "documentation": "<p> The token to retrieve the next set of results, or <code>null</code> if there are no more results. </p>",
          "shape": "nextToken"
        },
        "summaries": {
          "documentation": "<p> A list of information about each signal catalog. </p>",
          "shape": "signalCatalogSummaries"
        }
      },
      "type": "structure"
    },
    "ListTagsForResourceRequest": {
      "members": {
        "ResourceARN": {
          "documentation": "<p>The ARN of the resource.</p>",
          "shape": "AmazonResourceName"
        }
      },
      "required": [
        "ResourceARN"
      ],
      "type": "structure"
    },
    "ListTagsForResourceResponse": {
      "members": {
        "Tags": {
          "documentation": "<p>The list of tags assigned to the resource.</p>",
          "shape": "TagList"
        }
      },
      "type": "structure"
    },
    "ListVehiclesInFleetRequest": {
      "members": {
        "fleetId": {
          "documentation": "<p> The ID of a fleet. </p>",
          "shape": "fleetId"
        },
        "maxResults": {
          "documentation": "<p> The maximum number of items to return, between 1 and 100, inclusive. </p>",
          "shape": "maxResults"
        },
        "nextToken": {
          "documentation": "<p>A pagination token for the next set of results.</p> <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>",
          "shape": "nextToken"
        }
      },
      "required": [
        "fleetId"
      ],
      "type": "structure"
    },
    "ListVehiclesInFleetResponse": {
      "members": {
        "nextToken": {
          "documentation": "<p> The token to retrieve the next set of results, or <code>null</code> if there are no more results. </p>",
          "shape": "nextToken"
        },
        "vehicles": {
          "documentation": "<p> A list of vehicles associated with the fleet. </p>",
          "shape": "vehicles"
        }
      },
      "type": "structure"
    },
    "ListVehiclesRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p> The maximum number of items to return, between 1 and 100, inclusive. </p>",
          "shape": "listVehiclesMaxResults"
        },
        "modelManifestArn": {
          "documentation": "<p> The Amazon Resource Name (ARN) of a vehicle model (model manifest). You can use this optional parameter to list only the vehicles created from a certain vehicle model. </p>",
          "shape": "arn"
        },
        "nextToken": {
          "documentation": "<p>A pagination token for the next set of results.</p> <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>",
          "shape": "nextToken"
        }
      },
      "type": "structure"
    },
    "ListVehiclesResponse": {
      "members": {
        "nextToken": {
          "documentation": "<p> The token to retrieve the next set of results, or <code>null</code> if there are no more results. </p>",
          "shape": "nextToken"
        },
        "vehicleSummaries": {
          "documentation": "<p> A list of vehicles and information about them. </p>",
          "shape": "vehicleSummaries"
        }
      },
      "type": "structure"
    },
    "LogType": {
      "enum": [
        "OFF",
        "ERROR"
      ],
      "type": "string"
    },
    "ManifestStatus": {
      "enum": [
        "ACTIVE",
        "DRAFT"
      ],
      "type": "string"
    },
    "ModelManifestSummary": {
      "documentation": "<p>Information about a vehicle model (model manifest). You can use the API operation to return this information about multiple vehicle models.</p>",
      "members": {
        "arn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the vehicle model.</p>",
          "shape": "arn"
        },
        "creationTime": {
          "documentation": "<p>The time the vehicle model was created, in seconds since epoch (January 1, 1970 at midnight UTC time).</p>",
          "shape": "timestamp"
        },
        "description": {
          "documentation": "<p>A brief description of the vehicle model.</p>",
          "shape": "description"
        },
        "lastModificationTime": {
          "documentation": "<p>The time the vehicle model was last updated, in seconds since epoch (January 1, 1970 at midnight UTC time).</p>",
          "shape": "timestamp"
        },
        "name": {
          "documentation": "<p>The name of the vehicle model.</p>",
          "shape": "string"
        },
        "signalCatalogArn": {
          "documentation": "<p>The ARN of the signal catalog associated with the vehicle model.</p>",
          "shape": "arn"
        },
        "status": {
          "documentation": "<p>The state of the vehicle model. If the status is <code>ACTIVE</code>, the vehicle model can't be edited. If the status is <code>DRAFT</code>, you can edit the vehicle model.</p>",
          "shape": "ManifestStatus"
        }
      },
      "required": [
        "creationTime",
        "lastModificationTime"
      ],
      "type": "structure"
    },
    "ModelSignalsMap": {
      "key": {
        "shape": "string"
      },
      "type": "map",
      "value": {
        "shape": "string"
      }
    },
    "NetworkFileBlob": {
      "type": "blob"
    },
    "NetworkFileDefinition": {
      "documentation": "<p>Specifications for defining a vehicle network.</p>",
      "members": {
        "canDbc": {
          "documentation": "<p>Information, including CAN DBC files, about the configurations used to create a decoder manifest.</p>",
          "shape": "CanDbcDefinition"
        }
      },
      "type": "structure",
      "union": true
    },
    "NetworkFileDefinitions": {
      "member": {
        "shape": "NetworkFileDefinition"
      },
      "type": "list"
    },
    "NetworkFilesList": {
      "max": 5,
      "member": {
        "shape": "NetworkFileBlob"
      },
      "min": 1,
      "type": "list"
    },
    "NetworkInterface": {
      "documentation": "<p>Represents a node and its specifications in an in-vehicle communication network. All signal decoders must be associated with a network node. </p> <p> To return this information about all the network interfaces specified in a decoder manifest, use the API operation.</p>",
      "members": {
        "canInterface": {
          "documentation": "<p>Information about a network interface specified by the Controller Area Network (CAN) protocol.</p>",
          "shape": "CanInterface"
        },
        "interfaceId": {
          "documentation": "<p>The ID of the network interface.</p>",
          "shape": "InterfaceId"
        },
        "obdInterface": {
          "documentation": "<p>Information about a network interface specified by the On-board diagnostic (OBD) II protocol.</p>",
          "shape": "ObdInterface"
        },
        "type": {
          "documentation": "<p>The network protocol for the vehicle. For example, <code>CAN_SIGNAL</code> specifies a protocol that defines how data is communicated between electronic control units (ECUs). <code>OBD_SIGNAL</code> specifies a protocol that defines how self-diagnostic data is communicated between ECUs.</p>",
          "shape": "NetworkInterfaceType"
        }
      },
      "required": [
        "interfaceId",
        "type"
      ],
      "type": "structure"
    },
    "NetworkInterfaceFailureReason": {
      "enum": [
        "DUPLICATE_NETWORK_INTERFACE",
        "CONFLICTING_NETWORK_INTERFACE",
        "NETWORK_INTERFACE_TO_ADD_ALREADY_EXISTS",
        "CAN_NETWORK_INTERFACE_INFO_IS_NULL",
        "OBD_NETWORK_INTERFACE_INFO_IS_NULL",
        "NETWORK_INTERFACE_TO_REMOVE_ASSOCIATED_WITH_SIGNALS"
      ],
      "type": "string"
    },
    "NetworkInterfaceType": {
      "enum": [
        "CAN_INTERFACE",
        "OBD_INTERFACE"
      ],
      "type": "string"
    },
    "NetworkInterfaces": {
      "max": 500,
      "member": {
        "shape": "NetworkInterface"
      },
      "min": 1,
      "type": "list"
    },
    "Node": {
      "documentation": "<p>A general abstraction of a signal. A node can be specified as an actuator, attribute, branch, or sensor.</p>",
      "members": {
        "actuator": {
          "documentation": "<p>Information about a node specified as an actuator.</p> <note> <p>An actuator is a digital representation of a vehicle device.</p> </note>",
          "shape": "Actuator"
        },
        "attribute": {
          "documentation": "<p>Information about a node specified as an attribute.</p> <note> <p>An attribute represents static information about a vehicle.</p> </note>",
          "shape": "Attribute"
        },
        "branch": {
          "documentation": "<p>Information about a node specified as a branch.</p> <note> <p>A group of signals that are defined in a hierarchical structure.</p> </note>",
          "shape": "Branch"
        },
        "sensor": {
          "shape": "Sensor"
        }
      },
      "type": "structure",
      "union": true
    },
    "NodeCounts": {
      "documentation": "<p>Information about the number of nodes and node types in a vehicle network.</p>",
      "members": {
        "totalActuators": {
          "documentation": "<p>The total number of nodes in a vehicle network that represent actuators.</p>",
          "shape": "number"
        },
        "totalAttributes": {
          "documentation": "<p>The total number of nodes in a vehicle network that represent attributes.</p>",
          "shape": "number"
        },
        "totalBranches": {
          "documentation": "<p>The total number of nodes in a vehicle network that represent branches.</p>",
          "shape": "number"
        },
        "totalNodes": {
          "documentation": "<p>The total number of nodes in a vehicle network.</p>",
          "shape": "number"
        },
        "totalSensors": {
          "documentation": "<p>The total number of nodes in a vehicle network that represent sensors.</p>",
          "shape": "number"
        }
      },
      "type": "structure"
    },
    "NodeDataType": {
      "enum": [
        "INT8",
        "UINT8",
        "INT16",
        "UINT16",
        "INT32",
        "UINT32",
        "INT64",
        "UINT64",
        "BOOLEAN",
        "FLOAT",
        "DOUBLE",
        "STRING",
        "UNIX_TIMESTAMP",
        "INT8_ARRAY",
        "UINT8_ARRAY",
        "INT16_ARRAY",
        "UINT16_ARRAY",
        "INT32_ARRAY",
        "UINT32_ARRAY",
        "INT64_ARRAY",
        "UINT64_ARRAY",
        "BOOLEAN_ARRAY",
        "FLOAT_ARRAY",
        "DOUBLE_ARRAY",
        "STRING_ARRAY",
        "UNIX_TIMESTAMP_ARRAY",
        "UNKNOWN"
      ],
      "type": "string"
    },
    "NodePath": {
      "max": 150,
      "min": 1,
      "pattern": "[a-zA-Z0-9_.]+",
      "type": "string"
    },
    "NodePaths": {
      "max": 500,
      "member": {
        "shape": "NodePath"
      },
      "min": 1,
      "type": "list"
    },
    "Nodes": {
      "max": 500,
      "member": {
        "shape": "Node"
      },
      "min": 0,
      "type": "list"
    },
    "ObdBitmaskLength": {
      "box": true,
      "max": 8,
      "min": 1,
      "type": "integer"
    },
    "ObdByteLength": {
      "box": true,
      "max": 8,
      "min": 1,
      "type": "integer"
    },
    "ObdInterface": {
      "documentation": "<p>A network interface that specifies the On-board diagnostic (OBD) II network protocol.</p>",
      "members": {
        "dtcRequestIntervalSeconds": {
          "documentation": "<p>The maximum number message requests per diagnostic trouble code per second.</p>",
          "shape": "nonNegativeInteger"
        },
        "hasTransmissionEcu": {
          "documentation": "<p>Whether the vehicle has a transmission control module (TCM).</p>",
          "shape": "boolean"
        },
        "name": {
          "documentation": "<p>The name of the interface.</p>",
          "shape": "ObdInterfaceName"
        },
        "obdStandard": {
          "documentation": "<p>The standard OBD II PID.</p>",
          "shape": "ObdStandard"
        },
        "pidRequestIntervalSeconds": {
          "documentation": "<p>The maximum number message requests per second.</p>",
          "shape": "nonNegativeInteger"
        },
        "requestMessageId": {
          "documentation": "<p>The ID of the message requesting vehicle data.</p>",
          "shape": "nonNegativeInteger"
        },
        "useExtendedIds": {
          "documentation": "<p>Whether to use extended IDs in the message.</p>",
          "shape": "boolean"
        }
      },
      "required": [
        "name",
        "requestMessageId"
      ],
      "type": "structure"
    },
    "ObdInterfaceName": {
      "max": 100,
      "min": 1,
      "type": "string"
    },
    "ObdSignal": {
      "documentation": "<p>Information about signal messages using the on-board diagnostics (OBD) II protocol in a vehicle.</p>",
      "members": {
        "bitMaskLength": {
          "documentation": "<p>The number of bits to mask in a message.</p>",
          "shape": "ObdBitmaskLength"
        },
        "bitRightShift": {
          "documentation": "<p>The number of positions to shift bits in the message.</p>",
          "shape": "nonNegativeInteger"
        },
        "byteLength": {
          "documentation": "<p>The length of a message.</p>",
          "shape": "ObdByteLength"
        },
        "offset": {
          "documentation": "<p>Indicates where data appears in the message.</p>",
          "shape": "double"
        },
        "pid": {
          "documentation": "<p>The diagnostic code used to request data from a vehicle for this signal.</p>",
          "shape": "nonNegativeInteger"
        },
        "pidResponseLength": {
          "documentation": "<p>The length of the requested data.</p>",
          "shape": "positiveInteger"
        },
        "scaling": {
          "documentation": "<p>A multiplier used to decode the message.</p>",
          "shape": "double"
        },
        "serviceMode": {
          "documentation": "<p>The mode of operation (diagnostic service) in a message.</p>",
          "shape": "nonNegativeInteger"
        },
        "startByte": {
          "documentation": "<p>Indicates the beginning of the message.</p>",
          "shape": "nonNegativeInteger"
        }
      },
      "required": [
        "pidResponseLength",
        "serviceMode",
        "pid",
        "scaling",
        "offset",
        "startByte",
        "byteLength"
      ],
      "type": "structure"
    },
    "ObdStandard": {
      "max": 50,
      "min": 1,
      "type": "string"
    },
    "ProtocolName": {
      "max": 50,
      "min": 1,
      "type": "string"
    },
    "ProtocolVersion": {
      "max": 50,
      "min": 1,
      "type": "string"
    },
    "PutLoggingOptionsRequest": {
      "members": {
        "cloudWatchLogDelivery": {
          "documentation": "<p>Creates or updates the log delivery option to Amazon CloudWatch Logs.</p>",
          "shape": "CloudWatchLogDeliveryOptions"
        }
      },
      "required": [
        "cloudWatchLogDelivery"
      ],
      "type": "structure"
    },
    "PutLoggingOptionsResponse": {
      "members": {},
      "type": "structure"
    },
    "RegisterAccountRequest": {
      "members": {
        "iamResources": {
          "deprecated": true,
          "deprecatedMessage": "iamResources is no longer used or needed as input",
          "documentation": "<p>The IAM resource that allows Amazon Web Services IoT FleetWise to send data to Amazon Timestream.</p>",
          "shape": "IamResources"
        },
        "timestreamResources": {
          "shape": "TimestreamResources"
        }
      },
      "required": [
        "timestreamResources"
      ],
      "type": "structure"
    },
    "RegisterAccountResponse": {
      "members": {
        "creationTime": {
          "documentation": "<p> The time the account was registered, in seconds since epoch (January 1, 1970 at midnight UTC time). </p>",
          "shape": "timestamp"
        },
        "iamResources": {
          "documentation": "<p> The registered IAM resource that allows Amazon Web Services IoT FleetWise to send data to Amazon Timestream. </p>",
          "shape": "IamResources"
        },
        "lastModificationTime": {
          "documentation": "<p> The time this registration was last updated, in seconds since epoch (January 1, 1970 at midnight UTC time). </p>",
          "shape": "timestamp"
        },
        "registerAccountStatus": {
          "documentation": "<p> The status of registering your Amazon Web Services account, IAM role, and Timestream resources. </p>",
          "shape": "RegistrationStatus"
        },
        "timestreamResources": {
          "shape": "TimestreamResources"
        }
      },
      "required": [
        "registerAccountStatus",
        "timestreamResources",
        "iamResources",
        "creationTime",
        "lastModificationTime"
      ],
      "type": "structure"
    },
    "RegistrationStatus": {
      "enum": [
        "REGISTRATION_PENDING",
        "REGISTRATION_SUCCESS",
        "REGISTRATION_FAILURE"
      ],
      "type": "string"
    },
    "ResourceNotFoundException": {
      "documentation": "<p>The resource wasn't found.</p>",
      "exception": true,
      "members": {
        "message": {
          "shape": "string"
        },
        "resourceId": {
          "documentation": "<p>The identifier of the resource that wasn't found.</p>",
          "shape": "string"
        },
        "resourceType": {
          "documentation": "<p>The type of resource that wasn't found.</p>",
          "shape": "string"
        }
      },
      "required": [
        "message",
        "resourceId",
        "resourceType"
      ],
      "type": "structure"
    },
    "RetryAfterSeconds": {
      "type": "integer"
    },
    "Sensor": {
      "documentation": "<p>An input component that reports the environmental condition of a vehicle.</p> <note> <p>You can collect data about fluid levels, temperatures, vibrations, or battery voltage from sensors.</p> </note>",
      "members": {
        "allowedValues": {
          "documentation": "<p>A list of possible values a sensor can take.</p>",
          "shape": "listOfStrings"
        },
        "dataType": {
          "documentation": "<p>The specified data type of the sensor. </p>",
          "shape": "NodeDataType"
        },
        "description": {
          "documentation": "<p>A brief description of a sensor.</p>",
          "shape": "description"
        },
        "fullyQualifiedName": {
          "documentation": "<p>The fully qualified name of the sensor. For example, the fully qualified name of a sensor might be <code>Vehicle.Body.Engine.Battery</code>.</p>",
          "shape": "string"
        },
        "max": {
          "documentation": "<p>The specified possible maximum value of the sensor.</p>",
          "shape": "double"
        },
        "min": {
          "documentation": "<p>The specified possible minimum value of the sensor.</p>",
          "shape": "double"
        },
        "unit": {
          "documentation": "<p>The scientific unit of measurement for data collected by the sensor.</p>",
          "shape": "string"
        }
      },
      "required": [
        "fullyQualifiedName",
        "dataType"
      ],
      "type": "structure"
    },
    "SignalCatalogSummary": {
      "documentation": "<p>Information about a collection of standardized signals, which can be attributes, branches, sensors, or actuators.</p>",
      "members": {
        "arn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the signal catalog.</p>",
          "shape": "arn"
        },
        "creationTime": {
          "documentation": "<p>The time the signal catalog was created in seconds since epoch (January 1, 1970 at midnight UTC time). </p>",
          "shape": "timestamp"
        },
        "lastModificationTime": {
          "documentation": "<p>The time the signal catalog was last updated in seconds since epoch (January 1, 1970 at midnight UTC time). </p>",
          "shape": "timestamp"
        },
        "name": {
          "documentation": "<p>The name of the signal catalog.</p>",
          "shape": "string"
        }
      },
      "type": "structure"
    },
    "SignalDecoder": {
      "documentation": "<p>Information about a signal decoder.</p>",
      "members": {
        "canSignal": {
          "documentation": "<p>Information about signal decoder using the Controller Area Network (CAN) protocol.</p>",
          "shape": "CanSignal"
        },
        "fullyQualifiedName": {
          "documentation": "<p>The fully qualified name of a signal decoder as defined in a vehicle model.</p>",
          "shape": "FullyQualifiedName"
        },
        "interfaceId": {
          "documentation": "<p>The ID of a network interface that specifies what network protocol a vehicle follows.</p>",
          "shape": "InterfaceId"
        },
        "obdSignal": {
          "documentation": "<p>Information about signal decoder using the On-board diagnostic (OBD) II protocol.</p>",
          "shape": "ObdSignal"
        },
        "type": {
          "documentation": "<p>The network protocol for the vehicle. For example, <code>CAN_SIGNAL</code> specifies a protocol that defines how data is communicated between electronic control units (ECUs). <code>OBD_SIGNAL</code> specifies a protocol that defines how self-diagnostic data is communicated between ECUs.</p>",
          "shape": "SignalDecoderType"
        }
      },
      "required": [
        "fullyQualifiedName",
        "type",
        "interfaceId"
      ],
      "type": "structure"
    },
    "SignalDecoderFailureReason": {
      "enum": [
        "DUPLICATE_SIGNAL",
        "CONFLICTING_SIGNAL",
        "SIGNAL_TO_ADD_ALREADY_EXISTS",
        "SIGNAL_NOT_ASSOCIATED_WITH_NETWORK_INTERFACE",
        "NETWORK_INTERFACE_TYPE_INCOMPATIBLE_WITH_SIGNAL_DECODER_TYPE",
        "SIGNAL_NOT_IN_MODEL",
        "CAN_SIGNAL_INFO_IS_NULL",
        "OBD_SIGNAL_INFO_IS_NULL",
        "NO_DECODER_INFO_FOR_SIGNAL_IN_MODEL"
      ],
      "type": "string"
    },
    "SignalDecoderType": {
      "enum": [
        "CAN_SIGNAL",
        "OBD_SIGNAL"
      ],
      "type": "string"
    },
    "SignalDecoders": {
      "max": 500,
      "member": {
        "shape": "SignalDecoder"
      },
      "min": 1,
      "type": "list"
    },
    "SignalInformation": {
      "documentation": "<p>Information about a signal.</p>",
      "members": {
        "maxSampleCount": {
          "documentation": "<p>The maximum number of samples to collect.</p>",
          "shape": "maxSampleCount"
        },
        "minimumSamplingIntervalMs": {
          "documentation": "<p>The minimum duration of time (in milliseconds) between two triggering events to collect data.</p> <note> <p>If a signal changes often, you might want to collect data at a slower rate.</p> </note>",
          "shape": "uint32"
        },
        "name": {
          "documentation": "<p>The name of the signal.</p>",
          "shape": "wildcardSignalName"
        }
      },
      "required": [
        "name"
      ],
      "type": "structure"
    },
    "SignalInformationList": {
      "max": 1000,
      "member": {
        "shape": "SignalInformation"
      },
      "min": 0,
      "type": "list"
    },
    "SpoolingMode": {
      "enum": [
        "OFF",
        "TO_DISK"
      ],
      "type": "string"
    },
    "String": {
      "type": "string"
    },
    "Tag": {
      "documentation": "<p>A set of key/value pairs that are used to manage the resource.</p>",
      "members": {
        "Key": {
          "documentation": "<p>The tag's key.</p>",
          "shape": "TagKey"
        },
        "Value": {
          "documentation": "<p>The tag's value.</p>",
          "shape": "TagValue"
        }
      },
      "required": [
        "Key",
        "Value"
      ],
      "type": "structure"
    },
    "TagKey": {
      "max": 128,
      "min": 1,
      "type": "string"
    },
    "TagKeyList": {
      "max": 200,
      "member": {
        "shape": "TagKey"
      },
      "min": 0,
      "type": "list"
    },
    "TagList": {
      "max": 50,
      "member": {
        "shape": "Tag"
      },
      "min": 0,
      "type": "list"
    },
    "TagResourceRequest": {
      "members": {
        "ResourceARN": {
          "documentation": "<p>The ARN of the resource.</p>",
          "shape": "AmazonResourceName"
        },
        "Tags": {
          "documentation": "<p>The new or modified tags for the resource.</p>",
          "shape": "TagList"
        }
      },
      "required": [
        "ResourceARN",
        "Tags"
      ],
      "type": "structure"
    },
    "TagResourceResponse": {
      "members": {},
      "type": "structure"
    },
    "TagValue": {
      "max": 256,
      "min": 0,
      "type": "string"
    },
    "ThrottlingException": {
      "documentation": "<p>The request couldn't be completed due to throttling.</p>",
      "exception": true,
      "members": {
        "message": {
          "shape": "string"
        },
        "quotaCode": {
          "documentation": "<p>The quota identifier of the applied throttling rules for this request.</p>",
          "shape": "string"
        },
        "retryAfterSeconds": {
          "documentation": "<p>The number of seconds to wait before retrying the command.</p>",
          "shape": "RetryAfterSeconds"
        },
        "serviceCode": {
          "documentation": "<p>The code for the service that couldn't be completed due to throttling.</p>",
          "shape": "string"
        }
      },
      "required": [
        "message"
      ],
      "type": "structure"
    },
    "TimeBasedCollectionScheme": {
      "documentation": "<p>Information about a collection scheme that uses a time period to decide how often to collect data.</p>",
      "members": {
        "periodMs": {
          "documentation": "<p>The time period (in milliseconds) to decide how often to collect data. For example, if the time period is <code>60000</code>, the Edge Agent software collects data once every minute.</p>",
          "shape": "collectionPeriodMs"
        }
      },
      "required": [
        "periodMs"
      ],
      "type": "structure"
    },
    "TimestreamDatabaseName": {
      "max": 255,
      "min": 3,
      "pattern": "[a-zA-Z0-9_.-]+",
      "type": "string"
    },
    "TimestreamRegistrationResponse": {
      "documentation": "<p>Information about the registered Amazon Timestream resources or errors, if any.</p>",
      "members": {
        "errorMessage": {
          "documentation": "<p>A message associated with a registration error.</p>",
          "shape": "errorMessage"
        },
        "registrationStatus": {
          "documentation": "<p>The status of registering your Amazon Timestream resources. The status can be one of <code>REGISTRATION_SUCCESS</code>, <code>REGISTRATION_PENDING</code>, <code>REGISTRATION_FAILURE</code>.</p>",
          "shape": "RegistrationStatus"
        },
        "timestreamDatabaseArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the Timestream database.</p>",
          "shape": "arn"
        },
        "timestreamDatabaseName": {
          "documentation": "<p>The name of the Timestream database.</p>",
          "shape": "TimestreamDatabaseName"
        },
        "timestreamTableArn": {
          "documentation": "<p>The ARN of the Timestream database table.</p>",
          "shape": "arn"
        },
        "timestreamTableName": {
          "documentation": "<p>The name of the Timestream database table.</p>",
          "shape": "TimestreamTableName"
        }
      },
      "required": [
        "timestreamDatabaseName",
        "timestreamTableName",
        "registrationStatus"
      ],
      "type": "structure"
    },
    "TimestreamResources": {
      "documentation": "<p>The registered Amazon Timestream resources that Amazon Web Services IoT FleetWise edge agent software can transfer your vehicle data to.</p>",
      "members": {
        "timestreamDatabaseName": {
          "documentation": "<p>The name of the registered Amazon Timestream database.</p>",
          "shape": "TimestreamDatabaseName"
        },
        "timestreamTableName": {
          "documentation": "<p>The name of the registered Amazon Timestream database table.</p>",
          "shape": "TimestreamTableName"
        }
      },
      "required": [
        "timestreamDatabaseName",
        "timestreamTableName"
      ],
      "type": "structure"
    },
    "TimestreamTableName": {
      "max": 255,
      "min": 3,
      "pattern": "[a-zA-Z0-9_.-]+",
      "type": "string"
    },
    "TriggerMode": {
      "enum": [
        "ALWAYS",
        "RISING_EDGE"
      ],
      "type": "string"
    },
    "UntagResourceRequest": {
      "members": {
        "ResourceARN": {
          "documentation": "<p>The ARN of the resource.</p>",
          "shape": "AmazonResourceName"
        },
        "TagKeys": {
          "documentation": "<p>A list of the keys of the tags to be removed from the resource.</p>",
          "shape": "TagKeyList"
        }
      },
      "required": [
        "ResourceARN",
        "TagKeys"
      ],
      "type": "structure"
    },
    "UntagResourceResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateCampaignAction": {
      "enum": [
        "APPROVE",
        "SUSPEND",
        "RESUME",
        "UPDATE"
      ],
      "type": "string"
    },
    "UpdateCampaignRequest": {
      "members": {
        "action": {
          "documentation": "<p> Specifies how to update a campaign. The action can be one of the following:</p> <ul> <li> <p> <code>APPROVE</code> - To approve delivering a data collection scheme to vehicles. </p> </li> <li> <p> <code>SUSPEND</code> - To suspend collecting signal data. </p> </li> <li> <p> <code>RESUME</code> - To resume collecting signal data. </p> </li> <li> <p> <code>UPDATE</code> - To update a campaign. </p> </li> </ul>",
          "shape": "UpdateCampaignAction"
        },
        "dataExtraDimensions": {
          "documentation": "<p> A list of vehicle attributes to associate with a signal. </p> <p>Default: An empty array</p>",
          "shape": "DataExtraDimensionNodePathList"
        },
        "description": {
          "documentation": "<p>The description of the campaign.</p>",
          "shape": "description"
        },
        "name": {
          "documentation": "<p> The name of the campaign to update. </p>",
          "shape": "campaignName"
        }
      },
      "required": [
        "name",
        "action"
      ],
      "type": "structure"
    },
    "UpdateCampaignResponse": {
      "members": {
        "arn": {
          "documentation": "<p> The Amazon Resource Name (ARN) of the campaign. </p>",
          "shape": "arn"
        },
        "name": {
          "documentation": "<p>The name of the updated campaign.</p>",
          "shape": "campaignName"
        },
        "status": {
          "documentation": "<p>The state of a campaign. The status can be one of:</p> <ul> <li> <p> <code>CREATING</code> - Amazon Web Services IoT FleetWise is processing your request to create the campaign. </p> </li> <li> <p> <code>WAITING_FOR_APPROVAL</code> - After a campaign is created, it enters the <code>WAITING_FOR_APPROVAL</code> state. To allow Amazon Web Services IoT FleetWise to deploy the campaign to the target vehicle or fleet, use the API operation to approve the campaign. </p> </li> <li> <p> <code>RUNNING</code> - The campaign is active. </p> </li> <li> <p> <code>SUSPENDED</code> - The campaign is suspended. To resume the campaign, use the API operation. </p> </li> </ul>",
          "shape": "CampaignStatus"
        }
      },
      "type": "structure"
    },
    "UpdateDecoderManifestRequest": {
      "members": {
        "description": {
          "documentation": "<p> A brief description of the decoder manifest to update. </p>",
          "shape": "description"
        },
        "name": {
          "documentation": "<p> The name of the decoder manifest to update.</p>",
          "shape": "resourceName"
        },
        "networkInterfacesToAdd": {
          "documentation": "<p> A list of information about the network interfaces to add to the decoder manifest. </p>",
          "shape": "NetworkInterfaces"
        },
        "networkInterfacesToRemove": {
          "documentation": "<p> A list of network interfaces to remove from the decoder manifest.</p>",
          "shape": "InterfaceIds"
        },
        "networkInterfacesToUpdate": {
          "documentation": "<p> A list of information about the network interfaces to update in the decoder manifest. </p>",
          "shape": "NetworkInterfaces"
        },
        "signalDecodersToAdd": {
          "documentation": "<p> A list of information about decoding additional signals to add to the decoder manifest. </p>",
          "shape": "SignalDecoders"
        },
        "signalDecodersToRemove": {
          "documentation": "<p> A list of signal decoders to remove from the decoder manifest. </p>",
          "shape": "Fqns"
        },
        "signalDecodersToUpdate": {
          "documentation": "<p> A list of updated information about decoding signals to update in the decoder manifest. </p>",
          "shape": "SignalDecoders"
        },
        "status": {
          "documentation": "<p> The state of the decoder manifest. If the status is <code>ACTIVE</code>, the decoder manifest can't be edited. If the status is <code>DRAFT</code>, you can edit the decoder manifest. </p>",
          "shape": "ManifestStatus"
        }
      },
      "required": [
        "name"
      ],
      "type": "structure"
    },
    "UpdateDecoderManifestResponse": {
      "members": {
        "arn": {
          "documentation": "<p> The Amazon Resource Name (ARN) of the updated decoder manifest. </p>",
          "shape": "arn"
        },
        "name": {
          "documentation": "<p> The name of the updated decoder manifest. </p>",
          "shape": "resourceName"
        }
      },
      "required": [
        "name",
        "arn"
      ],
      "type": "structure"
    },
    "UpdateFleetRequest": {
      "members": {
        "description": {
          "documentation": "<p> An updated description of the fleet. </p>",
          "shape": "description"
        },
        "fleetId": {
          "documentation": "<p> The ID of the fleet to update. </p>",
          "shape": "fleetId"
        }
      },
      "required": [
        "fleetId"
      ],
      "type": "structure"
    },
    "UpdateFleetResponse": {
      "members": {
        "arn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the updated fleet.</p>",
          "shape": "arn"
        },
        "id": {
          "documentation": "<p>The ID of the updated fleet.</p>",
          "shape": "fleetId"
        }
      },
      "type": "structure"
    },
    "UpdateMode": {
      "enum": [
        "Overwrite",
        "Merge"
      ],
      "type": "string"
    },
    "UpdateModelManifestRequest": {
      "members": {
        "description": {
          "documentation": "<p> A brief description of the vehicle model. </p>",
          "shape": "description"
        },
        "name": {
          "documentation": "<p> The name of the vehicle model to update. </p>",
          "shape": "resourceName"
        },
        "nodesToAdd": {
          "documentation": "<p> A list of <code>fullyQualifiedName</code> of nodes, which are a general abstraction of signals, to add to the vehicle model. </p>",
          "shape": "NodePaths"
        },
        "nodesToRemove": {
          "documentation": "<p> A list of <code>fullyQualifiedName</code> of nodes, which are a general abstraction of signals, to remove from the vehicle model. </p>",
          "shape": "NodePaths"
        },
        "status": {
          "documentation": "<p> The state of the vehicle model. If the status is <code>ACTIVE</code>, the vehicle model can't be edited. If the status is <code>DRAFT</code>, you can edit the vehicle model. </p>",
          "shape": "ManifestStatus"
        }
      },
      "required": [
        "name"
      ],
      "type": "structure"
    },
    "UpdateModelManifestResponse": {
      "members": {
        "arn": {
          "documentation": "<p> The Amazon Resource Name (ARN) of the updated vehicle model. </p>",
          "shape": "arn"
        },
        "name": {
          "documentation": "<p> The name of the updated vehicle model. </p>",
          "shape": "resourceName"
        }
      },
      "required": [
        "name",
        "arn"
      ],
      "type": "structure"
    },
    "UpdateSignalCatalogRequest": {
      "members": {
        "description": {
          "documentation": "<p> A brief description of the signal catalog to update.</p>",
          "shape": "description"
        },
        "name": {
          "documentation": "<p> The name of the signal catalog to update. </p>",
          "shape": "resourceName"
        },
        "nodesToAdd": {
          "documentation": "<p> A list of information about nodes to add to the signal catalog. </p>",
          "shape": "Nodes"
        },
        "nodesToRemove": {
          "documentation": "<p> A list of <code>fullyQualifiedName</code> of nodes to remove from the signal catalog. </p>",
          "shape": "NodePaths"
        },
        "nodesToUpdate": {
          "documentation": "<p> A list of information about nodes to update in the signal catalog. </p>",
          "shape": "Nodes"
        }
      },
      "required": [
        "name"
      ],
      "type": "structure"
    },
    "UpdateSignalCatalogResponse": {
      "members": {
        "arn": {
          "documentation": "<p> The ARN of the updated signal catalog. </p>",
          "shape": "arn"
        },
        "name": {
          "documentation": "<p> The name of the updated signal catalog. </p>",
          "shape": "resourceName"
        }
      },
      "required": [
        "name",
        "arn"
      ],
      "type": "structure"
    },
    "UpdateVehicleError": {
      "documentation": "<p>An HTTP error resulting from updating the description for a vehicle.</p>",
      "members": {
        "code": {
          "documentation": "<p>The relevant HTTP error code (400+).</p>",
          "shape": "number"
        },
        "message": {
          "documentation": "<p>A message associated with the error.</p>",
          "shape": "string"
        },
        "vehicleName": {
          "documentation": "<p>The ID of the vehicle with the error.</p>",
          "shape": "vehicleName"
        }
      },
      "type": "structure"
    },
    "UpdateVehicleRequest": {
      "members": {
        "attributeUpdateMode": {
          "documentation": "<p>The method the specified attributes will update the existing attributes on the vehicle. Use<code>Overwite</code> to replace the vehicle attributes with the specified attributes. Or use <code>Merge</code> to combine all attributes.</p> <p>This is required if attributes are present in the input.</p>",
          "shape": "UpdateMode"
        },
        "attributes": {
          "documentation": "<p>Static information about a vehicle in a key-value pair. For example:</p> <p> <code>\"engineType\"</code> : <code>\"1.3 L R2\"</code> </p>",
          "shape": "attributesMap"
        },
        "decoderManifestArn": {
          "documentation": "<p>The ARN of the decoder manifest associated with this vehicle.</p>",
          "shape": "arn"
        },
        "modelManifestArn": {
          "documentation": "<p>The ARN of a vehicle model (model manifest) associated with the vehicle.</p>",
          "shape": "arn"
        },
        "vehicleName": {
          "documentation": "<p>The unique ID of the vehicle to update.</p>",
          "shape": "vehicleName"
        }
      },
      "required": [
        "vehicleName"
      ],
      "type": "structure"
    },
    "UpdateVehicleRequestItem": {
      "documentation": "<p>Information about the vehicle to update.</p>",
      "members": {
        "attributeUpdateMode": {
          "documentation": "<p>The method the specified attributes will update the existing attributes on the vehicle. Use<code>Overwite</code> to replace the vehicle attributes with the specified attributes. Or use <code>Merge</code> to combine all attributes.</p> <p>This is required if attributes are present in the input.</p>",
          "shape": "UpdateMode"
        },
        "attributes": {
          "documentation": "<p>Static information about a vehicle in a key-value pair. For example:</p> <p> <code>\"engineType\"</code> : <code>\"1.3 L R2\"</code> </p>",
          "shape": "attributesMap"
        },
        "decoderManifestArn": {
          "documentation": "<p>The ARN of the signal decoder manifest associated with the vehicle to update.</p>",
          "shape": "arn"
        },
        "modelManifestArn": {
          "documentation": "<p>The ARN of the vehicle model (model manifest) associated with the vehicle to update.</p>",
          "shape": "arn"
        },
        "vehicleName": {
          "documentation": "<p>The unique ID of the vehicle to update.</p>",
          "shape": "vehicleName"
        }
      },
      "required": [
        "vehicleName"
      ],
      "type": "structure"
    },
    "UpdateVehicleResponse": {
      "members": {
        "arn": {
          "documentation": "<p>The ARN of the updated vehicle.</p>",
          "shape": "arn"
        },
        "vehicleName": {
          "documentation": "<p>The ID of the updated vehicle.</p>",
          "shape": "vehicleName"
        }
      },
      "type": "structure"
    },
    "UpdateVehicleResponseItem": {
      "documentation": "<p>Information about the updated vehicle.</p>",
      "members": {
        "arn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the updated vehicle.</p>",
          "shape": "arn"
        },
        "vehicleName": {
          "documentation": "<p>The unique ID of the updated vehicle.</p>",
          "shape": "vehicleName"
        }
      },
      "type": "structure"
    },
    "ValidationException": {
      "documentation": "<p>The input fails to satisfy the constraints specified by an Amazon Web Services service.</p>",
      "exception": true,
      "members": {
        "fieldList": {
          "documentation": "<p>The list of fields that fail to satisfy the constraints specified by an Amazon Web Services service.</p>",
          "shape": "ValidationExceptionFieldList"
        },
        "message": {
          "shape": "string"
        },
        "reason": {
          "documentation": "<p>The reason the input failed to satisfy the constraints specified by an Amazon Web Services service.</p>",
          "shape": "ValidationExceptionReason"
        }
      },
      "required": [
        "message"
      ],
      "type": "structure"
    },
    "ValidationExceptionField": {
      "documentation": "<p>A validation error due to mismatch between the expected data type, length, or pattern of the parameter and the input.</p>",
      "members": {
        "message": {
          "documentation": "<p>A message about the validation error.</p>",
          "shape": "String"
        },
        "name": {
          "documentation": "<p>The name of the parameter field with the validation error.</p>",
          "shape": "String"
        }
      },
      "required": [
        "name",
        "message"
      ],
      "type": "structure"
    },
    "ValidationExceptionFieldList": {
      "member": {
        "shape": "ValidationExceptionField"
      },
      "type": "list"
    },
    "ValidationExceptionReason": {
      "enum": [
        "unknownOperation",
        "cannotParse",
        "fieldValidationFailed",
        "other"
      ],
      "type": "string"
    },
    "VehicleAssociationBehavior": {
      "enum": [
        "CreateIotThing",
        "ValidateIotThingExists"
      ],
      "type": "string"
    },
    "VehicleState": {
      "enum": [
        "CREATED",
        "READY",
        "HEALTHY",
        "SUSPENDED",
        "DELETING"
      ],
      "type": "string"
    },
    "VehicleStatus": {
      "documentation": "<p>Information about the state of a vehicle and how it relates to the status of a campaign.</p>",
      "members": {
        "campaignName": {
          "documentation": "<p>The name of a campaign.</p>",
          "shape": "string"
        },
        "status": {
          "documentation": "<p>The state of a vehicle, which can be one of the following:</p> <ul> <li> <p> <code>CREATED</code> - Amazon Web Services IoT FleetWise sucessfully created the vehicle. </p> </li> <li> <p> <code>READY</code> - The vehicle is ready to receive a campaign deployment. </p> </li> <li> <p> <code>HEALTHY</code> - A campaign deployment was delivered to the vehicle. </p> </li> <li> <p> <code>SUSPENDED</code> - A campaign associated with the vehicle was suspended and data collection was paused. </p> </li> <li> <p> <code>DELETING</code> - Amazon Web Services IoT FleetWise is removing a campaign from the vehicle. </p> </li> </ul>",
          "shape": "VehicleState"
        },
        "vehicleName": {
          "documentation": "<p>The unique ID of the vehicle.</p>",
          "shape": "vehicleName"
        }
      },
      "type": "structure"
    },
    "VehicleStatusList": {
      "member": {
        "shape": "VehicleStatus"
      },
      "type": "list"
    },
    "VehicleSummary": {
      "documentation": "<p>Information about a vehicle.</p> <p>To return this information about vehicles in your account, you can use the API operation.</p>",
      "members": {
        "arn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the vehicle.</p>",
          "shape": "arn"
        },
        "creationTime": {
          "documentation": "<p>The time the vehicle was created in seconds since epoch (January 1, 1970 at midnight UTC time).</p>",
          "shape": "timestamp"
        },
        "decoderManifestArn": {
          "documentation": "<p>The ARN of a decoder manifest associated with the vehicle.</p>",
          "shape": "arn"
        },
        "lastModificationTime": {
          "documentation": "<p>The time the vehicle was last updated in seconds since epoch (January 1, 1970 at midnight UTC time). </p>",
          "shape": "timestamp"
        },
        "modelManifestArn": {
          "documentation": "<p>The ARN of a vehicle model (model manifest) associated with the vehicle.</p>",
          "shape": "arn"
        },
        "vehicleName": {
          "documentation": "<p>The unique ID of the vehicle.</p>",
          "shape": "vehicleName"
        }
      },
      "required": [
        "vehicleName",
        "arn",
        "modelManifestArn",
        "decoderManifestArn",
        "creationTime",
        "lastModificationTime"
      ],
      "type": "structure"
    },
    "arn": {
      "type": "string"
    },
    "attributeName": {
      "max": 150,
      "min": 1,
      "pattern": "[a-zA-Z0-9_.-]+",
      "type": "string"
    },
    "attributeValue": {
      "type": "string"
    },
    "attributesMap": {
      "key": {
        "shape": "attributeName"
      },
      "type": "map",
      "value": {
        "shape": "attributeValue"
      }
    },
    "boolean": {
      "type": "boolean"
    },
    "campaignName": {
      "max": 100,
      "min": 1,
      "pattern": "[a-zA-Z\\d\\-_:]+",
      "type": "string"
    },
    "campaignSummaries": {
      "member": {
        "shape": "CampaignSummary"
      },
      "type": "list"
    },
    "collectionPeriodMs": {
      "box": true,
      "max": 60000,
      "min": 10000,
      "type": "long"
    },
    "createVehicleErrors": {
      "member": {
        "shape": "CreateVehicleError"
      },
      "type": "list"
    },
    "createVehicleRequestItems": {
      "member": {
        "shape": "CreateVehicleRequestItem"
      },
      "type": "list"
    },
    "createVehicleResponses": {
      "member": {
        "shape": "CreateVehicleResponseItem"
      },
      "type": "list"
    },
    "customerAccountId": {
      "type": "string"
    },
    "decoderManifestSummaries": {
      "member": {
        "shape": "DecoderManifestSummary"
      },
      "type": "list"
    },
    "description": {
      "max": 2048,
      "min": 1,
      "pattern": "[^\\u0000-\\u001F\\u007F]+",
      "type": "string"
    },
    "double": {
      "box": true,
      "type": "double"
    },
    "errorMessage": {
      "type": "string"
    },
    "eventExpression": {
      "max": 2048,
      "min": 1,
      "type": "string"
    },
    "fleetId": {
      "max": 100,
      "min": 1,
      "pattern": "[a-zA-Z0-9:_-]+",
      "type": "string"
    },
    "fleetSummaries": {
      "member": {
        "shape": "FleetSummary"
      },
      "type": "list"
    },
    "fleets": {
      "member": {
        "shape": "fleetId"
      },
      "type": "list"
    },
    "languageVersion": {
      "box": true,
      "min": 1,
      "type": "integer"
    },
    "listOfStrings": {
      "member": {
        "shape": "string"
      },
      "type": "list"
    },
    "listVehiclesMaxResults": {
      "box": true,
      "max": 100,
      "min": 1,
      "type": "integer"
    },
    "maxResults": {
      "box": true,
      "max": 100,
      "min": 1,
      "type": "integer"
    },
    "maxSampleCount": {
      "box": true,
      "max": 4294967295,
      "min": 1,
      "type": "long"
    },
    "modelManifestSummaries": {
      "member": {
        "shape": "ModelManifestSummary"
      },
      "type": "list"
    },
    "nextToken": {
      "max": 4096,
      "min": 1,
      "type": "string"
    },
    "nonNegativeInteger": {
      "min": 0,
      "type": "integer"
    },
    "number": {
      "type": "integer"
    },
    "positiveInteger": {
      "min": 1,
      "type": "integer"
    },
    "priority": {
      "box": true,
      "min": 0,
      "type": "integer"
    },
    "resourceName": {
      "max": 100,
      "min": 1,
      "pattern": "[a-zA-Z\\d\\-_:]+",
      "type": "string"
    },
    "signalCatalogSummaries": {
      "member": {
        "shape": "SignalCatalogSummary"
      },
      "type": "list"
    },
    "status": {
      "type": "string"
    },
    "string": {
      "type": "string"
    },
    "timestamp": {
      "type": "timestamp"
    },
    "uint32": {
      "box": true,
      "max": 4294967295,
      "min": 0,
      "type": "long"
    },
    "updateVehicleErrors": {
      "member": {
        "shape": "UpdateVehicleError"
      },
      "type": "list"
    },
    "updateVehicleRequestItems": {
      "member": {
        "shape": "UpdateVehicleRequestItem"
      },
      "type": "list"
    },
    "updateVehicleResponseItems": {
      "member": {
        "shape": "UpdateVehicleResponseItem"
      },
      "type": "list"
    },
    "vehicleName": {
      "max": 100,
      "min": 1,
      "pattern": "[a-zA-Z\\d\\-_:]+",
      "type": "string"
    },
    "vehicleSummaries": {
      "member": {
        "shape": "VehicleSummary"
      },
      "type": "list"
    },
    "vehicles": {
      "member": {
        "shape": "vehicleName"
      },
      "type": "list"
    },
    "wildcardSignalName": {
      "max": 150,
      "min": 1,
      "pattern": "[\\w|*|-]+(\\.[\\w|*|-]+)*",
      "type": "string"
    }
  },
  "version": "2.0"
}
