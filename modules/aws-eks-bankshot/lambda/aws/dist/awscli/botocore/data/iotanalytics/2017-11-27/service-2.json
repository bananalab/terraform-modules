{
  "documentation": "<p>IoT Analytics allows you to collect large amounts of device data, process messages, and store them. You can then query the data and run sophisticated analytics on it. IoT Analytics enables advanced data exploration through integration with Jupyter Notebooks and data visualization through integration with Amazon QuickSight.</p> <p>Traditional analytics and business intelligence tools are designed to process structured data. IoT data often comes from devices that record noisy processes (such as temperature, motion, or sound). As a result the data from these devices can have significant gaps, corrupted messages, and false readings that must be cleaned up before analysis can occur. Also, IoT data is often only meaningful in the context of other data from external sources. </p> <p>IoT Analytics automates the steps required to analyze data from IoT devices. IoT Analytics filters, transforms, and enriches IoT data before storing it in a time-series data store for analysis. You can set up the service to collect only the data you need from your devices, apply mathematical transforms to process the data, and enrich the data with device-specific metadata such as device type and location before storing it. Then, you can analyze your data by running queries using the built-in SQL query engine, or perform more complex analytics and machine learning inference. IoT Analytics includes pre-built models for common IoT use cases so you can answer questions like which devices are about to fail or which customers are at risk of abandoning their wearable devices.</p>",
  "metadata": {
    "apiVersion": "2017-11-27",
    "endpointPrefix": "iotanalytics",
    "protocol": "rest-json",
    "serviceFullName": "AWS IoT Analytics",
    "serviceId": "IoTAnalytics",
    "signatureVersion": "v4",
    "signingName": "iotanalytics",
    "uid": "iotanalytics-2017-11-27"
  },
  "operations": {
    "BatchPutMessage": {
      "documentation": "<p>Sends messages to a channel.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/messages/batch",
        "responseCode": 200
      },
      "input": {
        "shape": "BatchPutMessageRequest"
      },
      "name": "BatchPutMessage",
      "output": {
        "shape": "BatchPutMessageResponse"
      }
    },
    "CancelPipelineReprocessing": {
      "documentation": "<p>Cancels the reprocessing of data through the pipeline.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/pipelines/{pipelineName}/reprocessing/{reprocessingId}"
      },
      "input": {
        "shape": "CancelPipelineReprocessingRequest"
      },
      "name": "CancelPipelineReprocessing",
      "output": {
        "shape": "CancelPipelineReprocessingResponse"
      }
    },
    "CreateChannel": {
      "documentation": "<p>Used to create a channel. A channel collects data from an MQTT topic and archives the raw, unprocessed messages before publishing the data to a pipeline.</p>",
      "errors": [
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "ResourceAlreadyExistsException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "LimitExceededException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/channels",
        "responseCode": 201
      },
      "input": {
        "shape": "CreateChannelRequest"
      },
      "name": "CreateChannel",
      "output": {
        "shape": "CreateChannelResponse"
      }
    },
    "CreateDataset": {
      "documentation": "<p>Used to create a dataset. A dataset stores data retrieved from a data store by applying a <code>queryAction</code> (a SQL query) or a <code>containerAction</code> (executing a containerized application). This operation creates the skeleton of a dataset. The dataset can be populated manually by calling <code>CreateDatasetContent</code> or automatically according to a trigger you specify.</p>",
      "errors": [
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "ResourceAlreadyExistsException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "LimitExceededException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/datasets",
        "responseCode": 201
      },
      "input": {
        "shape": "CreateDatasetRequest"
      },
      "name": "CreateDataset",
      "output": {
        "shape": "CreateDatasetResponse"
      }
    },
    "CreateDatasetContent": {
      "documentation": "<p>Creates the content of a dataset by applying a <code>queryAction</code> (a SQL query) or a <code>containerAction</code> (executing a containerized application).</p>",
      "errors": [
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/datasets/{datasetName}/content"
      },
      "input": {
        "shape": "CreateDatasetContentRequest"
      },
      "name": "CreateDatasetContent",
      "output": {
        "shape": "CreateDatasetContentResponse"
      }
    },
    "CreateDatastore": {
      "documentation": "<p>Creates a data store, which is a repository for messages.</p>",
      "errors": [
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "ResourceAlreadyExistsException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "LimitExceededException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/datastores",
        "responseCode": 201
      },
      "input": {
        "shape": "CreateDatastoreRequest"
      },
      "name": "CreateDatastore",
      "output": {
        "shape": "CreateDatastoreResponse"
      }
    },
    "CreatePipeline": {
      "documentation": "<p>Creates a pipeline. A pipeline consumes messages from a channel and allows you to process the messages before storing them in a data store. You must specify both a <code>channel</code> and a <code>datastore</code> activity and, optionally, as many as 23 additional activities in the <code>pipelineActivities</code> array.</p>",
      "errors": [
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "ResourceAlreadyExistsException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "LimitExceededException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/pipelines",
        "responseCode": 201
      },
      "input": {
        "shape": "CreatePipelineRequest"
      },
      "name": "CreatePipeline",
      "output": {
        "shape": "CreatePipelineResponse"
      }
    },
    "DeleteChannel": {
      "documentation": "<p>Deletes the specified channel.</p>",
      "errors": [
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/channels/{channelName}",
        "responseCode": 204
      },
      "input": {
        "shape": "DeleteChannelRequest"
      },
      "name": "DeleteChannel"
    },
    "DeleteDataset": {
      "documentation": "<p>Deletes the specified dataset.</p> <p>You do not have to delete the content of the dataset before you perform this operation.</p>",
      "errors": [
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/datasets/{datasetName}",
        "responseCode": 204
      },
      "input": {
        "shape": "DeleteDatasetRequest"
      },
      "name": "DeleteDataset"
    },
    "DeleteDatasetContent": {
      "documentation": "<p>Deletes the content of the specified dataset.</p>",
      "errors": [
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/datasets/{datasetName}/content",
        "responseCode": 204
      },
      "input": {
        "shape": "DeleteDatasetContentRequest"
      },
      "name": "DeleteDatasetContent"
    },
    "DeleteDatastore": {
      "documentation": "<p>Deletes the specified data store.</p>",
      "errors": [
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/datastores/{datastoreName}",
        "responseCode": 204
      },
      "input": {
        "shape": "DeleteDatastoreRequest"
      },
      "name": "DeleteDatastore"
    },
    "DeletePipeline": {
      "documentation": "<p>Deletes the specified pipeline.</p>",
      "errors": [
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/pipelines/{pipelineName}",
        "responseCode": 204
      },
      "input": {
        "shape": "DeletePipelineRequest"
      },
      "name": "DeletePipeline"
    },
    "DescribeChannel": {
      "documentation": "<p>Retrieves information about a channel.</p>",
      "errors": [
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/channels/{channelName}"
      },
      "input": {
        "shape": "DescribeChannelRequest"
      },
      "name": "DescribeChannel",
      "output": {
        "shape": "DescribeChannelResponse"
      }
    },
    "DescribeDataset": {
      "documentation": "<p>Retrieves information about a dataset.</p>",
      "errors": [
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/datasets/{datasetName}"
      },
      "input": {
        "shape": "DescribeDatasetRequest"
      },
      "name": "DescribeDataset",
      "output": {
        "shape": "DescribeDatasetResponse"
      }
    },
    "DescribeDatastore": {
      "documentation": "<p>Retrieves information about a data store.</p>",
      "errors": [
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/datastores/{datastoreName}"
      },
      "input": {
        "shape": "DescribeDatastoreRequest"
      },
      "name": "DescribeDatastore",
      "output": {
        "shape": "DescribeDatastoreResponse"
      }
    },
    "DescribeLoggingOptions": {
      "documentation": "<p>Retrieves the current settings of the IoT Analytics logging options.</p>",
      "errors": [
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/logging"
      },
      "input": {
        "shape": "DescribeLoggingOptionsRequest"
      },
      "name": "DescribeLoggingOptions",
      "output": {
        "shape": "DescribeLoggingOptionsResponse"
      }
    },
    "DescribePipeline": {
      "documentation": "<p>Retrieves information about a pipeline.</p>",
      "errors": [
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/pipelines/{pipelineName}"
      },
      "input": {
        "shape": "DescribePipelineRequest"
      },
      "name": "DescribePipeline",
      "output": {
        "shape": "DescribePipelineResponse"
      }
    },
    "GetDatasetContent": {
      "documentation": "<p>Retrieves the contents of a dataset as presigned URIs.</p>",
      "errors": [
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/datasets/{datasetName}/content"
      },
      "input": {
        "shape": "GetDatasetContentRequest"
      },
      "name": "GetDatasetContent",
      "output": {
        "shape": "GetDatasetContentResponse"
      }
    },
    "ListChannels": {
      "documentation": "<p>Retrieves a list of channels.</p>",
      "errors": [
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/channels"
      },
      "input": {
        "shape": "ListChannelsRequest"
      },
      "name": "ListChannels",
      "output": {
        "shape": "ListChannelsResponse"
      }
    },
    "ListDatasetContents": {
      "documentation": "<p>Lists information about dataset contents that have been created.</p>",
      "errors": [
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/datasets/{datasetName}/contents"
      },
      "input": {
        "shape": "ListDatasetContentsRequest"
      },
      "name": "ListDatasetContents",
      "output": {
        "shape": "ListDatasetContentsResponse"
      }
    },
    "ListDatasets": {
      "documentation": "<p>Retrieves information about datasets.</p>",
      "errors": [
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/datasets"
      },
      "input": {
        "shape": "ListDatasetsRequest"
      },
      "name": "ListDatasets",
      "output": {
        "shape": "ListDatasetsResponse"
      }
    },
    "ListDatastores": {
      "documentation": "<p>Retrieves a list of data stores.</p>",
      "errors": [
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/datastores"
      },
      "input": {
        "shape": "ListDatastoresRequest"
      },
      "name": "ListDatastores",
      "output": {
        "shape": "ListDatastoresResponse"
      }
    },
    "ListPipelines": {
      "documentation": "<p>Retrieves a list of pipelines.</p>",
      "errors": [
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/pipelines"
      },
      "input": {
        "shape": "ListPipelinesRequest"
      },
      "name": "ListPipelines",
      "output": {
        "shape": "ListPipelinesResponse"
      }
    },
    "ListTagsForResource": {
      "documentation": "<p>Lists the tags (metadata) that you have assigned to the resource.</p>",
      "errors": [
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "LimitExceededException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/tags"
      },
      "input": {
        "shape": "ListTagsForResourceRequest"
      },
      "name": "ListTagsForResource",
      "output": {
        "shape": "ListTagsForResourceResponse"
      }
    },
    "PutLoggingOptions": {
      "documentation": "<p>Sets or updates the IoT Analytics logging options.</p> <p>If you update the value of any <code>loggingOptions</code> field, it takes up to one minute for the change to take effect. Also, if you change the policy attached to the role you specified in the <code>roleArn</code> field (for example, to correct an invalid policy), it takes up to five minutes for that change to take effect. </p>",
      "errors": [
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/logging"
      },
      "input": {
        "shape": "PutLoggingOptionsRequest"
      },
      "name": "PutLoggingOptions"
    },
    "RunPipelineActivity": {
      "documentation": "<p>Simulates the results of running a pipeline activity on a message payload.</p>",
      "errors": [
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/pipelineactivities/run"
      },
      "input": {
        "shape": "RunPipelineActivityRequest"
      },
      "name": "RunPipelineActivity",
      "output": {
        "shape": "RunPipelineActivityResponse"
      }
    },
    "SampleChannelData": {
      "documentation": "<p>Retrieves a sample of messages from the specified channel ingested during the specified timeframe. Up to 10 messages can be retrieved.</p>",
      "errors": [
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/channels/{channelName}/sample"
      },
      "input": {
        "shape": "SampleChannelDataRequest"
      },
      "name": "SampleChannelData",
      "output": {
        "shape": "SampleChannelDataResponse"
      }
    },
    "StartPipelineReprocessing": {
      "documentation": "<p>Starts the reprocessing of raw message data through the pipeline.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ResourceAlreadyExistsException"
        },
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/pipelines/{pipelineName}/reprocessing"
      },
      "input": {
        "shape": "StartPipelineReprocessingRequest"
      },
      "name": "StartPipelineReprocessing",
      "output": {
        "shape": "StartPipelineReprocessingResponse"
      }
    },
    "TagResource": {
      "documentation": "<p>Adds to or modifies the tags of the given resource. Tags are metadata that can be used to manage a resource.</p>",
      "errors": [
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "LimitExceededException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/tags",
        "responseCode": 204
      },
      "input": {
        "shape": "TagResourceRequest"
      },
      "name": "TagResource",
      "output": {
        "shape": "TagResourceResponse"
      }
    },
    "UntagResource": {
      "documentation": "<p>Removes the given tags (metadata) from the resource.</p>",
      "errors": [
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "LimitExceededException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/tags",
        "responseCode": 204
      },
      "input": {
        "shape": "UntagResourceRequest"
      },
      "name": "UntagResource",
      "output": {
        "shape": "UntagResourceResponse"
      }
    },
    "UpdateChannel": {
      "documentation": "<p>Used to update the settings of a channel.</p>",
      "errors": [
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/channels/{channelName}"
      },
      "input": {
        "shape": "UpdateChannelRequest"
      },
      "name": "UpdateChannel"
    },
    "UpdateDataset": {
      "documentation": "<p>Updates the settings of a dataset.</p>",
      "errors": [
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/datasets/{datasetName}"
      },
      "input": {
        "shape": "UpdateDatasetRequest"
      },
      "name": "UpdateDataset"
    },
    "UpdateDatastore": {
      "documentation": "<p>Used to update the settings of a data store.</p>",
      "errors": [
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/datastores/{datastoreName}"
      },
      "input": {
        "shape": "UpdateDatastoreRequest"
      },
      "name": "UpdateDatastore"
    },
    "UpdatePipeline": {
      "documentation": "<p>Updates the settings of a pipeline. You must specify both a <code>channel</code> and a <code>datastore</code> activity and, optionally, as many as 23 additional activities in the <code>pipelineActivities</code> array.</p>",
      "errors": [
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalFailureException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "LimitExceededException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/pipelines/{pipelineName}"
      },
      "input": {
        "shape": "UpdatePipelineRequest"
      },
      "name": "UpdatePipeline"
    }
  },
  "shapes": {
    "ActivityBatchSize": {
      "max": 1000,
      "min": 1,
      "type": "integer"
    },
    "ActivityName": {
      "max": 128,
      "min": 1,
      "type": "string"
    },
    "AddAttributesActivity": {
      "documentation": "<p>An activity that adds other attributes based on existing attributes in the message.</p>",
      "members": {
        "attributes": {
          "documentation": "<p>A list of 1-50 <code>AttributeNameMapping</code> objects that map an existing attribute to a new attribute.</p> <note> <p>The existing attributes remain in the message, so if you want to remove the originals, use <code>RemoveAttributeActivity</code>.</p> </note>",
          "shape": "AttributeNameMapping"
        },
        "name": {
          "documentation": "<p>The name of the addAttributes activity.</p>",
          "shape": "ActivityName"
        },
        "next": {
          "documentation": "<p>The next activity in the pipeline.</p>",
          "shape": "ActivityName"
        }
      },
      "required": [
        "name",
        "attributes"
      ],
      "type": "structure"
    },
    "AttributeName": {
      "max": 256,
      "min": 1,
      "type": "string"
    },
    "AttributeNameMapping": {
      "key": {
        "shape": "AttributeName"
      },
      "max": 50,
      "min": 1,
      "type": "map",
      "value": {
        "shape": "AttributeName"
      }
    },
    "AttributeNames": {
      "max": 50,
      "member": {
        "shape": "AttributeName"
      },
      "min": 1,
      "type": "list"
    },
    "BatchPutMessageErrorEntries": {
      "member": {
        "shape": "BatchPutMessageErrorEntry"
      },
      "type": "list"
    },
    "BatchPutMessageErrorEntry": {
      "documentation": "<p>Contains informations about errors.</p>",
      "members": {
        "errorCode": {
          "documentation": "<p>The code associated with the error.</p>",
          "shape": "ErrorCode"
        },
        "errorMessage": {
          "documentation": "<p>The message associated with the error.</p>",
          "shape": "ErrorMessage"
        },
        "messageId": {
          "documentation": "<p>The ID of the message that caused the error. See the value corresponding to the <code>messageId</code> key in the message object.</p>",
          "shape": "MessageId"
        }
      },
      "type": "structure"
    },
    "BatchPutMessageRequest": {
      "members": {
        "channelName": {
          "documentation": "<p>The name of the channel where the messages are sent.</p>",
          "shape": "ChannelName"
        },
        "messages": {
          "documentation": "<p>The list of messages to be sent. Each message has the format: { \"messageId\": \"string\", \"payload\": \"string\"}.</p> <p>The field names of message payloads (data) that you send to IoT Analytics:</p> <ul> <li> <p>Must contain only alphanumeric characters and undescores (_). No other special characters are allowed.</p> </li> <li> <p>Must begin with an alphabetic character or single underscore (_).</p> </li> <li> <p>Cannot contain hyphens (-).</p> </li> <li> <p>In regular expression terms: \"^[A-Za-z_]([A-Za-z0-9]*|[A-Za-z0-9][A-Za-z0-9_]*)$\". </p> </li> <li> <p>Cannot be more than 255 characters.</p> </li> <li> <p>Are case insensitive. (Fields named foo and FOO in the same payload are considered duplicates.)</p> </li> </ul> <p>For example, {\"temp_01\": 29} or {\"_temp_01\": 29} are valid, but {\"temp-01\": 29}, {\"01_temp\": 29} or {\"__temp_01\": 29} are invalid in message payloads. </p>",
          "shape": "Messages"
        }
      },
      "required": [
        "channelName",
        "messages"
      ],
      "type": "structure"
    },
    "BatchPutMessageResponse": {
      "members": {
        "batchPutMessageErrorEntries": {
          "documentation": "<p>A list of any errors encountered when sending the messages to the channel.</p>",
          "shape": "BatchPutMessageErrorEntries"
        }
      },
      "type": "structure"
    },
    "BucketKeyExpression": {
      "max": 255,
      "min": 1,
      "pattern": "^[a-zA-Z0-9!_.*'()/{}:-]*$",
      "type": "string"
    },
    "BucketName": {
      "max": 255,
      "min": 3,
      "pattern": "^[a-zA-Z0-9.\\-_]*$",
      "type": "string"
    },
    "CancelPipelineReprocessingRequest": {
      "members": {
        "pipelineName": {
          "documentation": "<p>The name of pipeline for which data reprocessing is canceled.</p>",
          "location": "uri",
          "locationName": "pipelineName",
          "shape": "PipelineName"
        },
        "reprocessingId": {
          "documentation": "<p>The ID of the reprocessing task (returned by <code>StartPipelineReprocessing</code>).</p>",
          "location": "uri",
          "locationName": "reprocessingId",
          "shape": "ReprocessingId"
        }
      },
      "required": [
        "pipelineName",
        "reprocessingId"
      ],
      "type": "structure"
    },
    "CancelPipelineReprocessingResponse": {
      "members": {},
      "type": "structure"
    },
    "Channel": {
      "documentation": "<p>A collection of data from an MQTT topic. Channels archive the raw, unprocessed messages before publishing the data to a pipeline.</p>",
      "members": {
        "arn": {
          "documentation": "<p>The ARN of the channel.</p>",
          "shape": "ChannelArn"
        },
        "creationTime": {
          "documentation": "<p>When the channel was created.</p>",
          "shape": "Timestamp"
        },
        "lastMessageArrivalTime": {
          "documentation": "<p>The last time when a new message arrived in the channel.</p> <p>IoT Analytics updates this value at most once per minute for one channel. Hence, the <code>lastMessageArrivalTime</code> value is an approximation.</p> <p>This feature only applies to messages that arrived in the data store after October 23, 2020. </p>",
          "shape": "Timestamp"
        },
        "lastUpdateTime": {
          "documentation": "<p>When the channel was last updated.</p>",
          "shape": "Timestamp"
        },
        "name": {
          "documentation": "<p>The name of the channel.</p>",
          "shape": "ChannelName"
        },
        "retentionPeriod": {
          "documentation": "<p>How long, in days, message data is kept for the channel.</p>",
          "shape": "RetentionPeriod"
        },
        "status": {
          "documentation": "<p>The status of the channel.</p>",
          "shape": "ChannelStatus"
        },
        "storage": {
          "documentation": "<p>Where channel data is stored. You can choose one of <code>serviceManagedS3</code> or <code>customerManagedS3</code> storage. If not specified, the default is <code>serviceManagedS3</code>. You can't change this storage option after the channel is created.</p>",
          "shape": "ChannelStorage"
        }
      },
      "type": "structure"
    },
    "ChannelActivity": {
      "documentation": "<p>The activity that determines the source of the messages to be processed.</p>",
      "members": {
        "channelName": {
          "documentation": "<p>The name of the channel from which the messages are processed.</p>",
          "shape": "ChannelName"
        },
        "name": {
          "documentation": "<p>The name of the channel activity.</p>",
          "shape": "ActivityName"
        },
        "next": {
          "documentation": "<p>The next activity in the pipeline.</p>",
          "shape": "ActivityName"
        }
      },
      "required": [
        "name",
        "channelName"
      ],
      "type": "structure"
    },
    "ChannelArn": {
      "type": "string"
    },
    "ChannelMessages": {
      "documentation": "<p>Specifies one or more sets of channel messages.</p>",
      "members": {
        "s3Paths": {
          "documentation": "<p>Specifies one or more keys that identify the Amazon Simple Storage Service (Amazon S3) objects that save your channel messages.</p> <p>You must use the full path for the key.</p> <p>Example path: <code>channel/mychannel/__dt=2020-02-29 00:00:00/1582940490000_1582940520000_123456789012_mychannel_0_2118.0.json.gz</code> </p>",
          "shape": "S3PathChannelMessages"
        }
      },
      "type": "structure"
    },
    "ChannelName": {
      "max": 128,
      "min": 1,
      "pattern": "(^(?!_{2}))(^[a-zA-Z0-9_]+$)",
      "type": "string"
    },
    "ChannelStatistics": {
      "documentation": "<p>Statistics information about the channel.</p>",
      "members": {
        "size": {
          "documentation": "<p>The estimated size of the channel.</p>",
          "shape": "EstimatedResourceSize"
        }
      },
      "type": "structure"
    },
    "ChannelStatus": {
      "enum": [
        "CREATING",
        "ACTIVE",
        "DELETING"
      ],
      "type": "string"
    },
    "ChannelStorage": {
      "documentation": "<p>Where channel data is stored. You may choose one of <code>serviceManagedS3</code>, <code>customerManagedS3</code> storage. If not specified, the default is <code>serviceManagedS3</code>. This can't be changed after creation of the channel.</p>",
      "members": {
        "customerManagedS3": {
          "documentation": "<p>Used to store channel data in an S3 bucket that you manage. If customer managed storage is selected, the <code>retentionPeriod</code> parameter is ignored. You can't change the choice of S3 storage after the data store is created.</p>",
          "shape": "CustomerManagedChannelS3Storage"
        },
        "serviceManagedS3": {
          "documentation": "<p>Used to store channel data in an S3 bucket managed by IoT Analytics. You can't change the choice of S3 storage after the data store is created.</p>",
          "shape": "ServiceManagedChannelS3Storage"
        }
      },
      "type": "structure"
    },
    "ChannelStorageSummary": {
      "documentation": "<p>Where channel data is stored.</p>",
      "members": {
        "customerManagedS3": {
          "documentation": "<p>Used to store channel data in an S3 bucket that you manage.</p>",
          "shape": "CustomerManagedChannelS3StorageSummary"
        },
        "serviceManagedS3": {
          "documentation": "<p>Used to store channel data in an S3 bucket managed by IoT Analytics.</p>",
          "shape": "ServiceManagedChannelS3StorageSummary"
        }
      },
      "type": "structure"
    },
    "ChannelSummaries": {
      "member": {
        "shape": "ChannelSummary"
      },
      "type": "list"
    },
    "ChannelSummary": {
      "documentation": "<p>A summary of information about a channel.</p>",
      "members": {
        "channelName": {
          "documentation": "<p>The name of the channel.</p>",
          "shape": "ChannelName"
        },
        "channelStorage": {
          "documentation": "<p>Where channel data is stored.</p>",
          "shape": "ChannelStorageSummary"
        },
        "creationTime": {
          "documentation": "<p>When the channel was created.</p>",
          "shape": "Timestamp"
        },
        "lastMessageArrivalTime": {
          "documentation": "<p>The last time when a new message arrived in the channel.</p> <p>IoT Analytics updates this value at most once per minute for one channel. Hence, the <code>lastMessageArrivalTime</code> value is an approximation.</p> <p>This feature only applies to messages that arrived in the data store after October 23, 2020. </p>",
          "shape": "Timestamp"
        },
        "lastUpdateTime": {
          "documentation": "<p>The last time the channel was updated.</p>",
          "shape": "Timestamp"
        },
        "status": {
          "documentation": "<p>The status of the channel.</p>",
          "shape": "ChannelStatus"
        }
      },
      "type": "structure"
    },
    "Column": {
      "documentation": "<p>Contains information about a column that stores your data.</p>",
      "members": {
        "name": {
          "documentation": "<p>The name of the column.</p>",
          "shape": "ColumnName"
        },
        "type": {
          "documentation": "<p>The type of data. For more information about the supported data types, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-common.html\">Common data types</a> in the <i>Glue Developer Guide</i>.</p>",
          "shape": "ColumnDataType"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "structure"
    },
    "ColumnDataType": {
      "max": 131072,
      "min": 1,
      "pattern": "^[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*$",
      "type": "string"
    },
    "ColumnName": {
      "max": 255,
      "min": 1,
      "pattern": "^[A-Za-z_]([A-Za-z0-9]*|[A-Za-z0-9][A-Za-z0-9_]*)$",
      "type": "string"
    },
    "Columns": {
      "member": {
        "shape": "Column"
      },
      "type": "list"
    },
    "ComputeType": {
      "enum": [
        "ACU_1",
        "ACU_2"
      ],
      "type": "string"
    },
    "ContainerDatasetAction": {
      "documentation": "<p>Information required to run the <code>containerAction</code> to produce dataset contents.</p>",
      "members": {
        "executionRoleArn": {
          "documentation": "<p>The ARN of the role that gives permission to the system to access required resources to run the <code>containerAction</code>. This includes, at minimum, permission to retrieve the dataset contents that are the input to the containerized application.</p>",
          "shape": "RoleArn"
        },
        "image": {
          "documentation": "<p>The ARN of the Docker container stored in your account. The Docker container contains an application and required support libraries and is used to generate dataset contents.</p>",
          "shape": "Image"
        },
        "resourceConfiguration": {
          "documentation": "<p>Configuration of the resource that executes the <code>containerAction</code>.</p>",
          "shape": "ResourceConfiguration"
        },
        "variables": {
          "documentation": "<p>The values of variables used in the context of the execution of the containerized application (basically, parameters passed to the application). Each variable must have a name and a value given by one of <code>stringValue</code>, <code>datasetContentVersionValue</code>, or <code>outputFileUriValue</code>.</p>",
          "shape": "Variables"
        }
      },
      "required": [
        "image",
        "executionRoleArn",
        "resourceConfiguration"
      ],
      "type": "structure"
    },
    "CreateChannelRequest": {
      "members": {
        "channelName": {
          "documentation": "<p>The name of the channel.</p>",
          "shape": "ChannelName"
        },
        "channelStorage": {
          "documentation": "<p>Where channel data is stored. You can choose one of <code>serviceManagedS3</code> or <code>customerManagedS3</code> storage. If not specified, the default is <code>serviceManagedS3</code>. You can't change this storage option after the channel is created.</p>",
          "shape": "ChannelStorage"
        },
        "retentionPeriod": {
          "documentation": "<p>How long, in days, message data is kept for the channel. When <code>customerManagedS3</code> storage is selected, this parameter is ignored.</p>",
          "shape": "RetentionPeriod"
        },
        "tags": {
          "documentation": "<p>Metadata which can be used to manage the channel.</p>",
          "shape": "TagList"
        }
      },
      "required": [
        "channelName"
      ],
      "type": "structure"
    },
    "CreateChannelResponse": {
      "members": {
        "channelArn": {
          "documentation": "<p>The ARN of the channel.</p>",
          "shape": "ChannelArn"
        },
        "channelName": {
          "documentation": "<p>The name of the channel.</p>",
          "shape": "ChannelName"
        },
        "retentionPeriod": {
          "documentation": "<p>How long, in days, message data is kept for the channel.</p>",
          "shape": "RetentionPeriod"
        }
      },
      "type": "structure"
    },
    "CreateDatasetContentRequest": {
      "members": {
        "datasetName": {
          "documentation": "<p>The name of the dataset.</p>",
          "location": "uri",
          "locationName": "datasetName",
          "shape": "DatasetName"
        },
        "versionId": {
          "documentation": "<p>The version ID of the dataset content. To specify <code>versionId</code> for a dataset content, the dataset must use a <a href=\"https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html\">DeltaTimer</a> filter.</p>",
          "shape": "DatasetContentVersion"
        }
      },
      "required": [
        "datasetName"
      ],
      "type": "structure"
    },
    "CreateDatasetContentResponse": {
      "members": {
        "versionId": {
          "documentation": "<p>The version ID of the dataset contents that are being created.</p>",
          "shape": "DatasetContentVersion"
        }
      },
      "type": "structure"
    },
    "CreateDatasetRequest": {
      "members": {
        "actions": {
          "documentation": "<p>A list of actions that create the dataset contents.</p>",
          "shape": "DatasetActions"
        },
        "contentDeliveryRules": {
          "documentation": "<p>When dataset contents are created, they are delivered to destinations specified here.</p>",
          "shape": "DatasetContentDeliveryRules"
        },
        "datasetName": {
          "documentation": "<p>The name of the dataset.</p>",
          "shape": "DatasetName"
        },
        "lateDataRules": {
          "documentation": "<p>A list of data rules that send notifications to CloudWatch, when data arrives late. To specify <code>lateDataRules</code>, the dataset must use a <a href=\"https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html\">DeltaTimer</a> filter.</p>",
          "shape": "LateDataRules"
        },
        "retentionPeriod": {
          "documentation": "<p>Optional. How long, in days, versions of dataset contents are kept for the dataset. If not specified or set to <code>null</code>, versions of dataset contents are retained for at most 90 days. The number of versions of dataset contents retained is determined by the <code>versioningConfiguration</code> parameter. For more information, see <a href=\"https://docs.aws.amazon.com/iotanalytics/latest/userguide/getting-started.html#aws-iot-analytics-dataset-versions\"> Keeping Multiple Versions of IoT Analytics datasets</a> in the <i>IoT Analytics User Guide</i>.</p>",
          "shape": "RetentionPeriod"
        },
        "tags": {
          "documentation": "<p>Metadata which can be used to manage the dataset.</p>",
          "shape": "TagList"
        },
        "triggers": {
          "documentation": "<p>A list of triggers. A trigger causes dataset contents to be populated at a specified time interval or when another dataset's contents are created. The list of triggers can be empty or contain up to five <code>DataSetTrigger</code> objects.</p>",
          "shape": "DatasetTriggers"
        },
        "versioningConfiguration": {
          "documentation": "<p>Optional. How many versions of dataset contents are kept. If not specified or set to null, only the latest version plus the latest succeeded version (if they are different) are kept for the time period specified by the <code>retentionPeriod</code> parameter. For more information, see <a href=\"https://docs.aws.amazon.com/iotanalytics/latest/userguide/getting-started.html#aws-iot-analytics-dataset-versions\">Keeping Multiple Versions of IoT Analytics datasets</a> in the <i>IoT Analytics User Guide</i>.</p>",
          "shape": "VersioningConfiguration"
        }
      },
      "required": [
        "datasetName",
        "actions"
      ],
      "type": "structure"
    },
    "CreateDatasetResponse": {
      "members": {
        "datasetArn": {
          "documentation": "<p>The ARN of the dataset.</p>",
          "shape": "DatasetArn"
        },
        "datasetName": {
          "documentation": "<p>The name of the dataset.</p>",
          "shape": "DatasetName"
        },
        "retentionPeriod": {
          "documentation": "<p>How long, in days, dataset contents are kept for the dataset.</p>",
          "shape": "RetentionPeriod"
        }
      },
      "type": "structure"
    },
    "CreateDatastoreRequest": {
      "members": {
        "datastoreName": {
          "documentation": "<p>The name of the data store.</p>",
          "shape": "DatastoreName"
        },
        "datastorePartitions": {
          "documentation": "<p> Contains information about the partition dimensions in a data store. </p>",
          "shape": "DatastorePartitions"
        },
        "datastoreStorage": {
          "documentation": "<p>Where data in a data store is stored.. You can choose <code>serviceManagedS3</code> storage, <code>customerManagedS3</code> storage, or <code>iotSiteWiseMultiLayerStorage</code> storage. The default is <code>serviceManagedS3</code>. You can't change the choice of Amazon S3 storage after your data store is created. </p>",
          "shape": "DatastoreStorage"
        },
        "fileFormatConfiguration": {
          "documentation": "<p>Contains the configuration information of file formats. IoT Analytics data stores support JSON and <a href=\"https://parquet.apache.org/\">Parquet</a>.</p> <p>The default file format is JSON. You can specify only one format.</p> <p>You can't change the file format after you create the data store.</p>",
          "shape": "FileFormatConfiguration"
        },
        "retentionPeriod": {
          "documentation": "<p>How long, in days, message data is kept for the data store. When <code>customerManagedS3</code> storage is selected, this parameter is ignored.</p>",
          "shape": "RetentionPeriod"
        },
        "tags": {
          "documentation": "<p>Metadata which can be used to manage the data store.</p>",
          "shape": "TagList"
        }
      },
      "required": [
        "datastoreName"
      ],
      "type": "structure"
    },
    "CreateDatastoreResponse": {
      "members": {
        "datastoreArn": {
          "documentation": "<p>The ARN of the data store.</p>",
          "shape": "DatastoreArn"
        },
        "datastoreName": {
          "documentation": "<p>The name of the data store.</p>",
          "shape": "DatastoreName"
        },
        "retentionPeriod": {
          "documentation": "<p>How long, in days, message data is kept for the data store.</p>",
          "shape": "RetentionPeriod"
        }
      },
      "type": "structure"
    },
    "CreatePipelineRequest": {
      "members": {
        "pipelineActivities": {
          "documentation": "<p>A list of <code>PipelineActivity</code> objects. Activities perform transformations on your messages, such as removing, renaming or adding message attributes; filtering messages based on attribute values; invoking your Lambda unctions on messages for advanced processing; or performing mathematical transformations to normalize device data.</p> <p>The list can be 2-25 <code>PipelineActivity</code> objects and must contain both a <code>channel</code> and a <code>datastore</code> activity. Each entry in the list must contain only one activity. For example:</p> <p> <code>pipelineActivities = [ { \"channel\": { ... } }, { \"lambda\": { ... } }, ... ]</code> </p>",
          "shape": "PipelineActivities"
        },
        "pipelineName": {
          "documentation": "<p>The name of the pipeline.</p>",
          "shape": "PipelineName"
        },
        "tags": {
          "documentation": "<p>Metadata which can be used to manage the pipeline.</p>",
          "shape": "TagList"
        }
      },
      "required": [
        "pipelineName",
        "pipelineActivities"
      ],
      "type": "structure"
    },
    "CreatePipelineResponse": {
      "members": {
        "pipelineArn": {
          "documentation": "<p>The ARN of the pipeline.</p>",
          "shape": "PipelineArn"
        },
        "pipelineName": {
          "documentation": "<p>The name of the pipeline.</p>",
          "shape": "PipelineName"
        }
      },
      "type": "structure"
    },
    "CustomerManagedChannelS3Storage": {
      "documentation": "<p>Used to store channel data in an S3 bucket that you manage. If customer-managed storage is selected, the <code>retentionPeriod</code> parameter is ignored. You can't change the choice of S3 storage after the data store is created.</p>",
      "members": {
        "bucket": {
          "documentation": "<p>The name of the S3 bucket in which channel data is stored.</p>",
          "shape": "BucketName"
        },
        "keyPrefix": {
          "documentation": "<p>(Optional) The prefix used to create the keys of the channel data objects. Each object in an S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/).</p>",
          "shape": "S3KeyPrefix"
        },
        "roleArn": {
          "documentation": "<p>The ARN of the role that grants IoT Analytics permission to interact with your Amazon S3 resources.</p>",
          "shape": "RoleArn"
        }
      },
      "required": [
        "bucket",
        "roleArn"
      ],
      "type": "structure"
    },
    "CustomerManagedChannelS3StorageSummary": {
      "documentation": "<p>Used to store channel data in an S3 bucket that you manage.</p>",
      "members": {
        "bucket": {
          "documentation": "<p>The name of the S3 bucket in which channel data is stored.</p>",
          "shape": "BucketName"
        },
        "keyPrefix": {
          "documentation": "<p>(Optional) The prefix used to create the keys of the channel data objects. Each object in an S3 bucket has a key that is its unique identifier within the bucket (each object in a bucket has exactly one key). The prefix must end with a forward slash (/).</p>",
          "shape": "S3KeyPrefix"
        },
        "roleArn": {
          "documentation": "<p>The ARN of the role that grants IoT Analytics permission to interact with your Amazon S3 resources.</p>",
          "shape": "RoleArn"
        }
      },
      "type": "structure"
    },
    "CustomerManagedDatastoreS3Storage": {
      "documentation": "<p>S3-customer-managed; When you choose customer-managed storage, the <code>retentionPeriod</code> parameter is ignored. You can't change the choice of Amazon S3 storage after your data store is created. </p>",
      "members": {
        "bucket": {
          "documentation": "<p>The name of the Amazon S3 bucket where your data is stored.</p>",
          "shape": "BucketName"
        },
        "keyPrefix": {
          "documentation": "<p>(Optional) The prefix used to create the keys of the data store data objects. Each object in an Amazon S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/).</p>",
          "shape": "S3KeyPrefix"
        },
        "roleArn": {
          "documentation": "<p>The ARN of the role that grants IoT Analytics permission to interact with your Amazon S3 resources.</p>",
          "shape": "RoleArn"
        }
      },
      "required": [
        "bucket",
        "roleArn"
      ],
      "type": "structure"
    },
    "CustomerManagedDatastoreS3StorageSummary": {
      "documentation": "<p>Contains information about the data store that you manage.</p>",
      "members": {
        "bucket": {
          "documentation": "<p>The name of the Amazon S3 bucket where your data is stored.</p>",
          "shape": "BucketName"
        },
        "keyPrefix": {
          "documentation": "<p>(Optional) The prefix used to create the keys of the data store data objects. Each object in an Amazon S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/).</p>",
          "shape": "S3KeyPrefix"
        },
        "roleArn": {
          "documentation": "<p>The ARN of the role that grants IoT Analytics permission to interact with your Amazon S3 resources.</p>",
          "shape": "RoleArn"
        }
      },
      "type": "structure"
    },
    "Dataset": {
      "documentation": "<p>Information about a dataset.</p>",
      "members": {
        "actions": {
          "documentation": "<p>The <code>DatasetAction</code> objects that automatically create the dataset contents.</p>",
          "shape": "DatasetActions"
        },
        "arn": {
          "documentation": "<p>The ARN of the dataset.</p>",
          "shape": "DatasetArn"
        },
        "contentDeliveryRules": {
          "documentation": "<p>When dataset contents are created they are delivered to destinations specified here.</p>",
          "shape": "DatasetContentDeliveryRules"
        },
        "creationTime": {
          "documentation": "<p>When the dataset was created.</p>",
          "shape": "Timestamp"
        },
        "lastUpdateTime": {
          "documentation": "<p>The last time the dataset was updated.</p>",
          "shape": "Timestamp"
        },
        "lateDataRules": {
          "documentation": "<p>A list of data rules that send notifications to CloudWatch, when data arrives late. To specify <code>lateDataRules</code>, the dataset must use a <a href=\"https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html\">DeltaTimer</a> filter.</p>",
          "shape": "LateDataRules"
        },
        "name": {
          "documentation": "<p>The name of the dataset.</p>",
          "shape": "DatasetName"
        },
        "retentionPeriod": {
          "documentation": "<p>Optional. How long, in days, message data is kept for the dataset.</p>",
          "shape": "RetentionPeriod"
        },
        "status": {
          "documentation": "<p>The status of the dataset.</p>",
          "shape": "DatasetStatus"
        },
        "triggers": {
          "documentation": "<p>The <code>DatasetTrigger</code> objects that specify when the dataset is automatically updated.</p>",
          "shape": "DatasetTriggers"
        },
        "versioningConfiguration": {
          "documentation": "<p>Optional. How many versions of dataset contents are kept. If not specified or set to null, only the latest version plus the latest succeeded version (if they are different) are kept for the time period specified by the <code>retentionPeriod</code> parameter. For more information, see <a href=\"https://docs.aws.amazon.com/iotanalytics/latest/userguide/getting-started.html#aws-iot-analytics-dataset-versions\"> Keeping Multiple Versions of IoT Analytics datasets</a> in the <i>IoT Analytics User Guide</i>.</p>",
          "shape": "VersioningConfiguration"
        }
      },
      "type": "structure"
    },
    "DatasetAction": {
      "documentation": "<p>A <code>DatasetAction</code> object that specifies how dataset contents are automatically created.</p>",
      "members": {
        "actionName": {
          "documentation": "<p>The name of the dataset action by which dataset contents are automatically created.</p>",
          "shape": "DatasetActionName"
        },
        "containerAction": {
          "documentation": "<p>Information that allows the system to run a containerized application to create the dataset contents. The application must be in a Docker container along with any required support libraries.</p>",
          "shape": "ContainerDatasetAction"
        },
        "queryAction": {
          "documentation": "<p>An <code>SqlQueryDatasetAction</code> object that uses an SQL query to automatically create dataset contents.</p>",
          "shape": "SqlQueryDatasetAction"
        }
      },
      "type": "structure"
    },
    "DatasetActionName": {
      "max": 128,
      "min": 1,
      "pattern": "^[a-zA-Z0-9_]+$",
      "type": "string"
    },
    "DatasetActionSummaries": {
      "max": 1,
      "member": {
        "shape": "DatasetActionSummary"
      },
      "min": 1,
      "type": "list"
    },
    "DatasetActionSummary": {
      "documentation": "<p>Information about the action that automatically creates the dataset's contents.</p>",
      "members": {
        "actionName": {
          "documentation": "<p>The name of the action that automatically creates the dataset's contents.</p>",
          "shape": "DatasetActionName"
        },
        "actionType": {
          "documentation": "<p>The type of action by which the dataset's contents are automatically created.</p>",
          "shape": "DatasetActionType"
        }
      },
      "type": "structure"
    },
    "DatasetActionType": {
      "enum": [
        "QUERY",
        "CONTAINER"
      ],
      "type": "string"
    },
    "DatasetActions": {
      "max": 1,
      "member": {
        "shape": "DatasetAction"
      },
      "min": 1,
      "type": "list"
    },
    "DatasetArn": {
      "type": "string"
    },
    "DatasetContentDeliveryDestination": {
      "documentation": "<p>The destination to which dataset contents are delivered.</p>",
      "members": {
        "iotEventsDestinationConfiguration": {
          "documentation": "<p>Configuration information for delivery of dataset contents to IoT Events.</p>",
          "shape": "IotEventsDestinationConfiguration"
        },
        "s3DestinationConfiguration": {
          "documentation": "<p>Configuration information for delivery of dataset contents to Amazon S3.</p>",
          "shape": "S3DestinationConfiguration"
        }
      },
      "type": "structure"
    },
    "DatasetContentDeliveryRule": {
      "documentation": "<p>When dataset contents are created, they are delivered to destination specified here.</p>",
      "members": {
        "destination": {
          "documentation": "<p>The destination to which dataset contents are delivered.</p>",
          "shape": "DatasetContentDeliveryDestination"
        },
        "entryName": {
          "documentation": "<p>The name of the dataset content delivery rules entry.</p>",
          "shape": "EntryName"
        }
      },
      "required": [
        "destination"
      ],
      "type": "structure"
    },
    "DatasetContentDeliveryRules": {
      "max": 20,
      "member": {
        "shape": "DatasetContentDeliveryRule"
      },
      "min": 0,
      "type": "list"
    },
    "DatasetContentState": {
      "enum": [
        "CREATING",
        "SUCCEEDED",
        "FAILED"
      ],
      "type": "string"
    },
    "DatasetContentStatus": {
      "documentation": "<p>The state of the dataset contents and the reason they are in this state.</p>",
      "members": {
        "reason": {
          "documentation": "<p>The reason the dataset contents are in this state.</p>",
          "shape": "Reason"
        },
        "state": {
          "documentation": "<p>The state of the dataset contents. Can be one of READY, CREATING, SUCCEEDED, or FAILED.</p>",
          "shape": "DatasetContentState"
        }
      },
      "type": "structure"
    },
    "DatasetContentSummaries": {
      "member": {
        "shape": "DatasetContentSummary"
      },
      "type": "list"
    },
    "DatasetContentSummary": {
      "documentation": "<p>Summary information about dataset contents.</p>",
      "members": {
        "completionTime": {
          "documentation": "<p>The time the dataset content status was updated to SUCCEEDED or FAILED.</p>",
          "shape": "Timestamp"
        },
        "creationTime": {
          "documentation": "<p>The actual time the creation of the dataset contents was started.</p>",
          "shape": "Timestamp"
        },
        "scheduleTime": {
          "documentation": "<p>The time the creation of the dataset contents was scheduled to start.</p>",
          "shape": "Timestamp"
        },
        "status": {
          "documentation": "<p>The status of the dataset contents.</p>",
          "shape": "DatasetContentStatus"
        },
        "version": {
          "documentation": "<p>The version of the dataset contents.</p>",
          "shape": "DatasetContentVersion"
        }
      },
      "type": "structure"
    },
    "DatasetContentVersion": {
      "max": 36,
      "min": 7,
      "type": "string"
    },
    "DatasetContentVersionValue": {
      "documentation": "<p>The dataset whose latest contents are used as input to the notebook or application.</p>",
      "members": {
        "datasetName": {
          "documentation": "<p>The name of the dataset whose latest contents are used as input to the notebook or application.</p>",
          "shape": "DatasetName"
        }
      },
      "required": [
        "datasetName"
      ],
      "type": "structure"
    },
    "DatasetEntries": {
      "member": {
        "shape": "DatasetEntry"
      },
      "type": "list"
    },
    "DatasetEntry": {
      "documentation": "<p>The reference to a dataset entry.</p>",
      "members": {
        "dataURI": {
          "documentation": "<p>The presigned URI of the dataset item.</p>",
          "shape": "PresignedURI"
        },
        "entryName": {
          "documentation": "<p>The name of the dataset item.</p>",
          "shape": "EntryName"
        }
      },
      "type": "structure"
    },
    "DatasetName": {
      "max": 128,
      "min": 1,
      "pattern": "(^(?!_{2}))(^[a-zA-Z0-9_]+$)",
      "type": "string"
    },
    "DatasetStatus": {
      "enum": [
        "CREATING",
        "ACTIVE",
        "DELETING"
      ],
      "type": "string"
    },
    "DatasetSummaries": {
      "member": {
        "shape": "DatasetSummary"
      },
      "type": "list"
    },
    "DatasetSummary": {
      "documentation": "<p>A summary of information about a dataset.</p>",
      "members": {
        "actions": {
          "documentation": "<p>A list of <code>DataActionSummary</code> objects.</p>",
          "shape": "DatasetActionSummaries"
        },
        "creationTime": {
          "documentation": "<p>The time the dataset was created.</p>",
          "shape": "Timestamp"
        },
        "datasetName": {
          "documentation": "<p>The name of the dataset.</p>",
          "shape": "DatasetName"
        },
        "lastUpdateTime": {
          "documentation": "<p>The last time the dataset was updated.</p>",
          "shape": "Timestamp"
        },
        "status": {
          "documentation": "<p>The status of the dataset.</p>",
          "shape": "DatasetStatus"
        },
        "triggers": {
          "documentation": "<p>A list of triggers. A trigger causes dataset content to be populated at a specified time interval or when another dataset is populated. The list of triggers can be empty or contain up to five <code>DataSetTrigger</code> objects</p>",
          "shape": "DatasetTriggers"
        }
      },
      "type": "structure"
    },
    "DatasetTrigger": {
      "documentation": "<p>The <code>DatasetTrigger</code> that specifies when the dataset is automatically updated.</p>",
      "members": {
        "dataset": {
          "documentation": "<p>The dataset whose content creation triggers the creation of this dataset's contents.</p>",
          "shape": "TriggeringDataset"
        },
        "schedule": {
          "documentation": "<p>The Schedule when the trigger is initiated.</p>",
          "shape": "Schedule"
        }
      },
      "type": "structure"
    },
    "DatasetTriggers": {
      "max": 5,
      "member": {
        "shape": "DatasetTrigger"
      },
      "min": 0,
      "type": "list"
    },
    "Datastore": {
      "documentation": "<p>Information about a data store.</p>",
      "members": {
        "arn": {
          "documentation": "<p>The ARN of the data store.</p>",
          "shape": "DatastoreArn"
        },
        "creationTime": {
          "documentation": "<p>When the data store was created.</p>",
          "shape": "Timestamp"
        },
        "datastorePartitions": {
          "documentation": "<p> Contains information about the partition dimensions in a data store. </p>",
          "shape": "DatastorePartitions"
        },
        "fileFormatConfiguration": {
          "documentation": "<p>Contains the configuration information of file formats. IoT Analytics data stores support JSON and <a href=\"https://parquet.apache.org/\">Parquet</a>.</p> <p>The default file format is JSON. You can specify only one format.</p> <p>You can't change the file format after you create the data store.</p>",
          "shape": "FileFormatConfiguration"
        },
        "lastMessageArrivalTime": {
          "documentation": "<p>The last time when a new message arrived in the data store.</p> <p>IoT Analytics updates this value at most once per minute for Amazon Simple Storage Service one data store. Hence, the <code>lastMessageArrivalTime</code> value is an approximation.</p> <p>This feature only applies to messages that arrived in the data store after October 23, 2020. </p>",
          "shape": "Timestamp"
        },
        "lastUpdateTime": {
          "documentation": "<p>The last time the data store was updated.</p>",
          "shape": "Timestamp"
        },
        "name": {
          "documentation": "<p>The name of the data store.</p>",
          "shape": "DatastoreName"
        },
        "retentionPeriod": {
          "documentation": "<p>How long, in days, message data is kept for the data store. When <code>customerManagedS3</code> storage is selected, this parameter is ignored.</p>",
          "shape": "RetentionPeriod"
        },
        "status": {
          "documentation": "<p>The status of a data store:</p> <dl> <dt>CREATING</dt> <dd> <p>The data store is being created.</p> </dd> <dt>ACTIVE</dt> <dd> <p>The data store has been created and can be used.</p> </dd> <dt>DELETING</dt> <dd> <p>The data store is being deleted.</p> </dd> </dl>",
          "shape": "DatastoreStatus"
        },
        "storage": {
          "documentation": "<p>Where data in a data store is stored.. You can choose <code>serviceManagedS3</code> storage, <code>customerManagedS3</code> storage, or <code>iotSiteWiseMultiLayerStorage</code> storage. The default is <code>serviceManagedS3</code>. You can't change the choice of Amazon S3 storage after your data store is created. </p>",
          "shape": "DatastoreStorage"
        }
      },
      "type": "structure"
    },
    "DatastoreActivity": {
      "documentation": "<p>The datastore activity that specifies where to store the processed data.</p>",
      "members": {
        "datastoreName": {
          "documentation": "<p>The name of the data store where processed messages are stored.</p>",
          "shape": "DatastoreName"
        },
        "name": {
          "documentation": "<p>The name of the datastore activity.</p>",
          "shape": "ActivityName"
        }
      },
      "required": [
        "name",
        "datastoreName"
      ],
      "type": "structure"
    },
    "DatastoreArn": {
      "type": "string"
    },
    "DatastoreIotSiteWiseMultiLayerStorage": {
      "documentation": "<p> Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage. You can't change the choice of Amazon S3 storage after your data store is created. </p>",
      "members": {
        "customerManagedS3Storage": {
          "documentation": "<p> Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage. </p>",
          "shape": "IotSiteWiseCustomerManagedDatastoreS3Storage"
        }
      },
      "required": [
        "customerManagedS3Storage"
      ],
      "type": "structure"
    },
    "DatastoreIotSiteWiseMultiLayerStorageSummary": {
      "documentation": "<p> Contains information about the data store that you manage, which stores data used by IoT SiteWise. </p>",
      "members": {
        "customerManagedS3Storage": {
          "documentation": "<p>Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage.</p>",
          "shape": "IotSiteWiseCustomerManagedDatastoreS3StorageSummary"
        }
      },
      "type": "structure"
    },
    "DatastoreName": {
      "max": 128,
      "min": 1,
      "pattern": "(^(?!_{2}))(^[a-zA-Z0-9_]+$)",
      "type": "string"
    },
    "DatastorePartition": {
      "documentation": "<p> A single dimension to partition a data store. The dimension must be an <code>AttributePartition</code> or a <code>TimestampPartition</code>. </p>",
      "members": {
        "attributePartition": {
          "documentation": "<p> A partition dimension defined by an <code>attributeName</code>. </p>",
          "shape": "Partition"
        },
        "timestampPartition": {
          "documentation": "<p> A partition dimension defined by a timestamp attribute. </p>",
          "shape": "TimestampPartition"
        }
      },
      "type": "structure"
    },
    "DatastorePartitions": {
      "documentation": "<p> Contains information about the partition dimensions in a data store. </p>",
      "members": {
        "partitions": {
          "documentation": "<p> A list of partition dimensions in a data store. </p>",
          "shape": "Partitions"
        }
      },
      "type": "structure"
    },
    "DatastoreStatistics": {
      "documentation": "<p>Statistical information about the data store.</p>",
      "members": {
        "size": {
          "documentation": "<p>The estimated size of the data store.</p>",
          "shape": "EstimatedResourceSize"
        }
      },
      "type": "structure"
    },
    "DatastoreStatus": {
      "enum": [
        "CREATING",
        "ACTIVE",
        "DELETING"
      ],
      "type": "string"
    },
    "DatastoreStorage": {
      "documentation": "<p>Where data in a data store is stored.. You can choose <code>serviceManagedS3</code> storage, <code>customerManagedS3</code> storage, or <code>iotSiteWiseMultiLayerStorage</code> storage. The default is <code>serviceManagedS3</code>. You can't change the choice of Amazon S3 storage after your data store is created. </p>",
      "members": {
        "customerManagedS3": {
          "documentation": "<p>S3-customer-managed; When you choose customer-managed storage, the <code>retentionPeriod</code> parameter is ignored. You can't change the choice of Amazon S3 storage after your data store is created. </p>",
          "shape": "CustomerManagedDatastoreS3Storage"
        },
        "iotSiteWiseMultiLayerStorage": {
          "documentation": "<p> Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage. You can't change the choice of Amazon S3 storage after your data store is created. </p>",
          "shape": "DatastoreIotSiteWiseMultiLayerStorage"
        },
        "serviceManagedS3": {
          "documentation": "<p>Used to store data in an Amazon S3 bucket managed by IoT Analytics. You can't change the choice of Amazon S3 storage after your data store is created. </p>",
          "shape": "ServiceManagedDatastoreS3Storage"
        }
      },
      "type": "structure"
    },
    "DatastoreStorageSummary": {
      "documentation": "<p>Contains information about your data store.</p>",
      "members": {
        "customerManagedS3": {
          "documentation": "<p>Used to store data in an Amazon S3 bucket managed by IoT Analytics.</p>",
          "shape": "CustomerManagedDatastoreS3StorageSummary"
        },
        "iotSiteWiseMultiLayerStorage": {
          "documentation": "<p> Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage. </p>",
          "shape": "DatastoreIotSiteWiseMultiLayerStorageSummary"
        },
        "serviceManagedS3": {
          "documentation": "<p>Used to store data in an Amazon S3 bucket managed by IoT Analytics.</p>",
          "shape": "ServiceManagedDatastoreS3StorageSummary"
        }
      },
      "type": "structure"
    },
    "DatastoreSummaries": {
      "member": {
        "shape": "DatastoreSummary"
      },
      "type": "list"
    },
    "DatastoreSummary": {
      "documentation": "<p>A summary of information about a data store.</p>",
      "members": {
        "creationTime": {
          "documentation": "<p>When the data store was created.</p>",
          "shape": "Timestamp"
        },
        "datastoreName": {
          "documentation": "<p>The name of the data store.</p>",
          "shape": "DatastoreName"
        },
        "datastorePartitions": {
          "documentation": "<p> Contains information about the partition dimensions in a data store. </p>",
          "shape": "DatastorePartitions"
        },
        "datastoreStorage": {
          "documentation": "<p>Where data in a data store is stored.</p>",
          "shape": "DatastoreStorageSummary"
        },
        "fileFormatType": {
          "documentation": "<p>The file format of the data in the data store.</p>",
          "shape": "FileFormatType"
        },
        "lastMessageArrivalTime": {
          "documentation": "<p>The last time when a new message arrived in the data store.</p> <p>IoT Analytics updates this value at most once per minute for Amazon Simple Storage Service one data store. Hence, the <code>lastMessageArrivalTime</code> value is an approximation.</p> <p>This feature only applies to messages that arrived in the data store after October 23, 2020. </p>",
          "shape": "Timestamp"
        },
        "lastUpdateTime": {
          "documentation": "<p>The last time the data store was updated.</p>",
          "shape": "Timestamp"
        },
        "status": {
          "documentation": "<p>The status of the data store.</p>",
          "shape": "DatastoreStatus"
        }
      },
      "type": "structure"
    },
    "DeleteChannelRequest": {
      "members": {
        "channelName": {
          "documentation": "<p>The name of the channel to delete.</p>",
          "location": "uri",
          "locationName": "channelName",
          "shape": "ChannelName"
        }
      },
      "required": [
        "channelName"
      ],
      "type": "structure"
    },
    "DeleteDatasetContentRequest": {
      "members": {
        "datasetName": {
          "documentation": "<p>The name of the dataset whose content is deleted.</p>",
          "location": "uri",
          "locationName": "datasetName",
          "shape": "DatasetName"
        },
        "versionId": {
          "documentation": "<p>The version of the dataset whose content is deleted. You can also use the strings \"$LATEST\" or \"$LATEST_SUCCEEDED\" to delete the latest or latest successfully completed data set. If not specified, \"$LATEST_SUCCEEDED\" is the default.</p>",
          "location": "querystring",
          "locationName": "versionId",
          "shape": "DatasetContentVersion"
        }
      },
      "required": [
        "datasetName"
      ],
      "type": "structure"
    },
    "DeleteDatasetRequest": {
      "members": {
        "datasetName": {
          "documentation": "<p>The name of the dataset to delete.</p>",
          "location": "uri",
          "locationName": "datasetName",
          "shape": "DatasetName"
        }
      },
      "required": [
        "datasetName"
      ],
      "type": "structure"
    },
    "DeleteDatastoreRequest": {
      "members": {
        "datastoreName": {
          "documentation": "<p>The name of the data store to delete.</p>",
          "location": "uri",
          "locationName": "datastoreName",
          "shape": "DatastoreName"
        }
      },
      "required": [
        "datastoreName"
      ],
      "type": "structure"
    },
    "DeletePipelineRequest": {
      "members": {
        "pipelineName": {
          "documentation": "<p>The name of the pipeline to delete.</p>",
          "location": "uri",
          "locationName": "pipelineName",
          "shape": "PipelineName"
        }
      },
      "required": [
        "pipelineName"
      ],
      "type": "structure"
    },
    "DeltaTime": {
      "documentation": "<p>Used to limit data to that which has arrived since the last execution of the action.</p>",
      "members": {
        "offsetSeconds": {
          "documentation": "<p>The number of seconds of estimated in-flight lag time of message data. When you create dataset contents using message data from a specified timeframe, some message data might still be in flight when processing begins, and so do not arrive in time to be processed. Use this field to make allowances for the in flight time of your message data, so that data not processed from a previous timeframe is included with the next timeframe. Otherwise, missed message data would be excluded from processing during the next timeframe too, because its timestamp places it within the previous timeframe.</p>",
          "shape": "OffsetSeconds"
        },
        "timeExpression": {
          "documentation": "<p>An expression by which the time of the message data might be determined. This can be the name of a timestamp field or a SQL expression that is used to derive the time the message data was generated.</p>",
          "shape": "TimeExpression"
        }
      },
      "required": [
        "offsetSeconds",
        "timeExpression"
      ],
      "type": "structure"
    },
    "DeltaTimeSessionWindowConfiguration": {
      "documentation": "<p>A structure that contains the configuration information of a delta time session window.</p> <p> <a href=\"https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html\"> <code>DeltaTime</code> </a> specifies a time interval. You can use <code>DeltaTime</code> to create dataset contents with data that has arrived in the data store since the last execution. For an example of <code>DeltaTime</code>, see <a href=\"https://docs.aws.amazon.com/iotanalytics/latest/userguide/automate-create-dataset.html#automate-example6\"> Creating a SQL dataset with a delta window (CLI)</a> in the <i>IoT Analytics User Guide</i>.</p>",
      "members": {
        "timeoutInMinutes": {
          "documentation": "<p>A time interval. You can use <code>timeoutInMinutes</code> so that IoT Analytics can batch up late data notifications that have been generated since the last execution. IoT Analytics sends one batch of notifications to Amazon CloudWatch Events at one time.</p> <p>For more information about how to write a timestamp expression, see <a href=\"https://prestodb.io/docs/0.172/functions/datetime.html\">Date and Time Functions and Operators</a>, in the <i>Presto 0.172 Documentation</i>.</p>",
          "shape": "SessionTimeoutInMinutes"
        }
      },
      "required": [
        "timeoutInMinutes"
      ],
      "type": "structure"
    },
    "DescribeChannelRequest": {
      "members": {
        "channelName": {
          "documentation": "<p>The name of the channel whose information is retrieved.</p>",
          "location": "uri",
          "locationName": "channelName",
          "shape": "ChannelName"
        },
        "includeStatistics": {
          "documentation": "<p>If true, additional statistical information about the channel is included in the response. This feature can't be used with a channel whose S3 storage is customer-managed.</p>",
          "location": "querystring",
          "locationName": "includeStatistics",
          "shape": "IncludeStatisticsFlag"
        }
      },
      "required": [
        "channelName"
      ],
      "type": "structure"
    },
    "DescribeChannelResponse": {
      "members": {
        "channel": {
          "documentation": "<p>An object that contains information about the channel.</p>",
          "shape": "Channel"
        },
        "statistics": {
          "documentation": "<p>Statistics about the channel. Included if the <code>includeStatistics</code> parameter is set to <code>true</code> in the request.</p>",
          "shape": "ChannelStatistics"
        }
      },
      "type": "structure"
    },
    "DescribeDatasetRequest": {
      "members": {
        "datasetName": {
          "documentation": "<p>The name of the dataset whose information is retrieved.</p>",
          "location": "uri",
          "locationName": "datasetName",
          "shape": "DatasetName"
        }
      },
      "required": [
        "datasetName"
      ],
      "type": "structure"
    },
    "DescribeDatasetResponse": {
      "members": {
        "dataset": {
          "documentation": "<p>An object that contains information about the dataset.</p>",
          "shape": "Dataset"
        }
      },
      "type": "structure"
    },
    "DescribeDatastoreRequest": {
      "members": {
        "datastoreName": {
          "documentation": "<p>The name of the data store</p>",
          "location": "uri",
          "locationName": "datastoreName",
          "shape": "DatastoreName"
        },
        "includeStatistics": {
          "documentation": "<p>If true, additional statistical information about the data store is included in the response. This feature can't be used with a data store whose S3 storage is customer-managed.</p>",
          "location": "querystring",
          "locationName": "includeStatistics",
          "shape": "IncludeStatisticsFlag"
        }
      },
      "required": [
        "datastoreName"
      ],
      "type": "structure"
    },
    "DescribeDatastoreResponse": {
      "members": {
        "datastore": {
          "documentation": "<p>Information about the data store.</p>",
          "shape": "Datastore"
        },
        "statistics": {
          "documentation": "<p>Additional statistical information about the data store. Included if the <code>includeStatistics</code> parameter is set to <code>true</code> in the request.</p>",
          "shape": "DatastoreStatistics"
        }
      },
      "type": "structure"
    },
    "DescribeLoggingOptionsRequest": {
      "members": {},
      "type": "structure"
    },
    "DescribeLoggingOptionsResponse": {
      "members": {
        "loggingOptions": {
          "documentation": "<p>The current settings of the IoT Analytics logging options.</p>",
          "shape": "LoggingOptions"
        }
      },
      "type": "structure"
    },
    "DescribePipelineRequest": {
      "members": {
        "pipelineName": {
          "documentation": "<p>The name of the pipeline whose information is retrieved.</p>",
          "location": "uri",
          "locationName": "pipelineName",
          "shape": "PipelineName"
        }
      },
      "required": [
        "pipelineName"
      ],
      "type": "structure"
    },
    "DescribePipelineResponse": {
      "members": {
        "pipeline": {
          "documentation": "<p>A <code>Pipeline</code> object that contains information about the pipeline.</p>",
          "shape": "Pipeline"
        }
      },
      "type": "structure"
    },
    "DeviceRegistryEnrichActivity": {
      "documentation": "<p>An activity that adds data from the IoT device registry to your message.</p>",
      "members": {
        "attribute": {
          "documentation": "<p>The name of the attribute that is added to the message.</p>",
          "shape": "AttributeName"
        },
        "name": {
          "documentation": "<p>The name of the <code>deviceRegistryEnrich</code> activity.</p>",
          "shape": "ActivityName"
        },
        "next": {
          "documentation": "<p>The next activity in the pipeline.</p>",
          "shape": "ActivityName"
        },
        "roleArn": {
          "documentation": "<p>The ARN of the role that allows access to the device's registry information.</p>",
          "shape": "RoleArn"
        },
        "thingName": {
          "documentation": "<p>The name of the IoT device whose registry information is added to the message.</p>",
          "shape": "AttributeName"
        }
      },
      "required": [
        "name",
        "attribute",
        "thingName",
        "roleArn"
      ],
      "type": "structure"
    },
    "DeviceShadowEnrichActivity": {
      "documentation": "<p>An activity that adds information from the IoT Device Shadow service to a message.</p>",
      "members": {
        "attribute": {
          "documentation": "<p>The name of the attribute that is added to the message.</p>",
          "shape": "AttributeName"
        },
        "name": {
          "documentation": "<p>The name of the <code>deviceShadowEnrich</code> activity.</p>",
          "shape": "ActivityName"
        },
        "next": {
          "documentation": "<p>The next activity in the pipeline.</p>",
          "shape": "ActivityName"
        },
        "roleArn": {
          "documentation": "<p>The ARN of the role that allows access to the device's shadow.</p>",
          "shape": "RoleArn"
        },
        "thingName": {
          "documentation": "<p>The name of the IoT device whose shadow information is added to the message.</p>",
          "shape": "AttributeName"
        }
      },
      "required": [
        "name",
        "attribute",
        "thingName",
        "roleArn"
      ],
      "type": "structure"
    },
    "DoubleValue": {
      "type": "double"
    },
    "EndTime": {
      "type": "timestamp"
    },
    "EntryName": {
      "type": "string"
    },
    "ErrorCode": {
      "type": "string"
    },
    "ErrorMessage": {
      "type": "string"
    },
    "EstimatedResourceSize": {
      "documentation": "<p>The estimated size of the resource.</p>",
      "members": {
        "estimatedOn": {
          "documentation": "<p>The time when the estimate of the size of the resource was made.</p>",
          "shape": "Timestamp"
        },
        "estimatedSizeInBytes": {
          "documentation": "<p>The estimated size of the resource, in bytes.</p>",
          "shape": "SizeInBytes"
        }
      },
      "type": "structure"
    },
    "FileFormatConfiguration": {
      "documentation": "<p>Contains the configuration information of file formats. IoT Analytics data stores support JSON and <a href=\"https://parquet.apache.org/\">Parquet</a>.</p> <p>The default file format is JSON. You can specify only one format.</p> <p>You can't change the file format after you create the data store.</p>",
      "members": {
        "jsonConfiguration": {
          "documentation": "<p>Contains the configuration information of the JSON format.</p>",
          "shape": "JsonConfiguration"
        },
        "parquetConfiguration": {
          "documentation": "<p>Contains the configuration information of the Parquet format.</p>",
          "shape": "ParquetConfiguration"
        }
      },
      "type": "structure"
    },
    "FileFormatType": {
      "enum": [
        "JSON",
        "PARQUET"
      ],
      "type": "string"
    },
    "FilterActivity": {
      "documentation": "<p>An activity that filters a message based on its attributes.</p>",
      "members": {
        "filter": {
          "documentation": "<p>An expression that looks like a SQL WHERE clause that must return a Boolean value. Messages that satisfy the condition are passed to the next activity. </p>",
          "shape": "FilterExpression"
        },
        "name": {
          "documentation": "<p>The name of the filter activity.</p>",
          "shape": "ActivityName"
        },
        "next": {
          "documentation": "<p>The next activity in the pipeline.</p>",
          "shape": "ActivityName"
        }
      },
      "required": [
        "name",
        "filter"
      ],
      "type": "structure"
    },
    "FilterExpression": {
      "max": 256,
      "min": 1,
      "type": "string"
    },
    "GetDatasetContentRequest": {
      "members": {
        "datasetName": {
          "documentation": "<p>The name of the dataset whose contents are retrieved.</p>",
          "location": "uri",
          "locationName": "datasetName",
          "shape": "DatasetName"
        },
        "versionId": {
          "documentation": "<p>The version of the dataset whose contents are retrieved. You can also use the strings \"$LATEST\" or \"$LATEST_SUCCEEDED\" to retrieve the contents of the latest or latest successfully completed dataset. If not specified, \"$LATEST_SUCCEEDED\" is the default.</p>",
          "location": "querystring",
          "locationName": "versionId",
          "shape": "DatasetContentVersion"
        }
      },
      "required": [
        "datasetName"
      ],
      "type": "structure"
    },
    "GetDatasetContentResponse": {
      "members": {
        "entries": {
          "documentation": "<p>A list of <code>DatasetEntry</code> objects.</p>",
          "shape": "DatasetEntries"
        },
        "status": {
          "documentation": "<p>The status of the dataset content.</p>",
          "shape": "DatasetContentStatus"
        },
        "timestamp": {
          "documentation": "<p>The time when the request was made.</p>",
          "shape": "Timestamp"
        }
      },
      "type": "structure"
    },
    "GlueConfiguration": {
      "documentation": "<p>Configuration information for coordination with Glue, a fully managed extract, transform and load (ETL) service.</p>",
      "members": {
        "databaseName": {
          "documentation": "<p>The name of the database in your Glue Data Catalog in which the table is located. An Glue Data Catalog database contains metadata tables.</p>",
          "shape": "GlueDatabaseName"
        },
        "tableName": {
          "documentation": "<p>The name of the table in your Glue Data Catalog that is used to perform the ETL operations. An Glue Data Catalog table contains partitioned data and descriptions of data sources and targets.</p>",
          "shape": "GlueTableName"
        }
      },
      "required": [
        "tableName",
        "databaseName"
      ],
      "type": "structure"
    },
    "GlueDatabaseName": {
      "max": 150,
      "min": 1,
      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
      "type": "string"
    },
    "GlueTableName": {
      "max": 150,
      "min": 1,
      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
      "type": "string"
    },
    "Image": {
      "max": 255,
      "type": "string"
    },
    "IncludeStatisticsFlag": {
      "type": "boolean"
    },
    "InternalFailureException": {
      "documentation": "<p>There was an internal failure.</p>",
      "error": {
        "httpStatusCode": 500
      },
      "exception": true,
      "fault": true,
      "members": {
        "message": {
          "shape": "errorMessage"
        }
      },
      "type": "structure"
    },
    "InvalidRequestException": {
      "documentation": "<p>The request was not valid.</p>",
      "error": {
        "httpStatusCode": 400
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "errorMessage"
        }
      },
      "type": "structure"
    },
    "IotEventsDestinationConfiguration": {
      "documentation": "<p>Configuration information for delivery of dataset contents to IoT Events.</p>",
      "members": {
        "inputName": {
          "documentation": "<p>The name of the IoT Events input to which dataset contents are delivered.</p>",
          "shape": "IotEventsInputName"
        },
        "roleArn": {
          "documentation": "<p>The ARN of the role that grants IoT Analytics permission to deliver dataset contents to an IoT Events input.</p>",
          "shape": "RoleArn"
        }
      },
      "required": [
        "inputName",
        "roleArn"
      ],
      "type": "structure"
    },
    "IotEventsInputName": {
      "max": 128,
      "min": 1,
      "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$",
      "type": "string"
    },
    "IotSiteWiseCustomerManagedDatastoreS3Storage": {
      "documentation": "<p> Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage. You can't change the choice of Amazon S3 storage after your data store is created. </p>",
      "members": {
        "bucket": {
          "documentation": "<p> The name of the Amazon S3 bucket where your data is stored. </p>",
          "shape": "BucketName"
        },
        "keyPrefix": {
          "documentation": "<p> (Optional) The prefix used to create the keys of the data store data objects. Each object in an Amazon S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/). </p>",
          "shape": "S3KeyPrefix"
        }
      },
      "required": [
        "bucket"
      ],
      "type": "structure"
    },
    "IotSiteWiseCustomerManagedDatastoreS3StorageSummary": {
      "documentation": "<p> Contains information about the data store that you manage, which stores data used by IoT SiteWise. </p>",
      "members": {
        "bucket": {
          "documentation": "<p> The name of the Amazon S3 bucket where your data is stored. </p>",
          "shape": "BucketName"
        },
        "keyPrefix": {
          "documentation": "<p> (Optional) The prefix used to create the keys of the data store data objects. Each object in an Amazon S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/). </p>",
          "shape": "S3KeyPrefix"
        }
      },
      "type": "structure"
    },
    "JsonConfiguration": {
      "documentation": "<p>Contains the configuration information of the JSON format.</p>",
      "members": {},
      "type": "structure"
    },
    "LambdaActivity": {
      "documentation": "<p>An activity that runs a Lambda function to modify the message.</p>",
      "members": {
        "batchSize": {
          "documentation": "<p>The number of messages passed to the Lambda function for processing.</p> <p>The Lambda function must be able to process all of these messages within five minutes, which is the maximum timeout duration for Lambda functions.</p>",
          "shape": "ActivityBatchSize"
        },
        "lambdaName": {
          "documentation": "<p>The name of the Lambda function that is run on the message.</p>",
          "shape": "LambdaName"
        },
        "name": {
          "documentation": "<p>The name of the lambda activity.</p>",
          "shape": "ActivityName"
        },
        "next": {
          "documentation": "<p>The next activity in the pipeline.</p>",
          "shape": "ActivityName"
        }
      },
      "required": [
        "name",
        "lambdaName",
        "batchSize"
      ],
      "type": "structure"
    },
    "LambdaName": {
      "max": 64,
      "min": 1,
      "pattern": "^[a-zA-Z0-9_-]+$",
      "type": "string"
    },
    "LateDataRule": {
      "documentation": "<p>A structure that contains the name and configuration information of a late data rule.</p>",
      "members": {
        "ruleConfiguration": {
          "documentation": "<p>The information needed to configure the late data rule.</p>",
          "shape": "LateDataRuleConfiguration"
        },
        "ruleName": {
          "documentation": "<p>The name of the late data rule.</p>",
          "shape": "LateDataRuleName"
        }
      },
      "required": [
        "ruleConfiguration"
      ],
      "type": "structure"
    },
    "LateDataRuleConfiguration": {
      "documentation": "<p>The information needed to configure a delta time session window.</p>",
      "members": {
        "deltaTimeSessionWindowConfiguration": {
          "documentation": "<p>The information needed to configure a delta time session window.</p>",
          "shape": "DeltaTimeSessionWindowConfiguration"
        }
      },
      "type": "structure"
    },
    "LateDataRuleName": {
      "max": 128,
      "min": 1,
      "pattern": "^[a-zA-Z0-9_]+$",
      "type": "string"
    },
    "LateDataRules": {
      "max": 1,
      "member": {
        "shape": "LateDataRule"
      },
      "min": 1,
      "type": "list"
    },
    "LimitExceededException": {
      "documentation": "<p>The command caused an internal limit to be exceeded.</p>",
      "error": {
        "httpStatusCode": 410
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "errorMessage"
        }
      },
      "type": "structure"
    },
    "ListChannelsRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p>The maximum number of results to return in this request.</p> <p>The default value is 100.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>The token for the next set of results.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListChannelsResponse": {
      "members": {
        "channelSummaries": {
          "documentation": "<p>A list of <code>ChannelSummary</code> objects.</p>",
          "shape": "ChannelSummaries"
        },
        "nextToken": {
          "documentation": "<p>The token to retrieve the next set of results, or <code>null</code> if there are no more results.</p>",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListDatasetContentsRequest": {
      "members": {
        "datasetName": {
          "documentation": "<p>The name of the dataset whose contents information you want to list.</p>",
          "location": "uri",
          "locationName": "datasetName",
          "shape": "DatasetName"
        },
        "maxResults": {
          "documentation": "<p>The maximum number of results to return in this request.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>The token for the next set of results.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        },
        "scheduledBefore": {
          "documentation": "<p>A filter to limit results to those dataset contents whose creation is scheduled before the given time. See the field <code>triggers.schedule</code> in the <code>CreateDataset</code> request. (timestamp)</p>",
          "location": "querystring",
          "locationName": "scheduledBefore",
          "shape": "Timestamp"
        },
        "scheduledOnOrAfter": {
          "documentation": "<p>A filter to limit results to those dataset contents whose creation is scheduled on or after the given time. See the field <code>triggers.schedule</code> in the <code>CreateDataset</code> request. (timestamp)</p>",
          "location": "querystring",
          "locationName": "scheduledOnOrAfter",
          "shape": "Timestamp"
        }
      },
      "required": [
        "datasetName"
      ],
      "type": "structure"
    },
    "ListDatasetContentsResponse": {
      "members": {
        "datasetContentSummaries": {
          "documentation": "<p>Summary information about dataset contents that have been created.</p>",
          "shape": "DatasetContentSummaries"
        },
        "nextToken": {
          "documentation": "<p>The token to retrieve the next set of results, or <code>null</code> if there are no more results.</p>",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListDatasetsRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p>The maximum number of results to return in this request.</p> <p>The default value is 100.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>The token for the next set of results.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListDatasetsResponse": {
      "members": {
        "datasetSummaries": {
          "documentation": "<p>A list of <code>DatasetSummary</code> objects.</p>",
          "shape": "DatasetSummaries"
        },
        "nextToken": {
          "documentation": "<p>The token to retrieve the next set of results, or <code>null</code> if there are no more results.</p>",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListDatastoresRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p>The maximum number of results to return in this request.</p> <p>The default value is 100.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>The token for the next set of results.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListDatastoresResponse": {
      "members": {
        "datastoreSummaries": {
          "documentation": "<p>A list of <code>DatastoreSummary</code> objects.</p>",
          "shape": "DatastoreSummaries"
        },
        "nextToken": {
          "documentation": "<p>The token to retrieve the next set of results, or <code>null</code> if there are no more results.</p>",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListPipelinesRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p>The maximum number of results to return in this request.</p> <p>The default value is 100.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>The token for the next set of results.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListPipelinesResponse": {
      "members": {
        "nextToken": {
          "documentation": "<p>The token to retrieve the next set of results, or <code>null</code> if there are no more results.</p>",
          "shape": "NextToken"
        },
        "pipelineSummaries": {
          "documentation": "<p>A list of <code>PipelineSummary</code> objects.</p>",
          "shape": "PipelineSummaries"
        }
      },
      "type": "structure"
    },
    "ListTagsForResourceRequest": {
      "members": {
        "resourceArn": {
          "documentation": "<p>The ARN of the resource whose tags you want to list.</p>",
          "location": "querystring",
          "locationName": "resourceArn",
          "shape": "ResourceArn"
        }
      },
      "required": [
        "resourceArn"
      ],
      "type": "structure"
    },
    "ListTagsForResourceResponse": {
      "members": {
        "tags": {
          "documentation": "<p>The tags (metadata) that you have assigned to the resource.</p>",
          "shape": "TagList"
        }
      },
      "type": "structure"
    },
    "LogResult": {
      "type": "string"
    },
    "LoggingEnabled": {
      "type": "boolean"
    },
    "LoggingLevel": {
      "enum": [
        "ERROR"
      ],
      "type": "string"
    },
    "LoggingOptions": {
      "documentation": "<p>Information about logging options.</p>",
      "members": {
        "enabled": {
          "documentation": "<p>If true, logging is enabled for IoT Analytics.</p>",
          "shape": "LoggingEnabled"
        },
        "level": {
          "documentation": "<p>The logging level. Currently, only ERROR is supported.</p>",
          "shape": "LoggingLevel"
        },
        "roleArn": {
          "documentation": "<p>The ARN of the role that grants permission to IoT Analytics to perform logging.</p>",
          "shape": "RoleArn"
        }
      },
      "required": [
        "roleArn",
        "level",
        "enabled"
      ],
      "type": "structure"
    },
    "MathActivity": {
      "documentation": "<p>An activity that computes an arithmetic expression using the message's attributes.</p>",
      "members": {
        "attribute": {
          "documentation": "<p>The name of the attribute that contains the result of the math operation.</p>",
          "shape": "AttributeName"
        },
        "math": {
          "documentation": "<p>An expression that uses one or more existing attributes and must return an integer value.</p>",
          "shape": "MathExpression"
        },
        "name": {
          "documentation": "<p>The name of the math activity.</p>",
          "shape": "ActivityName"
        },
        "next": {
          "documentation": "<p>The next activity in the pipeline.</p>",
          "shape": "ActivityName"
        }
      },
      "required": [
        "name",
        "attribute",
        "math"
      ],
      "type": "structure"
    },
    "MathExpression": {
      "max": 256,
      "min": 1,
      "type": "string"
    },
    "MaxMessages": {
      "max": 10,
      "min": 1,
      "type": "integer"
    },
    "MaxResults": {
      "max": 250,
      "min": 1,
      "type": "integer"
    },
    "MaxVersions": {
      "max": 1000,
      "min": 1,
      "type": "integer"
    },
    "Message": {
      "documentation": "<p>Information about a message.</p>",
      "members": {
        "messageId": {
          "documentation": "<p>The ID you want to assign to the message. Each <code>messageId</code> must be unique within each batch sent.</p>",
          "shape": "MessageId"
        },
        "payload": {
          "documentation": "<p>The payload of the message. This can be a JSON string or a base64-encoded string representing binary data, in which case you must decode it by means of a pipeline activity.</p>",
          "shape": "MessagePayload"
        }
      },
      "required": [
        "messageId",
        "payload"
      ],
      "type": "structure"
    },
    "MessageId": {
      "max": 128,
      "min": 1,
      "pattern": "\\p{ASCII}*",
      "type": "string"
    },
    "MessagePayload": {
      "type": "blob"
    },
    "MessagePayloads": {
      "max": 10,
      "member": {
        "shape": "MessagePayload"
      },
      "min": 1,
      "type": "list"
    },
    "Messages": {
      "member": {
        "shape": "Message"
      },
      "type": "list"
    },
    "NextToken": {
      "type": "string"
    },
    "OffsetSeconds": {
      "type": "integer"
    },
    "OutputFileName": {
      "pattern": "[\\w\\.-]{1,255}",
      "type": "string"
    },
    "OutputFileUriValue": {
      "documentation": "<p>The value of the variable as a structure that specifies an output file URI.</p>",
      "members": {
        "fileName": {
          "documentation": "<p>The URI of the location where dataset contents are stored, usually the URI of a file in an S3 bucket.</p>",
          "shape": "OutputFileName"
        }
      },
      "required": [
        "fileName"
      ],
      "type": "structure"
    },
    "ParquetConfiguration": {
      "documentation": "<p>Contains the configuration information of the Parquet format.</p>",
      "members": {
        "schemaDefinition": {
          "documentation": "<p>Information needed to define a schema.</p>",
          "shape": "SchemaDefinition"
        }
      },
      "type": "structure"
    },
    "Partition": {
      "documentation": "<p> A partition dimension defined by an attribute. </p>",
      "members": {
        "attributeName": {
          "documentation": "<p> The name of the attribute that defines a partition dimension. </p>",
          "shape": "PartitionAttributeName"
        }
      },
      "required": [
        "attributeName"
      ],
      "type": "structure"
    },
    "PartitionAttributeName": {
      "max": 128,
      "min": 1,
      "pattern": "^[a-zA-Z0-9_]+$",
      "type": "string"
    },
    "Partitions": {
      "max": 25,
      "member": {
        "shape": "DatastorePartition"
      },
      "min": 0,
      "type": "list"
    },
    "Pipeline": {
      "documentation": "<p>Contains information about a pipeline.</p>",
      "members": {
        "activities": {
          "documentation": "<p>The activities that perform transformations on the messages.</p>",
          "shape": "PipelineActivities"
        },
        "arn": {
          "documentation": "<p>The ARN of the pipeline.</p>",
          "shape": "PipelineArn"
        },
        "creationTime": {
          "documentation": "<p>When the pipeline was created.</p>",
          "shape": "Timestamp"
        },
        "lastUpdateTime": {
          "documentation": "<p>The last time the pipeline was updated.</p>",
          "shape": "Timestamp"
        },
        "name": {
          "documentation": "<p>The name of the pipeline.</p>",
          "shape": "PipelineName"
        },
        "reprocessingSummaries": {
          "documentation": "<p>A summary of information about the pipeline reprocessing.</p>",
          "shape": "ReprocessingSummaries"
        }
      },
      "type": "structure"
    },
    "PipelineActivities": {
      "max": 25,
      "member": {
        "shape": "PipelineActivity"
      },
      "min": 1,
      "type": "list"
    },
    "PipelineActivity": {
      "documentation": "<p>An activity that performs a transformation on a message.</p>",
      "members": {
        "addAttributes": {
          "documentation": "<p>Adds other attributes based on existing attributes in the message.</p>",
          "shape": "AddAttributesActivity"
        },
        "channel": {
          "documentation": "<p>Determines the source of the messages to be processed.</p>",
          "shape": "ChannelActivity"
        },
        "datastore": {
          "documentation": "<p>Specifies where to store the processed message data.</p>",
          "shape": "DatastoreActivity"
        },
        "deviceRegistryEnrich": {
          "documentation": "<p>Adds data from the IoT device registry to your message.</p>",
          "shape": "DeviceRegistryEnrichActivity"
        },
        "deviceShadowEnrich": {
          "documentation": "<p>Adds information from the IoT Device Shadow service to a message.</p>",
          "shape": "DeviceShadowEnrichActivity"
        },
        "filter": {
          "documentation": "<p>Filters a message based on its attributes.</p>",
          "shape": "FilterActivity"
        },
        "lambda": {
          "documentation": "<p>Runs a Lambda function to modify the message.</p>",
          "shape": "LambdaActivity"
        },
        "math": {
          "documentation": "<p>Computes an arithmetic expression using the message's attributes and adds it to the message.</p>",
          "shape": "MathActivity"
        },
        "removeAttributes": {
          "documentation": "<p>Removes attributes from a message.</p>",
          "shape": "RemoveAttributesActivity"
        },
        "selectAttributes": {
          "documentation": "<p>Used to create a new message using only the specified attributes from the original message. </p>",
          "shape": "SelectAttributesActivity"
        }
      },
      "type": "structure"
    },
    "PipelineArn": {
      "type": "string"
    },
    "PipelineName": {
      "max": 128,
      "min": 1,
      "pattern": "(^(?!_{2}))(^[a-zA-Z0-9_]+$)",
      "type": "string"
    },
    "PipelineSummaries": {
      "member": {
        "shape": "PipelineSummary"
      },
      "type": "list"
    },
    "PipelineSummary": {
      "documentation": "<p>A summary of information about a pipeline.</p>",
      "members": {
        "creationTime": {
          "documentation": "<p>When the pipeline was created.</p>",
          "shape": "Timestamp"
        },
        "lastUpdateTime": {
          "documentation": "<p>When the pipeline was last updated.</p>",
          "shape": "Timestamp"
        },
        "pipelineName": {
          "documentation": "<p>The name of the pipeline.</p>",
          "shape": "PipelineName"
        },
        "reprocessingSummaries": {
          "documentation": "<p>A summary of information about the pipeline reprocessing.</p>",
          "shape": "ReprocessingSummaries"
        }
      },
      "type": "structure"
    },
    "PresignedURI": {
      "type": "string"
    },
    "PutLoggingOptionsRequest": {
      "members": {
        "loggingOptions": {
          "documentation": "<p>The new values of the IoT Analytics logging options.</p>",
          "shape": "LoggingOptions"
        }
      },
      "required": [
        "loggingOptions"
      ],
      "type": "structure"
    },
    "QueryFilter": {
      "documentation": "<p>Information that is used to filter message data, to segregate it according to the timeframe in which it arrives.</p>",
      "members": {
        "deltaTime": {
          "documentation": "<p>Used to limit data to that which has arrived since the last execution of the action.</p>",
          "shape": "DeltaTime"
        }
      },
      "type": "structure"
    },
    "QueryFilters": {
      "max": 1,
      "member": {
        "shape": "QueryFilter"
      },
      "min": 0,
      "type": "list"
    },
    "Reason": {
      "type": "string"
    },
    "RemoveAttributesActivity": {
      "documentation": "<p>An activity that removes attributes from a message.</p>",
      "members": {
        "attributes": {
          "documentation": "<p>A list of 1-50 attributes to remove from the message.</p>",
          "shape": "AttributeNames"
        },
        "name": {
          "documentation": "<p>The name of the <code>removeAttributes</code> activity.</p>",
          "shape": "ActivityName"
        },
        "next": {
          "documentation": "<p>The next activity in the pipeline.</p>",
          "shape": "ActivityName"
        }
      },
      "required": [
        "name",
        "attributes"
      ],
      "type": "structure"
    },
    "ReprocessingId": {
      "type": "string"
    },
    "ReprocessingStatus": {
      "enum": [
        "RUNNING",
        "SUCCEEDED",
        "CANCELLED",
        "FAILED"
      ],
      "type": "string"
    },
    "ReprocessingSummaries": {
      "member": {
        "shape": "ReprocessingSummary"
      },
      "type": "list"
    },
    "ReprocessingSummary": {
      "documentation": "<p>Information about pipeline reprocessing.</p>",
      "members": {
        "creationTime": {
          "documentation": "<p>The time the pipeline reprocessing was created.</p>",
          "shape": "Timestamp"
        },
        "id": {
          "documentation": "<p>The <code>reprocessingId</code> returned by <code>StartPipelineReprocessing</code>.</p>",
          "shape": "ReprocessingId"
        },
        "status": {
          "documentation": "<p>The status of the pipeline reprocessing.</p>",
          "shape": "ReprocessingStatus"
        }
      },
      "type": "structure"
    },
    "ResourceAlreadyExistsException": {
      "documentation": "<p>A resource with the same name already exists.</p>",
      "error": {
        "httpStatusCode": 409
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "errorMessage"
        },
        "resourceArn": {
          "documentation": "<p>The ARN of the resource.</p>",
          "shape": "resourceArn"
        },
        "resourceId": {
          "documentation": "<p>The ID of the resource.</p>",
          "shape": "resourceId"
        }
      },
      "type": "structure"
    },
    "ResourceArn": {
      "max": 2048,
      "min": 20,
      "type": "string"
    },
    "ResourceConfiguration": {
      "documentation": "<p>The configuration of the resource used to execute the <code>containerAction</code>.</p>",
      "members": {
        "computeType": {
          "documentation": "<p>The type of the compute resource used to execute the <code>containerAction</code>. Possible values are: <code>ACU_1</code> (vCPU=4, memory=16 GiB) or <code>ACU_2</code> (vCPU=8, memory=32 GiB).</p>",
          "shape": "ComputeType"
        },
        "volumeSizeInGB": {
          "documentation": "<p>The size, in GB, of the persistent storage available to the resource instance used to execute the <code>containerAction</code> (min: 1, max: 50).</p>",
          "shape": "VolumeSizeInGB"
        }
      },
      "required": [
        "computeType",
        "volumeSizeInGB"
      ],
      "type": "structure"
    },
    "ResourceNotFoundException": {
      "documentation": "<p>A resource with the specified name could not be found.</p>",
      "error": {
        "httpStatusCode": 404
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "errorMessage"
        }
      },
      "type": "structure"
    },
    "RetentionPeriod": {
      "documentation": "<p>How long, in days, message data is kept.</p>",
      "members": {
        "numberOfDays": {
          "documentation": "<p>The number of days that message data is kept. The <code>unlimited</code> parameter must be false.</p>",
          "shape": "RetentionPeriodInDays"
        },
        "unlimited": {
          "documentation": "<p>If true, message data is kept indefinitely.</p>",
          "shape": "UnlimitedRetentionPeriod"
        }
      },
      "type": "structure"
    },
    "RetentionPeriodInDays": {
      "min": 1,
      "type": "integer"
    },
    "RoleArn": {
      "max": 2048,
      "min": 20,
      "type": "string"
    },
    "RunPipelineActivityRequest": {
      "members": {
        "payloads": {
          "documentation": "<p>The sample message payloads on which the pipeline activity is run.</p>",
          "shape": "MessagePayloads"
        },
        "pipelineActivity": {
          "documentation": "<p>The pipeline activity that is run. This must not be a channel activity or a data store activity because these activities are used in a pipeline only to load the original message and to store the (possibly) transformed message. If a Lambda activity is specified, only short-running Lambda functions (those with a timeout of less than 30 seconds or less) can be used.</p>",
          "shape": "PipelineActivity"
        }
      },
      "required": [
        "pipelineActivity",
        "payloads"
      ],
      "type": "structure"
    },
    "RunPipelineActivityResponse": {
      "members": {
        "logResult": {
          "documentation": "<p>In case the pipeline activity fails, the log message that is generated.</p>",
          "shape": "LogResult"
        },
        "payloads": {
          "documentation": "<p>The enriched or transformed sample message payloads as base64-encoded strings. (The results of running the pipeline activity on each input sample message payload, encoded in base64.)</p>",
          "shape": "MessagePayloads"
        }
      },
      "type": "structure"
    },
    "S3DestinationConfiguration": {
      "documentation": "<p>Configuration information for delivery of dataset contents to Amazon Simple Storage Service (Amazon S3).</p>",
      "members": {
        "bucket": {
          "documentation": "<p>The name of the S3 bucket to which dataset contents are delivered.</p>",
          "shape": "BucketName"
        },
        "glueConfiguration": {
          "documentation": "<p>Configuration information for coordination with Glue, a fully managed extract, transform and load (ETL) service.</p>",
          "shape": "GlueConfiguration"
        },
        "key": {
          "documentation": "<p>The key of the dataset contents object in an S3 bucket. Each object has a key that is a unique identifier. Each object has exactly one key.</p> <p>You can create a unique key with the following options:</p> <ul> <li> <p>Use <code>!{iotanalytics:scheduleTime}</code> to insert the time of a scheduled SQL query run.</p> </li> <li> <p>Use <code>!{iotanalytics:versionId}</code> to insert a unique hash that identifies a dataset content.</p> </li> <li> <p>Use <code>!{iotanalytics:creationTime}</code> to insert the creation time of a dataset content.</p> </li> </ul> <p>The following example creates a unique key for a CSV file: <code>dataset/mydataset/!{iotanalytics:scheduleTime}/!{iotanalytics:versionId}.csv</code> </p> <note> <p>If you don't use <code>!{iotanalytics:versionId}</code> to specify the key, you might get duplicate keys. For example, you might have two dataset contents with the same <code>scheduleTime</code> but different <code>versionId</code>s. This means that one dataset content overwrites the other. </p> </note>",
          "shape": "BucketKeyExpression"
        },
        "roleArn": {
          "documentation": "<p>The ARN of the role that grants IoT Analytics permission to interact with your Amazon S3 and Glue resources.</p>",
          "shape": "RoleArn"
        }
      },
      "required": [
        "bucket",
        "key",
        "roleArn"
      ],
      "type": "structure"
    },
    "S3KeyPrefix": {
      "max": 255,
      "min": 1,
      "pattern": "^[a-zA-Z0-9!_.*'()/{}:-]*/$",
      "type": "string"
    },
    "S3PathChannelMessage": {
      "max": 1024,
      "min": 1,
      "pattern": "^[a-zA-Z0-9/_!'(){}\\*\\s\\.\\-\\=\\:]+$",
      "type": "string"
    },
    "S3PathChannelMessages": {
      "max": 100,
      "member": {
        "shape": "S3PathChannelMessage"
      },
      "min": 1,
      "type": "list"
    },
    "SampleChannelDataRequest": {
      "members": {
        "channelName": {
          "documentation": "<p>The name of the channel whose message samples are retrieved.</p>",
          "location": "uri",
          "locationName": "channelName",
          "shape": "ChannelName"
        },
        "endTime": {
          "documentation": "<p>The end of the time window from which sample messages are retrieved.</p>",
          "location": "querystring",
          "locationName": "endTime",
          "shape": "EndTime"
        },
        "maxMessages": {
          "documentation": "<p>The number of sample messages to be retrieved. The limit is 10. The default is also 10.</p>",
          "location": "querystring",
          "locationName": "maxMessages",
          "shape": "MaxMessages"
        },
        "startTime": {
          "documentation": "<p>The start of the time window from which sample messages are retrieved.</p>",
          "location": "querystring",
          "locationName": "startTime",
          "shape": "StartTime"
        }
      },
      "required": [
        "channelName"
      ],
      "type": "structure"
    },
    "SampleChannelDataResponse": {
      "members": {
        "payloads": {
          "documentation": "<p>The list of message samples. Each sample message is returned as a base64-encoded string.</p>",
          "shape": "MessagePayloads"
        }
      },
      "type": "structure"
    },
    "Schedule": {
      "documentation": "<p>The schedule for when to trigger an update.</p>",
      "members": {
        "expression": {
          "documentation": "<p>The expression that defines when to trigger an update. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html\">Schedule Expressions for Rules</a> in the <i>Amazon CloudWatch Events User Guide</i>.</p>",
          "shape": "ScheduleExpression"
        }
      },
      "type": "structure"
    },
    "ScheduleExpression": {
      "type": "string"
    },
    "SchemaDefinition": {
      "documentation": "<p>Information needed to define a schema.</p>",
      "members": {
        "columns": {
          "documentation": "<p>Specifies one or more columns that store your data.</p> <p>Each schema can have up to 100 columns. Each column can have up to 100 nested types.</p>",
          "shape": "Columns"
        }
      },
      "type": "structure"
    },
    "SelectAttributesActivity": {
      "documentation": "<p>Used to create a new message using only the specified attributes from the original message.</p>",
      "members": {
        "attributes": {
          "documentation": "<p>A list of the attributes to select from the message.</p>",
          "shape": "AttributeNames"
        },
        "name": {
          "documentation": "<p>The name of the <code>selectAttributes</code> activity.</p>",
          "shape": "ActivityName"
        },
        "next": {
          "documentation": "<p>The next activity in the pipeline.</p>",
          "shape": "ActivityName"
        }
      },
      "required": [
        "name",
        "attributes"
      ],
      "type": "structure"
    },
    "ServiceManagedChannelS3Storage": {
      "documentation": "<p>Used to store channel data in an S3 bucket managed by IoT Analytics. You can't change the choice of S3 storage after the data store is created.</p>",
      "members": {},
      "type": "structure"
    },
    "ServiceManagedChannelS3StorageSummary": {
      "documentation": "<p>Used to store channel data in an S3 bucket managed by IoT Analytics.</p>",
      "members": {},
      "type": "structure"
    },
    "ServiceManagedDatastoreS3Storage": {
      "documentation": "<p>Used to store data in an Amazon S3 bucket managed by IoT Analytics. You can't change the choice of Amazon S3 storage after your data store is created. </p>",
      "members": {},
      "type": "structure"
    },
    "ServiceManagedDatastoreS3StorageSummary": {
      "documentation": "<p>Contains information about the data store that is managed by IoT Analytics.</p>",
      "members": {},
      "type": "structure"
    },
    "ServiceUnavailableException": {
      "documentation": "<p>The service is temporarily unavailable.</p>",
      "error": {
        "httpStatusCode": 503
      },
      "exception": true,
      "fault": true,
      "members": {
        "message": {
          "shape": "errorMessage"
        }
      },
      "type": "structure"
    },
    "SessionTimeoutInMinutes": {
      "max": 60,
      "min": 1,
      "type": "integer"
    },
    "SizeInBytes": {
      "type": "double"
    },
    "SqlQuery": {
      "type": "string"
    },
    "SqlQueryDatasetAction": {
      "documentation": "<p>The SQL query to modify the message.</p>",
      "members": {
        "filters": {
          "documentation": "<p>Prefilters applied to message data.</p>",
          "shape": "QueryFilters"
        },
        "sqlQuery": {
          "documentation": "<p>A SQL query string.</p>",
          "shape": "SqlQuery"
        }
      },
      "required": [
        "sqlQuery"
      ],
      "type": "structure"
    },
    "StartPipelineReprocessingRequest": {
      "members": {
        "channelMessages": {
          "documentation": "<p>Specifies one or more sets of channel messages that you want to reprocess.</p> <p>If you use the <code>channelMessages</code> object, you must not specify a value for <code>startTime</code> and <code>endTime</code>.</p>",
          "shape": "ChannelMessages"
        },
        "endTime": {
          "documentation": "<p>The end time (exclusive) of raw message data that is reprocessed.</p> <p>If you specify a value for the <code>endTime</code> parameter, you must not use the <code>channelMessages</code> object.</p>",
          "shape": "EndTime"
        },
        "pipelineName": {
          "documentation": "<p>The name of the pipeline on which to start reprocessing.</p>",
          "location": "uri",
          "locationName": "pipelineName",
          "shape": "PipelineName"
        },
        "startTime": {
          "documentation": "<p>The start time (inclusive) of raw message data that is reprocessed.</p> <p>If you specify a value for the <code>startTime</code> parameter, you must not use the <code>channelMessages</code> object.</p>",
          "shape": "StartTime"
        }
      },
      "required": [
        "pipelineName"
      ],
      "type": "structure"
    },
    "StartPipelineReprocessingResponse": {
      "members": {
        "reprocessingId": {
          "documentation": "<p>The ID of the pipeline reprocessing activity that was started.</p>",
          "shape": "ReprocessingId"
        }
      },
      "type": "structure"
    },
    "StartTime": {
      "type": "timestamp"
    },
    "StringValue": {
      "max": 1024,
      "min": 0,
      "type": "string"
    },
    "Tag": {
      "documentation": "<p>A set of key-value pairs that are used to manage the resource.</p>",
      "members": {
        "key": {
          "documentation": "<p>The tag's key.</p>",
          "shape": "TagKey"
        },
        "value": {
          "documentation": "<p>The tag's value.</p>",
          "shape": "TagValue"
        }
      },
      "required": [
        "key",
        "value"
      ],
      "type": "structure"
    },
    "TagKey": {
      "max": 256,
      "min": 1,
      "type": "string"
    },
    "TagKeyList": {
      "max": 50,
      "member": {
        "shape": "TagKey"
      },
      "min": 1,
      "type": "list"
    },
    "TagList": {
      "max": 50,
      "member": {
        "shape": "Tag"
      },
      "min": 1,
      "type": "list"
    },
    "TagResourceRequest": {
      "members": {
        "resourceArn": {
          "documentation": "<p>The ARN of the resource whose tags you want to modify.</p>",
          "location": "querystring",
          "locationName": "resourceArn",
          "shape": "ResourceArn"
        },
        "tags": {
          "documentation": "<p>The new or modified tags for the resource.</p>",
          "shape": "TagList"
        }
      },
      "required": [
        "resourceArn",
        "tags"
      ],
      "type": "structure"
    },
    "TagResourceResponse": {
      "members": {},
      "type": "structure"
    },
    "TagValue": {
      "max": 256,
      "min": 1,
      "type": "string"
    },
    "ThrottlingException": {
      "documentation": "<p>The request was denied due to request throttling.</p>",
      "error": {
        "httpStatusCode": 429
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "errorMessage"
        }
      },
      "type": "structure"
    },
    "TimeExpression": {
      "type": "string"
    },
    "Timestamp": {
      "type": "timestamp"
    },
    "TimestampFormat": {
      "max": 50,
      "min": 1,
      "pattern": "^[a-zA-Z0-9\\s\\[\\]_,.'/:-]*$",
      "type": "string"
    },
    "TimestampPartition": {
      "documentation": "<p> A partition dimension defined by a timestamp attribute. </p>",
      "members": {
        "attributeName": {
          "documentation": "<p> The attribute name of the partition defined by a timestamp. </p>",
          "shape": "PartitionAttributeName"
        },
        "timestampFormat": {
          "documentation": "<p> The timestamp format of a partition defined by a timestamp. The default format is seconds since epoch (January 1, 1970 at midnight UTC time). </p>",
          "shape": "TimestampFormat"
        }
      },
      "required": [
        "attributeName"
      ],
      "type": "structure"
    },
    "TriggeringDataset": {
      "documentation": "<p>Information about the dataset whose content generation triggers the new dataset content generation.</p>",
      "members": {
        "name": {
          "documentation": "<p>The name of the dataset whose content generation triggers the new dataset content generation.</p>",
          "shape": "DatasetName"
        }
      },
      "required": [
        "name"
      ],
      "type": "structure"
    },
    "UnlimitedRetentionPeriod": {
      "type": "boolean"
    },
    "UnlimitedVersioning": {
      "type": "boolean"
    },
    "UntagResourceRequest": {
      "members": {
        "resourceArn": {
          "documentation": "<p>The ARN of the resource whose tags you want to remove.</p>",
          "location": "querystring",
          "locationName": "resourceArn",
          "shape": "ResourceArn"
        },
        "tagKeys": {
          "documentation": "<p>The keys of those tags which you want to remove.</p>",
          "location": "querystring",
          "locationName": "tagKeys",
          "shape": "TagKeyList"
        }
      },
      "required": [
        "resourceArn",
        "tagKeys"
      ],
      "type": "structure"
    },
    "UntagResourceResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateChannelRequest": {
      "members": {
        "channelName": {
          "documentation": "<p>The name of the channel to be updated.</p>",
          "location": "uri",
          "locationName": "channelName",
          "shape": "ChannelName"
        },
        "channelStorage": {
          "documentation": "<p>Where channel data is stored. You can choose one of <code>serviceManagedS3</code> or <code>customerManagedS3</code> storage. If not specified, the default is <code>serviceManagedS3</code>. You can't change this storage option after the channel is created.</p>",
          "shape": "ChannelStorage"
        },
        "retentionPeriod": {
          "documentation": "<p>How long, in days, message data is kept for the channel. The retention period can't be updated if the channel's Amazon S3 storage is customer-managed.</p>",
          "shape": "RetentionPeriod"
        }
      },
      "required": [
        "channelName"
      ],
      "type": "structure"
    },
    "UpdateDatasetRequest": {
      "members": {
        "actions": {
          "documentation": "<p>A list of <code>DatasetAction</code> objects.</p>",
          "shape": "DatasetActions"
        },
        "contentDeliveryRules": {
          "documentation": "<p>When dataset contents are created, they are delivered to destinations specified here.</p>",
          "shape": "DatasetContentDeliveryRules"
        },
        "datasetName": {
          "documentation": "<p>The name of the dataset to update.</p>",
          "location": "uri",
          "locationName": "datasetName",
          "shape": "DatasetName"
        },
        "lateDataRules": {
          "documentation": "<p>A list of data rules that send notifications to CloudWatch, when data arrives late. To specify <code>lateDataRules</code>, the dataset must use a <a href=\"https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html\">DeltaTimer</a> filter.</p>",
          "shape": "LateDataRules"
        },
        "retentionPeriod": {
          "documentation": "<p>How long, in days, dataset contents are kept for the dataset.</p>",
          "shape": "RetentionPeriod"
        },
        "triggers": {
          "documentation": "<p>A list of <code>DatasetTrigger</code> objects. The list can be empty or can contain up to five <code>DatasetTrigger</code> objects.</p>",
          "shape": "DatasetTriggers"
        },
        "versioningConfiguration": {
          "documentation": "<p>Optional. How many versions of dataset contents are kept. If not specified or set to null, only the latest version plus the latest succeeded version (if they are different) are kept for the time period specified by the <code>retentionPeriod</code> parameter. For more information, see <a href=\"https://docs.aws.amazon.com/iotanalytics/latest/userguide/getting-started.html#aws-iot-analytics-dataset-versions\">Keeping Multiple Versions of IoT Analytics datasets</a> in the <i>IoT Analytics User Guide</i>.</p>",
          "shape": "VersioningConfiguration"
        }
      },
      "required": [
        "datasetName",
        "actions"
      ],
      "type": "structure"
    },
    "UpdateDatastoreRequest": {
      "members": {
        "datastoreName": {
          "documentation": "<p>The name of the data store to be updated.</p>",
          "location": "uri",
          "locationName": "datastoreName",
          "shape": "DatastoreName"
        },
        "datastoreStorage": {
          "documentation": "<p>Where data in a data store is stored.. You can choose <code>serviceManagedS3</code> storage, <code>customerManagedS3</code> storage, or <code>iotSiteWiseMultiLayerStorage</code> storage. The default is <code>serviceManagedS3</code>. You can't change the choice of Amazon S3 storage after your data store is created. </p>",
          "shape": "DatastoreStorage"
        },
        "fileFormatConfiguration": {
          "documentation": "<p>Contains the configuration information of file formats. IoT Analytics data stores support JSON and <a href=\"https://parquet.apache.org/\">Parquet</a>.</p> <p>The default file format is JSON. You can specify only one format.</p> <p>You can't change the file format after you create the data store.</p>",
          "shape": "FileFormatConfiguration"
        },
        "retentionPeriod": {
          "documentation": "<p>How long, in days, message data is kept for the data store. The retention period can't be updated if the data store's Amazon S3 storage is customer-managed.</p>",
          "shape": "RetentionPeriod"
        }
      },
      "required": [
        "datastoreName"
      ],
      "type": "structure"
    },
    "UpdatePipelineRequest": {
      "members": {
        "pipelineActivities": {
          "documentation": "<p>A list of <code>PipelineActivity</code> objects. Activities perform transformations on your messages, such as removing, renaming or adding message attributes; filtering messages based on attribute values; invoking your Lambda functions on messages for advanced processing; or performing mathematical transformations to normalize device data.</p> <p>The list can be 2-25 <code>PipelineActivity</code> objects and must contain both a <code>channel</code> and a <code>datastore</code> activity. Each entry in the list must contain only one activity. For example:</p> <p> <code>pipelineActivities = [ { \"channel\": { ... } }, { \"lambda\": { ... } }, ... ]</code> </p>",
          "shape": "PipelineActivities"
        },
        "pipelineName": {
          "documentation": "<p>The name of the pipeline to update.</p>",
          "location": "uri",
          "locationName": "pipelineName",
          "shape": "PipelineName"
        }
      },
      "required": [
        "pipelineName",
        "pipelineActivities"
      ],
      "type": "structure"
    },
    "Variable": {
      "documentation": "<p>An instance of a variable to be passed to the <code>containerAction</code> execution. Each variable must have a name and a value given by one of <code>stringValue</code>, <code>datasetContentVersionValue</code>, or <code>outputFileUriValue</code>.</p>",
      "members": {
        "datasetContentVersionValue": {
          "documentation": "<p>The value of the variable as a structure that specifies a dataset content version.</p>",
          "shape": "DatasetContentVersionValue"
        },
        "doubleValue": {
          "box": true,
          "documentation": "<p>The value of the variable as a double (numeric).</p>",
          "shape": "DoubleValue"
        },
        "name": {
          "documentation": "<p>The name of the variable.</p>",
          "shape": "VariableName"
        },
        "outputFileUriValue": {
          "documentation": "<p>The value of the variable as a structure that specifies an output file URI.</p>",
          "shape": "OutputFileUriValue"
        },
        "stringValue": {
          "documentation": "<p>The value of the variable as a string.</p>",
          "shape": "StringValue"
        }
      },
      "required": [
        "name"
      ],
      "type": "structure"
    },
    "VariableName": {
      "max": 256,
      "min": 1,
      "type": "string"
    },
    "Variables": {
      "max": 50,
      "member": {
        "shape": "Variable"
      },
      "min": 0,
      "type": "list"
    },
    "VersioningConfiguration": {
      "documentation": "<p>Information about the versioning of dataset contents.</p>",
      "members": {
        "maxVersions": {
          "documentation": "<p>How many versions of dataset contents are kept. The <code>unlimited</code> parameter must be <code>false</code>.</p>",
          "shape": "MaxVersions"
        },
        "unlimited": {
          "documentation": "<p>If true, unlimited versions of dataset contents are kept.</p>",
          "shape": "UnlimitedVersioning"
        }
      },
      "type": "structure"
    },
    "VolumeSizeInGB": {
      "max": 50,
      "min": 1,
      "type": "integer"
    },
    "errorMessage": {
      "type": "string"
    },
    "resourceArn": {
      "type": "string"
    },
    "resourceId": {
      "type": "string"
    }
  },
  "version": "2.0"
}
