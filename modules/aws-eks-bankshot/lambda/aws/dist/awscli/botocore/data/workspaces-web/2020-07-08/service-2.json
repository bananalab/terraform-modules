{
  "documentation": "<p>WorkSpaces Web is a low cost, fully managed WorkSpace built specifically to facilitate secure, web-based workloads. WorkSpaces Web makes it easy for customers to safely provide their employees with access to internal websites and SaaS web applications without the administrative burden of appliances or specialized client software. WorkSpaces Web provides simple policy tools tailored for user interactions, while offloading common tasks like capacity management, scaling, and maintaining browser images.</p>",
  "metadata": {
    "apiVersion": "2020-07-08",
    "endpointPrefix": "workspaces-web",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "Amazon WorkSpaces Web",
    "serviceId": "WorkSpaces Web",
    "signatureVersion": "v4",
    "signingName": "workspaces-web",
    "uid": "workspaces-web-2020-07-08"
  },
  "operations": {
    "AssociateBrowserSettings": {
      "documentation": "<p>Associates a browser settings resource with a web portal.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/portals/{portalArn+}/browserSettings",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "AssociateBrowserSettingsRequest"
      },
      "name": "AssociateBrowserSettings",
      "output": {
        "shape": "AssociateBrowserSettingsResponse"
      }
    },
    "AssociateNetworkSettings": {
      "documentation": "<p>Associates a network settings resource with a web portal.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/portals/{portalArn+}/networkSettings",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "AssociateNetworkSettingsRequest"
      },
      "name": "AssociateNetworkSettings",
      "output": {
        "shape": "AssociateNetworkSettingsResponse"
      }
    },
    "AssociateTrustStore": {
      "documentation": "<p>Associates a trust store with a web portal.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/portals/{portalArn+}/trustStores",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "AssociateTrustStoreRequest"
      },
      "name": "AssociateTrustStore",
      "output": {
        "shape": "AssociateTrustStoreResponse"
      }
    },
    "AssociateUserAccessLoggingSettings": {
      "documentation": "<p>Associates a user access logging settings resource with a web portal.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/portals/{portalArn+}/userAccessLoggingSettings",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "AssociateUserAccessLoggingSettingsRequest"
      },
      "name": "AssociateUserAccessLoggingSettings",
      "output": {
        "shape": "AssociateUserAccessLoggingSettingsResponse"
      }
    },
    "AssociateUserSettings": {
      "documentation": "<p>Associates a user settings resource with a web portal.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/portals/{portalArn+}/userSettings",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "AssociateUserSettingsRequest"
      },
      "name": "AssociateUserSettings",
      "output": {
        "shape": "AssociateUserSettingsResponse"
      }
    },
    "CreateBrowserSettings": {
      "documentation": "<p>Creates a browser settings resource that can be associated with a web portal. Once associated with a web portal, browser settings control how the browser will behave once a user starts a streaming session for the web portal. </p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/browserSettings",
        "responseCode": 200
      },
      "input": {
        "shape": "CreateBrowserSettingsRequest"
      },
      "name": "CreateBrowserSettings",
      "output": {
        "shape": "CreateBrowserSettingsResponse"
      }
    },
    "CreateIdentityProvider": {
      "documentation": "<p>Creates an identity provider resource that is then associated with a web portal.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/identityProviders",
        "responseCode": 200
      },
      "input": {
        "shape": "CreateIdentityProviderRequest"
      },
      "name": "CreateIdentityProvider",
      "output": {
        "shape": "CreateIdentityProviderResponse"
      }
    },
    "CreateNetworkSettings": {
      "documentation": "<p>Creates a network settings resource that can be associated with a web portal. Once associated with a web portal, network settings define how streaming instances will connect with your specified VPC. </p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/networkSettings",
        "responseCode": 200
      },
      "input": {
        "shape": "CreateNetworkSettingsRequest"
      },
      "name": "CreateNetworkSettings",
      "output": {
        "shape": "CreateNetworkSettingsResponse"
      }
    },
    "CreatePortal": {
      "documentation": "<p>Creates a web portal.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/portals",
        "responseCode": 200
      },
      "input": {
        "shape": "CreatePortalRequest"
      },
      "name": "CreatePortal",
      "output": {
        "shape": "CreatePortalResponse"
      }
    },
    "CreateTrustStore": {
      "documentation": "<p>Creates a trust store that can be associated with a web portal. A trust store contains certificate authority (CA) certificates. Once associated with a web portal, the browser in a streaming session will recognize certificates that have been issued using any of the CAs in the trust store. If your organization has internal websites that use certificates issued by private CAs, you should add the private CA certificate to the trust store. </p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/trustStores",
        "responseCode": 200
      },
      "input": {
        "shape": "CreateTrustStoreRequest"
      },
      "name": "CreateTrustStore",
      "output": {
        "shape": "CreateTrustStoreResponse"
      }
    },
    "CreateUserAccessLoggingSettings": {
      "documentation": "<p>Creates a user access logging settings resource that can be associated with a web portal.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/userAccessLoggingSettings",
        "responseCode": 200
      },
      "input": {
        "shape": "CreateUserAccessLoggingSettingsRequest"
      },
      "name": "CreateUserAccessLoggingSettings",
      "output": {
        "shape": "CreateUserAccessLoggingSettingsResponse"
      }
    },
    "CreateUserSettings": {
      "documentation": "<p>Creates a user settings resource that can be associated with a web portal. Once associated with a web portal, user settings control how users can transfer data between a streaming session and the their local devices. </p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/userSettings",
        "responseCode": 200
      },
      "input": {
        "shape": "CreateUserSettingsRequest"
      },
      "name": "CreateUserSettings",
      "output": {
        "shape": "CreateUserSettingsResponse"
      }
    },
    "DeleteBrowserSettings": {
      "documentation": "<p>Deletes browser settings.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/browserSettings/{browserSettingsArn+}",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "DeleteBrowserSettingsRequest"
      },
      "name": "DeleteBrowserSettings",
      "output": {
        "shape": "DeleteBrowserSettingsResponse"
      }
    },
    "DeleteIdentityProvider": {
      "documentation": "<p>Deletes the identity provider.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/identityProviders/{identityProviderArn+}",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "DeleteIdentityProviderRequest"
      },
      "name": "DeleteIdentityProvider",
      "output": {
        "shape": "DeleteIdentityProviderResponse"
      }
    },
    "DeleteNetworkSettings": {
      "documentation": "<p>Deletes network settings.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/networkSettings/{networkSettingsArn+}",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "DeleteNetworkSettingsRequest"
      },
      "name": "DeleteNetworkSettings",
      "output": {
        "shape": "DeleteNetworkSettingsResponse"
      }
    },
    "DeletePortal": {
      "documentation": "<p>Deletes a web portal.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/portals/{portalArn+}",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "DeletePortalRequest"
      },
      "name": "DeletePortal",
      "output": {
        "shape": "DeletePortalResponse"
      }
    },
    "DeleteTrustStore": {
      "documentation": "<p>Deletes the trust store.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/trustStores/{trustStoreArn+}",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "DeleteTrustStoreRequest"
      },
      "name": "DeleteTrustStore",
      "output": {
        "shape": "DeleteTrustStoreResponse"
      }
    },
    "DeleteUserAccessLoggingSettings": {
      "documentation": "<p>Deletes user access logging settings.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/userAccessLoggingSettings/{userAccessLoggingSettingsArn+}",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "DeleteUserAccessLoggingSettingsRequest"
      },
      "name": "DeleteUserAccessLoggingSettings",
      "output": {
        "shape": "DeleteUserAccessLoggingSettingsResponse"
      }
    },
    "DeleteUserSettings": {
      "documentation": "<p>Deletes user settings.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/userSettings/{userSettingsArn+}",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "DeleteUserSettingsRequest"
      },
      "name": "DeleteUserSettings",
      "output": {
        "shape": "DeleteUserSettingsResponse"
      }
    },
    "DisassociateBrowserSettings": {
      "documentation": "<p>Disassociates browser settings from a web portal.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/portals/{portalArn+}/browserSettings",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "DisassociateBrowserSettingsRequest"
      },
      "name": "DisassociateBrowserSettings",
      "output": {
        "shape": "DisassociateBrowserSettingsResponse"
      }
    },
    "DisassociateNetworkSettings": {
      "documentation": "<p>Disassociates network settings from a web portal.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/portals/{portalArn+}/networkSettings",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "DisassociateNetworkSettingsRequest"
      },
      "name": "DisassociateNetworkSettings",
      "output": {
        "shape": "DisassociateNetworkSettingsResponse"
      }
    },
    "DisassociateTrustStore": {
      "documentation": "<p>Disassociates a trust store from a web portal.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/portals/{portalArn+}/trustStores",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "DisassociateTrustStoreRequest"
      },
      "name": "DisassociateTrustStore",
      "output": {
        "shape": "DisassociateTrustStoreResponse"
      }
    },
    "DisassociateUserAccessLoggingSettings": {
      "documentation": "<p>Disassociates user access logging settings from a web portal.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/portals/{portalArn+}/userAccessLoggingSettings",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "DisassociateUserAccessLoggingSettingsRequest"
      },
      "name": "DisassociateUserAccessLoggingSettings",
      "output": {
        "shape": "DisassociateUserAccessLoggingSettingsResponse"
      }
    },
    "DisassociateUserSettings": {
      "documentation": "<p>Disassociates user settings from a web portal.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/portals/{portalArn+}/userSettings",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "DisassociateUserSettingsRequest"
      },
      "name": "DisassociateUserSettings",
      "output": {
        "shape": "DisassociateUserSettingsResponse"
      }
    },
    "GetBrowserSettings": {
      "documentation": "<p>Gets browser settings.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/browserSettings/{browserSettingsArn+}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetBrowserSettingsRequest"
      },
      "name": "GetBrowserSettings",
      "output": {
        "shape": "GetBrowserSettingsResponse"
      }
    },
    "GetIdentityProvider": {
      "documentation": "<p>Gets the identity provider.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/identityProviders/{identityProviderArn+}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetIdentityProviderRequest"
      },
      "name": "GetIdentityProvider",
      "output": {
        "shape": "GetIdentityProviderResponse"
      }
    },
    "GetNetworkSettings": {
      "documentation": "<p>Gets the network settings.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/networkSettings/{networkSettingsArn+}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetNetworkSettingsRequest"
      },
      "name": "GetNetworkSettings",
      "output": {
        "shape": "GetNetworkSettingsResponse"
      }
    },
    "GetPortal": {
      "documentation": "<p>Gets the web portal.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/portals/{portalArn+}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetPortalRequest"
      },
      "name": "GetPortal",
      "output": {
        "shape": "GetPortalResponse"
      }
    },
    "GetPortalServiceProviderMetadata": {
      "documentation": "<p>Gets the service provider metadata.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/portalIdp/{portalArn+}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetPortalServiceProviderMetadataRequest"
      },
      "name": "GetPortalServiceProviderMetadata",
      "output": {
        "shape": "GetPortalServiceProviderMetadataResponse"
      }
    },
    "GetTrustStore": {
      "documentation": "<p>Gets the trust store.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/trustStores/{trustStoreArn+}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetTrustStoreRequest"
      },
      "name": "GetTrustStore",
      "output": {
        "shape": "GetTrustStoreResponse"
      }
    },
    "GetTrustStoreCertificate": {
      "documentation": "<p>Gets the trust store certificate.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/trustStores/{trustStoreArn+}/certificate",
        "responseCode": 200
      },
      "input": {
        "shape": "GetTrustStoreCertificateRequest"
      },
      "name": "GetTrustStoreCertificate",
      "output": {
        "shape": "GetTrustStoreCertificateResponse"
      }
    },
    "GetUserAccessLoggingSettings": {
      "documentation": "<p>Gets user access logging settings.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/userAccessLoggingSettings/{userAccessLoggingSettingsArn+}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetUserAccessLoggingSettingsRequest"
      },
      "name": "GetUserAccessLoggingSettings",
      "output": {
        "shape": "GetUserAccessLoggingSettingsResponse"
      }
    },
    "GetUserSettings": {
      "documentation": "<p>Gets user settings.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/userSettings/{userSettingsArn+}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetUserSettingsRequest"
      },
      "name": "GetUserSettings",
      "output": {
        "shape": "GetUserSettingsResponse"
      }
    },
    "ListBrowserSettings": {
      "documentation": "<p>Retrieves a list of browser settings.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/browserSettings",
        "responseCode": 200
      },
      "input": {
        "shape": "ListBrowserSettingsRequest"
      },
      "name": "ListBrowserSettings",
      "output": {
        "shape": "ListBrowserSettingsResponse"
      }
    },
    "ListIdentityProviders": {
      "documentation": "<p>Retrieves a list of identity providers for a specific web portal.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/portals/{portalArn+}/identityProviders",
        "responseCode": 200
      },
      "input": {
        "shape": "ListIdentityProvidersRequest"
      },
      "name": "ListIdentityProviders",
      "output": {
        "shape": "ListIdentityProvidersResponse"
      }
    },
    "ListNetworkSettings": {
      "documentation": "<p>Retrieves a list of network settings.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/networkSettings",
        "responseCode": 200
      },
      "input": {
        "shape": "ListNetworkSettingsRequest"
      },
      "name": "ListNetworkSettings",
      "output": {
        "shape": "ListNetworkSettingsResponse"
      }
    },
    "ListPortals": {
      "documentation": "<p>Retrieves a list or web portals.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/portals",
        "responseCode": 200
      },
      "input": {
        "shape": "ListPortalsRequest"
      },
      "name": "ListPortals",
      "output": {
        "shape": "ListPortalsResponse"
      }
    },
    "ListTagsForResource": {
      "documentation": "<p>Retrieves a list of tags for a resource.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/tags/{resourceArn+}",
        "responseCode": 200
      },
      "input": {
        "shape": "ListTagsForResourceRequest"
      },
      "name": "ListTagsForResource",
      "output": {
        "shape": "ListTagsForResourceResponse"
      }
    },
    "ListTrustStoreCertificates": {
      "documentation": "<p>Retrieves a list of trust store certificates.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/trustStores/{trustStoreArn+}/certificates",
        "responseCode": 200
      },
      "input": {
        "shape": "ListTrustStoreCertificatesRequest"
      },
      "name": "ListTrustStoreCertificates",
      "output": {
        "shape": "ListTrustStoreCertificatesResponse"
      }
    },
    "ListTrustStores": {
      "documentation": "<p>Retrieves a list of trust stores.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/trustStores",
        "responseCode": 200
      },
      "input": {
        "shape": "ListTrustStoresRequest"
      },
      "name": "ListTrustStores",
      "output": {
        "shape": "ListTrustStoresResponse"
      }
    },
    "ListUserAccessLoggingSettings": {
      "documentation": "<p>Retrieves a list of user access logging settings.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/userAccessLoggingSettings",
        "responseCode": 200
      },
      "input": {
        "shape": "ListUserAccessLoggingSettingsRequest"
      },
      "name": "ListUserAccessLoggingSettings",
      "output": {
        "shape": "ListUserAccessLoggingSettingsResponse"
      }
    },
    "ListUserSettings": {
      "documentation": "<p>Retrieves a list of user settings.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/userSettings",
        "responseCode": 200
      },
      "input": {
        "shape": "ListUserSettingsRequest"
      },
      "name": "ListUserSettings",
      "output": {
        "shape": "ListUserSettingsResponse"
      }
    },
    "TagResource": {
      "documentation": "<p>Adds or overwrites one or more tags for the specified resource.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "TooManyTagsException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/tags/{resourceArn+}",
        "responseCode": 200
      },
      "input": {
        "shape": "TagResourceRequest"
      },
      "name": "TagResource",
      "output": {
        "shape": "TagResourceResponse"
      }
    },
    "UntagResource": {
      "documentation": "<p>Removes one or more tags from the specified resource.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/tags/{resourceArn+}",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "UntagResourceRequest"
      },
      "name": "UntagResource",
      "output": {
        "shape": "UntagResourceResponse"
      }
    },
    "UpdateBrowserSettings": {
      "documentation": "<p>Updates browser settings.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/browserSettings/{browserSettingsArn+}",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateBrowserSettingsRequest"
      },
      "name": "UpdateBrowserSettings",
      "output": {
        "shape": "UpdateBrowserSettingsResponse"
      }
    },
    "UpdateIdentityProvider": {
      "documentation": "<p>Updates the identity provider. </p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/identityProviders/{identityProviderArn+}",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateIdentityProviderRequest"
      },
      "name": "UpdateIdentityProvider",
      "output": {
        "shape": "UpdateIdentityProviderResponse"
      }
    },
    "UpdateNetworkSettings": {
      "documentation": "<p>Updates network settings.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/networkSettings/{networkSettingsArn+}",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateNetworkSettingsRequest"
      },
      "name": "UpdateNetworkSettings",
      "output": {
        "shape": "UpdateNetworkSettingsResponse"
      }
    },
    "UpdatePortal": {
      "documentation": "<p>Updates a web portal.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/portals/{portalArn+}",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "UpdatePortalRequest"
      },
      "name": "UpdatePortal",
      "output": {
        "shape": "UpdatePortalResponse"
      }
    },
    "UpdateTrustStore": {
      "documentation": "<p>Updates the trust store.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/trustStores/{trustStoreArn+}",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateTrustStoreRequest"
      },
      "name": "UpdateTrustStore",
      "output": {
        "shape": "UpdateTrustStoreResponse"
      }
    },
    "UpdateUserAccessLoggingSettings": {
      "documentation": "<p>Updates the user access logging settings.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/userAccessLoggingSettings/{userAccessLoggingSettingsArn+}",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateUserAccessLoggingSettingsRequest"
      },
      "name": "UpdateUserAccessLoggingSettings",
      "output": {
        "shape": "UpdateUserAccessLoggingSettingsResponse"
      }
    },
    "UpdateUserSettings": {
      "documentation": "<p>Updates the user settings.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/userSettings/{userSettingsArn+}",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateUserSettingsRequest"
      },
      "name": "UpdateUserSettings",
      "output": {
        "shape": "UpdateUserSettingsResponse"
      }
    }
  },
  "shapes": {
    "ARN": {
      "max": 2048,
      "min": 20,
      "pattern": "^arn:[\\w+=\\/,.@-]+:[a-zA-Z0-9\\-]+:[a-zA-Z0-9\\-]*:[a-zA-Z0-9]{1,12}:[a-zA-Z]+(\\/[a-fA-F0-9\\-]{36})+$",
      "type": "string"
    },
    "AccessDeniedException": {
      "documentation": "<p>Access is denied.</p>",
      "error": {
        "httpStatusCode": 403,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "ExceptionMessage"
        }
      },
      "type": "structure"
    },
    "ArnList": {
      "member": {
        "shape": "ARN"
      },
      "type": "list"
    },
    "AssociateBrowserSettingsRequest": {
      "members": {
        "browserSettingsArn": {
          "documentation": "<p>The ARN of the browser settings.</p>",
          "location": "querystring",
          "locationName": "browserSettingsArn",
          "shape": "ARN"
        },
        "portalArn": {
          "documentation": "<p>The ARN of the web portal.</p>",
          "location": "uri",
          "locationName": "portalArn",
          "shape": "ARN"
        }
      },
      "required": [
        "browserSettingsArn",
        "portalArn"
      ],
      "type": "structure"
    },
    "AssociateBrowserSettingsResponse": {
      "members": {
        "browserSettingsArn": {
          "documentation": "<p>The ARN of the browser settings.</p>",
          "shape": "ARN"
        },
        "portalArn": {
          "documentation": "<p>The ARN of the web portal.</p>",
          "shape": "ARN"
        }
      },
      "required": [
        "browserSettingsArn",
        "portalArn"
      ],
      "type": "structure"
    },
    "AssociateNetworkSettingsRequest": {
      "members": {
        "networkSettingsArn": {
          "documentation": "<p>The ARN of the network settings.</p>",
          "location": "querystring",
          "locationName": "networkSettingsArn",
          "shape": "ARN"
        },
        "portalArn": {
          "documentation": "<p>The ARN of the web portal.</p>",
          "location": "uri",
          "locationName": "portalArn",
          "shape": "ARN"
        }
      },
      "required": [
        "networkSettingsArn",
        "portalArn"
      ],
      "type": "structure"
    },
    "AssociateNetworkSettingsResponse": {
      "members": {
        "networkSettingsArn": {
          "documentation": "<p>The ARN of the network settings.</p>",
          "shape": "ARN"
        },
        "portalArn": {
          "documentation": "<p>The ARN of the web portal.</p>",
          "shape": "ARN"
        }
      },
      "required": [
        "networkSettingsArn",
        "portalArn"
      ],
      "type": "structure"
    },
    "AssociateTrustStoreRequest": {
      "members": {
        "portalArn": {
          "documentation": "<p>The ARN of the web portal.</p>",
          "location": "uri",
          "locationName": "portalArn",
          "shape": "ARN"
        },
        "trustStoreArn": {
          "documentation": "<p>The ARN of the trust store.</p>",
          "location": "querystring",
          "locationName": "trustStoreArn",
          "shape": "ARN"
        }
      },
      "required": [
        "portalArn",
        "trustStoreArn"
      ],
      "type": "structure"
    },
    "AssociateTrustStoreResponse": {
      "members": {
        "portalArn": {
          "documentation": "<p>The ARN of the web portal.</p>",
          "shape": "ARN"
        },
        "trustStoreArn": {
          "documentation": "<p>The ARN of the trust store.</p>",
          "shape": "ARN"
        }
      },
      "required": [
        "portalArn",
        "trustStoreArn"
      ],
      "type": "structure"
    },
    "AssociateUserAccessLoggingSettingsRequest": {
      "members": {
        "portalArn": {
          "documentation": "<p>The ARN of the web portal.</p>",
          "location": "uri",
          "locationName": "portalArn",
          "shape": "ARN"
        },
        "userAccessLoggingSettingsArn": {
          "documentation": "<p>The ARN of the user access logging settings.</p>",
          "location": "querystring",
          "locationName": "userAccessLoggingSettingsArn",
          "shape": "ARN"
        }
      },
      "required": [
        "portalArn",
        "userAccessLoggingSettingsArn"
      ],
      "type": "structure"
    },
    "AssociateUserAccessLoggingSettingsResponse": {
      "members": {
        "portalArn": {
          "documentation": "<p>The ARN of the web portal.</p>",
          "shape": "ARN"
        },
        "userAccessLoggingSettingsArn": {
          "documentation": "<p>The ARN of the user access logging settings.</p>",
          "shape": "ARN"
        }
      },
      "required": [
        "portalArn",
        "userAccessLoggingSettingsArn"
      ],
      "type": "structure"
    },
    "AssociateUserSettingsRequest": {
      "members": {
        "portalArn": {
          "documentation": "<p>The ARN of the web portal.</p>",
          "location": "uri",
          "locationName": "portalArn",
          "shape": "ARN"
        },
        "userSettingsArn": {
          "documentation": "<p>The ARN of the user settings.</p>",
          "location": "querystring",
          "locationName": "userSettingsArn",
          "shape": "ARN"
        }
      },
      "required": [
        "portalArn",
        "userSettingsArn"
      ],
      "type": "structure"
    },
    "AssociateUserSettingsResponse": {
      "members": {
        "portalArn": {
          "documentation": "<p>The ARN of the web portal.</p>",
          "shape": "ARN"
        },
        "userSettingsArn": {
          "documentation": "<p>The ARN of the user settings.</p>",
          "shape": "ARN"
        }
      },
      "required": [
        "portalArn",
        "userSettingsArn"
      ],
      "type": "structure"
    },
    "BrowserPolicy": {
      "max": 131072,
      "min": 2,
      "pattern": "\\{[\\S\\s]*\\}\\s*",
      "sensitive": true,
      "type": "string"
    },
    "BrowserSettings": {
      "documentation": "<p>The browser settings resource that can be associated with a web portal. Once associated with a web portal, browser settings control how the browser will behave once a user starts a streaming session for the web portal. </p>",
      "members": {
        "associatedPortalArns": {
          "documentation": "<p>A list of web portal ARNs that this browser settings is associated with.</p>",
          "shape": "ArnList"
        },
        "browserPolicy": {
          "documentation": "<p>A JSON string containing Chrome Enterprise policies that will be applied to all streaming sessions.</p>",
          "shape": "BrowserPolicy"
        },
        "browserSettingsArn": {
          "documentation": "<p>The ARN of the browser settings.</p>",
          "shape": "ARN"
        }
      },
      "required": [
        "browserSettingsArn"
      ],
      "type": "structure"
    },
    "BrowserSettingsList": {
      "member": {
        "shape": "BrowserSettingsSummary"
      },
      "type": "list"
    },
    "BrowserSettingsSummary": {
      "documentation": "<p>The summary for browser settings.</p>",
      "members": {
        "browserSettingsArn": {
          "documentation": "<p>The ARN of the browser settings.</p>",
          "shape": "ARN"
        }
      },
      "type": "structure"
    },
    "BrowserType": {
      "enum": [
        "Chrome"
      ],
      "type": "string"
    },
    "Certificate": {
      "documentation": "<p>The certificate.</p>",
      "members": {
        "body": {
          "documentation": "<p>The body of the certificate.</p>",
          "shape": "CertificateAuthorityBody"
        },
        "issuer": {
          "documentation": "<p>The entity that issued the certificate.</p>",
          "shape": "CertificatePrincipal"
        },
        "notValidAfter": {
          "documentation": "<p>The certificate is not valid after this date.</p>",
          "shape": "Timestamp"
        },
        "notValidBefore": {
          "documentation": "<p>The certificate is not valid before this date.</p>",
          "shape": "Timestamp"
        },
        "subject": {
          "documentation": "<p>The entity the certificate belongs to.</p>",
          "shape": "CertificatePrincipal"
        },
        "thumbprint": {
          "documentation": "<p>A hexadecimal identifier for the certificate.</p>",
          "shape": "CertificateThumbprint"
        }
      },
      "type": "structure"
    },
    "CertificateAuthorityBody": {
      "type": "blob"
    },
    "CertificateList": {
      "member": {
        "shape": "CertificateAuthorityBody"
      },
      "type": "list"
    },
    "CertificatePrincipal": {
      "max": 256,
      "min": 1,
      "pattern": "^\\S+$",
      "type": "string"
    },
    "CertificateSummary": {
      "documentation": "<p>The summary of the certificate.</p>",
      "members": {
        "issuer": {
          "documentation": "<p>The entity that issued the certificate.</p>",
          "shape": "CertificatePrincipal"
        },
        "notValidAfter": {
          "documentation": "<p>The certificate is not valid after this date.</p>",
          "shape": "Timestamp"
        },
        "notValidBefore": {
          "documentation": "<p>The certificate is not valid before this date.</p>",
          "shape": "Timestamp"
        },
        "subject": {
          "documentation": "<p>The entity the certificate belongs to.</p>",
          "shape": "CertificatePrincipal"
        },
        "thumbprint": {
          "documentation": "<p>A hexadecimal identifier for the certificate.</p>",
          "shape": "CertificateThumbprint"
        }
      },
      "type": "structure"
    },
    "CertificateSummaryList": {
      "member": {
        "shape": "CertificateSummary"
      },
      "type": "list"
    },
    "CertificateThumbprint": {
      "max": 64,
      "min": 64,
      "pattern": "^[A-Fa-f0-9]{64}$",
      "type": "string"
    },
    "CertificateThumbprintList": {
      "member": {
        "shape": "CertificateThumbprint"
      },
      "type": "list"
    },
    "ClientToken": {
      "max": 512,
      "min": 1,
      "type": "string"
    },
    "ConflictException": {
      "documentation": "<p>There is a conflict.</p>",
      "error": {
        "httpStatusCode": 409,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "ExceptionMessage"
        },
        "resourceId": {
          "documentation": "<p>Identifier of the resource affected.</p>",
          "shape": "ResourceId"
        },
        "resourceType": {
          "documentation": "<p>Type of the resource affected.</p>",
          "shape": "ResourceType"
        }
      },
      "type": "structure"
    },
    "CreateBrowserSettingsRequest": {
      "members": {
        "additionalEncryptionContext": {
          "documentation": "<p>Additional encryption context of the browser settings.</p>",
          "shape": "EncryptionContextMap"
        },
        "browserPolicy": {
          "documentation": "<p>A JSON string containing Chrome Enterprise policies that will be applied to all streaming sessions.</p>",
          "shape": "BrowserPolicy"
        },
        "clientToken": {
          "documentation": "<p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request.</p> <p>If you do not specify a client token, one is automatically generated by the AWS SDK. </p>",
          "idempotencyToken": true,
          "shape": "ClientToken"
        },
        "customerManagedKey": {
          "documentation": "<p>The custom managed key of the browser settings.</p>",
          "shape": "keyArn"
        },
        "tags": {
          "documentation": "<p>The tags to add to the browser settings resource. A tag is a key-value pair.</p>",
          "shape": "TagList"
        }
      },
      "required": [
        "browserPolicy"
      ],
      "type": "structure"
    },
    "CreateBrowserSettingsResponse": {
      "members": {
        "browserSettingsArn": {
          "documentation": "<p>The ARN of the browser settings.</p>",
          "shape": "ARN"
        }
      },
      "required": [
        "browserSettingsArn"
      ],
      "type": "structure"
    },
    "CreateIdentityProviderRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request.</p> <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>",
          "idempotencyToken": true,
          "shape": "ClientToken"
        },
        "identityProviderDetails": {
          "documentation": "<p>The identity provider details. The following list describes the provider detail keys for each identity provider type. </p> <ul> <li> <p>For Google and Login with Amazon:</p> <ul> <li> <p> <code>client_id</code> </p> </li> <li> <p> <code>client_secret</code> </p> </li> <li> <p> <code>authorize_scopes</code> </p> </li> </ul> </li> <li> <p>For Facebook:</p> <ul> <li> <p> <code>client_id</code> </p> </li> <li> <p> <code>client_secret</code> </p> </li> <li> <p> <code>authorize_scopes</code> </p> </li> <li> <p> <code>api_version</code> </p> </li> </ul> </li> <li> <p>For Sign in with Apple:</p> <ul> <li> <p> <code>client_id</code> </p> </li> <li> <p> <code>team_id</code> </p> </li> <li> <p> <code>key_id</code> </p> </li> <li> <p> <code>private_key</code> </p> </li> <li> <p> <code>authorize_scopes</code> </p> </li> </ul> </li> <li> <p>For OIDC providers:</p> <ul> <li> <p> <code>client_id</code> </p> </li> <li> <p> <code>client_secret</code> </p> </li> <li> <p> <code>attributes_request_method</code> </p> </li> <li> <p> <code>oidc_issuer</code> </p> </li> <li> <p> <code>authorize_scopes</code> </p> </li> <li> <p> <code>authorize_url</code> <i>if not available from discovery URL specified by <code>oidc_issuer</code> key</i> </p> </li> <li> <p> <code>token_url</code> <i>if not available from discovery URL specified by <code>oidc_issuer</code> key</i> </p> </li> <li> <p> <code>attributes_url</code> <i>if not available from discovery URL specified by <code>oidc_issuer</code> key</i> </p> </li> <li> <p> <code>jwks_uri</code> <i>if not available from discovery URL specified by <code>oidc_issuer</code> key</i> </p> </li> </ul> </li> <li> <p>For SAML providers:</p> <ul> <li> <p> <code>MetadataFile</code> OR <code>MetadataURL</code> </p> </li> <li> <p> <code>IDPSignout</code> (boolean) <i>optional</i> </p> </li> </ul> </li> </ul>",
          "shape": "IdentityProviderDetails"
        },
        "identityProviderName": {
          "documentation": "<p>The identity provider name.</p>",
          "shape": "IdentityProviderName"
        },
        "identityProviderType": {
          "documentation": "<p>The identity provider type.</p>",
          "shape": "IdentityProviderType"
        },
        "portalArn": {
          "documentation": "<p>The ARN of the web portal.</p>",
          "shape": "ARN"
        }
      },
      "required": [
        "identityProviderDetails",
        "identityProviderName",
        "identityProviderType",
        "portalArn"
      ],
      "type": "structure"
    },
    "CreateIdentityProviderResponse": {
      "members": {
        "identityProviderArn": {
          "documentation": "<p>The ARN of the identity provider.</p>",
          "shape": "ARN"
        }
      },
      "required": [
        "identityProviderArn"
      ],
      "type": "structure"
    },
    "CreateNetworkSettingsRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. </p> <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>",
          "idempotencyToken": true,
          "shape": "ClientToken"
        },
        "securityGroupIds": {
          "documentation": "<p>One or more security groups used to control access from streaming instances to your VPC.</p>",
          "shape": "SecurityGroupIdList"
        },
        "subnetIds": {
          "documentation": "<p>The subnets in which network interfaces are created to connect streaming instances to your VPC. At least two of these subnets must be in different availability zones.</p>",
          "shape": "SubnetIdList"
        },
        "tags": {
          "documentation": "<p>The tags to add to the network settings resource. A tag is a key-value pair.</p>",
          "shape": "TagList"
        },
        "vpcId": {
          "documentation": "<p>The VPC that streaming instances will connect to.</p>",
          "shape": "VpcId"
        }
      },
      "required": [
        "securityGroupIds",
        "subnetIds",
        "vpcId"
      ],
      "type": "structure"
    },
    "CreateNetworkSettingsResponse": {
      "members": {
        "networkSettingsArn": {
          "documentation": "<p>The ARN of the network settings.</p>",
          "shape": "ARN"
        }
      },
      "required": [
        "networkSettingsArn"
      ],
      "type": "structure"
    },
    "CreatePortalRequest": {
      "members": {
        "additionalEncryptionContext": {
          "documentation": "<p>The additional encryption context of the portal.</p>",
          "shape": "EncryptionContextMap"
        },
        "clientToken": {
          "documentation": "<p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. </p> <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>",
          "idempotencyToken": true,
          "shape": "ClientToken"
        },
        "customerManagedKey": {
          "documentation": "<p>The customer managed key of the web portal.</p>",
          "shape": "keyArn"
        },
        "displayName": {
          "documentation": "<p>The name of the web portal. This is not visible to users who log into the web portal.</p>",
          "shape": "DisplayName"
        },
        "tags": {
          "documentation": "<p>The tags to add to the web portal. A tag is a key-value pair.</p>",
          "shape": "TagList"
        }
      },
      "type": "structure"
    },
    "CreatePortalResponse": {
      "members": {
        "portalArn": {
          "documentation": "<p>The ARN of the web portal.</p>",
          "shape": "ARN"
        },
        "portalEndpoint": {
          "documentation": "<p>The endpoint URL of the web portal that users access in order to start streaming sessions.</p>",
          "shape": "PortalEndpoint"
        }
      },
      "required": [
        "portalArn",
        "portalEndpoint"
      ],
      "type": "structure"
    },
    "CreateTrustStoreRequest": {
      "members": {
        "certificateList": {
          "documentation": "<p>A list of CA certificates to be added to the trust store.</p>",
          "shape": "CertificateList"
        },
        "clientToken": {
          "documentation": "<p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. </p> <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>",
          "idempotencyToken": true,
          "shape": "ClientToken"
        },
        "tags": {
          "documentation": "<p>The tags to add to the trust store. A tag is a key-value pair.</p>",
          "shape": "TagList"
        }
      },
      "required": [
        "certificateList"
      ],
      "type": "structure"
    },
    "CreateTrustStoreResponse": {
      "members": {
        "trustStoreArn": {
          "documentation": "<p>The ARN of the trust store.</p>",
          "shape": "ARN"
        }
      },
      "required": [
        "trustStoreArn"
      ],
      "type": "structure"
    },
    "CreateUserAccessLoggingSettingsRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. </p> <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>",
          "idempotencyToken": true,
          "shape": "ClientToken"
        },
        "kinesisStreamArn": {
          "documentation": "<p>The ARN of the Kinesis stream.</p>",
          "shape": "KinesisStreamArn"
        },
        "tags": {
          "documentation": "<p>The tags to add to the user settings resource. A tag is a key-value pair.</p>",
          "shape": "TagList"
        }
      },
      "required": [
        "kinesisStreamArn"
      ],
      "type": "structure"
    },
    "CreateUserAccessLoggingSettingsResponse": {
      "members": {
        "userAccessLoggingSettingsArn": {
          "documentation": "<p>The ARN of the user access logging settings.</p>",
          "shape": "ARN"
        }
      },
      "required": [
        "userAccessLoggingSettingsArn"
      ],
      "type": "structure"
    },
    "CreateUserSettingsRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. </p> <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>",
          "idempotencyToken": true,
          "shape": "ClientToken"
        },
        "copyAllowed": {
          "documentation": "<p>Specifies whether the user can copy text from the streaming session to the local device.</p>",
          "shape": "EnabledType"
        },
        "disconnectTimeoutInMinutes": {
          "documentation": "<p>The amount of time that a streaming session remains active after users disconnect.</p>",
          "shape": "DisconnectTimeoutInMinutes"
        },
        "downloadAllowed": {
          "documentation": "<p>Specifies whether the user can download files from the streaming session to the local device.</p>",
          "shape": "EnabledType"
        },
        "idleDisconnectTimeoutInMinutes": {
          "documentation": "<p>The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the disconnect timeout interval begins.</p>",
          "shape": "IdleDisconnectTimeoutInMinutes"
        },
        "pasteAllowed": {
          "documentation": "<p>Specifies whether the user can paste text from the local device to the streaming session.</p>",
          "shape": "EnabledType"
        },
        "printAllowed": {
          "documentation": "<p>Specifies whether the user can print to the local device.</p>",
          "shape": "EnabledType"
        },
        "tags": {
          "documentation": "<p>The tags to add to the user settings resource. A tag is a key-value pair.</p>",
          "shape": "TagList"
        },
        "uploadAllowed": {
          "documentation": "<p>Specifies whether the user can upload files from the local device to the streaming session.</p>",
          "shape": "EnabledType"
        }
      },
      "required": [
        "copyAllowed",
        "downloadAllowed",
        "pasteAllowed",
        "printAllowed",
        "uploadAllowed"
      ],
      "type": "structure"
    },
    "CreateUserSettingsResponse": {
      "members": {
        "userSettingsArn": {
          "documentation": "<p>The ARN of the user settings.</p>",
          "shape": "ARN"
        }
      },
      "required": [
        "userSettingsArn"
      ],
      "type": "structure"
    },
    "DeleteBrowserSettingsRequest": {
      "members": {
        "browserSettingsArn": {
          "documentation": "<p>The ARN of the browser settings.</p>",
          "location": "uri",
          "locationName": "browserSettingsArn",
          "shape": "ARN"
        }
      },
      "required": [
        "browserSettingsArn"
      ],
      "type": "structure"
    },
    "DeleteBrowserSettingsResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteIdentityProviderRequest": {
      "members": {
        "identityProviderArn": {
          "documentation": "<p>The ARN of the identity provider.</p>",
          "location": "uri",
          "locationName": "identityProviderArn",
          "shape": "ARN"
        }
      },
      "required": [
        "identityProviderArn"
      ],
      "type": "structure"
    },
    "DeleteIdentityProviderResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteNetworkSettingsRequest": {
      "members": {
        "networkSettingsArn": {
          "documentation": "<p>The ARN of the network settings.</p>",
          "location": "uri",
          "locationName": "networkSettingsArn",
          "shape": "ARN"
        }
      },
      "required": [
        "networkSettingsArn"
      ],
      "type": "structure"
    },
    "DeleteNetworkSettingsResponse": {
      "members": {},
      "type": "structure"
    },
    "DeletePortalRequest": {
      "members": {
        "portalArn": {
          "documentation": "<p>The ARN of the web portal.</p>",
          "location": "uri",
          "locationName": "portalArn",
          "shape": "ARN"
        }
      },
      "required": [
        "portalArn"
      ],
      "type": "structure"
    },
    "DeletePortalResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteTrustStoreRequest": {
      "members": {
        "trustStoreArn": {
          "documentation": "<p>The ARN of the trust store.</p>",
          "location": "uri",
          "locationName": "trustStoreArn",
          "shape": "ARN"
        }
      },
      "required": [
        "trustStoreArn"
      ],
      "type": "structure"
    },
    "DeleteTrustStoreResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteUserAccessLoggingSettingsRequest": {
      "members": {
        "userAccessLoggingSettingsArn": {
          "documentation": "<p>The ARN of the user access logging settings.</p>",
          "location": "uri",
          "locationName": "userAccessLoggingSettingsArn",
          "shape": "ARN"
        }
      },
      "required": [
        "userAccessLoggingSettingsArn"
      ],
      "type": "structure"
    },
    "DeleteUserAccessLoggingSettingsResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteUserSettingsRequest": {
      "members": {
        "userSettingsArn": {
          "documentation": "<p>The ARN of the user settings.</p>",
          "location": "uri",
          "locationName": "userSettingsArn",
          "shape": "ARN"
        }
      },
      "required": [
        "userSettingsArn"
      ],
      "type": "structure"
    },
    "DeleteUserSettingsResponse": {
      "members": {},
      "type": "structure"
    },
    "DisassociateBrowserSettingsRequest": {
      "members": {
        "portalArn": {
          "documentation": "<p>The ARN of the web portal.</p>",
          "location": "uri",
          "locationName": "portalArn",
          "shape": "ARN"
        }
      },
      "required": [
        "portalArn"
      ],
      "type": "structure"
    },
    "DisassociateBrowserSettingsResponse": {
      "members": {},
      "type": "structure"
    },
    "DisassociateNetworkSettingsRequest": {
      "members": {
        "portalArn": {
          "documentation": "<p>The ARN of the web portal.</p>",
          "location": "uri",
          "locationName": "portalArn",
          "shape": "ARN"
        }
      },
      "required": [
        "portalArn"
      ],
      "type": "structure"
    },
    "DisassociateNetworkSettingsResponse": {
      "members": {},
      "type": "structure"
    },
    "DisassociateTrustStoreRequest": {
      "members": {
        "portalArn": {
          "documentation": "<p>The ARN of the web portal.</p>",
          "location": "uri",
          "locationName": "portalArn",
          "shape": "ARN"
        }
      },
      "required": [
        "portalArn"
      ],
      "type": "structure"
    },
    "DisassociateTrustStoreResponse": {
      "members": {},
      "type": "structure"
    },
    "DisassociateUserAccessLoggingSettingsRequest": {
      "members": {
        "portalArn": {
          "documentation": "<p>The ARN of the web portal.</p>",
          "location": "uri",
          "locationName": "portalArn",
          "shape": "ARN"
        }
      },
      "required": [
        "portalArn"
      ],
      "type": "structure"
    },
    "DisassociateUserAccessLoggingSettingsResponse": {
      "members": {},
      "type": "structure"
    },
    "DisassociateUserSettingsRequest": {
      "members": {
        "portalArn": {
          "documentation": "<p>The ARN of the web portal.</p>",
          "location": "uri",
          "locationName": "portalArn",
          "shape": "ARN"
        }
      },
      "required": [
        "portalArn"
      ],
      "type": "structure"
    },
    "DisassociateUserSettingsResponse": {
      "members": {},
      "type": "structure"
    },
    "DisconnectTimeoutInMinutes": {
      "box": true,
      "max": 600,
      "min": 1,
      "type": "integer"
    },
    "DisplayName": {
      "max": 64,
      "min": 1,
      "pattern": "^.+$",
      "sensitive": true,
      "type": "string"
    },
    "EnabledType": {
      "enum": [
        "Disabled",
        "Enabled"
      ],
      "type": "string"
    },
    "EncryptionContextMap": {
      "key": {
        "shape": "StringType"
      },
      "type": "map",
      "value": {
        "shape": "StringType"
      }
    },
    "ExceptionMessage": {
      "type": "string"
    },
    "FieldName": {
      "type": "string"
    },
    "GetBrowserSettingsRequest": {
      "members": {
        "browserSettingsArn": {
          "documentation": "<p>The ARN of the browser settings.</p>",
          "location": "uri",
          "locationName": "browserSettingsArn",
          "shape": "ARN"
        }
      },
      "required": [
        "browserSettingsArn"
      ],
      "type": "structure"
    },
    "GetBrowserSettingsResponse": {
      "members": {
        "browserSettings": {
          "documentation": "<p>The browser settings.</p>",
          "shape": "BrowserSettings"
        }
      },
      "type": "structure"
    },
    "GetIdentityProviderRequest": {
      "members": {
        "identityProviderArn": {
          "documentation": "<p>The ARN of the identity provider.</p>",
          "location": "uri",
          "locationName": "identityProviderArn",
          "shape": "ARN"
        }
      },
      "required": [
        "identityProviderArn"
      ],
      "type": "structure"
    },
    "GetIdentityProviderResponse": {
      "members": {
        "identityProvider": {
          "documentation": "<p>The identity provider.</p>",
          "shape": "IdentityProvider"
        }
      },
      "type": "structure"
    },
    "GetNetworkSettingsRequest": {
      "members": {
        "networkSettingsArn": {
          "documentation": "<p>The ARN of the network settings.</p>",
          "location": "uri",
          "locationName": "networkSettingsArn",
          "shape": "ARN"
        }
      },
      "required": [
        "networkSettingsArn"
      ],
      "type": "structure"
    },
    "GetNetworkSettingsResponse": {
      "members": {
        "networkSettings": {
          "documentation": "<p>The network settings.</p>",
          "shape": "NetworkSettings"
        }
      },
      "type": "structure"
    },
    "GetPortalRequest": {
      "members": {
        "portalArn": {
          "documentation": "<p>The ARN of the web portal.</p>",
          "location": "uri",
          "locationName": "portalArn",
          "shape": "ARN"
        }
      },
      "required": [
        "portalArn"
      ],
      "type": "structure"
    },
    "GetPortalResponse": {
      "members": {
        "portal": {
          "documentation": "<p>The web portal.</p>",
          "shape": "Portal"
        }
      },
      "type": "structure"
    },
    "GetPortalServiceProviderMetadataRequest": {
      "members": {
        "portalArn": {
          "documentation": "<p>The ARN of the web portal.</p>",
          "location": "uri",
          "locationName": "portalArn",
          "shape": "ARN"
        }
      },
      "required": [
        "portalArn"
      ],
      "type": "structure"
    },
    "GetPortalServiceProviderMetadataResponse": {
      "members": {
        "portalArn": {
          "documentation": "<p>The ARN of the web portal.</p>",
          "shape": "ARN"
        },
        "serviceProviderSamlMetadata": {
          "documentation": "<p>The service provider SAML metadata.</p>",
          "shape": "SamlMetadata"
        }
      },
      "required": [
        "portalArn"
      ],
      "type": "structure"
    },
    "GetTrustStoreCertificateRequest": {
      "members": {
        "thumbprint": {
          "documentation": "<p>The thumbprint of the trust store certificate.</p>",
          "location": "querystring",
          "locationName": "thumbprint",
          "shape": "CertificateThumbprint"
        },
        "trustStoreArn": {
          "documentation": "<p>The ARN of the trust store certificate.</p>",
          "location": "uri",
          "locationName": "trustStoreArn",
          "shape": "ARN"
        }
      },
      "required": [
        "thumbprint",
        "trustStoreArn"
      ],
      "type": "structure"
    },
    "GetTrustStoreCertificateResponse": {
      "members": {
        "certificate": {
          "documentation": "<p>The certificate of the trust store certificate.</p>",
          "shape": "Certificate"
        },
        "trustStoreArn": {
          "documentation": "<p>The ARN of the trust store certificate.</p>",
          "shape": "ARN"
        }
      },
      "type": "structure"
    },
    "GetTrustStoreRequest": {
      "members": {
        "trustStoreArn": {
          "documentation": "<p>The ARN of the trust store.</p>",
          "location": "uri",
          "locationName": "trustStoreArn",
          "shape": "ARN"
        }
      },
      "required": [
        "trustStoreArn"
      ],
      "type": "structure"
    },
    "GetTrustStoreResponse": {
      "members": {
        "trustStore": {
          "documentation": "<p>The trust store.</p>",
          "shape": "TrustStore"
        }
      },
      "type": "structure"
    },
    "GetUserAccessLoggingSettingsRequest": {
      "members": {
        "userAccessLoggingSettingsArn": {
          "documentation": "<p>The ARN of the user access logging settings.</p>",
          "location": "uri",
          "locationName": "userAccessLoggingSettingsArn",
          "shape": "ARN"
        }
      },
      "required": [
        "userAccessLoggingSettingsArn"
      ],
      "type": "structure"
    },
    "GetUserAccessLoggingSettingsResponse": {
      "members": {
        "userAccessLoggingSettings": {
          "documentation": "<p>The user access logging settings.</p>",
          "shape": "UserAccessLoggingSettings"
        }
      },
      "type": "structure"
    },
    "GetUserSettingsRequest": {
      "members": {
        "userSettingsArn": {
          "documentation": "<p>The ARN of the user settings.</p>",
          "location": "uri",
          "locationName": "userSettingsArn",
          "shape": "ARN"
        }
      },
      "required": [
        "userSettingsArn"
      ],
      "type": "structure"
    },
    "GetUserSettingsResponse": {
      "members": {
        "userSettings": {
          "documentation": "<p>The user settings.</p>",
          "shape": "UserSettings"
        }
      },
      "type": "structure"
    },
    "IdentityProvider": {
      "documentation": "<p>The identity provider.</p>",
      "members": {
        "identityProviderArn": {
          "documentation": "<p>The ARN of the identity provider.</p>",
          "shape": "ARN"
        },
        "identityProviderDetails": {
          "documentation": "<p>The identity provider details. The following list describes the provider detail keys for each identity provider type. </p> <ul> <li> <p>For Google and Login with Amazon:</p> <ul> <li> <p> <code>client_id</code> </p> </li> <li> <p> <code>client_secret</code> </p> </li> <li> <p> <code>authorize_scopes</code> </p> </li> </ul> </li> <li> <p>For Facebook:</p> <ul> <li> <p> <code>client_id</code> </p> </li> <li> <p> <code>client_secret</code> </p> </li> <li> <p> <code>authorize_scopes</code> </p> </li> <li> <p> <code>api_version</code> </p> </li> </ul> </li> <li> <p>For Sign in with Apple:</p> <ul> <li> <p> <code>client_id</code> </p> </li> <li> <p> <code>team_id</code> </p> </li> <li> <p> <code>key_id</code> </p> </li> <li> <p> <code>private_key</code> </p> </li> <li> <p> <code>authorize_scopes</code> </p> </li> </ul> </li> <li> <p>For OIDC providers:</p> <ul> <li> <p> <code>client_id</code> </p> </li> <li> <p> <code>client_secret</code> </p> </li> <li> <p> <code>attributes_request_method</code> </p> </li> <li> <p> <code>oidc_issuer</code> </p> </li> <li> <p> <code>authorize_scopes</code> </p> </li> <li> <p> <code>authorize_url</code> <i>if not available from discovery URL specified by oidc_issuer key</i> </p> </li> <li> <p> <code>token_url</code> <i>if not available from discovery URL specified by oidc_issuer key</i> </p> </li> <li> <p> <code>attributes_url</code> <i>if not available from discovery URL specified by oidc_issuer key</i> </p> </li> <li> <p> <code>jwks_uri</code> <i>if not available from discovery URL specified by oidc_issuer key</i> </p> </li> </ul> </li> <li> <p>For SAML providers:</p> <ul> <li> <p> <code>MetadataFile</code> OR <code>MetadataURL</code> </p> </li> <li> <p> <code>IDPSignout</code> <i>optional</i> </p> </li> </ul> </li> </ul>",
          "shape": "IdentityProviderDetails"
        },
        "identityProviderName": {
          "documentation": "<p>The identity provider name.</p>",
          "shape": "IdentityProviderName"
        },
        "identityProviderType": {
          "documentation": "<p>The identity provider type.</p>",
          "shape": "IdentityProviderType"
        }
      },
      "required": [
        "identityProviderArn"
      ],
      "type": "structure"
    },
    "IdentityProviderDetails": {
      "key": {
        "shape": "StringType"
      },
      "sensitive": true,
      "type": "map",
      "value": {
        "shape": "StringType"
      }
    },
    "IdentityProviderList": {
      "member": {
        "shape": "IdentityProviderSummary"
      },
      "type": "list"
    },
    "IdentityProviderName": {
      "max": 32,
      "min": 1,
      "pattern": "^[^_][\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}][^_]+$",
      "sensitive": true,
      "type": "string"
    },
    "IdentityProviderSummary": {
      "documentation": "<p>The summary of the identity provider.</p>",
      "members": {
        "identityProviderArn": {
          "documentation": "<p>The ARN of the identity provider.</p>",
          "shape": "ARN"
        },
        "identityProviderName": {
          "documentation": "<p>The identity provider name.</p>",
          "shape": "IdentityProviderName"
        },
        "identityProviderType": {
          "documentation": "<p>The identity provider type.</p>",
          "shape": "IdentityProviderType"
        }
      },
      "type": "structure"
    },
    "IdentityProviderType": {
      "enum": [
        "SAML",
        "Facebook",
        "Google",
        "LoginWithAmazon",
        "SignInWithApple",
        "OIDC"
      ],
      "type": "string"
    },
    "IdleDisconnectTimeoutInMinutes": {
      "box": true,
      "max": 60,
      "min": 0,
      "type": "integer"
    },
    "InternalServerException": {
      "documentation": "<p>There is an internal server error.</p>",
      "error": {
        "httpStatusCode": 500
      },
      "exception": true,
      "fault": true,
      "members": {
        "message": {
          "shape": "ExceptionMessage"
        },
        "retryAfterSeconds": {
          "documentation": "<p>Advice to clients on when the call can be safely retried.</p>",
          "location": "header",
          "locationName": "Retry-After",
          "shape": "RetryAfterSeconds"
        }
      },
      "type": "structure"
    },
    "KinesisStreamArn": {
      "documentation": "<p>Kinesis stream ARN to which log events are published.</p>",
      "max": 2048,
      "min": 20,
      "pattern": "arn:[\\w+=/,.@-]+:kinesis:[a-zA-Z0-9\\-]*:[a-zA-Z0-9]{1,12}:stream/.+",
      "type": "string"
    },
    "ListBrowserSettingsRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p>The maximum number of results to be included in the next page.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>The pagination token used to retrieve the next page of results for this operation.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "PaginationToken"
        }
      },
      "type": "structure"
    },
    "ListBrowserSettingsResponse": {
      "members": {
        "browserSettings": {
          "documentation": "<p>The browser settings.</p>",
          "shape": "BrowserSettingsList"
        },
        "nextToken": {
          "documentation": "<p>The pagination token used to retrieve the next page of results for this operation.</p>",
          "shape": "PaginationToken"
        }
      },
      "type": "structure"
    },
    "ListIdentityProvidersRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p>The maximum number of results to be included in the next page.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>The pagination token used to retrieve the next page of results for this operation.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "PaginationToken"
        },
        "portalArn": {
          "documentation": "<p>The ARN of the web portal.</p>",
          "location": "uri",
          "locationName": "portalArn",
          "shape": "ARN"
        }
      },
      "required": [
        "portalArn"
      ],
      "type": "structure"
    },
    "ListIdentityProvidersResponse": {
      "members": {
        "identityProviders": {
          "documentation": "<p>The identity providers.</p>",
          "shape": "IdentityProviderList"
        },
        "nextToken": {
          "documentation": "<p>The pagination token used to retrieve the next page of results for this operation.</p>",
          "shape": "PaginationToken"
        }
      },
      "type": "structure"
    },
    "ListNetworkSettingsRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p>The maximum number of results to be included in the next page.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>The pagination token used to retrieve the next page of results for this operation.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "PaginationToken"
        }
      },
      "type": "structure"
    },
    "ListNetworkSettingsResponse": {
      "members": {
        "networkSettings": {
          "documentation": "<p>The network settings.</p>",
          "shape": "NetworkSettingsList"
        },
        "nextToken": {
          "documentation": "<p>The pagination token used to retrieve the next page of results for this operation.</p>",
          "shape": "PaginationToken"
        }
      },
      "type": "structure"
    },
    "ListPortalsRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p>The maximum number of results to be included in the next page.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>The pagination token used to retrieve the next page of results for this operation. </p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "PaginationToken"
        }
      },
      "type": "structure"
    },
    "ListPortalsResponse": {
      "members": {
        "nextToken": {
          "documentation": "<p>The pagination token used to retrieve the next page of results for this operation. </p>",
          "shape": "PaginationToken"
        },
        "portals": {
          "documentation": "<p>The portals in the list.</p>",
          "shape": "PortalList"
        }
      },
      "type": "structure"
    },
    "ListTagsForResourceRequest": {
      "members": {
        "resourceArn": {
          "documentation": "<p>The ARN of the resource.</p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "ARN"
        }
      },
      "required": [
        "resourceArn"
      ],
      "type": "structure"
    },
    "ListTagsForResourceResponse": {
      "members": {
        "tags": {
          "documentation": "<p>The tags of the resource.</p>",
          "shape": "TagList"
        }
      },
      "type": "structure"
    },
    "ListTrustStoreCertificatesRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p>The maximum number of results to be included in the next page.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>The pagination token used to retrieve the next page of results for this operation.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "PaginationToken"
        },
        "trustStoreArn": {
          "documentation": "<p>The ARN of the trust store</p>",
          "location": "uri",
          "locationName": "trustStoreArn",
          "shape": "ARN"
        }
      },
      "required": [
        "trustStoreArn"
      ],
      "type": "structure"
    },
    "ListTrustStoreCertificatesResponse": {
      "members": {
        "certificateList": {
          "documentation": "<p>The certificate list.</p>",
          "shape": "CertificateSummaryList"
        },
        "nextToken": {
          "documentation": "<p>The pagination token used to retrieve the next page of results for this operation.&gt;</p>",
          "shape": "PaginationToken"
        },
        "trustStoreArn": {
          "documentation": "<p>The ARN of the trust store.</p>",
          "shape": "ARN"
        }
      },
      "type": "structure"
    },
    "ListTrustStoresRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p>The maximum number of results to be included in the next page.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>The pagination token used to retrieve the next page of results for this operation.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "PaginationToken"
        }
      },
      "type": "structure"
    },
    "ListTrustStoresResponse": {
      "members": {
        "nextToken": {
          "documentation": "<p>The pagination token used to retrieve the next page of results for this operation.</p>",
          "shape": "PaginationToken"
        },
        "trustStores": {
          "documentation": "<p>The trust stores.</p>",
          "shape": "TrustStoreSummaryList"
        }
      },
      "type": "structure"
    },
    "ListUserAccessLoggingSettingsRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p>The maximum number of results to be included in the next page.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>The pagination token used to retrieve the next page of results for this operation.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "PaginationToken"
        }
      },
      "type": "structure"
    },
    "ListUserAccessLoggingSettingsResponse": {
      "members": {
        "nextToken": {
          "documentation": "<p>The pagination token used to retrieve the next page of results for this operation.</p>",
          "shape": "PaginationToken"
        },
        "userAccessLoggingSettings": {
          "documentation": "<p>The user access logging settings.</p>",
          "shape": "UserAccessLoggingSettingsList"
        }
      },
      "type": "structure"
    },
    "ListUserSettingsRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p>The maximum number of results to be included in the next page.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>The pagination token used to retrieve the next page of results for this operation. </p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "PaginationToken"
        }
      },
      "type": "structure"
    },
    "ListUserSettingsResponse": {
      "members": {
        "nextToken": {
          "documentation": "<p>The pagination token used to retrieve the next page of results for this operation. </p>",
          "shape": "PaginationToken"
        },
        "userSettings": {
          "documentation": "<p>The user settings.</p>",
          "shape": "UserSettingsList"
        }
      },
      "type": "structure"
    },
    "MaxResults": {
      "box": true,
      "min": 1,
      "type": "integer"
    },
    "NetworkSettings": {
      "documentation": "<p>A network settings resource that can be associated with a web portal. Once associated with a web portal, network settings define how streaming instances will connect with your specified VPC. </p>",
      "members": {
        "associatedPortalArns": {
          "documentation": "<p>A list of web portal ARNs that this network settings is associated with.</p>",
          "shape": "ArnList"
        },
        "networkSettingsArn": {
          "documentation": "<p>The ARN of the network settings.</p>",
          "shape": "ARN"
        },
        "securityGroupIds": {
          "documentation": "<p>One or more security groups used to control access from streaming instances to your VPC. </p>",
          "shape": "SecurityGroupIdList"
        },
        "subnetIds": {
          "documentation": "<p>The subnets in which network interfaces are created to connect streaming instances to your VPC. At least two of these subnets must be in different availability zones.</p>",
          "shape": "SubnetIdList"
        },
        "vpcId": {
          "documentation": "<p>The VPC that streaming instances will connect to.</p>",
          "shape": "VpcId"
        }
      },
      "required": [
        "networkSettingsArn"
      ],
      "type": "structure"
    },
    "NetworkSettingsList": {
      "member": {
        "shape": "NetworkSettingsSummary"
      },
      "type": "list"
    },
    "NetworkSettingsSummary": {
      "documentation": "<p>The summary of network settings.</p>",
      "members": {
        "networkSettingsArn": {
          "documentation": "<p>The ARN of the network settings.</p>",
          "shape": "ARN"
        },
        "vpcId": {
          "documentation": "<p>The VPC ID of the network settings.</p>",
          "shape": "VpcId"
        }
      },
      "type": "structure"
    },
    "PaginationToken": {
      "max": 2048,
      "min": 1,
      "pattern": "^\\S+$",
      "type": "string"
    },
    "Portal": {
      "documentation": "<p>The web portal.</p>",
      "members": {
        "browserSettingsArn": {
          "documentation": "<p>The ARN of the browser settings that is associated with this web portal.</p>",
          "shape": "ARN"
        },
        "browserType": {
          "documentation": "<p>The browser that users see when using a streaming session.</p>",
          "shape": "BrowserType"
        },
        "creationDate": {
          "documentation": "<p>The creation date of the web portal.</p>",
          "shape": "Timestamp"
        },
        "displayName": {
          "documentation": "<p>The name of the web portal.</p>",
          "shape": "DisplayName"
        },
        "networkSettingsArn": {
          "documentation": "<p>The ARN of the network settings that is associated with the web portal.</p>",
          "shape": "ARN"
        },
        "portalArn": {
          "documentation": "<p>The ARN of the web portal.</p>",
          "shape": "ARN"
        },
        "portalEndpoint": {
          "documentation": "<p>The endpoint URL of the web portal that users access in order to start streaming sessions.</p>",
          "shape": "PortalEndpoint"
        },
        "portalStatus": {
          "documentation": "<p>The status of the web portal.</p>",
          "shape": "PortalStatus"
        },
        "rendererType": {
          "documentation": "<p>The renderer that is used in streaming sessions.</p>",
          "shape": "RendererType"
        },
        "statusReason": {
          "documentation": "<p>A message that explains why the web portal is in its current status.</p>",
          "shape": "StatusReason"
        },
        "trustStoreArn": {
          "documentation": "<p>The ARN of the trust store that is associated with the web portal.</p>",
          "shape": "ARN"
        },
        "userAccessLoggingSettingsArn": {
          "documentation": "<p>The ARN of the user access logging settings that is associated with the web portal.</p>",
          "shape": "ARN"
        },
        "userSettingsArn": {
          "documentation": "<p>The ARN of the user settings that is associated with the web portal.</p>",
          "shape": "ARN"
        }
      },
      "type": "structure"
    },
    "PortalEndpoint": {
      "max": 253,
      "min": 1,
      "pattern": "^[a-zA-Z0-9]?((?!-)([A-Za-z0-9-]*[A-Za-z0-9])\\.)+[a-zA-Z0-9]+$",
      "type": "string"
    },
    "PortalList": {
      "member": {
        "shape": "PortalSummary"
      },
      "type": "list"
    },
    "PortalStatus": {
      "enum": [
        "Incomplete",
        "Pending",
        "Active"
      ],
      "type": "string"
    },
    "PortalSummary": {
      "documentation": "<p>The summary of the portal.</p>",
      "members": {
        "browserSettingsArn": {
          "documentation": "<p>The ARN of the browser settings that is associated with the web portal.</p>",
          "shape": "ARN"
        },
        "browserType": {
          "documentation": "<p>The browser type of the web portal.</p>",
          "shape": "BrowserType"
        },
        "creationDate": {
          "documentation": "<p>The creation date of the web portal.</p>",
          "shape": "Timestamp"
        },
        "displayName": {
          "documentation": "<p>The name of the web portal.</p>",
          "shape": "DisplayName"
        },
        "networkSettingsArn": {
          "documentation": "<p>The ARN of the network settings that is associated with the web portal.</p>",
          "shape": "ARN"
        },
        "portalArn": {
          "documentation": "<p>The ARN of the web portal.</p>",
          "shape": "ARN"
        },
        "portalEndpoint": {
          "documentation": "<p>The endpoint URL of the web portal that users access in order to start streaming sessions.</p>",
          "shape": "PortalEndpoint"
        },
        "portalStatus": {
          "documentation": "<p>The status of the web portal.</p>",
          "shape": "PortalStatus"
        },
        "rendererType": {
          "documentation": "<p>The renderer that is used in streaming sessions.</p>",
          "shape": "RendererType"
        },
        "trustStoreArn": {
          "documentation": "<p>The ARN of the trust that is associated with this web portal.</p>",
          "shape": "ARN"
        },
        "userAccessLoggingSettingsArn": {
          "documentation": "<p>The ARN of the user access logging settings that is associated with the web portal.</p>",
          "shape": "ARN"
        },
        "userSettingsArn": {
          "documentation": "<p>The ARN of the user settings that is associated with the web portal.</p>",
          "shape": "ARN"
        }
      },
      "type": "structure"
    },
    "QuotaCode": {
      "type": "string"
    },
    "RendererType": {
      "enum": [
        "AppStream"
      ],
      "type": "string"
    },
    "ResourceId": {
      "type": "string"
    },
    "ResourceNotFoundException": {
      "documentation": "<p>The resource cannot be found.</p>",
      "error": {
        "httpStatusCode": 404,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "ExceptionMessage"
        },
        "resourceId": {
          "documentation": "<p>Hypothetical identifier of the resource affected.</p>",
          "shape": "ResourceId"
        },
        "resourceType": {
          "documentation": "<p>Hypothetical type of the resource affected.</p>",
          "shape": "ResourceType"
        }
      },
      "type": "structure"
    },
    "ResourceType": {
      "type": "string"
    },
    "RetryAfterSeconds": {
      "type": "integer"
    },
    "SamlMetadata": {
      "max": 204800,
      "min": 1,
      "pattern": "^.+$",
      "type": "string"
    },
    "SecurityGroupId": {
      "max": 128,
      "min": 1,
      "pattern": "^[\\w+\\-]+$",
      "type": "string"
    },
    "SecurityGroupIdList": {
      "max": 5,
      "member": {
        "shape": "SecurityGroupId"
      },
      "min": 1,
      "type": "list"
    },
    "ServiceCode": {
      "type": "string"
    },
    "ServiceQuotaExceededException": {
      "documentation": "<p>The service quota has been exceeded.</p>",
      "error": {
        "httpStatusCode": 402,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "ExceptionMessage"
        },
        "quotaCode": {
          "documentation": "<p>The originating quota.</p>",
          "shape": "QuotaCode"
        },
        "resourceId": {
          "documentation": "<p>Identifier of the resource affected.</p>",
          "shape": "ResourceId"
        },
        "resourceType": {
          "documentation": "<p> Type of the resource affected.</p>",
          "shape": "ResourceType"
        },
        "serviceCode": {
          "documentation": "<p>The originating service.</p>",
          "shape": "ServiceCode"
        }
      },
      "type": "structure"
    },
    "StatusReason": {
      "max": 1024,
      "min": 1,
      "pattern": ".*",
      "type": "string"
    },
    "StringType": {
      "max": 131072,
      "min": 0,
      "pattern": "^[\\s\\S]*$",
      "type": "string"
    },
    "SubnetId": {
      "max": 32,
      "min": 1,
      "pattern": "^subnet-([0-9a-f]{8}|[0-9a-f]{17})$",
      "type": "string"
    },
    "SubnetIdList": {
      "max": 3,
      "member": {
        "shape": "SubnetId"
      },
      "min": 2,
      "type": "list"
    },
    "Tag": {
      "documentation": "<p>The tag.</p>",
      "members": {
        "Key": {
          "documentation": "<p>The key of the tag.</p>",
          "shape": "TagKey"
        },
        "Value": {
          "documentation": "<p>The value of the tag</p>",
          "shape": "TagValue"
        }
      },
      "required": [
        "Key",
        "Value"
      ],
      "sensitive": true,
      "type": "structure"
    },
    "TagExceptionMessage": {
      "type": "string"
    },
    "TagKey": {
      "max": 128,
      "min": 1,
      "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
      "sensitive": true,
      "type": "string"
    },
    "TagKeyList": {
      "max": 200,
      "member": {
        "shape": "TagKey"
      },
      "min": 0,
      "type": "list"
    },
    "TagList": {
      "max": 200,
      "member": {
        "shape": "Tag"
      },
      "min": 0,
      "type": "list"
    },
    "TagResourceRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. </p> <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>",
          "idempotencyToken": true,
          "shape": "ClientToken"
        },
        "resourceArn": {
          "documentation": "<p>The ARN of the resource.</p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "ARN"
        },
        "tags": {
          "documentation": "<p>The tags of the resource.</p>",
          "shape": "TagList"
        }
      },
      "required": [
        "resourceArn",
        "tags"
      ],
      "type": "structure"
    },
    "TagResourceResponse": {
      "members": {},
      "type": "structure"
    },
    "TagValue": {
      "max": 256,
      "min": 0,
      "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
      "sensitive": true,
      "type": "string"
    },
    "ThrottlingException": {
      "documentation": "<p>There is a throttling error.</p>",
      "error": {
        "httpStatusCode": 429,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "ExceptionMessage"
        },
        "quotaCode": {
          "documentation": "<p>The originating quota.</p>",
          "shape": "QuotaCode"
        },
        "retryAfterSeconds": {
          "documentation": "<p>Advice to clients on when the call can be safely retried.</p>",
          "location": "header",
          "locationName": "Retry-After",
          "shape": "RetryAfterSeconds"
        },
        "serviceCode": {
          "documentation": "<p>The originating service.</p>",
          "shape": "ServiceCode"
        }
      },
      "type": "structure"
    },
    "Timestamp": {
      "type": "timestamp"
    },
    "TooManyTagsException": {
      "documentation": "<p>There are too many tags.</p>",
      "error": {
        "httpStatusCode": 400,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "TagExceptionMessage"
        },
        "resourceName": {
          "documentation": "<p>Name of the resource affected.</p>",
          "shape": "ARN"
        }
      },
      "type": "structure"
    },
    "TrustStore": {
      "documentation": "<p>A trust store that can be associated with a web portal. A trust store contains certificate authority (CA) certificates. Once associated with a web portal, the browser in a streaming session will recognize certificates that have been issued using any of the CAs in the trust store. If your organization has internal websites that use certificates issued by private CAs, you should add the private CA certificate to the trust store. </p>",
      "members": {
        "associatedPortalArns": {
          "documentation": "<p>A list of web portal ARNs that this trust store is associated with.</p>",
          "shape": "ArnList"
        },
        "trustStoreArn": {
          "documentation": "<p>The ARN of the trust store.</p>",
          "shape": "ARN"
        }
      },
      "type": "structure"
    },
    "TrustStoreSummary": {
      "documentation": "<p>The summary of the trust store.</p>",
      "members": {
        "trustStoreArn": {
          "documentation": "<p>The ARN of the trust store.</p>",
          "shape": "ARN"
        }
      },
      "type": "structure"
    },
    "TrustStoreSummaryList": {
      "member": {
        "shape": "TrustStoreSummary"
      },
      "type": "list"
    },
    "UntagResourceRequest": {
      "members": {
        "resourceArn": {
          "documentation": "<p>The ARN of the resource.</p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "ARN"
        },
        "tagKeys": {
          "documentation": "<p>The list of tag keys to remove from the resource.</p>",
          "location": "querystring",
          "locationName": "tagKeys",
          "shape": "TagKeyList"
        }
      },
      "required": [
        "resourceArn",
        "tagKeys"
      ],
      "type": "structure"
    },
    "UntagResourceResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateBrowserSettingsRequest": {
      "members": {
        "browserPolicy": {
          "documentation": "<p>A JSON string containing Chrome Enterprise policies that will be applied to all streaming sessions. </p>",
          "shape": "BrowserPolicy"
        },
        "browserSettingsArn": {
          "documentation": "<p>The ARN of the browser settings.</p>",
          "location": "uri",
          "locationName": "browserSettingsArn",
          "shape": "ARN"
        },
        "clientToken": {
          "documentation": "<p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token return the result from the original successful request. </p> <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>",
          "idempotencyToken": true,
          "shape": "ClientToken"
        }
      },
      "required": [
        "browserSettingsArn"
      ],
      "type": "structure"
    },
    "UpdateBrowserSettingsResponse": {
      "members": {
        "browserSettings": {
          "documentation": "<p>The browser settings.</p>",
          "shape": "BrowserSettings"
        }
      },
      "required": [
        "browserSettings"
      ],
      "type": "structure"
    },
    "UpdateIdentityProviderRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token return the result from the original successful request. </p> <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>",
          "idempotencyToken": true,
          "shape": "ClientToken"
        },
        "identityProviderArn": {
          "documentation": "<p>The ARN of the identity provider.</p>",
          "location": "uri",
          "locationName": "identityProviderArn",
          "shape": "ARN"
        },
        "identityProviderDetails": {
          "documentation": "<p>The details of the identity provider. The following list describes the provider detail keys for each identity provider type. </p> <ul> <li> <p>For Google and Login with Amazon:</p> <ul> <li> <p> <code>client_id</code> </p> </li> <li> <p> <code>client_secret</code> </p> </li> <li> <p> <code>authorize_scopes</code> </p> </li> </ul> </li> <li> <p>For Facebook:</p> <ul> <li> <p> <code>client_id</code> </p> </li> <li> <p> <code>client_secret</code> </p> </li> <li> <p> <code>authorize_scopes</code> </p> </li> <li> <p> <code>api_version</code> </p> </li> </ul> </li> <li> <p>For Sign in with Apple:</p> <ul> <li> <p> <code>client_id</code> </p> </li> <li> <p> <code>team_id</code> </p> </li> <li> <p> <code>key_id</code> </p> </li> <li> <p> <code>private_key</code> </p> </li> <li> <p> <code>authorize_scopes</code> </p> </li> </ul> </li> <li> <p>For OIDC providers:</p> <ul> <li> <p> <code>client_id</code> </p> </li> <li> <p> <code>client_secret</code> </p> </li> <li> <p> <code>attributes_request_method</code> </p> </li> <li> <p> <code>oidc_issuer</code> </p> </li> <li> <p> <code>authorize_scopes</code> </p> </li> <li> <p> <code>authorize_url</code> <i>if not available from discovery URL specified by <code>oidc_issuer</code> key</i> </p> </li> <li> <p> <code>token_url</code> <i>if not available from discovery URL specified by <code>oidc_issuer</code> key</i> </p> </li> <li> <p> <code>attributes_url</code> <i>if not available from discovery URL specified by <code>oidc_issuer</code> key</i> </p> </li> <li> <p> <code>jwks_uri</code> <i>if not available from discovery URL specified by <code>oidc_issuer</code> key</i> </p> </li> </ul> </li> <li> <p>For SAML providers:</p> <ul> <li> <p> <code>MetadataFile</code> OR <code>MetadataURL</code> </p> </li> <li> <p> <code>IDPSignout</code> (boolean) <i>optional</i> </p> </li> </ul> </li> </ul>",
          "shape": "IdentityProviderDetails"
        },
        "identityProviderName": {
          "documentation": "<p>The name of the identity provider.</p>",
          "shape": "IdentityProviderName"
        },
        "identityProviderType": {
          "documentation": "<p>The type of the identity provider.</p>",
          "shape": "IdentityProviderType"
        }
      },
      "required": [
        "identityProviderArn"
      ],
      "type": "structure"
    },
    "UpdateIdentityProviderResponse": {
      "members": {
        "identityProvider": {
          "documentation": "<p>The identity provider.</p>",
          "shape": "IdentityProvider"
        }
      },
      "required": [
        "identityProvider"
      ],
      "type": "structure"
    },
    "UpdateNetworkSettingsRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token return the result from the original successful request. </p> <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>",
          "idempotencyToken": true,
          "shape": "ClientToken"
        },
        "networkSettingsArn": {
          "documentation": "<p>The ARN of the network settings.</p>",
          "location": "uri",
          "locationName": "networkSettingsArn",
          "shape": "ARN"
        },
        "securityGroupIds": {
          "documentation": "<p>One or more security groups used to control access from streaming instances to your VPC.</p>",
          "shape": "SecurityGroupIdList"
        },
        "subnetIds": {
          "documentation": "<p>The subnets in which network interfaces are created to connect streaming instances to your VPC. At least two of these subnets must be in different availability zones.</p>",
          "shape": "SubnetIdList"
        },
        "vpcId": {
          "documentation": "<p>The VPC that streaming instances will connect to.</p>",
          "shape": "VpcId"
        }
      },
      "required": [
        "networkSettingsArn"
      ],
      "type": "structure"
    },
    "UpdateNetworkSettingsResponse": {
      "members": {
        "networkSettings": {
          "documentation": "<p>The network settings.</p>",
          "shape": "NetworkSettings"
        }
      },
      "required": [
        "networkSettings"
      ],
      "type": "structure"
    },
    "UpdatePortalRequest": {
      "members": {
        "displayName": {
          "documentation": "<p>The name of the web portal. This is not visible to users who log into the web portal.</p>",
          "shape": "DisplayName"
        },
        "portalArn": {
          "documentation": "<p>The ARN of the web portal.</p>",
          "location": "uri",
          "locationName": "portalArn",
          "shape": "ARN"
        }
      },
      "required": [
        "portalArn"
      ],
      "type": "structure"
    },
    "UpdatePortalResponse": {
      "members": {
        "portal": {
          "documentation": "<p>The web portal.</p>",
          "shape": "Portal"
        }
      },
      "type": "structure"
    },
    "UpdateTrustStoreRequest": {
      "members": {
        "certificatesToAdd": {
          "documentation": "<p>A list of CA certificates to add to the trust store.</p>",
          "shape": "CertificateList"
        },
        "certificatesToDelete": {
          "documentation": "<p>A list of CA certificates to delete from a trust store.</p>",
          "shape": "CertificateThumbprintList"
        },
        "clientToken": {
          "documentation": "<p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token return the result from the original successful request. </p> <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>",
          "idempotencyToken": true,
          "shape": "ClientToken"
        },
        "trustStoreArn": {
          "documentation": "<p>The ARN of the trust store.</p>",
          "location": "uri",
          "locationName": "trustStoreArn",
          "shape": "ARN"
        }
      },
      "required": [
        "trustStoreArn"
      ],
      "type": "structure"
    },
    "UpdateTrustStoreResponse": {
      "members": {
        "trustStoreArn": {
          "documentation": "<p>The ARN of the trust store.</p>",
          "shape": "ARN"
        }
      },
      "required": [
        "trustStoreArn"
      ],
      "type": "structure"
    },
    "UpdateUserAccessLoggingSettingsRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token return the result from the original successful request. </p> <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>",
          "idempotencyToken": true,
          "shape": "ClientToken"
        },
        "kinesisStreamArn": {
          "documentation": "<p>The ARN of the Kinesis stream.</p>",
          "shape": "KinesisStreamArn"
        },
        "userAccessLoggingSettingsArn": {
          "documentation": "<p>The ARN of the user access logging settings.</p>",
          "location": "uri",
          "locationName": "userAccessLoggingSettingsArn",
          "shape": "ARN"
        }
      },
      "required": [
        "userAccessLoggingSettingsArn"
      ],
      "type": "structure"
    },
    "UpdateUserAccessLoggingSettingsResponse": {
      "members": {
        "userAccessLoggingSettings": {
          "documentation": "<p>The user access logging settings.</p>",
          "shape": "UserAccessLoggingSettings"
        }
      },
      "required": [
        "userAccessLoggingSettings"
      ],
      "type": "structure"
    },
    "UpdateUserSettingsRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token return the result from the original successful request. </p> <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>",
          "idempotencyToken": true,
          "shape": "ClientToken"
        },
        "copyAllowed": {
          "documentation": "<p>Specifies whether the user can copy text from the streaming session to the local device.</p>",
          "shape": "EnabledType"
        },
        "disconnectTimeoutInMinutes": {
          "documentation": "<p>The amount of time that a streaming session remains active after users disconnect.</p>",
          "shape": "DisconnectTimeoutInMinutes"
        },
        "downloadAllowed": {
          "documentation": "<p>Specifies whether the user can download files from the streaming session to the local device.</p>",
          "shape": "EnabledType"
        },
        "idleDisconnectTimeoutInMinutes": {
          "documentation": "<p>The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the disconnect timeout interval begins.</p>",
          "shape": "IdleDisconnectTimeoutInMinutes"
        },
        "pasteAllowed": {
          "documentation": "<p>Specifies whether the user can paste text from the local device to the streaming session.</p>",
          "shape": "EnabledType"
        },
        "printAllowed": {
          "documentation": "<p>Specifies whether the user can print to the local device.</p>",
          "shape": "EnabledType"
        },
        "uploadAllowed": {
          "documentation": "<p>Specifies whether the user can upload files from the local device to the streaming session.</p>",
          "shape": "EnabledType"
        },
        "userSettingsArn": {
          "documentation": "<p>The ARN of the user settings.</p>",
          "location": "uri",
          "locationName": "userSettingsArn",
          "shape": "ARN"
        }
      },
      "required": [
        "userSettingsArn"
      ],
      "type": "structure"
    },
    "UpdateUserSettingsResponse": {
      "members": {
        "userSettings": {
          "documentation": "<p>The user settings.</p>",
          "shape": "UserSettings"
        }
      },
      "required": [
        "userSettings"
      ],
      "type": "structure"
    },
    "UserAccessLoggingSettings": {
      "documentation": "<p>A user access logging settings resource that can be associated with a web portal.</p>",
      "members": {
        "associatedPortalArns": {
          "documentation": "<p>A list of web portal ARNs that this user access logging settings is associated with.</p>",
          "shape": "ArnList"
        },
        "kinesisStreamArn": {
          "documentation": "<p>The ARN of the Kinesis stream.</p>",
          "shape": "KinesisStreamArn"
        },
        "userAccessLoggingSettingsArn": {
          "documentation": "<p>The ARN of the user access logging settings.</p>",
          "shape": "ARN"
        }
      },
      "required": [
        "userAccessLoggingSettingsArn"
      ],
      "type": "structure"
    },
    "UserAccessLoggingSettingsList": {
      "member": {
        "shape": "UserAccessLoggingSettingsSummary"
      },
      "type": "list"
    },
    "UserAccessLoggingSettingsSummary": {
      "documentation": "<p>The summary of user access logging settings.</p>",
      "members": {
        "kinesisStreamArn": {
          "documentation": "<p>The ARN of the Kinesis stream.</p>",
          "shape": "KinesisStreamArn"
        },
        "userAccessLoggingSettingsArn": {
          "documentation": "<p>The ARN of the user access logging settings.</p>",
          "shape": "ARN"
        }
      },
      "type": "structure"
    },
    "UserSettings": {
      "documentation": "<p>A user settings resource that can be associated with a web portal. Once associated with a web portal, user settings control how users can transfer data between a streaming session and the their local devices. </p>",
      "members": {
        "associatedPortalArns": {
          "documentation": "<p>A list of web portal ARNs that this user settings is associated with.</p>",
          "shape": "ArnList"
        },
        "copyAllowed": {
          "documentation": "<p>Specifies whether the user can copy text from the streaming session to the local device.</p>",
          "shape": "EnabledType"
        },
        "disconnectTimeoutInMinutes": {
          "documentation": "<p>The amount of time that a streaming session remains active after users disconnect.</p>",
          "shape": "DisconnectTimeoutInMinutes"
        },
        "downloadAllowed": {
          "documentation": "<p>Specifies whether the user can download files from the streaming session to the local device.</p>",
          "shape": "EnabledType"
        },
        "idleDisconnectTimeoutInMinutes": {
          "documentation": "<p>The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the disconnect timeout interval begins.</p>",
          "shape": "IdleDisconnectTimeoutInMinutes"
        },
        "pasteAllowed": {
          "documentation": "<p>Specifies whether the user can paste text from the local device to the streaming session.</p>",
          "shape": "EnabledType"
        },
        "printAllowed": {
          "documentation": "<p>Specifies whether the user can print to the local device.</p>",
          "shape": "EnabledType"
        },
        "uploadAllowed": {
          "documentation": "<p>Specifies whether the user can upload files from the local device to the streaming session.</p>",
          "shape": "EnabledType"
        },
        "userSettingsArn": {
          "documentation": "<p>The ARN of the user settings.</p>",
          "shape": "ARN"
        }
      },
      "required": [
        "userSettingsArn"
      ],
      "type": "structure"
    },
    "UserSettingsList": {
      "member": {
        "shape": "UserSettingsSummary"
      },
      "type": "list"
    },
    "UserSettingsSummary": {
      "documentation": "<p>The summary of user settings.</p>",
      "members": {
        "copyAllowed": {
          "documentation": "<p>Specifies whether the user can copy text from the streaming session to the local device.</p>",
          "shape": "EnabledType"
        },
        "disconnectTimeoutInMinutes": {
          "documentation": "<p>The amount of time that a streaming session remains active after users disconnect.</p>",
          "shape": "DisconnectTimeoutInMinutes"
        },
        "downloadAllowed": {
          "documentation": "<p>Specifies whether the user can download files from the streaming session to the local device.</p>",
          "shape": "EnabledType"
        },
        "idleDisconnectTimeoutInMinutes": {
          "documentation": "<p>The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the disconnect timeout interval begins.</p>",
          "shape": "IdleDisconnectTimeoutInMinutes"
        },
        "pasteAllowed": {
          "documentation": "<p>Specifies whether the user can paste text from the local device to the streaming session.</p>",
          "shape": "EnabledType"
        },
        "printAllowed": {
          "documentation": "<p>Specifies whether the user can print to the local device.</p>",
          "shape": "EnabledType"
        },
        "uploadAllowed": {
          "documentation": "<p>Specifies whether the user can upload files from the local device to the streaming session.</p>",
          "shape": "EnabledType"
        },
        "userSettingsArn": {
          "documentation": "<p>The ARN of the user settings.</p>",
          "shape": "ARN"
        }
      },
      "type": "structure"
    },
    "ValidationException": {
      "documentation": "<p>There is a validation error.</p>",
      "error": {
        "httpStatusCode": 400,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "fieldList": {
          "documentation": "<p>The field that caused the error.</p>",
          "shape": "ValidationExceptionFieldList"
        },
        "message": {
          "shape": "ExceptionMessage"
        },
        "reason": {
          "documentation": "<p>Reason the request failed validation</p>",
          "shape": "ValidationExceptionReason"
        }
      },
      "type": "structure"
    },
    "ValidationExceptionField": {
      "documentation": "<p>Information about a field passed inside a request that resulted in an exception.</p>",
      "members": {
        "message": {
          "documentation": "<p>The message describing why the field failed validation.</p>",
          "shape": "ExceptionMessage"
        },
        "name": {
          "documentation": "<p>The name of the field that failed validation.</p>",
          "shape": "FieldName"
        }
      },
      "required": [
        "message",
        "name"
      ],
      "type": "structure"
    },
    "ValidationExceptionFieldList": {
      "member": {
        "shape": "ValidationExceptionField"
      },
      "type": "list"
    },
    "ValidationExceptionReason": {
      "enum": [
        "unknownOperation",
        "cannotParse",
        "fieldValidationFailed",
        "other"
      ],
      "type": "string"
    },
    "VpcId": {
      "max": 255,
      "min": 1,
      "pattern": "^vpc-[0-9a-z]*$",
      "type": "string"
    },
    "keyArn": {
      "max": 2048,
      "min": 20,
      "pattern": "^arn:[\\w+=\\/,.@-]+:kms:[a-zA-Z0-9\\-]*:[a-zA-Z0-9]{1,12}:key\\/[a-zA-Z0-9-]+$",
      "type": "string"
    }
  },
  "version": "2.0"
}
