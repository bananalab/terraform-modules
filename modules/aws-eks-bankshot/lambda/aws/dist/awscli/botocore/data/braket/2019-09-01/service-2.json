{
  "documentation": "<p>The Amazon Braket API Reference provides information about the operations and structures supported in Amazon Braket.</p> <p>Additional Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/braket/latest/developerguide/what-is-braket.html\">Amazon Braket Developer Guide</a> </p> </li> </ul>",
  "metadata": {
    "apiVersion": "2019-09-01",
    "endpointPrefix": "braket",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "Braket",
    "serviceId": "Braket",
    "signatureVersion": "v4",
    "signingName": "braket",
    "uid": "braket-2019-09-01"
  },
  "operations": {
    "CancelJob": {
      "documentation": "<p>Cancels an Amazon Braket job.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/job/{jobArn}/cancel",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "CancelJobRequest"
      },
      "name": "CancelJob",
      "output": {
        "shape": "CancelJobResponse"
      }
    },
    "CancelQuantumTask": {
      "documentation": "<p>Cancels the specified task.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/quantum-task/{quantumTaskArn}/cancel",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "CancelQuantumTaskRequest"
      },
      "name": "CancelQuantumTask",
      "output": {
        "shape": "CancelQuantumTaskResponse"
      }
    },
    "CreateJob": {
      "documentation": "<p>Creates an Amazon Braket job.</p>",
      "errors": [
        {
          "shape": "ConflictException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "DeviceRetiredException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/job",
        "responseCode": 201
      },
      "input": {
        "shape": "CreateJobRequest"
      },
      "name": "CreateJob",
      "output": {
        "shape": "CreateJobResponse"
      }
    },
    "CreateQuantumTask": {
      "documentation": "<p>Creates a quantum task.</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "DeviceOfflineException"
        },
        {
          "shape": "DeviceRetiredException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/quantum-task",
        "responseCode": 201
      },
      "input": {
        "shape": "CreateQuantumTaskRequest"
      },
      "name": "CreateQuantumTask",
      "output": {
        "shape": "CreateQuantumTaskResponse"
      }
    },
    "GetDevice": {
      "documentation": "<p>Retrieves the devices available in Amazon Braket.</p> <note> <p>For backwards compatibility with older versions of BraketSchemas, OpenQASM information is omitted from GetDevice API calls. To get this information the user-agent needs to present a recent version of the BraketSchemas (1.8.0 or later). The Braket SDK automatically reports this for you. If you do not see OpenQASM results in the GetDevice response when using a Braket SDK, you may need to set AWS_EXECUTION_ENV environment variable to configure user-agent. See the code examples provided below for how to do this for the AWS CLI, Boto3, and the Go, Java, and JavaScript/TypeScript SDKs.</p> </note>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/device/{deviceArn}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetDeviceRequest"
      },
      "name": "GetDevice",
      "output": {
        "shape": "GetDeviceResponse"
      }
    },
    "GetJob": {
      "documentation": "<p>Retrieves the specified Amazon Braket job.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/job/{jobArn}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetJobRequest"
      },
      "name": "GetJob",
      "output": {
        "shape": "GetJobResponse"
      }
    },
    "GetQuantumTask": {
      "documentation": "<p>Retrieves the specified quantum task.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/quantum-task/{quantumTaskArn}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetQuantumTaskRequest"
      },
      "name": "GetQuantumTask",
      "output": {
        "shape": "GetQuantumTaskResponse"
      }
    },
    "ListTagsForResource": {
      "documentation": "<p>Shows the tags associated with this resource.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/tags/{resourceArn}",
        "responseCode": 200
      },
      "input": {
        "shape": "ListTagsForResourceRequest"
      },
      "name": "ListTagsForResource",
      "output": {
        "shape": "ListTagsForResourceResponse"
      }
    },
    "SearchDevices": {
      "documentation": "<p>Searches for devices using the specified filters.</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/devices",
        "responseCode": 200
      },
      "input": {
        "shape": "SearchDevicesRequest"
      },
      "name": "SearchDevices",
      "output": {
        "shape": "SearchDevicesResponse"
      }
    },
    "SearchJobs": {
      "documentation": "<p>Searches for Amazon Braket jobs that match the specified filter values.</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/jobs",
        "responseCode": 200
      },
      "input": {
        "shape": "SearchJobsRequest"
      },
      "name": "SearchJobs",
      "output": {
        "shape": "SearchJobsResponse"
      }
    },
    "SearchQuantumTasks": {
      "documentation": "<p>Searches for tasks that match the specified filter values.</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/quantum-tasks",
        "responseCode": 200
      },
      "input": {
        "shape": "SearchQuantumTasksRequest"
      },
      "name": "SearchQuantumTasks",
      "output": {
        "shape": "SearchQuantumTasksResponse"
      }
    },
    "TagResource": {
      "documentation": "<p>Add a tag to the specified resource.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/tags/{resourceArn}",
        "responseCode": 200
      },
      "input": {
        "shape": "TagResourceRequest"
      },
      "name": "TagResource",
      "output": {
        "shape": "TagResourceResponse"
      }
    },
    "UntagResource": {
      "documentation": "<p>Remove tags from a resource.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/tags/{resourceArn}",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "UntagResourceRequest"
      },
      "name": "UntagResource",
      "output": {
        "shape": "UntagResourceResponse"
      }
    }
  },
  "shapes": {
    "AccessDeniedException": {
      "documentation": "<p>You do not have sufficient access to perform this action.</p>",
      "error": {
        "httpStatusCode": 403,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "AlgorithmSpecification": {
      "documentation": "<p>Defines the Amazon Braket job to be created. Specifies the container image the job uses and the paths to the Python scripts used for entry and training.</p>",
      "members": {
        "containerImage": {
          "documentation": "<p>The container image used to create an Amazon Braket job.</p>",
          "shape": "ContainerImage"
        },
        "scriptModeConfig": {
          "documentation": "<p>Configures the paths to the Python scripts used for entry and training.</p>",
          "shape": "ScriptModeConfig"
        }
      },
      "type": "structure"
    },
    "CancelJobRequest": {
      "members": {
        "jobArn": {
          "documentation": "<p>The ARN of the Amazon Braket job to cancel.</p>",
          "location": "uri",
          "locationName": "jobArn",
          "shape": "JobArn"
        }
      },
      "required": [
        "jobArn"
      ],
      "type": "structure"
    },
    "CancelJobResponse": {
      "members": {
        "cancellationStatus": {
          "documentation": "<p>The status of the job cancellation request.</p>",
          "shape": "CancellationStatus"
        },
        "jobArn": {
          "documentation": "<p>The ARN of the Amazon Braket job.</p>",
          "shape": "JobArn"
        }
      },
      "required": [
        "cancellationStatus",
        "jobArn"
      ],
      "type": "structure"
    },
    "CancelQuantumTaskRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>The client token associated with the request.</p>",
          "idempotencyToken": true,
          "shape": "String64"
        },
        "quantumTaskArn": {
          "documentation": "<p>The ARN of the task to cancel.</p>",
          "location": "uri",
          "locationName": "quantumTaskArn",
          "shape": "QuantumTaskArn"
        }
      },
      "required": [
        "clientToken",
        "quantumTaskArn"
      ],
      "type": "structure"
    },
    "CancelQuantumTaskResponse": {
      "members": {
        "cancellationStatus": {
          "documentation": "<p>The status of the cancellation request.</p>",
          "shape": "CancellationStatus"
        },
        "quantumTaskArn": {
          "documentation": "<p>The ARN of the task.</p>",
          "shape": "QuantumTaskArn"
        }
      },
      "required": [
        "cancellationStatus",
        "quantumTaskArn"
      ],
      "type": "structure"
    },
    "CancellationStatus": {
      "enum": [
        "CANCELLING",
        "CANCELLED"
      ],
      "type": "string"
    },
    "CompressionType": {
      "enum": [
        "NONE",
        "GZIP"
      ],
      "type": "string"
    },
    "ConflictException": {
      "documentation": "<p>An error occurred due to a conflict.</p>",
      "error": {
        "httpStatusCode": 409,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ContainerImage": {
      "documentation": "<p>The container image used to create an Amazon Braket job.</p>",
      "members": {
        "uri": {
          "documentation": "<p>The URI locating the container image.</p>",
          "shape": "Uri"
        }
      },
      "required": [
        "uri"
      ],
      "type": "structure"
    },
    "CreateJobRequest": {
      "members": {
        "algorithmSpecification": {
          "documentation": "<p>Definition of the Amazon Braket job to be created. Specifies the container image the job uses and information about the Python scripts used for entry and training.</p>",
          "shape": "AlgorithmSpecification"
        },
        "checkpointConfig": {
          "documentation": "<p>Information about the output locations for job checkpoint data.</p>",
          "shape": "JobCheckpointConfig"
        },
        "clientToken": {
          "documentation": "<p>A unique token that guarantees that the call to this API is idempotent.</p>",
          "idempotencyToken": true,
          "shape": "String64"
        },
        "deviceConfig": {
          "documentation": "<p>The quantum processing unit (QPU) or simulator used to create an Amazon Braket job.</p>",
          "shape": "DeviceConfig"
        },
        "hyperParameters": {
          "documentation": "<p>Algorithm-specific parameters used by an Amazon Braket job that influence the quality of the training job. The values are set with a string of JSON key:value pairs, where the key is the name of the hyperparameter and the value is the value of th hyperparameter.</p>",
          "shape": "HyperParameters"
        },
        "inputDataConfig": {
          "documentation": "<p>A list of parameters that specify the name and type of input data and where it is located.</p>",
          "shape": "CreateJobRequestInputDataConfigList"
        },
        "instanceConfig": {
          "documentation": "<p>Configuration of the resource instances to use while running the hybrid job on Amazon Braket.</p>",
          "shape": "InstanceConfig"
        },
        "jobName": {
          "documentation": "<p>The name of the Amazon Braket job.</p>",
          "shape": "CreateJobRequestJobNameString"
        },
        "outputDataConfig": {
          "documentation": "<p>The path to the S3 location where you want to store job artifacts and the encryption key used to store them.</p>",
          "shape": "JobOutputDataConfig"
        },
        "roleArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of an IAM role that Amazon Braket can assume to perform tasks on behalf of a user. It can access user resources, run an Amazon Braket job container on behalf of user, and output resources to the users' s3 buckets.</p>",
          "shape": "RoleArn"
        },
        "stoppingCondition": {
          "documentation": "<p> The user-defined criteria that specifies when a job stops running.</p>",
          "shape": "JobStoppingCondition"
        },
        "tags": {
          "documentation": "<p>A tag object that consists of a key and an optional value, used to manage metadata for Amazon Braket resources.</p>",
          "shape": "TagsMap"
        }
      },
      "required": [
        "algorithmSpecification",
        "clientToken",
        "deviceConfig",
        "instanceConfig",
        "jobName",
        "outputDataConfig",
        "roleArn"
      ],
      "type": "structure"
    },
    "CreateJobRequestInputDataConfigList": {
      "max": 20,
      "member": {
        "shape": "InputFileConfig"
      },
      "min": 0,
      "type": "list"
    },
    "CreateJobRequestJobNameString": {
      "max": 50,
      "min": 1,
      "pattern": "^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,50}$",
      "type": "string"
    },
    "CreateJobResponse": {
      "members": {
        "jobArn": {
          "documentation": "<p>The ARN of the Amazon Braket job created.</p>",
          "shape": "JobArn"
        }
      },
      "required": [
        "jobArn"
      ],
      "type": "structure"
    },
    "CreateQuantumTaskRequest": {
      "members": {
        "action": {
          "documentation": "<p>The action associated with the task.</p>",
          "jsonvalue": true,
          "shape": "JsonValue"
        },
        "clientToken": {
          "documentation": "<p>The client token associated with the request.</p>",
          "idempotencyToken": true,
          "shape": "String64"
        },
        "deviceArn": {
          "documentation": "<p>The ARN of the device to run the task on.</p>",
          "shape": "DeviceArn"
        },
        "deviceParameters": {
          "documentation": "<p>The parameters for the device to run the task on.</p>",
          "jsonvalue": true,
          "shape": "CreateQuantumTaskRequestDeviceParametersString"
        },
        "jobToken": {
          "documentation": "<p>The token for an Amazon Braket job that associates it with the quantum task.</p>",
          "shape": "JobToken"
        },
        "outputS3Bucket": {
          "documentation": "<p>The S3 bucket to store task result files in.</p>",
          "shape": "CreateQuantumTaskRequestOutputS3BucketString"
        },
        "outputS3KeyPrefix": {
          "documentation": "<p>The key prefix for the location in the S3 bucket to store task results in.</p>",
          "shape": "CreateQuantumTaskRequestOutputS3KeyPrefixString"
        },
        "shots": {
          "documentation": "<p>The number of shots to use for the task.</p>",
          "shape": "CreateQuantumTaskRequestShotsLong"
        },
        "tags": {
          "documentation": "<p>Tags to be added to the quantum task you're creating.</p>",
          "shape": "TagsMap"
        }
      },
      "required": [
        "action",
        "clientToken",
        "deviceArn",
        "outputS3Bucket",
        "outputS3KeyPrefix",
        "shots"
      ],
      "type": "structure"
    },
    "CreateQuantumTaskRequestDeviceParametersString": {
      "max": 48000,
      "min": 1,
      "type": "string"
    },
    "CreateQuantumTaskRequestOutputS3BucketString": {
      "max": 63,
      "min": 3,
      "type": "string"
    },
    "CreateQuantumTaskRequestOutputS3KeyPrefixString": {
      "max": 1024,
      "min": 1,
      "type": "string"
    },
    "CreateQuantumTaskRequestShotsLong": {
      "box": true,
      "min": 0,
      "type": "long"
    },
    "CreateQuantumTaskResponse": {
      "members": {
        "quantumTaskArn": {
          "documentation": "<p>The ARN of the task created by the request.</p>",
          "shape": "QuantumTaskArn"
        }
      },
      "required": [
        "quantumTaskArn"
      ],
      "type": "structure"
    },
    "DataSource": {
      "documentation": "<p>Information about the source of the data used by the Amazon Braket job.</p>",
      "members": {
        "s3DataSource": {
          "documentation": "<p>Information about the data stored in Amazon S3 used by the Amazon Braket job.</p>",
          "shape": "S3DataSource"
        }
      },
      "required": [
        "s3DataSource"
      ],
      "type": "structure"
    },
    "DeviceArn": {
      "max": 256,
      "min": 1,
      "type": "string"
    },
    "DeviceConfig": {
      "documentation": "<p>Configures the quantum processing units (QPUs) or simulator used to create and run an Amazon Braket job.</p>",
      "members": {
        "device": {
          "documentation": "<p>The primary quantum processing unit (QPU) or simulator used to create and run an Amazon Braket job.</p>",
          "shape": "String256"
        }
      },
      "required": [
        "device"
      ],
      "type": "structure"
    },
    "DeviceOfflineException": {
      "documentation": "<p>The specified device is currently offline.</p>",
      "error": {
        "httpStatusCode": 424,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "DeviceRetiredException": {
      "documentation": "<p>The specified device has been retired.</p>",
      "error": {
        "httpStatusCode": 410,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "DeviceStatus": {
      "enum": [
        "ONLINE",
        "OFFLINE",
        "RETIRED"
      ],
      "type": "string"
    },
    "DeviceSummary": {
      "documentation": "<p>Includes information about the device.</p>",
      "members": {
        "deviceArn": {
          "documentation": "<p>The ARN of the device.</p>",
          "shape": "DeviceArn"
        },
        "deviceName": {
          "documentation": "<p>The name of the device.</p>",
          "shape": "String"
        },
        "deviceStatus": {
          "documentation": "<p>The status of the device.</p>",
          "shape": "DeviceStatus"
        },
        "deviceType": {
          "documentation": "<p>The type of the device.</p>",
          "shape": "DeviceType"
        },
        "providerName": {
          "documentation": "<p>The provider of the device.</p>",
          "shape": "String"
        }
      },
      "required": [
        "deviceArn",
        "deviceName",
        "deviceStatus",
        "deviceType",
        "providerName"
      ],
      "type": "structure"
    },
    "DeviceSummaryList": {
      "member": {
        "shape": "DeviceSummary"
      },
      "type": "list"
    },
    "DeviceType": {
      "enum": [
        "QPU",
        "SIMULATOR"
      ],
      "type": "string"
    },
    "GetDeviceRequest": {
      "members": {
        "deviceArn": {
          "documentation": "<p>The ARN of the device to retrieve.</p>",
          "location": "uri",
          "locationName": "deviceArn",
          "shape": "DeviceArn"
        }
      },
      "required": [
        "deviceArn"
      ],
      "type": "structure"
    },
    "GetDeviceResponse": {
      "members": {
        "deviceArn": {
          "documentation": "<p>The ARN of the device.</p>",
          "shape": "DeviceArn"
        },
        "deviceCapabilities": {
          "documentation": "<p>Details about the capabilities of the device.</p>",
          "jsonvalue": true,
          "shape": "JsonValue"
        },
        "deviceName": {
          "documentation": "<p>The name of the device.</p>",
          "shape": "String"
        },
        "deviceStatus": {
          "documentation": "<p>The status of the device.</p>",
          "shape": "DeviceStatus"
        },
        "deviceType": {
          "documentation": "<p>The type of the device.</p>",
          "shape": "DeviceType"
        },
        "providerName": {
          "documentation": "<p>The name of the partner company for the device.</p>",
          "shape": "String"
        }
      },
      "required": [
        "deviceArn",
        "deviceCapabilities",
        "deviceName",
        "deviceStatus",
        "deviceType",
        "providerName"
      ],
      "type": "structure"
    },
    "GetJobRequest": {
      "members": {
        "jobArn": {
          "documentation": "<p>The ARN of the job to retrieve.</p>",
          "location": "uri",
          "locationName": "jobArn",
          "shape": "JobArn"
        }
      },
      "required": [
        "jobArn"
      ],
      "type": "structure"
    },
    "GetJobResponse": {
      "members": {
        "algorithmSpecification": {
          "documentation": "<p>Definition of the Amazon Braket job created. Specifies the container image the job uses, information about the Python scripts used for entry and training, and the user-defined metrics used to evaluation the job.</p>",
          "shape": "AlgorithmSpecification"
        },
        "billableDuration": {
          "documentation": "<p>The billable time the Amazon Braket job used to complete.</p>",
          "shape": "Integer"
        },
        "checkpointConfig": {
          "documentation": "<p>Information about the output locations for job checkpoint data.</p>",
          "shape": "JobCheckpointConfig"
        },
        "createdAt": {
          "documentation": "<p>The date and time that the Amazon Braket job was created.</p>",
          "shape": "SyntheticTimestamp_date_time"
        },
        "deviceConfig": {
          "documentation": "<p>The quantum processing unit (QPU) or simulator used to run the Amazon Braket job.</p>",
          "shape": "DeviceConfig"
        },
        "endedAt": {
          "documentation": "<p>The date and time that the Amazon Braket job ended.</p>",
          "shape": "SyntheticTimestamp_date_time"
        },
        "events": {
          "documentation": "<p>Details about the type and time events occurred related to the Amazon Braket job.</p>",
          "shape": "JobEvents"
        },
        "failureReason": {
          "documentation": "<p>A description of the reason why an Amazon Braket job failed, if it failed.</p>",
          "shape": "String1024"
        },
        "hyperParameters": {
          "documentation": "<p>Algorithm-specific parameters used by an Amazon Braket job that influence the quality of the traiing job. The values are set with a string of JSON key:value pairs, where the key is the name of the hyperparameter and the value is the value of th hyperparameter.</p>",
          "shape": "HyperParameters"
        },
        "inputDataConfig": {
          "documentation": "<p>A list of parameters that specify the name and type of input data and where it is located.</p>",
          "shape": "InputConfigList"
        },
        "instanceConfig": {
          "documentation": "<p>The resource instances to use while running the hybrid job on Amazon Braket.</p>",
          "shape": "InstanceConfig"
        },
        "jobArn": {
          "documentation": "<p>The ARN of the Amazon Braket job.</p>",
          "shape": "JobArn"
        },
        "jobName": {
          "documentation": "<p>The name of the Amazon Braket job.</p>",
          "shape": "GetJobResponseJobNameString"
        },
        "outputDataConfig": {
          "documentation": "<p>The path to the S3 location where job artifacts are stored and the encryption key used to store them there.</p>",
          "shape": "JobOutputDataConfig"
        },
        "roleArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of an IAM role that Amazon Braket can assume to perform tasks on behalf of a user. It can access user resources, run an Amazon Braket job container on behalf of user, and output resources to the s3 buckets of a user.</p>",
          "shape": "RoleArn"
        },
        "startedAt": {
          "documentation": "<p>The date and time that the Amazon Braket job was started.</p>",
          "shape": "SyntheticTimestamp_date_time"
        },
        "status": {
          "documentation": "<p>The status of the Amazon Braket job.</p>",
          "shape": "JobPrimaryStatus"
        },
        "stoppingCondition": {
          "documentation": "<p>The user-defined criteria that specifies when to stop a job running.</p>",
          "shape": "JobStoppingCondition"
        },
        "tags": {
          "documentation": "<p>A tag object that consists of a key and an optional value, used to manage metadata for Amazon Braket resources.</p>",
          "shape": "TagsMap"
        }
      },
      "required": [
        "algorithmSpecification",
        "createdAt",
        "instanceConfig",
        "jobArn",
        "jobName",
        "outputDataConfig",
        "roleArn",
        "status"
      ],
      "type": "structure"
    },
    "GetJobResponseJobNameString": {
      "max": 50,
      "min": 1,
      "pattern": "^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,50}$",
      "type": "string"
    },
    "GetQuantumTaskRequest": {
      "members": {
        "quantumTaskArn": {
          "documentation": "<p>the ARN of the task to retrieve.</p>",
          "location": "uri",
          "locationName": "quantumTaskArn",
          "shape": "QuantumTaskArn"
        }
      },
      "required": [
        "quantumTaskArn"
      ],
      "type": "structure"
    },
    "GetQuantumTaskResponse": {
      "members": {
        "createdAt": {
          "documentation": "<p>The time at which the task was created.</p>",
          "shape": "SyntheticTimestamp_date_time"
        },
        "deviceArn": {
          "documentation": "<p>The ARN of the device the task was run on.</p>",
          "shape": "DeviceArn"
        },
        "deviceParameters": {
          "documentation": "<p>The parameters for the device on which the task ran.</p>",
          "jsonvalue": true,
          "shape": "JsonValue"
        },
        "endedAt": {
          "documentation": "<p>The time at which the task ended.</p>",
          "shape": "SyntheticTimestamp_date_time"
        },
        "failureReason": {
          "documentation": "<p>The reason that a task failed.</p>",
          "shape": "String"
        },
        "jobArn": {
          "documentation": "<p>The ARN of the Amazon Braket job associated with the quantum task.</p>",
          "shape": "JobArn"
        },
        "outputS3Bucket": {
          "documentation": "<p>The S3 bucket where task results are stored.</p>",
          "shape": "String"
        },
        "outputS3Directory": {
          "documentation": "<p>The folder in the S3 bucket where task results are stored.</p>",
          "shape": "String"
        },
        "quantumTaskArn": {
          "documentation": "<p>The ARN of the task.</p>",
          "shape": "QuantumTaskArn"
        },
        "shots": {
          "documentation": "<p>The number of shots used in the task.</p>",
          "shape": "Long"
        },
        "status": {
          "documentation": "<p>The status of the task.</p>",
          "shape": "QuantumTaskStatus"
        },
        "tags": {
          "documentation": "<p>The tags that belong to this task.</p>",
          "shape": "TagsMap"
        }
      },
      "required": [
        "createdAt",
        "deviceArn",
        "deviceParameters",
        "outputS3Bucket",
        "outputS3Directory",
        "quantumTaskArn",
        "shots",
        "status"
      ],
      "type": "structure"
    },
    "HyperParameters": {
      "key": {
        "shape": "String256"
      },
      "max": 100,
      "min": 0,
      "type": "map",
      "value": {
        "shape": "HyperParametersValueString"
      }
    },
    "HyperParametersValueString": {
      "max": 2500,
      "min": 1,
      "type": "string"
    },
    "InputConfigList": {
      "member": {
        "shape": "InputFileConfig"
      },
      "type": "list"
    },
    "InputFileConfig": {
      "documentation": "<p>A list of parameters that specify the input channels, type of input data, and where it is located.</p>",
      "members": {
        "channelName": {
          "documentation": "<p>A named input source that an Amazon Braket job can consume.</p>",
          "shape": "InputFileConfigChannelNameString"
        },
        "contentType": {
          "documentation": "<p>The MIME type of the data.</p>",
          "shape": "String256"
        },
        "dataSource": {
          "documentation": "<p>The location of the channel data.</p>",
          "shape": "DataSource"
        }
      },
      "required": [
        "channelName",
        "dataSource"
      ],
      "type": "structure"
    },
    "InputFileConfigChannelNameString": {
      "max": 64,
      "min": 1,
      "pattern": "^[A-Za-z0-9\\.\\-_]+$",
      "type": "string"
    },
    "InstanceConfig": {
      "documentation": "<p>Configures the resource instances to use while running the Amazon Braket hybrid job on Amazon Braket.</p>",
      "members": {
        "instanceCount": {
          "documentation": "<p>Configures the number of resource instances to use while running an Amazon Braket job on Amazon Braket. The default value is 1.</p>",
          "shape": "InstanceConfigInstanceCountInteger"
        },
        "instanceType": {
          "documentation": "<p>Configures the type resource instances to use while running an Amazon Braket hybrid job.</p>",
          "shape": "InstanceType"
        },
        "volumeSizeInGb": {
          "documentation": "<p>The size of the storage volume, in GB, that user wants to provision.</p>",
          "shape": "InstanceConfigVolumeSizeInGbInteger"
        }
      },
      "required": [
        "instanceType",
        "volumeSizeInGb"
      ],
      "type": "structure"
    },
    "InstanceConfigInstanceCountInteger": {
      "box": true,
      "min": 1,
      "type": "integer"
    },
    "InstanceConfigVolumeSizeInGbInteger": {
      "box": true,
      "min": 1,
      "type": "integer"
    },
    "InstanceType": {
      "enum": [
        "ml.m4.xlarge",
        "ml.m4.2xlarge",
        "ml.m4.4xlarge",
        "ml.m4.10xlarge",
        "ml.m4.16xlarge",
        "ml.g4dn.xlarge",
        "ml.g4dn.2xlarge",
        "ml.g4dn.4xlarge",
        "ml.g4dn.8xlarge",
        "ml.g4dn.12xlarge",
        "ml.g4dn.16xlarge",
        "ml.m5.large",
        "ml.m5.xlarge",
        "ml.m5.2xlarge",
        "ml.m5.4xlarge",
        "ml.m5.12xlarge",
        "ml.m5.24xlarge",
        "ml.c4.xlarge",
        "ml.c4.2xlarge",
        "ml.c4.4xlarge",
        "ml.c4.8xlarge",
        "ml.p2.xlarge",
        "ml.p2.8xlarge",
        "ml.p2.16xlarge",
        "ml.p3.2xlarge",
        "ml.p3.8xlarge",
        "ml.p3.16xlarge",
        "ml.p3dn.24xlarge",
        "ml.p4d.24xlarge",
        "ml.c5.xlarge",
        "ml.c5.2xlarge",
        "ml.c5.4xlarge",
        "ml.c5.9xlarge",
        "ml.c5.18xlarge",
        "ml.c5n.xlarge",
        "ml.c5n.2xlarge",
        "ml.c5n.4xlarge",
        "ml.c5n.9xlarge",
        "ml.c5n.18xlarge"
      ],
      "type": "string"
    },
    "Integer": {
      "box": true,
      "type": "integer"
    },
    "InternalServiceException": {
      "documentation": "<p>The request processing has failed because of an unknown error, exception, or failure.</p>",
      "error": {
        "httpStatusCode": 500
      },
      "exception": true,
      "fault": true,
      "members": {
        "message": {
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "JobArn": {
      "pattern": "^arn:aws[a-z\\-]*:braket:[a-z0-9\\-]*:[0-9]{12}:job/.*$",
      "type": "string"
    },
    "JobCheckpointConfig": {
      "documentation": "<p>Contains information about the output locations for job checkpoint data.</p>",
      "members": {
        "localPath": {
          "documentation": "<p>(Optional) The local directory where checkpoints are written. The default directory is <code>/opt/braket/checkpoints/</code>.</p>",
          "shape": "String4096"
        },
        "s3Uri": {
          "documentation": "<p>Identifies the S3 path where you want Amazon Braket to store checkpoints. For example, <code>s3://bucket-name/key-name-prefix</code>.</p>",
          "shape": "S3Path"
        }
      },
      "required": [
        "s3Uri"
      ],
      "type": "structure"
    },
    "JobEventDetails": {
      "documentation": "<p>Details about the type and time events occurred related to the Amazon Braket job.</p>",
      "members": {
        "eventType": {
          "documentation": "<p>The type of event that occurred related to the Amazon Braket job.</p>",
          "shape": "JobEventType"
        },
        "message": {
          "documentation": "<p>A message describing the event that occurred related to the Amazon Braket job.</p>",
          "shape": "JobEventDetailsMessageString"
        },
        "timeOfEvent": {
          "documentation": "<p>TThe type of event that occurred related to the Amazon Braket job.</p>",
          "shape": "SyntheticTimestamp_date_time"
        }
      },
      "type": "structure"
    },
    "JobEventDetailsMessageString": {
      "max": 2500,
      "min": 0,
      "type": "string"
    },
    "JobEventType": {
      "enum": [
        "WAITING_FOR_PRIORITY",
        "QUEUED_FOR_EXECUTION",
        "STARTING_INSTANCE",
        "DOWNLOADING_DATA",
        "RUNNING",
        "DEPRIORITIZED_DUE_TO_INACTIVITY",
        "UPLOADING_RESULTS",
        "COMPLETED",
        "FAILED",
        "MAX_RUNTIME_EXCEEDED",
        "CANCELLED"
      ],
      "type": "string"
    },
    "JobEvents": {
      "max": 20,
      "member": {
        "shape": "JobEventDetails"
      },
      "min": 0,
      "type": "list"
    },
    "JobOutputDataConfig": {
      "documentation": "<p>Specifies the path to the S3 location where you want to store job artifacts and the encryption key used to store them.</p>",
      "members": {
        "kmsKeyId": {
          "documentation": "<p>The AWS Key Management Service (AWS KMS) key that Amazon Braket uses to encrypt the job training artifacts at rest using Amazon S3 server-side encryption.</p>",
          "shape": "String2048"
        },
        "s3Path": {
          "documentation": "<p>Identifies the S3 path where you want Amazon Braket to store the job training artifacts. For example, <code>s3://bucket-name/key-name-prefix</code>.</p>",
          "shape": "S3Path"
        }
      },
      "required": [
        "s3Path"
      ],
      "type": "structure"
    },
    "JobPrimaryStatus": {
      "enum": [
        "QUEUED",
        "RUNNING",
        "COMPLETED",
        "FAILED",
        "CANCELLING",
        "CANCELLED"
      ],
      "type": "string"
    },
    "JobStoppingCondition": {
      "documentation": "<p>Specifies limits for how long an Amazon Braket job can run. </p>",
      "members": {
        "maxRuntimeInSeconds": {
          "documentation": "<p>The maximum length of time, in seconds, that an Amazon Braket job can run.</p>",
          "shape": "JobStoppingConditionMaxRuntimeInSecondsInteger"
        }
      },
      "type": "structure"
    },
    "JobStoppingConditionMaxRuntimeInSecondsInteger": {
      "box": true,
      "max": 432000,
      "min": 1,
      "type": "integer"
    },
    "JobSummary": {
      "documentation": "<p>Provides summary information about an Amazon Braket job.</p>",
      "members": {
        "createdAt": {
          "documentation": "<p>The date and time that the Amazon Braket job was created.</p>",
          "shape": "SyntheticTimestamp_date_time"
        },
        "device": {
          "documentation": "<p>Provides summary information about the primary device used by an Amazon Braket job.</p>",
          "shape": "String256"
        },
        "endedAt": {
          "documentation": "<p>The date and time that the Amazon Braket job ended.</p>",
          "shape": "SyntheticTimestamp_date_time"
        },
        "jobArn": {
          "documentation": "<p>The ARN of the Amazon Braket job.</p>",
          "shape": "JobArn"
        },
        "jobName": {
          "documentation": "<p>The name of the Amazon Braket job.</p>",
          "shape": "String"
        },
        "startedAt": {
          "documentation": "<p>The date and time that the Amazon Braket job was started.</p>",
          "shape": "SyntheticTimestamp_date_time"
        },
        "status": {
          "documentation": "<p>The status of the Amazon Braket job.</p>",
          "shape": "JobPrimaryStatus"
        },
        "tags": {
          "documentation": "<p>A tag object that consists of a key and an optional value, used to manage metadata for Amazon Braket resources.</p>",
          "shape": "TagsMap"
        }
      },
      "required": [
        "createdAt",
        "device",
        "jobArn",
        "jobName",
        "status"
      ],
      "type": "structure"
    },
    "JobSummaryList": {
      "member": {
        "shape": "JobSummary"
      },
      "type": "list"
    },
    "JobToken": {
      "max": 128,
      "min": 1,
      "type": "string"
    },
    "JsonValue": {
      "type": "string"
    },
    "ListTagsForResourceRequest": {
      "members": {
        "resourceArn": {
          "documentation": "<p>Specify the <code>resourceArn</code> for the resource whose tags to display.</p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "String"
        }
      },
      "required": [
        "resourceArn"
      ],
      "type": "structure"
    },
    "ListTagsForResourceResponse": {
      "members": {
        "tags": {
          "documentation": "<p>Displays the key, value pairs of tags associated with this resource.</p>",
          "shape": "TagsMap"
        }
      },
      "type": "structure"
    },
    "Long": {
      "box": true,
      "type": "long"
    },
    "QuantumTaskArn": {
      "max": 256,
      "min": 1,
      "type": "string"
    },
    "QuantumTaskStatus": {
      "enum": [
        "CREATED",
        "QUEUED",
        "RUNNING",
        "COMPLETED",
        "FAILED",
        "CANCELLING",
        "CANCELLED"
      ],
      "type": "string"
    },
    "QuantumTaskSummary": {
      "documentation": "<p>Includes information about a quantum task.</p>",
      "members": {
        "createdAt": {
          "documentation": "<p>The time at which the task was created.</p>",
          "shape": "SyntheticTimestamp_date_time"
        },
        "deviceArn": {
          "documentation": "<p>The ARN of the device the task ran on.</p>",
          "shape": "DeviceArn"
        },
        "endedAt": {
          "documentation": "<p>The time at which the task finished.</p>",
          "shape": "SyntheticTimestamp_date_time"
        },
        "outputS3Bucket": {
          "documentation": "<p>The S3 bucket where the task result file is stored..</p>",
          "shape": "String"
        },
        "outputS3Directory": {
          "documentation": "<p>The folder in the S3 bucket where the task result file is stored.</p>",
          "shape": "String"
        },
        "quantumTaskArn": {
          "documentation": "<p>The ARN of the task.</p>",
          "shape": "QuantumTaskArn"
        },
        "shots": {
          "documentation": "<p>The shots used for the task.</p>",
          "shape": "Long"
        },
        "status": {
          "documentation": "<p>The status of the task.</p>",
          "shape": "QuantumTaskStatus"
        },
        "tags": {
          "documentation": "<p>Displays the key, value pairs of tags associated with this quantum task.</p>",
          "shape": "TagsMap"
        }
      },
      "required": [
        "createdAt",
        "deviceArn",
        "outputS3Bucket",
        "outputS3Directory",
        "quantumTaskArn",
        "shots",
        "status"
      ],
      "type": "structure"
    },
    "QuantumTaskSummaryList": {
      "member": {
        "shape": "QuantumTaskSummary"
      },
      "type": "list"
    },
    "ResourceNotFoundException": {
      "documentation": "<p>The specified resource was not found.</p>",
      "error": {
        "httpStatusCode": 404,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "RoleArn": {
      "pattern": "^arn:aws[a-z\\-]*:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+$",
      "type": "string"
    },
    "S3DataSource": {
      "documentation": "<p>Information about the data stored in Amazon S3 used by the Amazon Braket job.</p>",
      "members": {
        "s3Uri": {
          "documentation": "<p>Depending on the value specified for the <code>S3DataType</code>, identifies either a key name prefix or a manifest that locates the S3 data source.</p>",
          "shape": "S3Path"
        }
      },
      "required": [
        "s3Uri"
      ],
      "type": "structure"
    },
    "S3Path": {
      "max": 1024,
      "min": 0,
      "pattern": "^(https|s3)://([^/]+)/?(.*)$",
      "type": "string"
    },
    "ScriptModeConfig": {
      "documentation": "<p>Contains information about the Python scripts used for entry and by an Amazon Braket job.</p>",
      "members": {
        "compressionType": {
          "documentation": "<p>The type of compression used by the Python scripts for an Amazon Braket job.</p>",
          "shape": "CompressionType"
        },
        "entryPoint": {
          "documentation": "<p>The path to the Python script that serves as the entry point for an Amazon Braket job.</p>",
          "shape": "String"
        },
        "s3Uri": {
          "documentation": "<p>The URI that specifies the S3 path to the Python script module that contains the training script used by an Amazon Braket job.</p>",
          "shape": "S3Path"
        }
      },
      "required": [
        "entryPoint",
        "s3Uri"
      ],
      "type": "structure"
    },
    "SearchDevicesFilter": {
      "documentation": "<p>The filter to use for searching devices.</p>",
      "members": {
        "name": {
          "documentation": "<p>The name to use to filter results.</p>",
          "shape": "SearchDevicesFilterNameString"
        },
        "values": {
          "documentation": "<p>The values to use to filter results.</p>",
          "shape": "SearchDevicesFilterValuesList"
        }
      },
      "required": [
        "name",
        "values"
      ],
      "type": "structure"
    },
    "SearchDevicesFilterNameString": {
      "max": 64,
      "min": 1,
      "type": "string"
    },
    "SearchDevicesFilterValuesList": {
      "max": 10,
      "member": {
        "shape": "String256"
      },
      "min": 1,
      "type": "list"
    },
    "SearchDevicesRequest": {
      "members": {
        "filters": {
          "documentation": "<p>The filter values to use to search for a device.</p>",
          "shape": "SearchDevicesRequestFiltersList"
        },
        "maxResults": {
          "documentation": "<p>The maximum number of results to return in the response.</p>",
          "shape": "SearchDevicesRequestMaxResultsInteger"
        },
        "nextToken": {
          "documentation": "<p>A token used for pagination of results returned in the response. Use the token returned from the previous request continue results where the previous request ended.</p>",
          "shape": "String"
        }
      },
      "required": [
        "filters"
      ],
      "type": "structure"
    },
    "SearchDevicesRequestFiltersList": {
      "max": 10,
      "member": {
        "shape": "SearchDevicesFilter"
      },
      "min": 0,
      "type": "list"
    },
    "SearchDevicesRequestMaxResultsInteger": {
      "box": true,
      "max": 100,
      "min": 1,
      "type": "integer"
    },
    "SearchDevicesResponse": {
      "members": {
        "devices": {
          "documentation": "<p>An array of <code>DeviceSummary</code> objects for devices that match the specified filter values.</p>",
          "shape": "DeviceSummaryList"
        },
        "nextToken": {
          "documentation": "<p>A token used for pagination of results, or null if there are no additional results. Use the token value in a subsequent request to continue results where the previous request ended.</p>",
          "shape": "String"
        }
      },
      "required": [
        "devices"
      ],
      "type": "structure"
    },
    "SearchJobsFilter": {
      "documentation": "<p>A filter used to search for Amazon Braket jobs.</p>",
      "members": {
        "name": {
          "documentation": "<p>The name to use for the jobs filter.</p>",
          "shape": "String64"
        },
        "operator": {
          "documentation": "<p>An operator to use for the jobs filter.</p>",
          "shape": "SearchJobsFilterOperator"
        },
        "values": {
          "documentation": "<p>The values to use for the jobs filter.</p>",
          "shape": "SearchJobsFilterValuesList"
        }
      },
      "required": [
        "name",
        "operator",
        "values"
      ],
      "type": "structure"
    },
    "SearchJobsFilterOperator": {
      "enum": [
        "LT",
        "LTE",
        "EQUAL",
        "GT",
        "GTE",
        "BETWEEN",
        "CONTAINS"
      ],
      "type": "string"
    },
    "SearchJobsFilterValuesList": {
      "max": 10,
      "member": {
        "shape": "String256"
      },
      "min": 1,
      "type": "list"
    },
    "SearchJobsRequest": {
      "members": {
        "filters": {
          "documentation": "<p>The filter values to use when searching for a job.</p>",
          "shape": "SearchJobsRequestFiltersList"
        },
        "maxResults": {
          "documentation": "<p>The maximum number of results to return in the response.</p>",
          "shape": "SearchJobsRequestMaxResultsInteger"
        },
        "nextToken": {
          "documentation": "<p>A token used for pagination of results returned in the response. Use the token returned from the previous request to continue results where the previous request ended.</p>",
          "shape": "String"
        }
      },
      "required": [
        "filters"
      ],
      "type": "structure"
    },
    "SearchJobsRequestFiltersList": {
      "max": 10,
      "member": {
        "shape": "SearchJobsFilter"
      },
      "min": 0,
      "type": "list"
    },
    "SearchJobsRequestMaxResultsInteger": {
      "box": true,
      "max": 100,
      "min": 1,
      "type": "integer"
    },
    "SearchJobsResponse": {
      "members": {
        "jobs": {
          "documentation": "<p>An array of <code>JobSummary</code> objects for devices that match the specified filter values.</p>",
          "shape": "JobSummaryList"
        },
        "nextToken": {
          "documentation": "<p>A token used for pagination of results, or <code>null</code> if there are no additional results. Use the token value in a subsequent request to continue results where the previous request ended.</p>",
          "shape": "String"
        }
      },
      "required": [
        "jobs"
      ],
      "type": "structure"
    },
    "SearchQuantumTasksFilter": {
      "documentation": "<p>A filter to use to search for tasks.</p>",
      "members": {
        "name": {
          "documentation": "<p>The name of the device used for the task.</p>",
          "shape": "String64"
        },
        "operator": {
          "documentation": "<p>An operator to use in the filter.</p>",
          "shape": "SearchQuantumTasksFilterOperator"
        },
        "values": {
          "documentation": "<p>The values to use for the filter.</p>",
          "shape": "SearchQuantumTasksFilterValuesList"
        }
      },
      "required": [
        "name",
        "operator",
        "values"
      ],
      "type": "structure"
    },
    "SearchQuantumTasksFilterOperator": {
      "enum": [
        "LT",
        "LTE",
        "EQUAL",
        "GT",
        "GTE",
        "BETWEEN"
      ],
      "type": "string"
    },
    "SearchQuantumTasksFilterValuesList": {
      "max": 10,
      "member": {
        "shape": "String256"
      },
      "min": 1,
      "type": "list"
    },
    "SearchQuantumTasksRequest": {
      "members": {
        "filters": {
          "documentation": "<p>Array of <code>SearchQuantumTasksFilter</code> objects.</p>",
          "shape": "SearchQuantumTasksRequestFiltersList"
        },
        "maxResults": {
          "documentation": "<p>Maximum number of results to return in the response.</p>",
          "shape": "SearchQuantumTasksRequestMaxResultsInteger"
        },
        "nextToken": {
          "documentation": "<p>A token used for pagination of results returned in the response. Use the token returned from the previous request continue results where the previous request ended.</p>",
          "shape": "String"
        }
      },
      "required": [
        "filters"
      ],
      "type": "structure"
    },
    "SearchQuantumTasksRequestFiltersList": {
      "max": 10,
      "member": {
        "shape": "SearchQuantumTasksFilter"
      },
      "min": 0,
      "type": "list"
    },
    "SearchQuantumTasksRequestMaxResultsInteger": {
      "box": true,
      "max": 100,
      "min": 1,
      "type": "integer"
    },
    "SearchQuantumTasksResponse": {
      "members": {
        "nextToken": {
          "documentation": "<p>A token used for pagination of results, or null if there are no additional results. Use the token value in a subsequent request to continue results where the previous request ended.</p>",
          "shape": "String"
        },
        "quantumTasks": {
          "documentation": "<p>An array of <code>QuantumTaskSummary</code> objects for tasks that match the specified filters.</p>",
          "shape": "QuantumTaskSummaryList"
        }
      },
      "required": [
        "quantumTasks"
      ],
      "type": "structure"
    },
    "ServiceQuotaExceededException": {
      "documentation": "<p>The request failed because a service quota is exceeded.</p>",
      "error": {
        "httpStatusCode": 402,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "String": {
      "type": "string"
    },
    "String1024": {
      "max": 1024,
      "min": 1,
      "type": "string"
    },
    "String2048": {
      "max": 2048,
      "min": 1,
      "type": "string"
    },
    "String256": {
      "max": 256,
      "min": 1,
      "type": "string"
    },
    "String4096": {
      "max": 4096,
      "min": 1,
      "type": "string"
    },
    "String64": {
      "max": 64,
      "min": 1,
      "type": "string"
    },
    "SyntheticTimestamp_date_time": {
      "timestampFormat": "iso8601",
      "type": "timestamp"
    },
    "TagKeys": {
      "member": {
        "shape": "String"
      },
      "type": "list"
    },
    "TagResourceRequest": {
      "members": {
        "resourceArn": {
          "documentation": "<p>Specify the <code>resourceArn</code> of the resource to which a tag will be added.</p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "String"
        },
        "tags": {
          "documentation": "<p>Specify the tags to add to the resource.</p>",
          "shape": "TagsMap"
        }
      },
      "required": [
        "resourceArn",
        "tags"
      ],
      "type": "structure"
    },
    "TagResourceResponse": {
      "members": {},
      "type": "structure"
    },
    "TagsMap": {
      "key": {
        "shape": "String"
      },
      "type": "map",
      "value": {
        "shape": "String"
      }
    },
    "ThrottlingException": {
      "documentation": "<p>The throttling rate limit is met.</p>",
      "error": {
        "httpStatusCode": 429,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "UntagResourceRequest": {
      "members": {
        "resourceArn": {
          "documentation": "<p>Specify the <code>resourceArn</code> for the resource from which to remove the tags.</p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "String"
        },
        "tagKeys": {
          "documentation": "<p>Specify the keys for the tags to remove from the resource.</p>",
          "location": "querystring",
          "locationName": "tagKeys",
          "shape": "TagKeys"
        }
      },
      "required": [
        "resourceArn",
        "tagKeys"
      ],
      "type": "structure"
    },
    "UntagResourceResponse": {
      "members": {},
      "type": "structure"
    },
    "Uri": {
      "max": 255,
      "min": 1,
      "pattern": "\\d{10,14}\\.dkr\\.ecr.[a-z0-9-]+\\.amazonaws\\.com\\/.+(@sha256)?:.+",
      "type": "string"
    },
    "ValidationException": {
      "documentation": "<p>The input fails to satisfy the constraints specified by an AWS service.</p>",
      "error": {
        "httpStatusCode": 400,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "String"
        }
      },
      "type": "structure"
    }
  },
  "version": "2.0"
}
