{
  "documentation": "<p>The Application Migration Service service.</p>",
  "metadata": {
    "apiVersion": "2020-02-26",
    "endpointPrefix": "mgn",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "mgn",
    "serviceFullName": "Application Migration Service",
    "serviceId": "mgn",
    "signatureVersion": "v4",
    "signingName": "mgn",
    "uid": "mgn-2020-02-26"
  },
  "operations": {
    "ChangeServerLifeCycleState": {
      "documentation": "<p>Allows the user to set the SourceServer.LifeCycle.state property for specific Source Server IDs to one of the following: READY_FOR_TEST or READY_FOR_CUTOVER. This command only works if the Source Server is already launchable (dataReplicationInfo.lagDuration is not null.)</p>",
      "errors": [
        {
          "shape": "UninitializedAccountException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/ChangeServerLifeCycleState",
        "responseCode": 200
      },
      "input": {
        "shape": "ChangeServerLifeCycleStateRequest"
      },
      "name": "ChangeServerLifeCycleState",
      "output": {
        "shape": "SourceServer"
      }
    },
    "CreateLaunchConfigurationTemplate": {
      "documentation": "<p>Creates a new ReplicationConfigurationTemplate.</p>",
      "errors": [
        {
          "shape": "UninitializedAccountException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/CreateLaunchConfigurationTemplate",
        "responseCode": 201
      },
      "input": {
        "shape": "CreateLaunchConfigurationTemplateRequest"
      },
      "name": "CreateLaunchConfigurationTemplate",
      "output": {
        "shape": "LaunchConfigurationTemplate"
      }
    },
    "CreateReplicationConfigurationTemplate": {
      "documentation": "<p>Creates a new ReplicationConfigurationTemplate.</p>",
      "errors": [
        {
          "shape": "UninitializedAccountException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/CreateReplicationConfigurationTemplate",
        "responseCode": 201
      },
      "input": {
        "shape": "CreateReplicationConfigurationTemplateRequest"
      },
      "name": "CreateReplicationConfigurationTemplate",
      "output": {
        "shape": "ReplicationConfigurationTemplate"
      }
    },
    "DeleteJob": {
      "documentation": "<p>Deletes a single Job by ID.</p>",
      "errors": [
        {
          "shape": "UninitializedAccountException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/DeleteJob",
        "responseCode": 204
      },
      "idempotent": true,
      "input": {
        "shape": "DeleteJobRequest"
      },
      "name": "DeleteJob",
      "output": {
        "shape": "DeleteJobResponse"
      }
    },
    "DeleteLaunchConfigurationTemplate": {
      "documentation": "<p>Creates a new ReplicationConfigurationTemplate.</p>",
      "errors": [
        {
          "shape": "UninitializedAccountException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/DeleteLaunchConfigurationTemplate",
        "responseCode": 204
      },
      "idempotent": true,
      "input": {
        "shape": "DeleteLaunchConfigurationTemplateRequest"
      },
      "name": "DeleteLaunchConfigurationTemplate",
      "output": {
        "shape": "DeleteLaunchConfigurationTemplateResponse"
      }
    },
    "DeleteReplicationConfigurationTemplate": {
      "documentation": "<p>Deletes a single Replication Configuration Template by ID</p>",
      "errors": [
        {
          "shape": "UninitializedAccountException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/DeleteReplicationConfigurationTemplate",
        "responseCode": 204
      },
      "idempotent": true,
      "input": {
        "shape": "DeleteReplicationConfigurationTemplateRequest"
      },
      "name": "DeleteReplicationConfigurationTemplate",
      "output": {
        "shape": "DeleteReplicationConfigurationTemplateResponse"
      }
    },
    "DeleteSourceServer": {
      "documentation": "<p>Deletes a single source server by ID.</p>",
      "errors": [
        {
          "shape": "UninitializedAccountException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/DeleteSourceServer",
        "responseCode": 204
      },
      "idempotent": true,
      "input": {
        "shape": "DeleteSourceServerRequest"
      },
      "name": "DeleteSourceServer",
      "output": {
        "shape": "DeleteSourceServerResponse"
      }
    },
    "DeleteVcenterClient": {
      "documentation": "<p>Deletes a given vCenter client by ID.</p>",
      "errors": [
        {
          "shape": "UninitializedAccountException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/DeleteVcenterClient",
        "responseCode": 204
      },
      "idempotent": true,
      "input": {
        "shape": "DeleteVcenterClientRequest"
      },
      "name": "DeleteVcenterClient"
    },
    "DescribeJobLogItems": {
      "documentation": "<p>Retrieves detailed job log items with paging.</p>",
      "errors": [
        {
          "shape": "UninitializedAccountException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/DescribeJobLogItems",
        "responseCode": 200
      },
      "input": {
        "shape": "DescribeJobLogItemsRequest"
      },
      "name": "DescribeJobLogItems",
      "output": {
        "shape": "DescribeJobLogItemsResponse"
      }
    },
    "DescribeJobs": {
      "documentation": "<p>Returns a list of Jobs. Use the JobsID and fromDate and toData filters to limit which jobs are returned. The response is sorted by creationDataTime - latest date first. Jobs are normally created by the StartTest, StartCutover, and TerminateTargetInstances APIs. Jobs are also created by DiagnosticLaunch and TerminateDiagnosticInstances, which are APIs available only to *Support* and only used in response to relevant support tickets.</p>",
      "errors": [
        {
          "shape": "UninitializedAccountException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/DescribeJobs",
        "responseCode": 200
      },
      "input": {
        "shape": "DescribeJobsRequest"
      },
      "name": "DescribeJobs",
      "output": {
        "shape": "DescribeJobsResponse"
      }
    },
    "DescribeLaunchConfigurationTemplates": {
      "documentation": "<p>Creates a new ReplicationConfigurationTemplate.</p>",
      "errors": [
        {
          "shape": "UninitializedAccountException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/DescribeLaunchConfigurationTemplates",
        "responseCode": 200
      },
      "input": {
        "shape": "DescribeLaunchConfigurationTemplatesRequest"
      },
      "name": "DescribeLaunchConfigurationTemplates",
      "output": {
        "shape": "DescribeLaunchConfigurationTemplatesResponse"
      }
    },
    "DescribeReplicationConfigurationTemplates": {
      "documentation": "<p>Lists all ReplicationConfigurationTemplates, filtered by Source Server IDs.</p>",
      "errors": [
        {
          "shape": "UninitializedAccountException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/DescribeReplicationConfigurationTemplates",
        "responseCode": 200
      },
      "input": {
        "shape": "DescribeReplicationConfigurationTemplatesRequest"
      },
      "name": "DescribeReplicationConfigurationTemplates",
      "output": {
        "shape": "DescribeReplicationConfigurationTemplatesResponse"
      }
    },
    "DescribeSourceServers": {
      "documentation": "<p>Retrieves all SourceServers or multiple SourceServers by ID.</p>",
      "errors": [
        {
          "shape": "UninitializedAccountException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/DescribeSourceServers",
        "responseCode": 200
      },
      "input": {
        "shape": "DescribeSourceServersRequest"
      },
      "name": "DescribeSourceServers",
      "output": {
        "shape": "DescribeSourceServersResponse"
      }
    },
    "DescribeVcenterClients": {
      "documentation": "<p>Returns a list of the installed vCenter clients.</p>",
      "errors": [
        {
          "shape": "UninitializedAccountException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/DescribeVcenterClients",
        "responseCode": 200
      },
      "input": {
        "shape": "DescribeVcenterClientsRequest"
      },
      "name": "DescribeVcenterClients",
      "output": {
        "shape": "DescribeVcenterClientsResponse"
      }
    },
    "DisconnectFromService": {
      "documentation": "<p>Disconnects specific Source Servers from Application Migration Service. Data replication is stopped immediately. All AWS resources created by Application Migration Service for enabling the replication of these source servers will be terminated / deleted within 90 minutes. Launched Test or Cutover instances will NOT be terminated. If the agent on the source server has not been prevented from communicating with the Application Migration Service service, then it will receive a command to uninstall itself (within approximately 10 minutes). The following properties of the SourceServer will be changed immediately: dataReplicationInfo.dataReplicationState will be set to DISCONNECTED; The totalStorageBytes property for each of dataReplicationInfo.replicatedDisks will be set to zero; dataReplicationInfo.lagDuration and dataReplicationInfo.lagDuration will be nullified.</p>",
      "errors": [
        {
          "shape": "UninitializedAccountException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/DisconnectFromService",
        "responseCode": 200
      },
      "input": {
        "shape": "DisconnectFromServiceRequest"
      },
      "name": "DisconnectFromService",
      "output": {
        "shape": "SourceServer"
      }
    },
    "FinalizeCutover": {
      "documentation": "<p>Finalizes the cutover immediately for specific Source Servers. All AWS resources created by Application Migration Service for enabling the replication of these source servers will be terminated / deleted within 90 minutes. Launched Test or Cutover instances will NOT be terminated. The AWS Replication Agent will receive a command to uninstall itself (within 10 minutes). The following properties of the SourceServer will be changed immediately: dataReplicationInfo.dataReplicationState will be changed to DISCONNECTED; The SourceServer.lifeCycle.state will be changed to CUTOVER; The totalStorageBytes property fo each of dataReplicationInfo.replicatedDisks will be set to zero; dataReplicationInfo.lagDuration and dataReplicationInfo.lagDuration will be nullified.</p>",
      "errors": [
        {
          "shape": "UninitializedAccountException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/FinalizeCutover",
        "responseCode": 200
      },
      "input": {
        "shape": "FinalizeCutoverRequest"
      },
      "name": "FinalizeCutover",
      "output": {
        "shape": "SourceServer"
      }
    },
    "GetLaunchConfiguration": {
      "documentation": "<p>Lists all LaunchConfigurations available, filtered by Source Server IDs.</p>",
      "errors": [
        {
          "shape": "UninitializedAccountException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/GetLaunchConfiguration",
        "responseCode": 200
      },
      "input": {
        "shape": "GetLaunchConfigurationRequest"
      },
      "name": "GetLaunchConfiguration",
      "output": {
        "shape": "LaunchConfiguration"
      }
    },
    "GetReplicationConfiguration": {
      "documentation": "<p>Lists all ReplicationConfigurations, filtered by Source Server ID.</p>",
      "errors": [
        {
          "shape": "UninitializedAccountException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/GetReplicationConfiguration",
        "responseCode": 200
      },
      "input": {
        "shape": "GetReplicationConfigurationRequest"
      },
      "name": "GetReplicationConfiguration",
      "output": {
        "shape": "ReplicationConfiguration"
      }
    },
    "InitializeService": {
      "documentation": "<p>Initialize Application Migration Service.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/InitializeService",
        "responseCode": 204
      },
      "input": {
        "shape": "InitializeServiceRequest"
      },
      "name": "InitializeService",
      "output": {
        "shape": "InitializeServiceResponse"
      }
    },
    "ListTagsForResource": {
      "documentation": "<p>List all tags for your Application Migration Service resources.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/tags/{resourceArn}",
        "responseCode": 200
      },
      "input": {
        "shape": "ListTagsForResourceRequest"
      },
      "name": "ListTagsForResource",
      "output": {
        "shape": "ListTagsForResourceResponse"
      }
    },
    "MarkAsArchived": {
      "documentation": "<p>Archives specific Source Servers by setting the SourceServer.isArchived property to true for specified SourceServers by ID. This command only works for SourceServers with a lifecycle. state which equals DISCONNECTED or CUTOVER.</p>",
      "errors": [
        {
          "shape": "UninitializedAccountException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/MarkAsArchived",
        "responseCode": 200
      },
      "input": {
        "shape": "MarkAsArchivedRequest"
      },
      "name": "MarkAsArchived",
      "output": {
        "shape": "SourceServer"
      }
    },
    "RetryDataReplication": {
      "documentation": "<p>Causes the data replication initiation sequence to begin immediately upon next Handshake for specified SourceServer IDs, regardless of when the previous initiation started. This command will not work if the SourceServer is not stalled or is in a DISCONNECTED or STOPPED state.</p>",
      "errors": [
        {
          "shape": "UninitializedAccountException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/RetryDataReplication",
        "responseCode": 200
      },
      "input": {
        "shape": "RetryDataReplicationRequest"
      },
      "name": "RetryDataReplication",
      "output": {
        "shape": "SourceServer"
      }
    },
    "StartCutover": {
      "documentation": "<p>Launches a Cutover Instance for specific Source Servers. This command starts a LAUNCH job whose initiatedBy property is StartCutover and changes the SourceServer.lifeCycle.state property to CUTTING_OVER.</p>",
      "errors": [
        {
          "shape": "UninitializedAccountException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/StartCutover",
        "responseCode": 202
      },
      "input": {
        "shape": "StartCutoverRequest"
      },
      "name": "StartCutover",
      "output": {
        "shape": "StartCutoverResponse"
      }
    },
    "StartReplication": {
      "documentation": "<p>Starts replication for SNAPSHOT_SHIPPING agents.</p>",
      "errors": [
        {
          "shape": "UninitializedAccountException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "ConflictException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/StartReplication",
        "responseCode": 200
      },
      "input": {
        "shape": "StartReplicationRequest"
      },
      "name": "StartReplication",
      "output": {
        "shape": "SourceServer"
      }
    },
    "StartTest": {
      "documentation": "<p>Launches a Test Instance for specific Source Servers. This command starts a LAUNCH job whose initiatedBy property is StartTest and changes the SourceServer.lifeCycle.state property to TESTING.</p>",
      "errors": [
        {
          "shape": "UninitializedAccountException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/StartTest",
        "responseCode": 202
      },
      "input": {
        "shape": "StartTestRequest"
      },
      "name": "StartTest",
      "output": {
        "shape": "StartTestResponse"
      }
    },
    "TagResource": {
      "documentation": "<p>Adds or overwrites only the specified tags for the specified Application Migration Service resource or resources. When you specify an existing tag key, the value is overwritten with the new value. Each resource can have a maximum of 50 tags. Each tag consists of a key and optional value.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/tags/{resourceArn}",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "TagResourceRequest"
      },
      "name": "TagResource"
    },
    "TerminateTargetInstances": {
      "documentation": "<p>Starts a job that terminates specific launched EC2 Test and Cutover instances. This command will not work for any Source Server with a lifecycle.state of TESTING, CUTTING_OVER, or CUTOVER.</p>",
      "errors": [
        {
          "shape": "UninitializedAccountException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/TerminateTargetInstances",
        "responseCode": 202
      },
      "input": {
        "shape": "TerminateTargetInstancesRequest"
      },
      "name": "TerminateTargetInstances",
      "output": {
        "shape": "TerminateTargetInstancesResponse"
      }
    },
    "UntagResource": {
      "documentation": "<p>Deletes the specified set of tags from the specified set of Application Migration Service resources.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/tags/{resourceArn}",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "UntagResourceRequest"
      },
      "name": "UntagResource"
    },
    "UpdateLaunchConfiguration": {
      "documentation": "<p>Updates multiple LaunchConfigurations by Source Server ID.</p>",
      "errors": [
        {
          "shape": "UninitializedAccountException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/UpdateLaunchConfiguration",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "UpdateLaunchConfigurationRequest"
      },
      "name": "UpdateLaunchConfiguration",
      "output": {
        "shape": "LaunchConfiguration"
      }
    },
    "UpdateLaunchConfigurationTemplate": {
      "documentation": "<p>Creates a new ReplicationConfigurationTemplate.</p>",
      "errors": [
        {
          "shape": "UninitializedAccountException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/UpdateLaunchConfigurationTemplate",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateLaunchConfigurationTemplateRequest"
      },
      "name": "UpdateLaunchConfigurationTemplate",
      "output": {
        "shape": "LaunchConfigurationTemplate"
      }
    },
    "UpdateReplicationConfiguration": {
      "documentation": "<p>Allows you to update multiple ReplicationConfigurations by Source Server ID.</p>",
      "errors": [
        {
          "shape": "UninitializedAccountException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ConflictException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/UpdateReplicationConfiguration",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "UpdateReplicationConfigurationRequest"
      },
      "name": "UpdateReplicationConfiguration",
      "output": {
        "shape": "ReplicationConfiguration"
      }
    },
    "UpdateReplicationConfigurationTemplate": {
      "documentation": "<p>Updates multiple ReplicationConfigurationTemplates by ID.</p>",
      "errors": [
        {
          "shape": "UninitializedAccountException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/UpdateReplicationConfigurationTemplate",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateReplicationConfigurationTemplateRequest"
      },
      "name": "UpdateReplicationConfigurationTemplate",
      "output": {
        "shape": "ReplicationConfigurationTemplate"
      }
    },
    "UpdateSourceServerReplicationType": {
      "documentation": "<p>Allows you to change between the AGENT_BASED replication type and the SNAPSHOT_SHIPPING replication type.</p>",
      "errors": [
        {
          "shape": "UninitializedAccountException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/UpdateSourceServerReplicationType",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateSourceServerReplicationTypeRequest"
      },
      "name": "UpdateSourceServerReplicationType",
      "output": {
        "shape": "SourceServer"
      }
    }
  },
  "shapes": {
    "ARN": {
      "max": 2048,
      "min": 20,
      "type": "string"
    },
    "AccessDeniedException": {
      "documentation": "<p>Operating denied due to a file permission or access check error.</p>",
      "error": {
        "httpStatusCode": 403,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "code": {
          "shape": "LargeBoundedString"
        },
        "message": {
          "shape": "LargeBoundedString"
        }
      },
      "type": "structure"
    },
    "Boolean": {
      "box": true,
      "type": "boolean"
    },
    "BootMode": {
      "enum": [
        "LEGACY_BIOS",
        "UEFI"
      ],
      "type": "string"
    },
    "BoundedString": {
      "max": 256,
      "min": 0,
      "type": "string"
    },
    "CPU": {
      "documentation": "<p>Source server CPU information.</p>",
      "members": {
        "cores": {
          "documentation": "<p>The number of CPU cores on the source server.</p>",
          "shape": "PositiveInteger"
        },
        "modelName": {
          "documentation": "<p>The source server's CPU model name.</p>",
          "shape": "BoundedString"
        }
      },
      "type": "structure"
    },
    "ChangeServerLifeCycleStateRequest": {
      "members": {
        "lifeCycle": {
          "documentation": "<p>The request to change the source server migration lifecycle state.</p>",
          "shape": "ChangeServerLifeCycleStateSourceServerLifecycle"
        },
        "sourceServerID": {
          "documentation": "<p>The request to change the source server migration lifecycle state by source server ID.</p>",
          "shape": "SourceServerID"
        }
      },
      "required": [
        "lifeCycle",
        "sourceServerID"
      ],
      "type": "structure"
    },
    "ChangeServerLifeCycleStateSourceServerLifecycle": {
      "documentation": "<p>The request to change the source server migration lifecycle state.</p>",
      "members": {
        "state": {
          "documentation": "<p>The request to change the source server migration lifecycle state.</p>",
          "shape": "ChangeServerLifeCycleStateSourceServerLifecycleState"
        }
      },
      "required": [
        "state"
      ],
      "type": "structure"
    },
    "ChangeServerLifeCycleStateSourceServerLifecycleState": {
      "enum": [
        "READY_FOR_TEST",
        "READY_FOR_CUTOVER",
        "CUTOVER"
      ],
      "type": "string"
    },
    "CloudWatchLogGroupName": {
      "max": 512,
      "min": 1,
      "pattern": "^[\\.\\-_/#A-Za-z0-9]+$",
      "type": "string"
    },
    "ConflictException": {
      "documentation": "<p>The request could not be completed due to a conflict with the current state of the target resource.</p>",
      "error": {
        "httpStatusCode": 409,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "code": {
          "shape": "LargeBoundedString"
        },
        "errors": {
          "documentation": "<p>Conflict Exception specific errors.</p>",
          "shape": "ConflictExceptionErrors"
        },
        "message": {
          "shape": "LargeBoundedString"
        },
        "resourceId": {
          "documentation": "<p>A conflict occurred when prompting for the Resource ID.</p>",
          "shape": "LargeBoundedString"
        },
        "resourceType": {
          "documentation": "<p>A conflict occurred when prompting for resource type.</p>",
          "shape": "LargeBoundedString"
        }
      },
      "type": "structure"
    },
    "ConflictExceptionErrors": {
      "member": {
        "shape": "ErrorDetails"
      },
      "type": "list"
    },
    "Cpus": {
      "max": 256,
      "member": {
        "shape": "CPU"
      },
      "min": 0,
      "type": "list"
    },
    "CreateLaunchConfigurationTemplateRequest": {
      "members": {
        "postLaunchActions": {
          "documentation": "<p>Request to associate the default Application Migration Service Security group with the Replication Settings template.</p>",
          "shape": "PostLaunchActions"
        },
        "tags": {
          "documentation": "<p>Request to associate the default Application Migration Service Security group with the Replication Settings template.</p>",
          "shape": "TagsMap"
        }
      },
      "type": "structure"
    },
    "CreateReplicationConfigurationTemplateRequest": {
      "members": {
        "associateDefaultSecurityGroup": {
          "documentation": "<p>Request to associate the default Application Migration Service Security group with the Replication Settings template.</p>",
          "shape": "Boolean"
        },
        "bandwidthThrottling": {
          "documentation": "<p>Request to configure bandwidth throttling during Replication Settings template creation.</p>",
          "shape": "PositiveInteger"
        },
        "createPublicIP": {
          "documentation": "<p>Request to create Public IP during Replication Settings template creation.</p>",
          "shape": "Boolean"
        },
        "dataPlaneRouting": {
          "documentation": "<p>Request to configure data plane routing during Replication Settings template creation.</p>",
          "shape": "ReplicationConfigurationDataPlaneRouting"
        },
        "defaultLargeStagingDiskType": {
          "documentation": "<p>Request to configure the default large staging disk EBS volume type during Replication Settings template creation.</p>",
          "shape": "ReplicationConfigurationDefaultLargeStagingDiskType"
        },
        "ebsEncryption": {
          "documentation": "<p>Request to configure EBS encryption during Replication Settings template creation.</p>",
          "shape": "ReplicationConfigurationEbsEncryption"
        },
        "ebsEncryptionKeyArn": {
          "documentation": "<p>Request to configure an EBS encryption key during Replication Settings template creation.</p>",
          "shape": "ARN"
        },
        "replicationServerInstanceType": {
          "documentation": "<p>Request to configure the Replication Server instance type during Replication Settings template creation.</p>",
          "shape": "EC2InstanceType"
        },
        "replicationServersSecurityGroupsIDs": {
          "documentation": "<p>Request to configure the Replication Server Security group ID during Replication Settings template creation.</p>",
          "shape": "ReplicationServersSecurityGroupsIDs"
        },
        "stagingAreaSubnetId": {
          "documentation": "<p>Request to configure the Staging Area subnet ID during Replication Settings template creation.</p>",
          "shape": "SubnetID"
        },
        "stagingAreaTags": {
          "documentation": "<p>Request to configure Staging Area tags during Replication Settings template creation.</p>",
          "shape": "TagsMap"
        },
        "tags": {
          "documentation": "<p>Request to configure tags during Replication Settings template creation.</p>",
          "shape": "TagsMap"
        },
        "useDedicatedReplicationServer": {
          "documentation": "<p>Request to use Dedicated Replication Servers during Replication Settings template creation.</p>",
          "shape": "Boolean"
        }
      },
      "required": [
        "associateDefaultSecurityGroup",
        "bandwidthThrottling",
        "createPublicIP",
        "dataPlaneRouting",
        "defaultLargeStagingDiskType",
        "ebsEncryption",
        "replicationServerInstanceType",
        "replicationServersSecurityGroupsIDs",
        "stagingAreaSubnetId",
        "stagingAreaTags",
        "useDedicatedReplicationServer"
      ],
      "type": "structure"
    },
    "DataReplicationError": {
      "documentation": "<p>Error in data replication.</p>",
      "members": {
        "error": {
          "documentation": "<p>Error in data replication.</p>",
          "shape": "DataReplicationErrorString"
        },
        "rawError": {
          "documentation": "<p>Error in data replication.</p>",
          "shape": "LargeBoundedString"
        }
      },
      "type": "structure"
    },
    "DataReplicationErrorString": {
      "enum": [
        "AGENT_NOT_SEEN",
        "SNAPSHOTS_FAILURE",
        "NOT_CONVERGING",
        "UNSTABLE_NETWORK",
        "FAILED_TO_CREATE_SECURITY_GROUP",
        "FAILED_TO_LAUNCH_REPLICATION_SERVER",
        "FAILED_TO_BOOT_REPLICATION_SERVER",
        "FAILED_TO_AUTHENTICATE_WITH_SERVICE",
        "FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE",
        "FAILED_TO_CREATE_STAGING_DISKS",
        "FAILED_TO_ATTACH_STAGING_DISKS",
        "FAILED_TO_PAIR_REPLICATION_SERVER_WITH_AGENT",
        "FAILED_TO_CONNECT_AGENT_TO_REPLICATION_SERVER",
        "FAILED_TO_START_DATA_TRANSFER",
        "UNSUPPORTED_VM_CONFIGURATION",
        "LAST_SNAPSHOT_JOB_FAILED"
      ],
      "type": "string"
    },
    "DataReplicationInfo": {
      "documentation": "<p>Request data replication info.</p>",
      "members": {
        "dataReplicationError": {
          "documentation": "<p>Error in obtaining data replication info.</p>",
          "shape": "DataReplicationError"
        },
        "dataReplicationInitiation": {
          "documentation": "<p>Request to query whether data replication has been initiated.</p>",
          "shape": "DataReplicationInitiation"
        },
        "dataReplicationState": {
          "documentation": "<p>Request to query the data replication state.</p>",
          "shape": "DataReplicationState"
        },
        "etaDateTime": {
          "documentation": "<p>Request to query the time when data replication will be complete.</p>",
          "shape": "ISO8601DatetimeString"
        },
        "lagDuration": {
          "documentation": "<p>Request to query data replication lag duration.</p>",
          "shape": "ISO8601DurationString"
        },
        "lastSnapshotDateTime": {
          "documentation": "<p>Request to query data replication last snapshot time.</p>",
          "shape": "ISO8601DatetimeString"
        },
        "replicatedDisks": {
          "documentation": "<p>Request to query disks replicated.</p>",
          "shape": "DataReplicationInfoReplicatedDisks"
        }
      },
      "type": "structure"
    },
    "DataReplicationInfoReplicatedDisk": {
      "documentation": "<p>Request to query disks replicated.</p>",
      "members": {
        "backloggedStorageBytes": {
          "documentation": "<p>Request to query data replication backlog size in bytes.</p>",
          "shape": "PositiveInteger"
        },
        "deviceName": {
          "documentation": "<p>Request to query device name.</p>",
          "shape": "BoundedString"
        },
        "replicatedStorageBytes": {
          "documentation": "<p>Request to query amount of data replicated in bytes.</p>",
          "shape": "PositiveInteger"
        },
        "rescannedStorageBytes": {
          "documentation": "<p>Request to query amount of data rescanned in bytes.</p>",
          "shape": "PositiveInteger"
        },
        "totalStorageBytes": {
          "documentation": "<p>Request to query total amount of data replicated in bytes.</p>",
          "shape": "PositiveInteger"
        }
      },
      "type": "structure"
    },
    "DataReplicationInfoReplicatedDisks": {
      "max": 60,
      "member": {
        "shape": "DataReplicationInfoReplicatedDisk"
      },
      "min": 0,
      "type": "list"
    },
    "DataReplicationInitiation": {
      "documentation": "<p>Data replication initiation.</p>",
      "members": {
        "nextAttemptDateTime": {
          "documentation": "<p>Request to query next data initiation date and time.</p>",
          "shape": "ISO8601DatetimeString"
        },
        "startDateTime": {
          "documentation": "<p>Request to query data initiation start date and time.</p>",
          "shape": "ISO8601DatetimeString"
        },
        "steps": {
          "documentation": "<p>Request to query data initiation steps.</p>",
          "shape": "DataReplicationInitiationSteps"
        }
      },
      "type": "structure"
    },
    "DataReplicationInitiationStep": {
      "documentation": "<p>Data replication initiation step.</p>",
      "members": {
        "name": {
          "documentation": "<p>Request to query data initiation step name.</p>",
          "shape": "DataReplicationInitiationStepName"
        },
        "status": {
          "documentation": "<p>Request to query data initiation status.</p>",
          "shape": "DataReplicationInitiationStepStatus"
        }
      },
      "type": "structure"
    },
    "DataReplicationInitiationStepName": {
      "enum": [
        "WAIT",
        "CREATE_SECURITY_GROUP",
        "LAUNCH_REPLICATION_SERVER",
        "BOOT_REPLICATION_SERVER",
        "AUTHENTICATE_WITH_SERVICE",
        "DOWNLOAD_REPLICATION_SOFTWARE",
        "CREATE_STAGING_DISKS",
        "ATTACH_STAGING_DISKS",
        "PAIR_REPLICATION_SERVER_WITH_AGENT",
        "CONNECT_AGENT_TO_REPLICATION_SERVER",
        "START_DATA_TRANSFER"
      ],
      "type": "string"
    },
    "DataReplicationInitiationStepStatus": {
      "enum": [
        "NOT_STARTED",
        "IN_PROGRESS",
        "SUCCEEDED",
        "FAILED",
        "SKIPPED"
      ],
      "type": "string"
    },
    "DataReplicationInitiationSteps": {
      "member": {
        "shape": "DataReplicationInitiationStep"
      },
      "type": "list"
    },
    "DataReplicationState": {
      "enum": [
        "STOPPED",
        "INITIATING",
        "INITIAL_SYNC",
        "BACKLOG",
        "CREATING_SNAPSHOT",
        "CONTINUOUS",
        "PAUSED",
        "RESCAN",
        "STALLED",
        "DISCONNECTED",
        "PENDING_SNAPSHOT_SHIPPING",
        "SHIPPING_SNAPSHOT"
      ],
      "type": "string"
    },
    "DeleteJobRequest": {
      "members": {
        "jobID": {
          "documentation": "<p>Request to delete Job from service by Job ID.</p>",
          "shape": "JobID"
        }
      },
      "required": [
        "jobID"
      ],
      "type": "structure"
    },
    "DeleteJobResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteLaunchConfigurationTemplateRequest": {
      "members": {
        "launchConfigurationTemplateID": {
          "documentation": "<p>ID of resource to be deleted.</p>",
          "shape": "LaunchConfigurationTemplateID"
        }
      },
      "required": [
        "launchConfigurationTemplateID"
      ],
      "type": "structure"
    },
    "DeleteLaunchConfigurationTemplateResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteReplicationConfigurationTemplateRequest": {
      "members": {
        "replicationConfigurationTemplateID": {
          "documentation": "<p>Request to delete Replication Configuration Template from service by Replication Configuration Template ID.</p>",
          "shape": "ReplicationConfigurationTemplateID"
        }
      },
      "required": [
        "replicationConfigurationTemplateID"
      ],
      "type": "structure"
    },
    "DeleteReplicationConfigurationTemplateResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteSourceServerRequest": {
      "members": {
        "sourceServerID": {
          "documentation": "<p>Request to delete Source Server from service by Server ID.</p>",
          "shape": "SourceServerID"
        }
      },
      "required": [
        "sourceServerID"
      ],
      "type": "structure"
    },
    "DeleteSourceServerResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteVcenterClientRequest": {
      "members": {
        "vcenterClientID": {
          "documentation": "<p>ID of resource to be deleted.</p>",
          "shape": "VcenterClientID"
        }
      },
      "required": [
        "vcenterClientID"
      ],
      "type": "structure"
    },
    "DescribeJobLogItemsRequest": {
      "members": {
        "jobID": {
          "documentation": "<p>Request to describe Job log job ID.</p>",
          "shape": "JobID"
        },
        "maxResults": {
          "documentation": "<p>Request to describe Job log item maximum results.</p>",
          "shape": "StrictlyPositiveInteger"
        },
        "nextToken": {
          "documentation": "<p>Request to describe Job log next token.</p>",
          "shape": "PaginationToken"
        }
      },
      "required": [
        "jobID"
      ],
      "type": "structure"
    },
    "DescribeJobLogItemsResponse": {
      "members": {
        "items": {
          "documentation": "<p>Request to describe Job log response items.</p>",
          "shape": "JobLogs"
        },
        "nextToken": {
          "documentation": "<p>Request to describe Job log response next token.</p>",
          "shape": "PaginationToken"
        }
      },
      "type": "structure"
    },
    "DescribeJobsRequest": {
      "members": {
        "filters": {
          "documentation": "<p>Request to describe Job log filters.</p>",
          "shape": "DescribeJobsRequestFilters"
        },
        "maxResults": {
          "documentation": "<p>Request to describe job log items by max results.</p>",
          "shape": "StrictlyPositiveInteger"
        },
        "nextToken": {
          "documentation": "<p>Request to describe job log items by next token.</p>",
          "shape": "PaginationToken"
        }
      },
      "type": "structure"
    },
    "DescribeJobsRequestFilters": {
      "documentation": "<p>Request to describe Job log filters.</p>",
      "members": {
        "fromDate": {
          "documentation": "<p>Request to describe Job log filters by date.</p>",
          "shape": "ISO8601DatetimeString"
        },
        "jobIDs": {
          "documentation": "<p>Request to describe Job log filters by job ID.</p>",
          "shape": "DescribeJobsRequestFiltersJobIDs"
        },
        "toDate": {
          "documentation": "<p>Request to describe job log items by last date.</p>",
          "shape": "ISO8601DatetimeString"
        }
      },
      "type": "structure"
    },
    "DescribeJobsRequestFiltersJobIDs": {
      "max": 1000,
      "member": {
        "shape": "JobID"
      },
      "min": 0,
      "type": "list"
    },
    "DescribeJobsResponse": {
      "members": {
        "items": {
          "documentation": "<p>Request to describe Job log items.</p>",
          "shape": "JobsList"
        },
        "nextToken": {
          "documentation": "<p>Request to describe Job response by next token.</p>",
          "shape": "PaginationToken"
        }
      },
      "type": "structure"
    },
    "DescribeLaunchConfigurationTemplatesRequest": {
      "members": {
        "launchConfigurationTemplateIDs": {
          "documentation": "<p>Request to disconnect Source Server from service by Server ID.</p>",
          "shape": "LaunchConfigurationTemplateIDs"
        },
        "maxResults": {
          "documentation": "<p>Request to disconnect Source Server from service by Server ID.</p>",
          "shape": "StrictlyPositiveInteger"
        },
        "nextToken": {
          "documentation": "<p>Request to disconnect Source Server from service by Server ID.</p>",
          "shape": "PaginationToken"
        }
      },
      "type": "structure"
    },
    "DescribeLaunchConfigurationTemplatesResponse": {
      "members": {
        "items": {
          "documentation": "<p>Request to disconnect Source Server from service by Server ID.</p>",
          "shape": "LaunchConfigurationTemplates"
        },
        "nextToken": {
          "documentation": "<p>Request to disconnect Source Server from service by Server ID.</p>",
          "shape": "PaginationToken"
        }
      },
      "type": "structure"
    },
    "DescribeReplicationConfigurationTemplatesRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p>Request to describe Replication Configuration template by max results.</p>",
          "shape": "StrictlyPositiveInteger"
        },
        "nextToken": {
          "documentation": "<p>Request to describe Replication Configuration template by next token.</p>",
          "shape": "PaginationToken"
        },
        "replicationConfigurationTemplateIDs": {
          "documentation": "<p>Request to describe Replication Configuration template by template IDs.</p>",
          "shape": "ReplicationConfigurationTemplateIDs"
        }
      },
      "type": "structure"
    },
    "DescribeReplicationConfigurationTemplatesResponse": {
      "members": {
        "items": {
          "documentation": "<p>Request to describe Replication Configuration template by items.</p>",
          "shape": "ReplicationConfigurationTemplates"
        },
        "nextToken": {
          "documentation": "<p>Request to describe Replication Configuration template by next token.</p>",
          "shape": "PaginationToken"
        }
      },
      "type": "structure"
    },
    "DescribeSourceServersRequest": {
      "members": {
        "filters": {
          "documentation": "<p>Request to filter Source Servers list.</p>",
          "shape": "DescribeSourceServersRequestFilters"
        },
        "maxResults": {
          "documentation": "<p>Request to filter Source Servers list by maximum results.</p>",
          "shape": "StrictlyPositiveInteger"
        },
        "nextToken": {
          "documentation": "<p>Request to filter Source Servers list by next token.</p>",
          "shape": "PaginationToken"
        }
      },
      "type": "structure"
    },
    "DescribeSourceServersRequestFilters": {
      "documentation": "<p>Request to filter Source Servers list.</p>",
      "members": {
        "isArchived": {
          "documentation": "<p>Request to filter Source Servers list by archived.</p>",
          "shape": "Boolean"
        },
        "lifeCycleStates": {
          "documentation": "<p>Request to filter Source Servers list by life cycle states.</p>",
          "shape": "LifeCycleStates"
        },
        "replicationTypes": {
          "documentation": "<p>Request to filter Source Servers list by replication type.</p>",
          "shape": "ReplicationTypes"
        },
        "sourceServerIDs": {
          "documentation": "<p>Request to filter Source Servers list by Source Server ID.</p>",
          "shape": "DescribeSourceServersRequestFiltersIDs"
        }
      },
      "type": "structure"
    },
    "DescribeSourceServersRequestFiltersIDs": {
      "max": 200,
      "member": {
        "shape": "SourceServerID"
      },
      "min": 0,
      "type": "list"
    },
    "DescribeSourceServersResponse": {
      "members": {
        "items": {
          "documentation": "<p>Request to filter Source Servers list by item.</p>",
          "shape": "SourceServersList"
        },
        "nextToken": {
          "documentation": "<p>Request to filter Source Servers next token.</p>",
          "shape": "PaginationToken"
        }
      },
      "type": "structure"
    },
    "DescribeVcenterClientsRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p>Maximum results to be returned in DescribeVcenterClients.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "StrictlyPositiveInteger"
        },
        "nextToken": {
          "documentation": "<p>Next pagination token to be provided for DescribeVcenterClients.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "PaginationToken"
        }
      },
      "type": "structure"
    },
    "DescribeVcenterClientsResponse": {
      "members": {
        "items": {
          "documentation": "<p>List of items returned by DescribeVcenterClients.</p>",
          "shape": "VcenterClientList"
        },
        "nextToken": {
          "documentation": "<p>Next pagination token returned from DescribeVcenterClients.</p>",
          "shape": "PaginationToken"
        }
      },
      "type": "structure"
    },
    "DisconnectFromServiceRequest": {
      "members": {
        "sourceServerID": {
          "documentation": "<p>Request to disconnect Source Server from service by Server ID.</p>",
          "shape": "SourceServerID"
        }
      },
      "required": [
        "sourceServerID"
      ],
      "type": "structure"
    },
    "Disk": {
      "documentation": "<p>The disk identifier.</p>",
      "members": {
        "bytes": {
          "documentation": "<p>The amount of storage on the disk in bytes.</p>",
          "shape": "PositiveInteger"
        },
        "deviceName": {
          "documentation": "<p>The disk or device name.</p>",
          "shape": "BoundedString"
        }
      },
      "type": "structure"
    },
    "Disks": {
      "max": 1000,
      "member": {
        "shape": "Disk"
      },
      "min": 0,
      "type": "list"
    },
    "EC2InstanceID": {
      "max": 255,
      "min": 0,
      "pattern": "^i-[0-9a-fA-F]{8,}$",
      "type": "string"
    },
    "EC2InstanceType": {
      "max": 255,
      "min": 0,
      "type": "string"
    },
    "ErrorDetails": {
      "documentation": "<p>Error details.</p>",
      "members": {
        "code": {
          "documentation": "<p>Error details code.</p>",
          "shape": "BoundedString"
        },
        "message": {
          "documentation": "<p>Error details message.</p>",
          "shape": "LargeBoundedString"
        },
        "resourceId": {
          "documentation": "<p>Error details resourceId.</p>",
          "shape": "LargeBoundedString"
        },
        "resourceType": {
          "documentation": "<p>Error details resourceType.</p>",
          "shape": "LargeBoundedString"
        }
      },
      "type": "structure"
    },
    "FinalizeCutoverRequest": {
      "members": {
        "sourceServerID": {
          "documentation": "<p>Request to finalize Cutover by Source Server ID.</p>",
          "shape": "SourceServerID"
        }
      },
      "required": [
        "sourceServerID"
      ],
      "type": "structure"
    },
    "FirstBoot": {
      "enum": [
        "WAITING",
        "SUCCEEDED",
        "UNKNOWN",
        "STOPPED"
      ],
      "type": "string"
    },
    "GetLaunchConfigurationRequest": {
      "members": {
        "sourceServerID": {
          "documentation": "<p>Request to get Launch Configuration information by Source Server ID.</p>",
          "shape": "SourceServerID"
        }
      },
      "required": [
        "sourceServerID"
      ],
      "type": "structure"
    },
    "GetReplicationConfigurationRequest": {
      "members": {
        "sourceServerID": {
          "documentation": "<p>Request to get Replication Configuration by Source Server ID.</p>",
          "shape": "SourceServerID"
        }
      },
      "required": [
        "sourceServerID"
      ],
      "type": "structure"
    },
    "IPsList": {
      "member": {
        "shape": "BoundedString"
      },
      "type": "list"
    },
    "ISO8601DatetimeString": {
      "max": 32,
      "min": 19,
      "pattern": "^[1-9][0-9]*-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])T([0-1][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?Z$",
      "type": "string"
    },
    "ISO8601DurationString": {
      "max": 64,
      "min": 1,
      "type": "string"
    },
    "IdentificationHints": {
      "documentation": "<p>Identification hints.</p>",
      "members": {
        "awsInstanceID": {
          "documentation": "<p>AWS Instance ID identification hint.</p>",
          "shape": "EC2InstanceID"
        },
        "fqdn": {
          "documentation": "<p>FQDN address identification hint.</p>",
          "shape": "BoundedString"
        },
        "hostname": {
          "documentation": "<p>Hostname identification hint.</p>",
          "shape": "BoundedString"
        },
        "vmPath": {
          "documentation": "<p>vCenter VM path identification hint.</p>",
          "shape": "BoundedString"
        },
        "vmWareUuid": {
          "documentation": "<p>vmWare UUID identification hint.</p>",
          "shape": "BoundedString"
        }
      },
      "type": "structure"
    },
    "InitializeServiceRequest": {
      "members": {},
      "type": "structure"
    },
    "InitializeServiceResponse": {
      "members": {},
      "type": "structure"
    },
    "InitiatedBy": {
      "enum": [
        "START_TEST",
        "START_CUTOVER",
        "DIAGNOSTIC",
        "TERMINATE"
      ],
      "type": "string"
    },
    "InternalServerException": {
      "documentation": "<p>The server encountered an unexpected condition that prevented it from fulfilling the request.</p>",
      "error": {
        "httpStatusCode": 500
      },
      "exception": true,
      "fault": true,
      "members": {
        "message": {
          "shape": "LargeBoundedString"
        },
        "retryAfterSeconds": {
          "documentation": "<p>The server encountered an unexpected condition that prevented it from fulfilling the request. The request will be retried again after x seconds.</p>",
          "location": "header",
          "locationName": "Retry-After",
          "shape": "PositiveInteger"
        }
      },
      "required": [
        "message"
      ],
      "type": "structure"
    },
    "Job": {
      "documentation": "<p>Job.</p>",
      "members": {
        "arn": {
          "documentation": "<p>the ARN of the specific Job.</p>",
          "shape": "ARN"
        },
        "creationDateTime": {
          "documentation": "<p>Job creation time.</p>",
          "shape": "ISO8601DatetimeString"
        },
        "endDateTime": {
          "documentation": "<p>Job end time.</p>",
          "shape": "ISO8601DatetimeString"
        },
        "initiatedBy": {
          "documentation": "<p>Job initiated by field.</p>",
          "shape": "InitiatedBy"
        },
        "jobID": {
          "documentation": "<p>Job ID.</p>",
          "shape": "JobID"
        },
        "participatingServers": {
          "documentation": "<p>Servers participating in a specific Job.</p>",
          "shape": "ParticipatingServers"
        },
        "status": {
          "documentation": "<p>Job status.</p>",
          "shape": "JobStatus"
        },
        "tags": {
          "documentation": "<p>Tags associated with specific Job.</p>",
          "shape": "TagsMap"
        },
        "type": {
          "documentation": "<p>Job type.</p>",
          "shape": "JobType"
        }
      },
      "required": [
        "jobID"
      ],
      "type": "structure"
    },
    "JobID": {
      "max": 24,
      "min": 24,
      "pattern": "^mgnjob-[0-9a-zA-Z]{17}$",
      "type": "string"
    },
    "JobLog": {
      "documentation": "<p>Job log.</p>",
      "members": {
        "event": {
          "documentation": "<p>Job log event.</p>",
          "shape": "JobLogEvent"
        },
        "eventData": {
          "documentation": "<p>Job event data</p>",
          "shape": "JobLogEventData"
        },
        "logDateTime": {
          "documentation": "<p>Job log event date and time.</p>",
          "shape": "ISO8601DatetimeString"
        }
      },
      "type": "structure"
    },
    "JobLogEvent": {
      "enum": [
        "JOB_START",
        "SERVER_SKIPPED",
        "CLEANUP_START",
        "CLEANUP_END",
        "CLEANUP_FAIL",
        "SNAPSHOT_START",
        "SNAPSHOT_END",
        "SNAPSHOT_FAIL",
        "USING_PREVIOUS_SNAPSHOT",
        "CONVERSION_START",
        "CONVERSION_END",
        "CONVERSION_FAIL",
        "LAUNCH_START",
        "LAUNCH_FAILED",
        "JOB_CANCEL",
        "JOB_END"
      ],
      "type": "string"
    },
    "JobLogEventData": {
      "documentation": "<p>Job log data</p>",
      "members": {
        "conversionServerID": {
          "documentation": "<p>Job Event conversion Server ID.</p>",
          "shape": "EC2InstanceID"
        },
        "rawError": {
          "documentation": "<p>Job error.</p>",
          "shape": "LargeBoundedString"
        },
        "sourceServerID": {
          "documentation": "<p>Job Event Source Server ID.</p>",
          "shape": "SourceServerID"
        },
        "targetInstanceID": {
          "documentation": "<p>Job Event Target instance ID.</p>",
          "shape": "EC2InstanceID"
        }
      },
      "type": "structure"
    },
    "JobLogs": {
      "member": {
        "shape": "JobLog"
      },
      "type": "list"
    },
    "JobPostLaunchActionsLaunchStatus": {
      "documentation": "<p>Job type.</p>",
      "members": {
        "executionID": {
          "documentation": "<p>Job type.</p>",
          "shape": "BoundedString"
        },
        "executionStatus": {
          "documentation": "<p>Job type.</p>",
          "shape": "PostLaunchActionExecutionStatus"
        },
        "failureReason": {
          "documentation": "<p>Job type.</p>",
          "shape": "BoundedString"
        },
        "ssmDocument": {
          "documentation": "<p>Job type.</p>",
          "shape": "SsmDocument"
        },
        "ssmDocumentType": {
          "documentation": "<p>Job type.</p>",
          "shape": "SsmDocumentType"
        }
      },
      "type": "structure"
    },
    "JobStatus": {
      "enum": [
        "PENDING",
        "STARTED",
        "COMPLETED"
      ],
      "type": "string"
    },
    "JobType": {
      "enum": [
        "LAUNCH",
        "TERMINATE"
      ],
      "type": "string"
    },
    "JobsList": {
      "member": {
        "shape": "Job"
      },
      "type": "list"
    },
    "LargeBoundedString": {
      "max": 65536,
      "min": 0,
      "type": "string"
    },
    "LaunchConfiguration": {
      "members": {
        "bootMode": {
          "documentation": "<p>Launch configuration boot mode.</p>",
          "shape": "BootMode"
        },
        "copyPrivateIp": {
          "documentation": "<p>Copy Private IP during Launch Configuration.</p>",
          "shape": "Boolean"
        },
        "copyTags": {
          "documentation": "<p>Copy Tags during Launch Configuration.</p>",
          "shape": "Boolean"
        },
        "ec2LaunchTemplateID": {
          "documentation": "<p>Launch configuration EC2 Launch template ID.</p>",
          "shape": "BoundedString"
        },
        "launchDisposition": {
          "documentation": "<p>Launch disposition for launch configuration.</p>",
          "shape": "LaunchDisposition"
        },
        "licensing": {
          "documentation": "<p>Launch configuration OS licensing.</p>",
          "shape": "Licensing"
        },
        "name": {
          "documentation": "<p>Launch configuration name.</p>",
          "shape": "SmallBoundedString"
        },
        "postLaunchActions": {
          "shape": "PostLaunchActions"
        },
        "sourceServerID": {
          "documentation": "<p>Launch configuration Source Server ID.</p>",
          "shape": "SourceServerID"
        },
        "targetInstanceTypeRightSizingMethod": {
          "documentation": "<p>Launch configuration Target instance type right sizing method.</p>",
          "shape": "TargetInstanceTypeRightSizingMethod"
        }
      },
      "type": "structure"
    },
    "LaunchConfigurationTemplate": {
      "members": {
        "arn": {
          "documentation": "<p>Copy Private IP during Launch Configuration.</p>",
          "shape": "ARN"
        },
        "launchConfigurationTemplateID": {
          "documentation": "<p>Copy Private IP during Launch Configuration.</p>",
          "shape": "LaunchConfigurationTemplateID"
        },
        "postLaunchActions": {
          "documentation": "<p>Copy Private IP during Launch Configuration.</p>",
          "shape": "PostLaunchActions"
        },
        "tags": {
          "documentation": "<p>Copy Private IP during Launch Configuration.</p>",
          "shape": "TagsMap"
        }
      },
      "required": [
        "launchConfigurationTemplateID"
      ],
      "type": "structure"
    },
    "LaunchConfigurationTemplateID": {
      "max": 21,
      "min": 21,
      "pattern": "^lct-[0-9a-zA-Z]{17}$",
      "type": "string"
    },
    "LaunchConfigurationTemplateIDs": {
      "max": 200,
      "member": {
        "shape": "LaunchConfigurationTemplateID"
      },
      "min": 0,
      "type": "list"
    },
    "LaunchConfigurationTemplates": {
      "max": 200,
      "member": {
        "shape": "LaunchConfigurationTemplate"
      },
      "min": 0,
      "type": "list"
    },
    "LaunchDisposition": {
      "enum": [
        "STOPPED",
        "STARTED"
      ],
      "type": "string"
    },
    "LaunchStatus": {
      "enum": [
        "PENDING",
        "IN_PROGRESS",
        "LAUNCHED",
        "FAILED",
        "TERMINATED"
      ],
      "type": "string"
    },
    "LaunchedInstance": {
      "documentation": "<p>Launched instance.</p>",
      "members": {
        "ec2InstanceID": {
          "documentation": "<p>Launched instance EC2 ID.</p>",
          "shape": "EC2InstanceID"
        },
        "firstBoot": {
          "documentation": "<p>Launched instance first boot.</p>",
          "shape": "FirstBoot"
        },
        "jobID": {
          "documentation": "<p>Launched instance Job ID.</p>",
          "shape": "JobID"
        }
      },
      "type": "structure"
    },
    "Licensing": {
      "documentation": "<p>Configure Licensing.</p>",
      "members": {
        "osByol": {
          "documentation": "<p>Configure BYOL OS licensing.</p>",
          "shape": "Boolean"
        }
      },
      "type": "structure"
    },
    "LifeCycle": {
      "documentation": "<p>Lifecycle.</p>",
      "members": {
        "addedToServiceDateTime": {
          "documentation": "<p>Lifecycle added to service data and time.</p>",
          "shape": "ISO8601DatetimeString"
        },
        "elapsedReplicationDuration": {
          "documentation": "<p>Lifecycle elapsed time and duration.</p>",
          "shape": "ISO8601DurationString"
        },
        "firstByteDateTime": {
          "documentation": "<p>Lifecycle replication initiation date and time.</p>",
          "shape": "ISO8601DatetimeString"
        },
        "lastCutover": {
          "documentation": "<p>Lifecycle last Cutover.</p>",
          "shape": "LifeCycleLastCutover"
        },
        "lastSeenByServiceDateTime": {
          "documentation": "<p>Lifecycle last seen date and time.</p>",
          "shape": "ISO8601DatetimeString"
        },
        "lastTest": {
          "documentation": "<p>Lifecycle last Test.</p>",
          "shape": "LifeCycleLastTest"
        },
        "state": {
          "documentation": "<p>Lifecycle state.</p>",
          "shape": "LifeCycleState"
        }
      },
      "type": "structure"
    },
    "LifeCycleLastCutover": {
      "documentation": "<p>Lifecycle last Cutover .</p>",
      "members": {
        "finalized": {
          "documentation": "<p>Lifecycle Cutover finalized date and time.</p>",
          "shape": "LifeCycleLastCutoverFinalized"
        },
        "initiated": {
          "documentation": "<p>Lifecycle last Cutover initiated.</p>",
          "shape": "LifeCycleLastCutoverInitiated"
        },
        "reverted": {
          "documentation": "<p>Lifecycle last Cutover reverted.</p>",
          "shape": "LifeCycleLastCutoverReverted"
        }
      },
      "type": "structure"
    },
    "LifeCycleLastCutoverFinalized": {
      "documentation": "<p>Lifecycle Cutover finalized</p>",
      "members": {
        "apiCallDateTime": {
          "documentation": "<p>Lifecycle Cutover finalized date and time.</p>",
          "shape": "ISO8601DatetimeString"
        }
      },
      "type": "structure"
    },
    "LifeCycleLastCutoverInitiated": {
      "documentation": "<p>Lifecycle last Cutover initiated.</p>",
      "members": {
        "apiCallDateTime": {
          "documentation": "<p/>",
          "shape": "ISO8601DatetimeString"
        },
        "jobID": {
          "documentation": "<p>Lifecycle last Cutover initiated by Job ID.</p>",
          "shape": "JobID"
        }
      },
      "type": "structure"
    },
    "LifeCycleLastCutoverReverted": {
      "documentation": "<p>Lifecycle last Cutover reverted.</p>",
      "members": {
        "apiCallDateTime": {
          "documentation": "<p>Lifecycle last Cutover reverted API call date time.</p>",
          "shape": "ISO8601DatetimeString"
        }
      },
      "type": "structure"
    },
    "LifeCycleLastTest": {
      "documentation": "<p>Lifecycle last Test.</p>",
      "members": {
        "finalized": {
          "documentation": "<p>Lifecycle last Test finalized.</p>",
          "shape": "LifeCycleLastTestFinalized"
        },
        "initiated": {
          "documentation": "<p>Lifecycle last Test initiated.</p>",
          "shape": "LifeCycleLastTestInitiated"
        },
        "reverted": {
          "documentation": "<p>Lifecycle last Test reverted.</p>",
          "shape": "LifeCycleLastTestReverted"
        }
      },
      "type": "structure"
    },
    "LifeCycleLastTestFinalized": {
      "documentation": "<p>Lifecycle last Test finalized.</p>",
      "members": {
        "apiCallDateTime": {
          "documentation": "<p>Lifecycle Test failed API call date and time.</p>",
          "shape": "ISO8601DatetimeString"
        }
      },
      "type": "structure"
    },
    "LifeCycleLastTestInitiated": {
      "documentation": "<p>Lifecycle last Test initiated.</p>",
      "members": {
        "apiCallDateTime": {
          "documentation": "<p>Lifecycle last Test initiated API call date and time.</p>",
          "shape": "ISO8601DatetimeString"
        },
        "jobID": {
          "documentation": "<p>Lifecycle last Test initiated Job ID.</p>",
          "shape": "JobID"
        }
      },
      "type": "structure"
    },
    "LifeCycleLastTestReverted": {
      "documentation": "<p>Lifecycle last Test reverted.</p>",
      "members": {
        "apiCallDateTime": {
          "documentation": "<p>Lifecycle last Test reverted API call date and time.</p>",
          "shape": "ISO8601DatetimeString"
        }
      },
      "type": "structure"
    },
    "LifeCycleState": {
      "enum": [
        "STOPPED",
        "NOT_READY",
        "READY_FOR_TEST",
        "TESTING",
        "READY_FOR_CUTOVER",
        "CUTTING_OVER",
        "CUTOVER",
        "DISCONNECTED",
        "DISCOVERED"
      ],
      "type": "string"
    },
    "LifeCycleStates": {
      "max": 10,
      "member": {
        "shape": "LifeCycleState"
      },
      "min": 0,
      "type": "list"
    },
    "ListTagsForResourceRequest": {
      "members": {
        "resourceArn": {
          "documentation": "<p>List tags for resource request by ARN.</p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "ARN"
        }
      },
      "required": [
        "resourceArn"
      ],
      "type": "structure"
    },
    "ListTagsForResourceResponse": {
      "members": {
        "tags": {
          "documentation": "<p>List tags for resource response.</p>",
          "shape": "TagsMap"
        }
      },
      "type": "structure"
    },
    "MarkAsArchivedRequest": {
      "members": {
        "sourceServerID": {
          "documentation": "<p>Mark as archived by Source Server ID.</p>",
          "shape": "SourceServerID"
        }
      },
      "required": [
        "sourceServerID"
      ],
      "type": "structure"
    },
    "NetworkInterface": {
      "documentation": "<p>Network interface.</p>",
      "members": {
        "ips": {
          "documentation": "<p>Network interface IPs.</p>",
          "shape": "IPsList"
        },
        "isPrimary": {
          "documentation": "<p>Network interface primary IP.</p>",
          "shape": "Boolean"
        },
        "macAddress": {
          "documentation": "<p>Network interface Mac address.</p>",
          "shape": "BoundedString"
        }
      },
      "type": "structure"
    },
    "NetworkInterfaces": {
      "max": 32,
      "member": {
        "shape": "NetworkInterface"
      },
      "min": 0,
      "type": "list"
    },
    "OS": {
      "documentation": "<p>Operating System.</p>",
      "members": {
        "fullString": {
          "documentation": "<p>OS full string.</p>",
          "shape": "BoundedString"
        }
      },
      "type": "structure"
    },
    "PaginationToken": {
      "max": 2048,
      "min": 0,
      "type": "string"
    },
    "ParticipatingServer": {
      "documentation": "<p>Server participating in Job.</p>",
      "members": {
        "launchStatus": {
          "documentation": "<p>Participating server launch status.</p>",
          "shape": "LaunchStatus"
        },
        "launchedEc2InstanceID": {
          "documentation": "<p>Participating server Source Server ID.</p>",
          "shape": "EC2InstanceID"
        },
        "postLaunchActionsStatus": {
          "documentation": "<p>Participating server Source Server ID.</p>",
          "shape": "PostLaunchActionsStatus"
        },
        "sourceServerID": {
          "documentation": "<p>Participating server Source Server ID.</p>",
          "shape": "SourceServerID"
        }
      },
      "required": [
        "sourceServerID"
      ],
      "type": "structure"
    },
    "ParticipatingServers": {
      "member": {
        "shape": "ParticipatingServer"
      },
      "type": "list"
    },
    "PositiveInteger": {
      "min": 0,
      "type": "long"
    },
    "PostLaunchActionExecutionStatus": {
      "enum": [
        "IN_PROGRESS",
        "SUCCESS",
        "FAILED"
      ],
      "type": "string"
    },
    "PostLaunchActions": {
      "documentation": "<p>Server participating in Job.</p>",
      "members": {
        "cloudWatchLogGroupName": {
          "documentation": "<p>Server participating in Job.</p>",
          "shape": "CloudWatchLogGroupName"
        },
        "deployment": {
          "documentation": "<p>Server participating in Job.</p>",
          "shape": "PostLaunchActionsDeploymentType"
        },
        "s3LogBucket": {
          "documentation": "<p>Server participating in Job.</p>",
          "shape": "S3LogBucketName"
        },
        "s3OutputKeyPrefix": {
          "documentation": "<p>Server participating in Job.</p>",
          "shape": "BoundedString"
        },
        "ssmDocuments": {
          "documentation": "<p>Server participating in Job.</p>",
          "shape": "SsmDocuments"
        }
      },
      "type": "structure"
    },
    "PostLaunchActionsDeploymentType": {
      "enum": [
        "TEST_AND_CUTOVER",
        "CUTOVER_ONLY"
      ],
      "type": "string"
    },
    "PostLaunchActionsLaunchStatusList": {
      "member": {
        "shape": "JobPostLaunchActionsLaunchStatus"
      },
      "type": "list"
    },
    "PostLaunchActionsStatus": {
      "documentation": "<p>Server participating in Job.</p>",
      "members": {
        "postLaunchActionsLaunchStatusList": {
          "documentation": "<p>Server participating in Job.</p>",
          "shape": "PostLaunchActionsLaunchStatusList"
        },
        "ssmAgentDiscoveryDatetime": {
          "documentation": "<p>Server participating in Job.</p>",
          "shape": "ISO8601DatetimeString"
        }
      },
      "type": "structure"
    },
    "ReplicationConfiguration": {
      "members": {
        "associateDefaultSecurityGroup": {
          "documentation": "<p>Replication Configuration associate default Application Migration Service Security Group.</p>",
          "shape": "Boolean"
        },
        "bandwidthThrottling": {
          "documentation": "<p>Replication Configuration set bandwidth throttling.</p>",
          "shape": "PositiveInteger"
        },
        "createPublicIP": {
          "documentation": "<p>Replication Configuration create Public IP.</p>",
          "shape": "Boolean"
        },
        "dataPlaneRouting": {
          "documentation": "<p>Replication Configuration data plane routing.</p>",
          "shape": "ReplicationConfigurationDataPlaneRouting"
        },
        "defaultLargeStagingDiskType": {
          "documentation": "<p>Replication Configuration use default large Staging Disks.</p>",
          "shape": "ReplicationConfigurationDefaultLargeStagingDiskType"
        },
        "ebsEncryption": {
          "documentation": "<p>Replication Configuration EBS encryption.</p>",
          "shape": "ReplicationConfigurationEbsEncryption"
        },
        "ebsEncryptionKeyArn": {
          "documentation": "<p>Replication Configuration EBS encryption key ARN.</p>",
          "shape": "ARN"
        },
        "name": {
          "documentation": "<p>Replication Configuration name.</p>",
          "shape": "SmallBoundedString"
        },
        "replicatedDisks": {
          "documentation": "<p>Replication Configuration replicated disks.</p>",
          "shape": "ReplicationConfigurationReplicatedDisks"
        },
        "replicationServerInstanceType": {
          "documentation": "<p>Replication Configuration Replication Server instance type.</p>",
          "shape": "EC2InstanceType"
        },
        "replicationServersSecurityGroupsIDs": {
          "documentation": "<p>Replication Configuration Replication Server Security Group IDs.</p>",
          "shape": "ReplicationServersSecurityGroupsIDs"
        },
        "sourceServerID": {
          "documentation": "<p>Replication Configuration Source Server ID.</p>",
          "shape": "SourceServerID"
        },
        "stagingAreaSubnetId": {
          "documentation": "<p>Replication Configuration Staging Area subnet ID.</p>",
          "shape": "SubnetID"
        },
        "stagingAreaTags": {
          "documentation": "<p>Replication Configuration Staging Area tags.</p>",
          "shape": "TagsMap"
        },
        "useDedicatedReplicationServer": {
          "documentation": "<p>Replication Configuration use Dedicated Replication Server.</p>",
          "shape": "Boolean"
        }
      },
      "type": "structure"
    },
    "ReplicationConfigurationDataPlaneRouting": {
      "enum": [
        "PRIVATE_IP",
        "PUBLIC_IP"
      ],
      "type": "string"
    },
    "ReplicationConfigurationDefaultLargeStagingDiskType": {
      "enum": [
        "GP2",
        "ST1",
        "GP3"
      ],
      "type": "string"
    },
    "ReplicationConfigurationEbsEncryption": {
      "enum": [
        "DEFAULT",
        "CUSTOM"
      ],
      "type": "string"
    },
    "ReplicationConfigurationReplicatedDisk": {
      "documentation": "<p>Replication Configuration replicated disk.</p>",
      "members": {
        "deviceName": {
          "documentation": "<p>Replication Configuration replicated disk device name.</p>",
          "shape": "BoundedString"
        },
        "iops": {
          "documentation": "<p>Replication Configuration replicated disk IOPs.</p>",
          "shape": "PositiveInteger"
        },
        "isBootDisk": {
          "documentation": "<p>Replication Configuration replicated disk boot disk.</p>",
          "shape": "Boolean"
        },
        "stagingDiskType": {
          "documentation": "<p>Replication Configuration replicated disk staging disk type.</p>",
          "shape": "ReplicationConfigurationReplicatedDiskStagingDiskType"
        },
        "throughput": {
          "documentation": "<p>Replication Configuration replicated disk throughput.</p>",
          "shape": "PositiveInteger"
        }
      },
      "type": "structure"
    },
    "ReplicationConfigurationReplicatedDiskStagingDiskType": {
      "enum": [
        "AUTO",
        "GP2",
        "IO1",
        "SC1",
        "ST1",
        "STANDARD",
        "GP3",
        "IO2"
      ],
      "type": "string"
    },
    "ReplicationConfigurationReplicatedDisks": {
      "max": 60,
      "member": {
        "shape": "ReplicationConfigurationReplicatedDisk"
      },
      "min": 0,
      "type": "list"
    },
    "ReplicationConfigurationTemplate": {
      "members": {
        "arn": {
          "documentation": "<p>Replication Configuration template ARN.</p>",
          "shape": "ARN"
        },
        "associateDefaultSecurityGroup": {
          "documentation": "<p>Replication Configuration template associate default Application Migration Service Security group.</p>",
          "shape": "Boolean"
        },
        "bandwidthThrottling": {
          "documentation": "<p>Replication Configuration template bandwidth throttling.</p>",
          "shape": "PositiveInteger"
        },
        "createPublicIP": {
          "documentation": "<p>Replication Configuration template create Public IP.</p>",
          "shape": "Boolean"
        },
        "dataPlaneRouting": {
          "documentation": "<p>Replication Configuration template data plane routing.</p>",
          "shape": "ReplicationConfigurationDataPlaneRouting"
        },
        "defaultLargeStagingDiskType": {
          "documentation": "<p>Replication Configuration template use default large Staging Disk type.</p>",
          "shape": "ReplicationConfigurationDefaultLargeStagingDiskType"
        },
        "ebsEncryption": {
          "documentation": "<p>Replication Configuration template EBS encryption.</p>",
          "shape": "ReplicationConfigurationEbsEncryption"
        },
        "ebsEncryptionKeyArn": {
          "documentation": "<p>Replication Configuration template EBS encryption key ARN.</p>",
          "shape": "ARN"
        },
        "replicationConfigurationTemplateID": {
          "documentation": "<p>Replication Configuration template ID.</p>",
          "shape": "ReplicationConfigurationTemplateID"
        },
        "replicationServerInstanceType": {
          "documentation": "<p>Replication Configuration template server instance type.</p>",
          "shape": "EC2InstanceType"
        },
        "replicationServersSecurityGroupsIDs": {
          "documentation": "<p>Replication Configuration template server Security Groups IDs.</p>",
          "shape": "ReplicationServersSecurityGroupsIDs"
        },
        "stagingAreaSubnetId": {
          "documentation": "<p>Replication Configuration template Staging Area subnet ID.</p>",
          "shape": "SubnetID"
        },
        "stagingAreaTags": {
          "documentation": "<p>Replication Configuration template Staging Area Tags.</p>",
          "shape": "TagsMap"
        },
        "tags": {
          "documentation": "<p>Replication Configuration template Tags.</p>",
          "shape": "TagsMap"
        },
        "useDedicatedReplicationServer": {
          "documentation": "<p>Replication Configuration template use Dedicated Replication Server.</p>",
          "shape": "Boolean"
        }
      },
      "required": [
        "replicationConfigurationTemplateID"
      ],
      "type": "structure"
    },
    "ReplicationConfigurationTemplateID": {
      "max": 21,
      "min": 21,
      "pattern": "^rct-[0-9a-zA-Z]{17}$",
      "type": "string"
    },
    "ReplicationConfigurationTemplateIDs": {
      "max": 200,
      "member": {
        "shape": "ReplicationConfigurationTemplateID"
      },
      "min": 0,
      "type": "list"
    },
    "ReplicationConfigurationTemplates": {
      "member": {
        "shape": "ReplicationConfigurationTemplate"
      },
      "type": "list"
    },
    "ReplicationServersSecurityGroupsIDs": {
      "max": 32,
      "member": {
        "shape": "SecurityGroupID"
      },
      "min": 0,
      "type": "list"
    },
    "ReplicationType": {
      "enum": [
        "AGENT_BASED",
        "SNAPSHOT_SHIPPING"
      ],
      "type": "string"
    },
    "ReplicationTypes": {
      "max": 2,
      "member": {
        "shape": "ReplicationType"
      },
      "min": 0,
      "type": "list"
    },
    "ResourceNotFoundException": {
      "documentation": "<p>Resource not found exception.</p>",
      "error": {
        "httpStatusCode": 404,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "code": {
          "shape": "LargeBoundedString"
        },
        "message": {
          "shape": "LargeBoundedString"
        },
        "resourceId": {
          "documentation": "<p>Resource ID not found error.</p>",
          "shape": "LargeBoundedString"
        },
        "resourceType": {
          "documentation": "<p>Resource type not found error.</p>",
          "shape": "LargeBoundedString"
        }
      },
      "type": "structure"
    },
    "RetryDataReplicationRequest": {
      "members": {
        "sourceServerID": {
          "documentation": "<p>Retry data replication for Source Server ID.</p>",
          "shape": "SourceServerID"
        }
      },
      "required": [
        "sourceServerID"
      ],
      "type": "structure"
    },
    "S3LogBucketName": {
      "max": 63,
      "min": 3,
      "type": "string"
    },
    "SecurityGroupID": {
      "max": 255,
      "min": 0,
      "pattern": "^sg-[0-9a-fA-F]{8,}$",
      "type": "string"
    },
    "ServiceQuotaExceededException": {
      "documentation": "<p>The request could not be completed because its exceeded the service quota.</p>",
      "error": {
        "httpStatusCode": 402,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "code": {
          "shape": "LargeBoundedString"
        },
        "message": {
          "shape": "LargeBoundedString"
        },
        "quotaCode": {
          "documentation": "<p>Exceeded the service quota code.</p>",
          "shape": "LargeBoundedString"
        },
        "quotaValue": {
          "documentation": "<p>Exceeded the service quota value.</p>",
          "shape": "StrictlyPositiveInteger"
        },
        "resourceId": {
          "documentation": "<p>Exceeded the service quota resource ID.</p>",
          "shape": "LargeBoundedString"
        },
        "resourceType": {
          "documentation": "<p>Exceeded the service quota resource type.</p>",
          "shape": "LargeBoundedString"
        },
        "serviceCode": {
          "documentation": "<p>Exceeded the service quota service code.</p>",
          "shape": "LargeBoundedString"
        }
      },
      "type": "structure"
    },
    "SmallBoundedString": {
      "max": 128,
      "min": 0,
      "type": "string"
    },
    "SourceProperties": {
      "documentation": "<p>Source server properties.</p>",
      "members": {
        "cpus": {
          "documentation": "<p>Source Server CPUs.</p>",
          "shape": "Cpus"
        },
        "disks": {
          "documentation": "<p>Source Server disks.</p>",
          "shape": "Disks"
        },
        "identificationHints": {
          "documentation": "<p>Source server identification hints.</p>",
          "shape": "IdentificationHints"
        },
        "lastUpdatedDateTime": {
          "documentation": "<p>Source server last update date and time.</p>",
          "shape": "ISO8601DatetimeString"
        },
        "networkInterfaces": {
          "documentation": "<p>Source server network interfaces.</p>",
          "shape": "NetworkInterfaces"
        },
        "os": {
          "documentation": "<p>Source server OS.</p>",
          "shape": "OS"
        },
        "ramBytes": {
          "documentation": "<p>Source server RAM in bytes.</p>",
          "shape": "PositiveInteger"
        },
        "recommendedInstanceType": {
          "documentation": "<p>Source server recommended instance type.</p>",
          "shape": "EC2InstanceType"
        }
      },
      "type": "structure"
    },
    "SourceServer": {
      "members": {
        "arn": {
          "documentation": "<p>Source server ARN.</p>",
          "shape": "ARN"
        },
        "dataReplicationInfo": {
          "documentation": "<p>Source server data replication info.</p>",
          "shape": "DataReplicationInfo"
        },
        "isArchived": {
          "documentation": "<p>Source server archived status.</p>",
          "shape": "Boolean"
        },
        "launchedInstance": {
          "documentation": "<p>Source server launched instance.</p>",
          "shape": "LaunchedInstance"
        },
        "lifeCycle": {
          "documentation": "<p>Source server lifecycle state.</p>",
          "shape": "LifeCycle"
        },
        "replicationType": {
          "documentation": "<p>Source server replication type.</p>",
          "shape": "ReplicationType"
        },
        "sourceProperties": {
          "documentation": "<p>Source server properties.</p>",
          "shape": "SourceProperties"
        },
        "sourceServerID": {
          "documentation": "<p>Source server ID.</p>",
          "shape": "SourceServerID"
        },
        "tags": {
          "documentation": "<p>Source server Tags.</p>",
          "shape": "TagsMap"
        },
        "vcenterClientID": {
          "documentation": "<p>Source server vCenter client id.</p>",
          "shape": "VcenterClientID"
        }
      },
      "type": "structure"
    },
    "SourceServerID": {
      "max": 19,
      "min": 19,
      "pattern": "^s-[0-9a-zA-Z]{17}$",
      "type": "string"
    },
    "SourceServersList": {
      "member": {
        "shape": "SourceServer"
      },
      "type": "list"
    },
    "SsmDocument": {
      "documentation": "<p>Source server replication type.</p>",
      "members": {
        "actionName": {
          "documentation": "<p>Source server replication type.</p>",
          "shape": "BoundedString"
        },
        "mustSucceedForCutover": {
          "documentation": "<p>Source server replication type.</p>",
          "shape": "Boolean"
        },
        "parameters": {
          "documentation": "<p>Source server replication type.</p>",
          "shape": "SsmDocumentParameters"
        },
        "ssmDocumentName": {
          "documentation": "<p>Source server replication type.</p>",
          "shape": "SsmDocumentName"
        },
        "timeoutSeconds": {
          "documentation": "<p>Source server replication type.</p>",
          "shape": "StrictlyPositiveInteger"
        }
      },
      "required": [
        "actionName",
        "ssmDocumentName"
      ],
      "type": "structure"
    },
    "SsmDocumentName": {
      "max": 172,
      "min": 3,
      "pattern": "^([A-Za-z0-9/:_\\.-])+$",
      "type": "string"
    },
    "SsmDocumentParameterName": {
      "max": 1011,
      "min": 1,
      "pattern": "^([A-Za-z0-9])+$",
      "type": "string"
    },
    "SsmDocumentParameters": {
      "key": {
        "shape": "SsmDocumentParameterName"
      },
      "max": 10,
      "min": 0,
      "type": "map",
      "value": {
        "shape": "SsmParameterStoreParameters"
      }
    },
    "SsmDocumentType": {
      "enum": [
        "AUTOMATION",
        "COMMAND"
      ],
      "type": "string"
    },
    "SsmDocuments": {
      "max": 10,
      "member": {
        "shape": "SsmDocument"
      },
      "min": 0,
      "type": "list"
    },
    "SsmParameterStoreParameter": {
      "documentation": "<p>Source server replication type.</p>",
      "members": {
        "parameterName": {
          "documentation": "<p>Source server replication type.</p>",
          "shape": "SsmParameterStoreParameterName"
        },
        "parameterType": {
          "documentation": "<p>Source server replication type.</p>",
          "shape": "SsmParameterStoreParameterType"
        }
      },
      "required": [
        "parameterName",
        "parameterType"
      ],
      "type": "structure"
    },
    "SsmParameterStoreParameterName": {
      "max": 1011,
      "min": 1,
      "pattern": "^([A-Za-z0-9_\\.-])+$",
      "type": "string"
    },
    "SsmParameterStoreParameterType": {
      "enum": [
        "STRING"
      ],
      "type": "string"
    },
    "SsmParameterStoreParameters": {
      "max": 10,
      "member": {
        "shape": "SsmParameterStoreParameter"
      },
      "min": 0,
      "type": "list"
    },
    "StartCutoverRequest": {
      "members": {
        "sourceServerIDs": {
          "documentation": "<p>Start Cutover by Source Server IDs.</p>",
          "shape": "StartCutoverRequestSourceServerIDs"
        },
        "tags": {
          "documentation": "<p>Start Cutover by Tags.</p>",
          "shape": "TagsMap"
        }
      },
      "required": [
        "sourceServerIDs"
      ],
      "type": "structure"
    },
    "StartCutoverRequestSourceServerIDs": {
      "max": 200,
      "member": {
        "shape": "SourceServerID"
      },
      "min": 1,
      "type": "list"
    },
    "StartCutoverResponse": {
      "members": {
        "job": {
          "documentation": "<p>Start Cutover Job response.</p>",
          "shape": "Job"
        }
      },
      "type": "structure"
    },
    "StartReplicationRequest": {
      "members": {
        "sourceServerID": {
          "documentation": "<p>ID of source server on which to start replication.</p>",
          "shape": "SourceServerID"
        }
      },
      "required": [
        "sourceServerID"
      ],
      "type": "structure"
    },
    "StartTestRequest": {
      "members": {
        "sourceServerIDs": {
          "documentation": "<p>Start Test for Source Server IDs.</p>",
          "shape": "StartTestRequestSourceServerIDs"
        },
        "tags": {
          "documentation": "<p>Start Test by Tags.</p>",
          "shape": "TagsMap"
        }
      },
      "required": [
        "sourceServerIDs"
      ],
      "type": "structure"
    },
    "StartTestRequestSourceServerIDs": {
      "max": 200,
      "member": {
        "shape": "SourceServerID"
      },
      "min": 1,
      "type": "list"
    },
    "StartTestResponse": {
      "members": {
        "job": {
          "documentation": "<p>Start Test Job response.</p>",
          "shape": "Job"
        }
      },
      "type": "structure"
    },
    "StrictlyPositiveInteger": {
      "min": 1,
      "type": "integer"
    },
    "SubnetID": {
      "max": 255,
      "min": 0,
      "pattern": "^subnet-[0-9a-fA-F]{8,}$",
      "type": "string"
    },
    "TagKey": {
      "max": 256,
      "min": 0,
      "type": "string"
    },
    "TagKeys": {
      "member": {
        "shape": "TagKey"
      },
      "sensitive": true,
      "type": "list"
    },
    "TagResourceRequest": {
      "members": {
        "resourceArn": {
          "documentation": "<p>Tag resource by ARN.</p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "ARN"
        },
        "tags": {
          "documentation": "<p>Tag resource by Tags.</p>",
          "shape": "TagsMap"
        }
      },
      "required": [
        "resourceArn",
        "tags"
      ],
      "type": "structure"
    },
    "TagValue": {
      "max": 256,
      "min": 0,
      "type": "string"
    },
    "TagsMap": {
      "key": {
        "shape": "TagKey"
      },
      "sensitive": true,
      "type": "map",
      "value": {
        "shape": "TagValue"
      }
    },
    "TargetInstanceTypeRightSizingMethod": {
      "enum": [
        "NONE",
        "BASIC"
      ],
      "type": "string"
    },
    "TerminateTargetInstancesRequest": {
      "members": {
        "sourceServerIDs": {
          "documentation": "<p>Terminate Target instance by Source Server IDs.</p>",
          "shape": "TerminateTargetInstancesRequestSourceServerIDs"
        },
        "tags": {
          "documentation": "<p>Terminate Target instance by Tags.</p>",
          "shape": "TagsMap"
        }
      },
      "required": [
        "sourceServerIDs"
      ],
      "type": "structure"
    },
    "TerminateTargetInstancesRequestSourceServerIDs": {
      "max": 200,
      "member": {
        "shape": "SourceServerID"
      },
      "min": 1,
      "type": "list"
    },
    "TerminateTargetInstancesResponse": {
      "members": {
        "job": {
          "documentation": "<p>Terminate Target instance Job response.</p>",
          "shape": "Job"
        }
      },
      "type": "structure"
    },
    "ThrottlingException": {
      "documentation": "<p>Reached throttling quota exception.</p>",
      "error": {
        "httpStatusCode": 429,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "LargeBoundedString"
        },
        "quotaCode": {
          "documentation": "<p>Reached throttling quota exception.</p>",
          "shape": "LargeBoundedString"
        },
        "retryAfterSeconds": {
          "documentation": "<p>Reached throttling quota exception will retry after x seconds.</p>",
          "location": "header",
          "locationName": "Retry-After",
          "shape": "LargeBoundedString"
        },
        "serviceCode": {
          "documentation": "<p>Reached throttling quota exception service code.</p>",
          "shape": "LargeBoundedString"
        }
      },
      "required": [
        "message"
      ],
      "type": "structure"
    },
    "UninitializedAccountException": {
      "documentation": "<p>Uninitialized account exception.</p>",
      "error": {
        "httpStatusCode": 400,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "code": {
          "shape": "LargeBoundedString"
        },
        "message": {
          "shape": "LargeBoundedString"
        }
      },
      "type": "structure"
    },
    "UntagResourceRequest": {
      "members": {
        "resourceArn": {
          "documentation": "<p>Untag resource by ARN.</p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "ARN"
        },
        "tagKeys": {
          "documentation": "<p>Untag resource by Keys.</p>",
          "location": "querystring",
          "locationName": "tagKeys",
          "shape": "TagKeys"
        }
      },
      "required": [
        "resourceArn",
        "tagKeys"
      ],
      "type": "structure"
    },
    "UpdateLaunchConfigurationRequest": {
      "members": {
        "bootMode": {
          "documentation": "<p>Update Launch configuration boot mode request.</p>",
          "shape": "BootMode"
        },
        "copyPrivateIp": {
          "documentation": "<p>Update Launch configuration copy Private IP request.</p>",
          "shape": "Boolean"
        },
        "copyTags": {
          "documentation": "<p>Update Launch configuration copy Tags request.</p>",
          "shape": "Boolean"
        },
        "launchDisposition": {
          "documentation": "<p>Update Launch configuration launch disposition request.</p>",
          "shape": "LaunchDisposition"
        },
        "licensing": {
          "documentation": "<p>Update Launch configuration licensing request.</p>",
          "shape": "Licensing"
        },
        "name": {
          "documentation": "<p>Update Launch configuration name request.</p>",
          "shape": "SmallBoundedString"
        },
        "postLaunchActions": {
          "shape": "PostLaunchActions"
        },
        "sourceServerID": {
          "documentation": "<p>Update Launch configuration by Source Server ID request.</p>",
          "shape": "SourceServerID"
        },
        "targetInstanceTypeRightSizingMethod": {
          "documentation": "<p>Update Launch configuration Target instance right sizing request.</p>",
          "shape": "TargetInstanceTypeRightSizingMethod"
        }
      },
      "required": [
        "sourceServerID"
      ],
      "type": "structure"
    },
    "UpdateLaunchConfigurationTemplateRequest": {
      "members": {
        "launchConfigurationTemplateID": {
          "documentation": "<p>Update Launch configuration Target instance right sizing request.</p>",
          "shape": "LaunchConfigurationTemplateID"
        },
        "postLaunchActions": {
          "documentation": "<p>Update Launch configuration Target instance right sizing request.</p>",
          "shape": "PostLaunchActions"
        }
      },
      "required": [
        "launchConfigurationTemplateID"
      ],
      "type": "structure"
    },
    "UpdateReplicationConfigurationRequest": {
      "members": {
        "associateDefaultSecurityGroup": {
          "documentation": "<p>Update replication configuration associate default Application Migration Service Security group request.</p>",
          "shape": "Boolean"
        },
        "bandwidthThrottling": {
          "documentation": "<p>Update replication configuration bandwidth throttling request.</p>",
          "shape": "PositiveInteger"
        },
        "createPublicIP": {
          "documentation": "<p>Update replication configuration create Public IP request.</p>",
          "shape": "Boolean"
        },
        "dataPlaneRouting": {
          "documentation": "<p>Update replication configuration data plane routing request.</p>",
          "shape": "ReplicationConfigurationDataPlaneRouting"
        },
        "defaultLargeStagingDiskType": {
          "documentation": "<p>Update replication configuration use default large Staging Disk type request.</p>",
          "shape": "ReplicationConfigurationDefaultLargeStagingDiskType"
        },
        "ebsEncryption": {
          "documentation": "<p>Update replication configuration EBS encryption request.</p>",
          "shape": "ReplicationConfigurationEbsEncryption"
        },
        "ebsEncryptionKeyArn": {
          "documentation": "<p>Update replication configuration EBS encryption key ARN request.</p>",
          "shape": "ARN"
        },
        "name": {
          "documentation": "<p>Update replication configuration name request.</p>",
          "shape": "SmallBoundedString"
        },
        "replicatedDisks": {
          "documentation": "<p>Update replication configuration replicated disks request.</p>",
          "shape": "ReplicationConfigurationReplicatedDisks"
        },
        "replicationServerInstanceType": {
          "documentation": "<p>Update replication configuration Replication Server instance type request.</p>",
          "shape": "EC2InstanceType"
        },
        "replicationServersSecurityGroupsIDs": {
          "documentation": "<p>Update replication configuration Replication Server Security Groups IDs request.</p>",
          "shape": "ReplicationServersSecurityGroupsIDs"
        },
        "sourceServerID": {
          "documentation": "<p>Update replication configuration Source Server ID request.</p>",
          "shape": "SourceServerID"
        },
        "stagingAreaSubnetId": {
          "documentation": "<p>Update replication configuration Staging Area subnet request.</p>",
          "shape": "SubnetID"
        },
        "stagingAreaTags": {
          "documentation": "<p>Update replication configuration Staging Area Tags request.</p>",
          "shape": "TagsMap"
        },
        "useDedicatedReplicationServer": {
          "documentation": "<p>Update replication configuration use dedicated Replication Server request.</p>",
          "shape": "Boolean"
        }
      },
      "required": [
        "sourceServerID"
      ],
      "type": "structure"
    },
    "UpdateReplicationConfigurationTemplateRequest": {
      "members": {
        "arn": {
          "documentation": "<p>Update replication configuration template ARN request.</p>",
          "shape": "ARN"
        },
        "associateDefaultSecurityGroup": {
          "documentation": "<p>Update replication configuration template associate default Application Migration Service Security group request.</p>",
          "shape": "Boolean"
        },
        "bandwidthThrottling": {
          "documentation": "<p>Update replication configuration template bandwidth throttling request.</p>",
          "shape": "PositiveInteger"
        },
        "createPublicIP": {
          "documentation": "<p>Update replication configuration template create Public IP request.</p>",
          "shape": "Boolean"
        },
        "dataPlaneRouting": {
          "documentation": "<p>Update replication configuration template data plane routing request.</p>",
          "shape": "ReplicationConfigurationDataPlaneRouting"
        },
        "defaultLargeStagingDiskType": {
          "documentation": "<p>Update replication configuration template use default large Staging Disk type request.</p>",
          "shape": "ReplicationConfigurationDefaultLargeStagingDiskType"
        },
        "ebsEncryption": {
          "documentation": "<p>Update replication configuration template EBS encryption request.</p>",
          "shape": "ReplicationConfigurationEbsEncryption"
        },
        "ebsEncryptionKeyArn": {
          "documentation": "<p>Update replication configuration template EBS encryption key ARN request.</p>",
          "shape": "ARN"
        },
        "replicationConfigurationTemplateID": {
          "documentation": "<p>Update replication configuration template template ID request.</p>",
          "shape": "ReplicationConfigurationTemplateID"
        },
        "replicationServerInstanceType": {
          "documentation": "<p>Update replication configuration template Replication Server instance type request.</p>",
          "shape": "EC2InstanceType"
        },
        "replicationServersSecurityGroupsIDs": {
          "documentation": "<p>Update replication configuration template Replication Server Security groups IDs request.</p>",
          "shape": "ReplicationServersSecurityGroupsIDs"
        },
        "stagingAreaSubnetId": {
          "documentation": "<p>Update replication configuration template Staging Area subnet ID request.</p>",
          "shape": "SubnetID"
        },
        "stagingAreaTags": {
          "documentation": "<p>Update replication configuration template Staging Area Tags request.</p>",
          "shape": "TagsMap"
        },
        "useDedicatedReplicationServer": {
          "documentation": "<p>Update replication configuration template use dedicated Replication Server request.</p>",
          "shape": "Boolean"
        }
      },
      "required": [
        "replicationConfigurationTemplateID"
      ],
      "type": "structure"
    },
    "UpdateSourceServerReplicationTypeRequest": {
      "members": {
        "replicationType": {
          "documentation": "<p>Replication type to which to update source server.</p>",
          "shape": "ReplicationType"
        },
        "sourceServerID": {
          "documentation": "<p>ID of source server on which to update replication type.</p>",
          "shape": "SourceServerID"
        }
      },
      "required": [
        "replicationType",
        "sourceServerID"
      ],
      "type": "structure"
    },
    "ValidationException": {
      "documentation": "<p>Validate exception.</p>",
      "error": {
        "httpStatusCode": 400,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "code": {
          "shape": "LargeBoundedString"
        },
        "fieldList": {
          "documentation": "<p>Validate exception field list.</p>",
          "shape": "ValidationExceptionFieldList"
        },
        "message": {
          "shape": "LargeBoundedString"
        },
        "reason": {
          "documentation": "<p>Validate exception reason.</p>",
          "shape": "ValidationExceptionReason"
        }
      },
      "type": "structure"
    },
    "ValidationExceptionField": {
      "documentation": "<p>Validate exception field.</p>",
      "members": {
        "message": {
          "documentation": "<p>Validate exception field message.</p>",
          "shape": "LargeBoundedString"
        },
        "name": {
          "documentation": "<p>Validate exception field name.</p>",
          "shape": "LargeBoundedString"
        }
      },
      "type": "structure"
    },
    "ValidationExceptionFieldList": {
      "member": {
        "shape": "ValidationExceptionField"
      },
      "type": "list"
    },
    "ValidationExceptionReason": {
      "enum": [
        "unknownOperation",
        "cannotParse",
        "fieldValidationFailed",
        "other"
      ],
      "type": "string"
    },
    "VcenterClient": {
      "documentation": "<p>vCenter client.</p>",
      "members": {
        "arn": {
          "documentation": "<p>Arn of vCenter client.</p>",
          "shape": "ARN"
        },
        "datacenterName": {
          "documentation": "<p>Datacenter name of vCenter client.</p>",
          "shape": "BoundedString"
        },
        "hostname": {
          "documentation": "<p>Hostname of vCenter client .</p>",
          "shape": "BoundedString"
        },
        "lastSeenDatetime": {
          "documentation": "<p>Last seen time of vCenter client.</p>",
          "shape": "ISO8601DatetimeString"
        },
        "sourceServerTags": {
          "documentation": "<p>Tags for Source Server of vCenter client.</p>",
          "shape": "TagsMap"
        },
        "tags": {
          "documentation": "<p>Tags for vCenter client.</p>",
          "shape": "TagsMap"
        },
        "vcenterClientID": {
          "documentation": "<p>ID of vCenter client.</p>",
          "shape": "VcenterClientID"
        },
        "vcenterUUID": {
          "documentation": "<p>Vcenter UUID of vCenter client.</p>",
          "shape": "BoundedString"
        }
      },
      "type": "structure"
    },
    "VcenterClientID": {
      "max": 21,
      "min": 21,
      "pattern": "^vcc-[0-9a-zA-Z]{17}$",
      "type": "string"
    },
    "VcenterClientList": {
      "member": {
        "shape": "VcenterClient"
      },
      "type": "list"
    }
  },
  "version": "2.0"
}
