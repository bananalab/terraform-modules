{
  "documentation": "<p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>",
  "metadata": {
    "apiVersion": "2020-11-22",
    "endpointPrefix": "api.iotwireless",
    "protocol": "rest-json",
    "serviceFullName": "AWS IoT Wireless",
    "serviceId": "IoT Wireless",
    "signatureVersion": "v4",
    "signingName": "iotwireless",
    "uid": "iotwireless-2020-11-22"
  },
  "operations": {
    "AssociateAwsAccountWithPartnerAccount": {
      "documentation": "<p>Associates a partner account with your AWS account.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/partner-accounts"
      },
      "input": {
        "shape": "AssociateAwsAccountWithPartnerAccountRequest"
      },
      "name": "AssociateAwsAccountWithPartnerAccount",
      "output": {
        "shape": "AssociateAwsAccountWithPartnerAccountResponse"
      }
    },
    "AssociateMulticastGroupWithFuotaTask": {
      "documentation": "<p>Associate a multicast group with a FUOTA task.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/fuota-tasks/{Id}/multicast-group",
        "responseCode": 204
      },
      "input": {
        "shape": "AssociateMulticastGroupWithFuotaTaskRequest"
      },
      "name": "AssociateMulticastGroupWithFuotaTask",
      "output": {
        "shape": "AssociateMulticastGroupWithFuotaTaskResponse"
      }
    },
    "AssociateWirelessDeviceWithFuotaTask": {
      "documentation": "<p>Associate a wireless device with a FUOTA task.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/fuota-tasks/{Id}/wireless-device",
        "responseCode": 204
      },
      "input": {
        "shape": "AssociateWirelessDeviceWithFuotaTaskRequest"
      },
      "name": "AssociateWirelessDeviceWithFuotaTask",
      "output": {
        "shape": "AssociateWirelessDeviceWithFuotaTaskResponse"
      }
    },
    "AssociateWirelessDeviceWithMulticastGroup": {
      "documentation": "<p>Associates a wireless device with a multicast group.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/multicast-groups/{Id}/wireless-device",
        "responseCode": 204
      },
      "input": {
        "shape": "AssociateWirelessDeviceWithMulticastGroupRequest"
      },
      "name": "AssociateWirelessDeviceWithMulticastGroup",
      "output": {
        "shape": "AssociateWirelessDeviceWithMulticastGroupResponse"
      }
    },
    "AssociateWirelessDeviceWithThing": {
      "documentation": "<p>Associates a wireless device with a thing.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/wireless-devices/{Id}/thing",
        "responseCode": 204
      },
      "input": {
        "shape": "AssociateWirelessDeviceWithThingRequest"
      },
      "name": "AssociateWirelessDeviceWithThing",
      "output": {
        "shape": "AssociateWirelessDeviceWithThingResponse"
      }
    },
    "AssociateWirelessGatewayWithCertificate": {
      "documentation": "<p>Associates a wireless gateway with a certificate.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/wireless-gateways/{Id}/certificate"
      },
      "input": {
        "shape": "AssociateWirelessGatewayWithCertificateRequest"
      },
      "name": "AssociateWirelessGatewayWithCertificate",
      "output": {
        "shape": "AssociateWirelessGatewayWithCertificateResponse"
      }
    },
    "AssociateWirelessGatewayWithThing": {
      "documentation": "<p>Associates a wireless gateway with a thing.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/wireless-gateways/{Id}/thing",
        "responseCode": 204
      },
      "input": {
        "shape": "AssociateWirelessGatewayWithThingRequest"
      },
      "name": "AssociateWirelessGatewayWithThing",
      "output": {
        "shape": "AssociateWirelessGatewayWithThingResponse"
      }
    },
    "CancelMulticastGroupSession": {
      "documentation": "<p>Cancels an existing multicast group session.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/multicast-groups/{Id}/session",
        "responseCode": 204
      },
      "input": {
        "shape": "CancelMulticastGroupSessionRequest"
      },
      "name": "CancelMulticastGroupSession",
      "output": {
        "shape": "CancelMulticastGroupSessionResponse"
      }
    },
    "CreateDestination": {
      "documentation": "<p>Creates a new destination that maps a device message to an AWS IoT rule.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/destinations",
        "responseCode": 201
      },
      "input": {
        "shape": "CreateDestinationRequest"
      },
      "name": "CreateDestination",
      "output": {
        "shape": "CreateDestinationResponse"
      }
    },
    "CreateDeviceProfile": {
      "documentation": "<p>Creates a new device profile.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/device-profiles",
        "responseCode": 201
      },
      "input": {
        "shape": "CreateDeviceProfileRequest"
      },
      "name": "CreateDeviceProfile",
      "output": {
        "shape": "CreateDeviceProfileResponse"
      }
    },
    "CreateFuotaTask": {
      "documentation": "<p>Creates a FUOTA task.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/fuota-tasks",
        "responseCode": 201
      },
      "input": {
        "shape": "CreateFuotaTaskRequest"
      },
      "name": "CreateFuotaTask",
      "output": {
        "shape": "CreateFuotaTaskResponse"
      }
    },
    "CreateMulticastGroup": {
      "documentation": "<p>Creates a multicast group.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/multicast-groups",
        "responseCode": 201
      },
      "input": {
        "shape": "CreateMulticastGroupRequest"
      },
      "name": "CreateMulticastGroup",
      "output": {
        "shape": "CreateMulticastGroupResponse"
      }
    },
    "CreateNetworkAnalyzerConfiguration": {
      "documentation": "<p>Creates a new network analyzer configuration.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/network-analyzer-configurations",
        "responseCode": 201
      },
      "input": {
        "shape": "CreateNetworkAnalyzerConfigurationRequest"
      },
      "name": "CreateNetworkAnalyzerConfiguration",
      "output": {
        "shape": "CreateNetworkAnalyzerConfigurationResponse"
      }
    },
    "CreateServiceProfile": {
      "documentation": "<p>Creates a new service profile.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/service-profiles",
        "responseCode": 201
      },
      "input": {
        "shape": "CreateServiceProfileRequest"
      },
      "name": "CreateServiceProfile",
      "output": {
        "shape": "CreateServiceProfileResponse"
      }
    },
    "CreateWirelessDevice": {
      "documentation": "<p>Provisions a wireless device.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/wireless-devices",
        "responseCode": 201
      },
      "input": {
        "shape": "CreateWirelessDeviceRequest"
      },
      "name": "CreateWirelessDevice",
      "output": {
        "shape": "CreateWirelessDeviceResponse"
      }
    },
    "CreateWirelessGateway": {
      "documentation": "<p>Provisions a wireless gateway.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/wireless-gateways",
        "responseCode": 201
      },
      "input": {
        "shape": "CreateWirelessGatewayRequest"
      },
      "name": "CreateWirelessGateway",
      "output": {
        "shape": "CreateWirelessGatewayResponse"
      }
    },
    "CreateWirelessGatewayTask": {
      "documentation": "<p>Creates a task for a wireless gateway.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/wireless-gateways/{Id}/tasks",
        "responseCode": 201
      },
      "input": {
        "shape": "CreateWirelessGatewayTaskRequest"
      },
      "name": "CreateWirelessGatewayTask",
      "output": {
        "shape": "CreateWirelessGatewayTaskResponse"
      }
    },
    "CreateWirelessGatewayTaskDefinition": {
      "documentation": "<p>Creates a gateway task definition.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/wireless-gateway-task-definitions",
        "responseCode": 201
      },
      "input": {
        "shape": "CreateWirelessGatewayTaskDefinitionRequest"
      },
      "name": "CreateWirelessGatewayTaskDefinition",
      "output": {
        "shape": "CreateWirelessGatewayTaskDefinitionResponse"
      }
    },
    "DeleteDestination": {
      "documentation": "<p>Deletes a destination.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/destinations/{Name}",
        "responseCode": 204
      },
      "input": {
        "shape": "DeleteDestinationRequest"
      },
      "name": "DeleteDestination",
      "output": {
        "shape": "DeleteDestinationResponse"
      }
    },
    "DeleteDeviceProfile": {
      "documentation": "<p>Deletes a device profile.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/device-profiles/{Id}",
        "responseCode": 204
      },
      "input": {
        "shape": "DeleteDeviceProfileRequest"
      },
      "name": "DeleteDeviceProfile",
      "output": {
        "shape": "DeleteDeviceProfileResponse"
      }
    },
    "DeleteFuotaTask": {
      "documentation": "<p>Deletes a FUOTA task.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/fuota-tasks/{Id}",
        "responseCode": 204
      },
      "input": {
        "shape": "DeleteFuotaTaskRequest"
      },
      "name": "DeleteFuotaTask",
      "output": {
        "shape": "DeleteFuotaTaskResponse"
      }
    },
    "DeleteMulticastGroup": {
      "documentation": "<p>Deletes a multicast group if it is not in use by a fuota task.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/multicast-groups/{Id}",
        "responseCode": 204
      },
      "input": {
        "shape": "DeleteMulticastGroupRequest"
      },
      "name": "DeleteMulticastGroup",
      "output": {
        "shape": "DeleteMulticastGroupResponse"
      }
    },
    "DeleteNetworkAnalyzerConfiguration": {
      "documentation": "<p>Deletes a network analyzer configuration.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/network-analyzer-configurations/{ConfigurationName}",
        "responseCode": 204
      },
      "input": {
        "shape": "DeleteNetworkAnalyzerConfigurationRequest"
      },
      "name": "DeleteNetworkAnalyzerConfiguration",
      "output": {
        "shape": "DeleteNetworkAnalyzerConfigurationResponse"
      }
    },
    "DeleteQueuedMessages": {
      "documentation": "<p>Remove queued messages from the downlink queue.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/wireless-devices/{Id}/data",
        "responseCode": 204
      },
      "input": {
        "shape": "DeleteQueuedMessagesRequest"
      },
      "name": "DeleteQueuedMessages",
      "output": {
        "shape": "DeleteQueuedMessagesResponse"
      }
    },
    "DeleteServiceProfile": {
      "documentation": "<p>Deletes a service profile.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/service-profiles/{Id}",
        "responseCode": 204
      },
      "input": {
        "shape": "DeleteServiceProfileRequest"
      },
      "name": "DeleteServiceProfile",
      "output": {
        "shape": "DeleteServiceProfileResponse"
      }
    },
    "DeleteWirelessDevice": {
      "documentation": "<p>Deletes a wireless device.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/wireless-devices/{Id}",
        "responseCode": 204
      },
      "input": {
        "shape": "DeleteWirelessDeviceRequest"
      },
      "name": "DeleteWirelessDevice",
      "output": {
        "shape": "DeleteWirelessDeviceResponse"
      }
    },
    "DeleteWirelessGateway": {
      "documentation": "<p>Deletes a wireless gateway.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/wireless-gateways/{Id}",
        "responseCode": 204
      },
      "input": {
        "shape": "DeleteWirelessGatewayRequest"
      },
      "name": "DeleteWirelessGateway",
      "output": {
        "shape": "DeleteWirelessGatewayResponse"
      }
    },
    "DeleteWirelessGatewayTask": {
      "documentation": "<p>Deletes a wireless gateway task.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/wireless-gateways/{Id}/tasks",
        "responseCode": 204
      },
      "input": {
        "shape": "DeleteWirelessGatewayTaskRequest"
      },
      "name": "DeleteWirelessGatewayTask",
      "output": {
        "shape": "DeleteWirelessGatewayTaskResponse"
      }
    },
    "DeleteWirelessGatewayTaskDefinition": {
      "documentation": "<p>Deletes a wireless gateway task definition. Deleting this task definition does not affect tasks that are currently in progress.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/wireless-gateway-task-definitions/{Id}",
        "responseCode": 204
      },
      "input": {
        "shape": "DeleteWirelessGatewayTaskDefinitionRequest"
      },
      "name": "DeleteWirelessGatewayTaskDefinition",
      "output": {
        "shape": "DeleteWirelessGatewayTaskDefinitionResponse"
      }
    },
    "DisassociateAwsAccountFromPartnerAccount": {
      "documentation": "<p>Disassociates your AWS account from a partner account. If <code>PartnerAccountId</code> and <code>PartnerType</code> are <code>null</code>, disassociates your AWS account from all partner accounts.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/partner-accounts/{PartnerAccountId}",
        "responseCode": 204
      },
      "input": {
        "shape": "DisassociateAwsAccountFromPartnerAccountRequest"
      },
      "name": "DisassociateAwsAccountFromPartnerAccount",
      "output": {
        "shape": "DisassociateAwsAccountFromPartnerAccountResponse"
      }
    },
    "DisassociateMulticastGroupFromFuotaTask": {
      "documentation": "<p>Disassociates a multicast group from a fuota task.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/fuota-tasks/{Id}/multicast-groups/{MulticastGroupId}",
        "responseCode": 204
      },
      "input": {
        "shape": "DisassociateMulticastGroupFromFuotaTaskRequest"
      },
      "name": "DisassociateMulticastGroupFromFuotaTask",
      "output": {
        "shape": "DisassociateMulticastGroupFromFuotaTaskResponse"
      }
    },
    "DisassociateWirelessDeviceFromFuotaTask": {
      "documentation": "<p>Disassociates a wireless device from a FUOTA task.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/fuota-tasks/{Id}/wireless-devices/{WirelessDeviceId}",
        "responseCode": 204
      },
      "input": {
        "shape": "DisassociateWirelessDeviceFromFuotaTaskRequest"
      },
      "name": "DisassociateWirelessDeviceFromFuotaTask",
      "output": {
        "shape": "DisassociateWirelessDeviceFromFuotaTaskResponse"
      }
    },
    "DisassociateWirelessDeviceFromMulticastGroup": {
      "documentation": "<p>Disassociates a wireless device from a multicast group.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/multicast-groups/{Id}/wireless-devices/{WirelessDeviceId}",
        "responseCode": 204
      },
      "input": {
        "shape": "DisassociateWirelessDeviceFromMulticastGroupRequest"
      },
      "name": "DisassociateWirelessDeviceFromMulticastGroup",
      "output": {
        "shape": "DisassociateWirelessDeviceFromMulticastGroupResponse"
      }
    },
    "DisassociateWirelessDeviceFromThing": {
      "documentation": "<p>Disassociates a wireless device from its currently associated thing.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/wireless-devices/{Id}/thing",
        "responseCode": 204
      },
      "input": {
        "shape": "DisassociateWirelessDeviceFromThingRequest"
      },
      "name": "DisassociateWirelessDeviceFromThing",
      "output": {
        "shape": "DisassociateWirelessDeviceFromThingResponse"
      }
    },
    "DisassociateWirelessGatewayFromCertificate": {
      "documentation": "<p>Disassociates a wireless gateway from its currently associated certificate.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/wireless-gateways/{Id}/certificate",
        "responseCode": 204
      },
      "input": {
        "shape": "DisassociateWirelessGatewayFromCertificateRequest"
      },
      "name": "DisassociateWirelessGatewayFromCertificate",
      "output": {
        "shape": "DisassociateWirelessGatewayFromCertificateResponse"
      }
    },
    "DisassociateWirelessGatewayFromThing": {
      "documentation": "<p>Disassociates a wireless gateway from its currently associated thing.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/wireless-gateways/{Id}/thing",
        "responseCode": 204
      },
      "input": {
        "shape": "DisassociateWirelessGatewayFromThingRequest"
      },
      "name": "DisassociateWirelessGatewayFromThing",
      "output": {
        "shape": "DisassociateWirelessGatewayFromThingResponse"
      }
    },
    "GetDestination": {
      "documentation": "<p>Gets information about a destination.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/destinations/{Name}"
      },
      "input": {
        "shape": "GetDestinationRequest"
      },
      "name": "GetDestination",
      "output": {
        "shape": "GetDestinationResponse"
      }
    },
    "GetDeviceProfile": {
      "documentation": "<p>Gets information about a device profile.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/device-profiles/{Id}"
      },
      "input": {
        "shape": "GetDeviceProfileRequest"
      },
      "name": "GetDeviceProfile",
      "output": {
        "shape": "GetDeviceProfileResponse"
      }
    },
    "GetEventConfigurationByResourceTypes": {
      "documentation": "<p>Get the event configuration based on resource types.</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/event-configurations-resource-types"
      },
      "input": {
        "shape": "GetEventConfigurationByResourceTypesRequest"
      },
      "name": "GetEventConfigurationByResourceTypes",
      "output": {
        "shape": "GetEventConfigurationByResourceTypesResponse"
      }
    },
    "GetFuotaTask": {
      "documentation": "<p>Gets information about a FUOTA task.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/fuota-tasks/{Id}"
      },
      "input": {
        "shape": "GetFuotaTaskRequest"
      },
      "name": "GetFuotaTask",
      "output": {
        "shape": "GetFuotaTaskResponse"
      }
    },
    "GetLogLevelsByResourceTypes": {
      "documentation": "<p>Returns current default log levels or log levels by resource types. Based on resource types, log levels can be for wireless device log options or wireless gateway log options.</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/log-levels",
        "responseCode": 200
      },
      "input": {
        "shape": "GetLogLevelsByResourceTypesRequest"
      },
      "name": "GetLogLevelsByResourceTypes",
      "output": {
        "shape": "GetLogLevelsByResourceTypesResponse"
      }
    },
    "GetMulticastGroup": {
      "documentation": "<p>Gets information about a multicast group.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/multicast-groups/{Id}"
      },
      "input": {
        "shape": "GetMulticastGroupRequest"
      },
      "name": "GetMulticastGroup",
      "output": {
        "shape": "GetMulticastGroupResponse"
      }
    },
    "GetMulticastGroupSession": {
      "documentation": "<p>Gets information about a multicast group session.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/multicast-groups/{Id}/session"
      },
      "input": {
        "shape": "GetMulticastGroupSessionRequest"
      },
      "name": "GetMulticastGroupSession",
      "output": {
        "shape": "GetMulticastGroupSessionResponse"
      }
    },
    "GetNetworkAnalyzerConfiguration": {
      "documentation": "<p>Get network analyzer configuration.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/network-analyzer-configurations/{ConfigurationName}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetNetworkAnalyzerConfigurationRequest"
      },
      "name": "GetNetworkAnalyzerConfiguration",
      "output": {
        "shape": "GetNetworkAnalyzerConfigurationResponse"
      }
    },
    "GetPartnerAccount": {
      "documentation": "<p>Gets information about a partner account. If <code>PartnerAccountId</code> and <code>PartnerType</code> are <code>null</code>, returns all partner accounts.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/partner-accounts/{PartnerAccountId}"
      },
      "input": {
        "shape": "GetPartnerAccountRequest"
      },
      "name": "GetPartnerAccount",
      "output": {
        "shape": "GetPartnerAccountResponse"
      }
    },
    "GetPosition": {
      "documentation": "<p>Get the position information for a given resource.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/positions/{ResourceIdentifier}"
      },
      "input": {
        "shape": "GetPositionRequest"
      },
      "name": "GetPosition",
      "output": {
        "shape": "GetPositionResponse"
      }
    },
    "GetPositionConfiguration": {
      "documentation": "<p>Get position configuration for a given resource.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/position-configurations/{ResourceIdentifier}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetPositionConfigurationRequest"
      },
      "name": "GetPositionConfiguration",
      "output": {
        "shape": "GetPositionConfigurationResponse"
      }
    },
    "GetResourceEventConfiguration": {
      "documentation": "<p>Get the event configuration for a particular resource identifier.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/event-configurations/{Identifier}"
      },
      "input": {
        "shape": "GetResourceEventConfigurationRequest"
      },
      "name": "GetResourceEventConfiguration",
      "output": {
        "shape": "GetResourceEventConfigurationResponse"
      }
    },
    "GetResourceLogLevel": {
      "documentation": "<p>Fetches the log-level override, if any, for a given resource-ID and resource-type. It can be used for a wireless device or a wireless gateway.</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/log-levels/{ResourceIdentifier}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetResourceLogLevelRequest"
      },
      "name": "GetResourceLogLevel",
      "output": {
        "shape": "GetResourceLogLevelResponse"
      }
    },
    "GetServiceEndpoint": {
      "documentation": "<p>Gets the account-specific endpoint for Configuration and Update Server (CUPS) protocol or LoRaWAN Network Server (LNS) connections.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/service-endpoint"
      },
      "input": {
        "shape": "GetServiceEndpointRequest"
      },
      "name": "GetServiceEndpoint",
      "output": {
        "shape": "GetServiceEndpointResponse"
      }
    },
    "GetServiceProfile": {
      "documentation": "<p>Gets information about a service profile.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/service-profiles/{Id}"
      },
      "input": {
        "shape": "GetServiceProfileRequest"
      },
      "name": "GetServiceProfile",
      "output": {
        "shape": "GetServiceProfileResponse"
      }
    },
    "GetWirelessDevice": {
      "documentation": "<p>Gets information about a wireless device.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/wireless-devices/{Identifier}"
      },
      "input": {
        "shape": "GetWirelessDeviceRequest"
      },
      "name": "GetWirelessDevice",
      "output": {
        "shape": "GetWirelessDeviceResponse"
      }
    },
    "GetWirelessDeviceStatistics": {
      "documentation": "<p>Gets operating information about a wireless device.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/wireless-devices/{Id}/statistics",
        "responseCode": 200
      },
      "input": {
        "shape": "GetWirelessDeviceStatisticsRequest"
      },
      "name": "GetWirelessDeviceStatistics",
      "output": {
        "shape": "GetWirelessDeviceStatisticsResponse"
      }
    },
    "GetWirelessGateway": {
      "documentation": "<p>Gets information about a wireless gateway.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/wireless-gateways/{Identifier}"
      },
      "input": {
        "shape": "GetWirelessGatewayRequest"
      },
      "name": "GetWirelessGateway",
      "output": {
        "shape": "GetWirelessGatewayResponse"
      }
    },
    "GetWirelessGatewayCertificate": {
      "documentation": "<p>Gets the ID of the certificate that is currently associated with a wireless gateway.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/wireless-gateways/{Id}/certificate"
      },
      "input": {
        "shape": "GetWirelessGatewayCertificateRequest"
      },
      "name": "GetWirelessGatewayCertificate",
      "output": {
        "shape": "GetWirelessGatewayCertificateResponse"
      }
    },
    "GetWirelessGatewayFirmwareInformation": {
      "documentation": "<p>Gets the firmware version and other information about a wireless gateway.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/wireless-gateways/{Id}/firmware-information"
      },
      "input": {
        "shape": "GetWirelessGatewayFirmwareInformationRequest"
      },
      "name": "GetWirelessGatewayFirmwareInformation",
      "output": {
        "shape": "GetWirelessGatewayFirmwareInformationResponse"
      }
    },
    "GetWirelessGatewayStatistics": {
      "documentation": "<p>Gets operating information about a wireless gateway.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/wireless-gateways/{Id}/statistics",
        "responseCode": 200
      },
      "input": {
        "shape": "GetWirelessGatewayStatisticsRequest"
      },
      "name": "GetWirelessGatewayStatistics",
      "output": {
        "shape": "GetWirelessGatewayStatisticsResponse"
      }
    },
    "GetWirelessGatewayTask": {
      "documentation": "<p>Gets information about a wireless gateway task.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/wireless-gateways/{Id}/tasks"
      },
      "input": {
        "shape": "GetWirelessGatewayTaskRequest"
      },
      "name": "GetWirelessGatewayTask",
      "output": {
        "shape": "GetWirelessGatewayTaskResponse"
      }
    },
    "GetWirelessGatewayTaskDefinition": {
      "documentation": "<p>Gets information about a wireless gateway task definition.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/wireless-gateway-task-definitions/{Id}"
      },
      "input": {
        "shape": "GetWirelessGatewayTaskDefinitionRequest"
      },
      "name": "GetWirelessGatewayTaskDefinition",
      "output": {
        "shape": "GetWirelessGatewayTaskDefinitionResponse"
      }
    },
    "ListDestinations": {
      "documentation": "<p>Lists the destinations registered to your AWS account.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/destinations"
      },
      "input": {
        "shape": "ListDestinationsRequest"
      },
      "name": "ListDestinations",
      "output": {
        "shape": "ListDestinationsResponse"
      }
    },
    "ListDeviceProfiles": {
      "documentation": "<p>Lists the device profiles registered to your AWS account.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/device-profiles"
      },
      "input": {
        "shape": "ListDeviceProfilesRequest"
      },
      "name": "ListDeviceProfiles",
      "output": {
        "shape": "ListDeviceProfilesResponse"
      }
    },
    "ListEventConfigurations": {
      "documentation": "<p>List event configurations where at least one event topic has been enabled.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/event-configurations"
      },
      "input": {
        "shape": "ListEventConfigurationsRequest"
      },
      "name": "ListEventConfigurations",
      "output": {
        "shape": "ListEventConfigurationsResponse"
      }
    },
    "ListFuotaTasks": {
      "documentation": "<p>Lists the FUOTA tasks registered to your AWS account.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/fuota-tasks"
      },
      "input": {
        "shape": "ListFuotaTasksRequest"
      },
      "name": "ListFuotaTasks",
      "output": {
        "shape": "ListFuotaTasksResponse"
      }
    },
    "ListMulticastGroups": {
      "documentation": "<p>Lists the multicast groups registered to your AWS account.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/multicast-groups"
      },
      "input": {
        "shape": "ListMulticastGroupsRequest"
      },
      "name": "ListMulticastGroups",
      "output": {
        "shape": "ListMulticastGroupsResponse"
      }
    },
    "ListMulticastGroupsByFuotaTask": {
      "documentation": "<p>List all multicast groups associated with a fuota task.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/fuota-tasks/{Id}/multicast-groups"
      },
      "input": {
        "shape": "ListMulticastGroupsByFuotaTaskRequest"
      },
      "name": "ListMulticastGroupsByFuotaTask",
      "output": {
        "shape": "ListMulticastGroupsByFuotaTaskResponse"
      }
    },
    "ListNetworkAnalyzerConfigurations": {
      "documentation": "<p>Lists the network analyzer configurations.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/network-analyzer-configurations"
      },
      "input": {
        "shape": "ListNetworkAnalyzerConfigurationsRequest"
      },
      "name": "ListNetworkAnalyzerConfigurations",
      "output": {
        "shape": "ListNetworkAnalyzerConfigurationsResponse"
      }
    },
    "ListPartnerAccounts": {
      "documentation": "<p>Lists the partner accounts associated with your AWS account.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/partner-accounts"
      },
      "input": {
        "shape": "ListPartnerAccountsRequest"
      },
      "name": "ListPartnerAccounts",
      "output": {
        "shape": "ListPartnerAccountsResponse"
      }
    },
    "ListPositionConfigurations": {
      "documentation": "<p>List position configurations for a given resource, such as positioning solvers.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/position-configurations",
        "responseCode": 200
      },
      "input": {
        "shape": "ListPositionConfigurationsRequest"
      },
      "name": "ListPositionConfigurations",
      "output": {
        "shape": "ListPositionConfigurationsResponse"
      }
    },
    "ListQueuedMessages": {
      "documentation": "<p>List queued messages in the downlink queue.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/wireless-devices/{Id}/data"
      },
      "input": {
        "shape": "ListQueuedMessagesRequest"
      },
      "name": "ListQueuedMessages",
      "output": {
        "shape": "ListQueuedMessagesResponse"
      }
    },
    "ListServiceProfiles": {
      "documentation": "<p>Lists the service profiles registered to your AWS account.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/service-profiles"
      },
      "input": {
        "shape": "ListServiceProfilesRequest"
      },
      "name": "ListServiceProfiles",
      "output": {
        "shape": "ListServiceProfilesResponse"
      }
    },
    "ListTagsForResource": {
      "documentation": "<p>Lists the tags (metadata) you have assigned to the resource.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/tags"
      },
      "input": {
        "shape": "ListTagsForResourceRequest"
      },
      "name": "ListTagsForResource",
      "output": {
        "shape": "ListTagsForResourceResponse"
      }
    },
    "ListWirelessDevices": {
      "documentation": "<p>Lists the wireless devices registered to your AWS account.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/wireless-devices"
      },
      "input": {
        "shape": "ListWirelessDevicesRequest"
      },
      "name": "ListWirelessDevices",
      "output": {
        "shape": "ListWirelessDevicesResponse"
      }
    },
    "ListWirelessGatewayTaskDefinitions": {
      "documentation": "<p>List the wireless gateway tasks definitions registered to your AWS account.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/wireless-gateway-task-definitions"
      },
      "input": {
        "shape": "ListWirelessGatewayTaskDefinitionsRequest"
      },
      "name": "ListWirelessGatewayTaskDefinitions",
      "output": {
        "shape": "ListWirelessGatewayTaskDefinitionsResponse"
      }
    },
    "ListWirelessGateways": {
      "documentation": "<p>Lists the wireless gateways registered to your AWS account.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/wireless-gateways"
      },
      "input": {
        "shape": "ListWirelessGatewaysRequest"
      },
      "name": "ListWirelessGateways",
      "output": {
        "shape": "ListWirelessGatewaysResponse"
      }
    },
    "PutPositionConfiguration": {
      "documentation": "<p>Put position configuration for a given resource.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/position-configurations/{ResourceIdentifier}",
        "responseCode": 200
      },
      "input": {
        "shape": "PutPositionConfigurationRequest"
      },
      "name": "PutPositionConfiguration",
      "output": {
        "shape": "PutPositionConfigurationResponse"
      }
    },
    "PutResourceLogLevel": {
      "documentation": "<p>Sets the log-level override for a resource-ID and resource-type. This option can be specified for a wireless gateway or a wireless device. A limit of 200 log level override can be set per account.</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/log-levels/{ResourceIdentifier}",
        "responseCode": 200
      },
      "input": {
        "shape": "PutResourceLogLevelRequest"
      },
      "name": "PutResourceLogLevel",
      "output": {
        "shape": "PutResourceLogLevelResponse"
      }
    },
    "ResetAllResourceLogLevels": {
      "documentation": "<p>Removes the log-level overrides for all resources; both wireless devices and wireless gateways.</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/log-levels",
        "responseCode": 204
      },
      "input": {
        "shape": "ResetAllResourceLogLevelsRequest"
      },
      "name": "ResetAllResourceLogLevels",
      "output": {
        "shape": "ResetAllResourceLogLevelsResponse"
      }
    },
    "ResetResourceLogLevel": {
      "documentation": "<p>Removes the log-level override, if any, for a specific resource-ID and resource-type. It can be used for a wireless device or a wireless gateway.</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/log-levels/{ResourceIdentifier}",
        "responseCode": 204
      },
      "input": {
        "shape": "ResetResourceLogLevelRequest"
      },
      "name": "ResetResourceLogLevel",
      "output": {
        "shape": "ResetResourceLogLevelResponse"
      }
    },
    "SendDataToMulticastGroup": {
      "documentation": "<p>Sends the specified data to a multicast group.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/multicast-groups/{Id}/data",
        "responseCode": 201
      },
      "input": {
        "shape": "SendDataToMulticastGroupRequest"
      },
      "name": "SendDataToMulticastGroup",
      "output": {
        "shape": "SendDataToMulticastGroupResponse"
      }
    },
    "SendDataToWirelessDevice": {
      "documentation": "<p>Sends a decrypted application data frame to a device.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/wireless-devices/{Id}/data",
        "responseCode": 202
      },
      "input": {
        "shape": "SendDataToWirelessDeviceRequest"
      },
      "name": "SendDataToWirelessDevice",
      "output": {
        "shape": "SendDataToWirelessDeviceResponse"
      }
    },
    "StartBulkAssociateWirelessDeviceWithMulticastGroup": {
      "documentation": "<p>Starts a bulk association of all qualifying wireless devices with a multicast group.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/multicast-groups/{Id}/bulk",
        "responseCode": 204
      },
      "input": {
        "shape": "StartBulkAssociateWirelessDeviceWithMulticastGroupRequest"
      },
      "name": "StartBulkAssociateWirelessDeviceWithMulticastGroup",
      "output": {
        "shape": "StartBulkAssociateWirelessDeviceWithMulticastGroupResponse"
      }
    },
    "StartBulkDisassociateWirelessDeviceFromMulticastGroup": {
      "documentation": "<p>Starts a bulk disassociatin of all qualifying wireless devices from a multicast group.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/multicast-groups/{Id}/bulk",
        "responseCode": 204
      },
      "input": {
        "shape": "StartBulkDisassociateWirelessDeviceFromMulticastGroupRequest"
      },
      "name": "StartBulkDisassociateWirelessDeviceFromMulticastGroup",
      "output": {
        "shape": "StartBulkDisassociateWirelessDeviceFromMulticastGroupResponse"
      }
    },
    "StartFuotaTask": {
      "documentation": "<p>Starts a FUOTA task.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/fuota-tasks/{Id}",
        "responseCode": 204
      },
      "input": {
        "shape": "StartFuotaTaskRequest"
      },
      "name": "StartFuotaTask",
      "output": {
        "shape": "StartFuotaTaskResponse"
      }
    },
    "StartMulticastGroupSession": {
      "documentation": "<p>Starts a multicast group session.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/multicast-groups/{Id}/session",
        "responseCode": 204
      },
      "input": {
        "shape": "StartMulticastGroupSessionRequest"
      },
      "name": "StartMulticastGroupSession",
      "output": {
        "shape": "StartMulticastGroupSessionResponse"
      }
    },
    "TagResource": {
      "documentation": "<p>Adds a tag to a resource.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "TooManyTagsException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/tags",
        "responseCode": 204
      },
      "input": {
        "shape": "TagResourceRequest"
      },
      "name": "TagResource",
      "output": {
        "shape": "TagResourceResponse"
      }
    },
    "TestWirelessDevice": {
      "documentation": "<p>Simulates a provisioned device by sending an uplink data payload of <code>Hello</code>.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/wireless-devices/{Id}/test",
        "responseCode": 200
      },
      "input": {
        "shape": "TestWirelessDeviceRequest"
      },
      "name": "TestWirelessDevice",
      "output": {
        "shape": "TestWirelessDeviceResponse"
      }
    },
    "UntagResource": {
      "documentation": "<p>Removes one or more tags from a resource.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/tags",
        "responseCode": 204
      },
      "input": {
        "shape": "UntagResourceRequest"
      },
      "name": "UntagResource",
      "output": {
        "shape": "UntagResourceResponse"
      }
    },
    "UpdateDestination": {
      "documentation": "<p>Updates properties of a destination.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/destinations/{Name}",
        "responseCode": 204
      },
      "input": {
        "shape": "UpdateDestinationRequest"
      },
      "name": "UpdateDestination",
      "output": {
        "shape": "UpdateDestinationResponse"
      }
    },
    "UpdateEventConfigurationByResourceTypes": {
      "documentation": "<p>Update the event configuration based on resource types.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/event-configurations-resource-types",
        "responseCode": 204
      },
      "input": {
        "shape": "UpdateEventConfigurationByResourceTypesRequest"
      },
      "name": "UpdateEventConfigurationByResourceTypes",
      "output": {
        "shape": "UpdateEventConfigurationByResourceTypesResponse"
      }
    },
    "UpdateFuotaTask": {
      "documentation": "<p>Updates properties of a FUOTA task.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/fuota-tasks/{Id}",
        "responseCode": 204
      },
      "input": {
        "shape": "UpdateFuotaTaskRequest"
      },
      "name": "UpdateFuotaTask",
      "output": {
        "shape": "UpdateFuotaTaskResponse"
      }
    },
    "UpdateLogLevelsByResourceTypes": {
      "documentation": "<p>Set default log level, or log levels by resource types. This can be for wireless device log options or wireless gateways log options and is used to control the log messages that'll be displayed in CloudWatch.</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/log-levels",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateLogLevelsByResourceTypesRequest"
      },
      "name": "UpdateLogLevelsByResourceTypes",
      "output": {
        "shape": "UpdateLogLevelsByResourceTypesResponse"
      }
    },
    "UpdateMulticastGroup": {
      "documentation": "<p>Updates properties of a multicast group session.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/multicast-groups/{Id}",
        "responseCode": 204
      },
      "input": {
        "shape": "UpdateMulticastGroupRequest"
      },
      "name": "UpdateMulticastGroup",
      "output": {
        "shape": "UpdateMulticastGroupResponse"
      }
    },
    "UpdateNetworkAnalyzerConfiguration": {
      "documentation": "<p>Update network analyzer configuration.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/network-analyzer-configurations/{ConfigurationName}",
        "responseCode": 204
      },
      "input": {
        "shape": "UpdateNetworkAnalyzerConfigurationRequest"
      },
      "name": "UpdateNetworkAnalyzerConfiguration",
      "output": {
        "shape": "UpdateNetworkAnalyzerConfigurationResponse"
      }
    },
    "UpdatePartnerAccount": {
      "documentation": "<p>Updates properties of a partner account.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/partner-accounts/{PartnerAccountId}",
        "responseCode": 204
      },
      "input": {
        "shape": "UpdatePartnerAccountRequest"
      },
      "name": "UpdatePartnerAccount",
      "output": {
        "shape": "UpdatePartnerAccountResponse"
      }
    },
    "UpdatePosition": {
      "documentation": "<p>Update the position information of a resource.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/positions/{ResourceIdentifier}",
        "responseCode": 204
      },
      "input": {
        "shape": "UpdatePositionRequest"
      },
      "name": "UpdatePosition",
      "output": {
        "shape": "UpdatePositionResponse"
      }
    },
    "UpdateResourceEventConfiguration": {
      "documentation": "<p>Update the event configuration for a particular resource identifier.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/event-configurations/{Identifier}",
        "responseCode": 204
      },
      "input": {
        "shape": "UpdateResourceEventConfigurationRequest"
      },
      "name": "UpdateResourceEventConfiguration",
      "output": {
        "shape": "UpdateResourceEventConfigurationResponse"
      }
    },
    "UpdateWirelessDevice": {
      "documentation": "<p>Updates properties of a wireless device.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/wireless-devices/{Id}",
        "responseCode": 204
      },
      "input": {
        "shape": "UpdateWirelessDeviceRequest"
      },
      "name": "UpdateWirelessDevice",
      "output": {
        "shape": "UpdateWirelessDeviceResponse"
      }
    },
    "UpdateWirelessGateway": {
      "documentation": "<p>Updates properties of a wireless gateway.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/wireless-gateways/{Id}",
        "responseCode": 204
      },
      "input": {
        "shape": "UpdateWirelessGatewayRequest"
      },
      "name": "UpdateWirelessGateway",
      "output": {
        "shape": "UpdateWirelessGatewayResponse"
      }
    }
  },
  "shapes": {
    "AbpV1_0_x": {
      "documentation": "<p>ABP device object for LoRaWAN specification v1.0.x</p>",
      "members": {
        "DevAddr": {
          "documentation": "<p>The DevAddr value.</p>",
          "shape": "DevAddr"
        },
        "FCntStart": {
          "documentation": "<p>The FCnt init value.</p>",
          "shape": "FCntStart"
        },
        "SessionKeys": {
          "documentation": "<p>Session keys for ABP v1.0.x</p>",
          "shape": "SessionKeysAbpV1_0_x"
        }
      },
      "type": "structure"
    },
    "AbpV1_1": {
      "documentation": "<p>ABP device object for LoRaWAN specification v1.1</p>",
      "members": {
        "DevAddr": {
          "documentation": "<p>The DevAddr value.</p>",
          "shape": "DevAddr"
        },
        "FCntStart": {
          "documentation": "<p>The FCnt init value.</p>",
          "shape": "FCntStart"
        },
        "SessionKeys": {
          "documentation": "<p>Session keys for ABP v1.1</p>",
          "shape": "SessionKeysAbpV1_1"
        }
      },
      "type": "structure"
    },
    "AccessDeniedException": {
      "documentation": "<p>User does not have permission to perform this action.</p>",
      "error": {
        "httpStatusCode": 403
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "Message"
        }
      },
      "type": "structure"
    },
    "AccountLinked": {
      "type": "boolean"
    },
    "Accuracy": {
      "documentation": "<p>The accuracy of the estimated position in meters. An empty value indicates that no position data is available. A value of \u20180.0\u2019 value indicates that position data is available. This data corresponds to the position information that you specified instead of the position computed by solver.</p>",
      "members": {
        "HorizontalAccuracy": {
          "documentation": "<p>The horizontal accuracy of the estimated position in meters.</p>",
          "shape": "HorizontalAccuracy"
        },
        "VerticalAccuracy": {
          "documentation": "<p>The vertical accuracy of the estimated position in meters.</p>",
          "shape": "VerticalAccuracy"
        }
      },
      "type": "structure"
    },
    "AckModeRetryDurationSecs": {
      "max": 604800,
      "min": 0,
      "type": "integer"
    },
    "AddGwMetadata": {
      "type": "boolean"
    },
    "AmazonId": {
      "documentation": "<p>The Sidewalk Amazon ID.</p>",
      "max": 2048,
      "type": "string"
    },
    "AmazonResourceName": {
      "max": 1011,
      "min": 1,
      "type": "string"
    },
    "AppEui": {
      "pattern": "[a-fA-F0-9]{16}",
      "type": "string"
    },
    "AppKey": {
      "pattern": "[a-fA-F0-9]{32}",
      "type": "string"
    },
    "AppSKey": {
      "pattern": "[a-fA-F0-9]{32}",
      "type": "string"
    },
    "AppServerPrivateKey": {
      "max": 4096,
      "min": 1,
      "pattern": "[a-fA-F0-9]{64}",
      "sensitive": true,
      "type": "string"
    },
    "AssociateAwsAccountWithPartnerAccountRequest": {
      "members": {
        "ClientRequestToken": {
          "documentation": "<p>Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request. </p>",
          "idempotencyToken": true,
          "shape": "ClientRequestToken"
        },
        "Sidewalk": {
          "documentation": "<p>The Sidewalk account credentials.</p>",
          "shape": "SidewalkAccountInfo"
        },
        "Tags": {
          "documentation": "<p>The tags to attach to the specified resource. Tags are metadata that you can use to manage a resource.</p>",
          "shape": "TagList"
        }
      },
      "required": [
        "Sidewalk"
      ],
      "type": "structure"
    },
    "AssociateAwsAccountWithPartnerAccountResponse": {
      "members": {
        "Arn": {
          "documentation": "<p>The Amazon Resource Name of the resource.</p>",
          "shape": "PartnerAccountArn"
        },
        "Sidewalk": {
          "documentation": "<p>The Sidewalk account credentials.</p>",
          "shape": "SidewalkAccountInfo"
        }
      },
      "type": "structure"
    },
    "AssociateMulticastGroupWithFuotaTaskRequest": {
      "members": {
        "Id": {
          "location": "uri",
          "locationName": "Id",
          "shape": "FuotaTaskId"
        },
        "MulticastGroupId": {
          "shape": "MulticastGroupId"
        }
      },
      "required": [
        "Id",
        "MulticastGroupId"
      ],
      "type": "structure"
    },
    "AssociateMulticastGroupWithFuotaTaskResponse": {
      "members": {},
      "type": "structure"
    },
    "AssociateWirelessDeviceWithFuotaTaskRequest": {
      "members": {
        "Id": {
          "location": "uri",
          "locationName": "Id",
          "shape": "FuotaTaskId"
        },
        "WirelessDeviceId": {
          "shape": "WirelessDeviceId"
        }
      },
      "required": [
        "Id",
        "WirelessDeviceId"
      ],
      "type": "structure"
    },
    "AssociateWirelessDeviceWithFuotaTaskResponse": {
      "members": {},
      "type": "structure"
    },
    "AssociateWirelessDeviceWithMulticastGroupRequest": {
      "members": {
        "Id": {
          "location": "uri",
          "locationName": "Id",
          "shape": "MulticastGroupId"
        },
        "WirelessDeviceId": {
          "shape": "WirelessDeviceId"
        }
      },
      "required": [
        "Id",
        "WirelessDeviceId"
      ],
      "type": "structure"
    },
    "AssociateWirelessDeviceWithMulticastGroupResponse": {
      "members": {},
      "type": "structure"
    },
    "AssociateWirelessDeviceWithThingRequest": {
      "members": {
        "Id": {
          "documentation": "<p>The ID of the resource to update.</p>",
          "location": "uri",
          "locationName": "Id",
          "shape": "WirelessDeviceId"
        },
        "ThingArn": {
          "documentation": "<p>The ARN of the thing to associate with the wireless device.</p>",
          "shape": "ThingArn"
        }
      },
      "required": [
        "Id",
        "ThingArn"
      ],
      "type": "structure"
    },
    "AssociateWirelessDeviceWithThingResponse": {
      "members": {},
      "type": "structure"
    },
    "AssociateWirelessGatewayWithCertificateRequest": {
      "members": {
        "Id": {
          "documentation": "<p>The ID of the resource to update.</p>",
          "location": "uri",
          "locationName": "Id",
          "shape": "WirelessGatewayId"
        },
        "IotCertificateId": {
          "documentation": "<p>The ID of the certificate to associate with the wireless gateway.</p>",
          "shape": "IotCertificateId"
        }
      },
      "required": [
        "Id",
        "IotCertificateId"
      ],
      "type": "structure"
    },
    "AssociateWirelessGatewayWithCertificateResponse": {
      "members": {
        "IotCertificateId": {
          "documentation": "<p>The ID of the certificate associated with the wireless gateway.</p>",
          "shape": "IotCertificateId"
        }
      },
      "type": "structure"
    },
    "AssociateWirelessGatewayWithThingRequest": {
      "members": {
        "Id": {
          "documentation": "<p>The ID of the resource to update.</p>",
          "location": "uri",
          "locationName": "Id",
          "shape": "WirelessGatewayId"
        },
        "ThingArn": {
          "documentation": "<p>The ARN of the thing to associate with the wireless gateway.</p>",
          "shape": "ThingArn"
        }
      },
      "required": [
        "Id",
        "ThingArn"
      ],
      "type": "structure"
    },
    "AssociateWirelessGatewayWithThingResponse": {
      "members": {},
      "type": "structure"
    },
    "AutoCreateTasks": {
      "type": "boolean"
    },
    "BatteryLevel": {
      "documentation": "<p>Sidewalk device battery level.</p>",
      "enum": [
        "normal",
        "low",
        "critical"
      ],
      "type": "string"
    },
    "Beaconing": {
      "documentation": "<p>Beaconing parameters for configuring the wireless gateways.</p>",
      "members": {
        "DataRate": {
          "documentation": "<p>The data rate for gateways that are sending the beacons.</p>",
          "shape": "BeaconingDataRate"
        },
        "Frequencies": {
          "documentation": "<p>The frequency list for the gateways to send the beacons.</p>",
          "shape": "BeaconingFrequencies"
        }
      },
      "type": "structure"
    },
    "BeaconingDataRate": {
      "max": 15,
      "min": 0,
      "type": "integer"
    },
    "BeaconingFrequencies": {
      "max": 10,
      "member": {
        "shape": "BeaconingFrequency"
      },
      "min": 0,
      "type": "list"
    },
    "BeaconingFrequency": {
      "max": 1000000000,
      "min": 100000000,
      "type": "integer"
    },
    "CancelMulticastGroupSessionRequest": {
      "members": {
        "Id": {
          "location": "uri",
          "locationName": "Id",
          "shape": "MulticastGroupId"
        }
      },
      "required": [
        "Id"
      ],
      "type": "structure"
    },
    "CancelMulticastGroupSessionResponse": {
      "members": {},
      "type": "structure"
    },
    "CertificateList": {
      "documentation": "<p>List of sidewalk certificates.</p>",
      "members": {
        "SigningAlg": {
          "documentation": "<p>The certificate chain algorithm provided by sidewalk.</p>",
          "shape": "SigningAlg"
        },
        "Value": {
          "documentation": "<p>The value of the chosen sidewalk certificate.</p>",
          "shape": "CertificateValue"
        }
      },
      "required": [
        "SigningAlg",
        "Value"
      ],
      "type": "structure"
    },
    "CertificatePEM": {
      "max": 4096,
      "min": 1,
      "pattern": "[^-A-Za-z0-9+/=]|=[^=]|={3,}${1,4096}",
      "type": "string"
    },
    "CertificateValue": {
      "documentation": "<p>Certificate value.</p>",
      "max": 2048,
      "min": 0,
      "type": "string"
    },
    "ChannelMask": {
      "max": 2048,
      "type": "string"
    },
    "ClassBTimeout": {
      "max": 1000,
      "min": 0,
      "type": "integer"
    },
    "ClassCTimeout": {
      "max": 1000,
      "min": 0,
      "type": "integer"
    },
    "ClientRequestToken": {
      "documentation": "<p>Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.</p>",
      "max": 64,
      "min": 1,
      "pattern": "^[a-zA-Z0-9-_]+$",
      "type": "string"
    },
    "ConflictException": {
      "documentation": "<p>Adding, updating, or deleting the resource can cause an inconsistent state.</p>",
      "error": {
        "httpStatusCode": 409
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "Message"
        },
        "ResourceId": {
          "documentation": "<p>Id of the resource in the conflicting operation.</p>",
          "shape": "ResourceId"
        },
        "ResourceType": {
          "documentation": "<p>Type of the resource in the conflicting operation.</p>",
          "shape": "ResourceType"
        }
      },
      "type": "structure"
    },
    "ConnectionStatus": {
      "enum": [
        "Connected",
        "Disconnected"
      ],
      "type": "string"
    },
    "ConnectionStatusEventConfiguration": {
      "documentation": "<p>Connection status event configuration object for enabling or disabling topic.</p>",
      "members": {
        "LoRaWAN": {
          "documentation": "<p>Connection status event configuration object for enabling or disabling LoRaWAN related event topics.</p>",
          "shape": "LoRaWANConnectionStatusEventNotificationConfigurations"
        },
        "WirelessGatewayIdEventTopic": {
          "documentation": "<p>Denotes whether the wireless gateway ID connection status event topic is enabled or disabled.</p>",
          "shape": "EventNotificationTopicStatus"
        }
      },
      "type": "structure"
    },
    "ConnectionStatusResourceTypeEventConfiguration": {
      "documentation": "<p>Connection status resource type event configuration object for enabling or disabling topic.</p>",
      "members": {
        "LoRaWAN": {
          "documentation": "<p>Connection status resource type event configuration object for enabling or disabling LoRaWAN related event topics.</p>",
          "shape": "LoRaWANConnectionStatusResourceTypeEventConfiguration"
        }
      },
      "type": "structure"
    },
    "Crc": {
      "max": 4294967295,
      "min": 1,
      "type": "long"
    },
    "CreateDestinationRequest": {
      "members": {
        "ClientRequestToken": {
          "documentation": "<p>Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request. </p>",
          "idempotencyToken": true,
          "shape": "ClientRequestToken"
        },
        "Description": {
          "documentation": "<p>The description of the new resource.</p>",
          "shape": "Description"
        },
        "Expression": {
          "documentation": "<p>The rule name or topic rule to send messages to.</p>",
          "shape": "Expression"
        },
        "ExpressionType": {
          "documentation": "<p>The type of value in <code>Expression</code>.</p>",
          "shape": "ExpressionType"
        },
        "Name": {
          "documentation": "<p>The name of the new resource.</p>",
          "shape": "DestinationName"
        },
        "RoleArn": {
          "documentation": "<p>The ARN of the IAM Role that authorizes the destination.</p>",
          "shape": "RoleArn"
        },
        "Tags": {
          "documentation": "<p>The tags to attach to the new destination. Tags are metadata that you can use to manage a resource.</p>",
          "shape": "TagList"
        }
      },
      "required": [
        "Name",
        "ExpressionType",
        "Expression",
        "RoleArn"
      ],
      "type": "structure"
    },
    "CreateDestinationResponse": {
      "members": {
        "Arn": {
          "documentation": "<p>The Amazon Resource Name of the new resource.</p>",
          "shape": "DestinationArn"
        },
        "Name": {
          "documentation": "<p>The name of the new resource.</p>",
          "shape": "DestinationName"
        }
      },
      "type": "structure"
    },
    "CreateDeviceProfileRequest": {
      "members": {
        "ClientRequestToken": {
          "documentation": "<p>Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request. </p>",
          "idempotencyToken": true,
          "shape": "ClientRequestToken"
        },
        "LoRaWAN": {
          "documentation": "<p>The device profile information to use to create the device profile.</p>",
          "shape": "LoRaWANDeviceProfile"
        },
        "Name": {
          "documentation": "<p>The name of the new resource.</p>",
          "shape": "DeviceProfileName"
        },
        "Tags": {
          "documentation": "<p>The tags to attach to the new device profile. Tags are metadata that you can use to manage a resource.</p>",
          "shape": "TagList"
        }
      },
      "type": "structure"
    },
    "CreateDeviceProfileResponse": {
      "members": {
        "Arn": {
          "documentation": "<p>The Amazon Resource Name of the new resource.</p>",
          "shape": "DeviceProfileArn"
        },
        "Id": {
          "documentation": "<p>The ID of the new device profile.</p>",
          "shape": "DeviceProfileId"
        }
      },
      "type": "structure"
    },
    "CreateFuotaTaskRequest": {
      "members": {
        "ClientRequestToken": {
          "idempotencyToken": true,
          "shape": "ClientRequestToken"
        },
        "Description": {
          "shape": "Description"
        },
        "FirmwareUpdateImage": {
          "shape": "FirmwareUpdateImage"
        },
        "FirmwareUpdateRole": {
          "shape": "FirmwareUpdateRole"
        },
        "LoRaWAN": {
          "shape": "LoRaWANFuotaTask"
        },
        "Name": {
          "shape": "FuotaTaskName"
        },
        "Tags": {
          "shape": "TagList"
        }
      },
      "required": [
        "FirmwareUpdateImage",
        "FirmwareUpdateRole"
      ],
      "type": "structure"
    },
    "CreateFuotaTaskResponse": {
      "members": {
        "Arn": {
          "shape": "FuotaTaskArn"
        },
        "Id": {
          "shape": "FuotaTaskId"
        }
      },
      "type": "structure"
    },
    "CreateMulticastGroupRequest": {
      "members": {
        "ClientRequestToken": {
          "documentation": "<p>Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request. </p>",
          "idempotencyToken": true,
          "shape": "ClientRequestToken"
        },
        "Description": {
          "documentation": "<p>The description of the multicast group.</p>",
          "shape": "Description"
        },
        "LoRaWAN": {
          "shape": "LoRaWANMulticast"
        },
        "Name": {
          "shape": "MulticastGroupName"
        },
        "Tags": {
          "shape": "TagList"
        }
      },
      "required": [
        "LoRaWAN"
      ],
      "type": "structure"
    },
    "CreateMulticastGroupResponse": {
      "members": {
        "Arn": {
          "shape": "MulticastGroupArn"
        },
        "Id": {
          "shape": "MulticastGroupId"
        }
      },
      "type": "structure"
    },
    "CreateNetworkAnalyzerConfigurationRequest": {
      "members": {
        "ClientRequestToken": {
          "idempotencyToken": true,
          "shape": "ClientRequestToken"
        },
        "Description": {
          "shape": "Description"
        },
        "Name": {
          "shape": "NetworkAnalyzerConfigurationName"
        },
        "Tags": {
          "shape": "TagList"
        },
        "TraceContent": {
          "shape": "TraceContent"
        },
        "WirelessDevices": {
          "documentation": "<p>Wireless device resources to add to the network analyzer configuration. Provide the <code>WirelessDeviceId</code> of the resource to add in the input array.</p>",
          "shape": "WirelessDeviceList"
        },
        "WirelessGateways": {
          "documentation": "<p>Wireless gateway resources to add to the network analyzer configuration. Provide the <code>WirelessGatewayId</code> of the resource to add in the input array.</p>",
          "shape": "WirelessGatewayList"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "CreateNetworkAnalyzerConfigurationResponse": {
      "members": {
        "Arn": {
          "documentation": "<p>The Amazon Resource Name of the new resource.</p>",
          "shape": "NetworkAnalyzerConfigurationArn"
        },
        "Name": {
          "shape": "NetworkAnalyzerConfigurationName"
        }
      },
      "type": "structure"
    },
    "CreateServiceProfileRequest": {
      "members": {
        "ClientRequestToken": {
          "documentation": "<p>Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request. </p>",
          "idempotencyToken": true,
          "shape": "ClientRequestToken"
        },
        "LoRaWAN": {
          "documentation": "<p>The service profile information to use to create the service profile.</p>",
          "shape": "LoRaWANServiceProfile"
        },
        "Name": {
          "documentation": "<p>The name of the new resource.</p>",
          "shape": "ServiceProfileName"
        },
        "Tags": {
          "documentation": "<p>The tags to attach to the new service profile. Tags are metadata that you can use to manage a resource.</p>",
          "shape": "TagList"
        }
      },
      "type": "structure"
    },
    "CreateServiceProfileResponse": {
      "members": {
        "Arn": {
          "documentation": "<p>The Amazon Resource Name of the new resource.</p>",
          "shape": "ServiceProfileArn"
        },
        "Id": {
          "documentation": "<p>The ID of the new service profile.</p>",
          "shape": "ServiceProfileId"
        }
      },
      "type": "structure"
    },
    "CreateWirelessDeviceRequest": {
      "members": {
        "ClientRequestToken": {
          "documentation": "<p>Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request. </p>",
          "idempotencyToken": true,
          "shape": "ClientRequestToken"
        },
        "Description": {
          "documentation": "<p>The description of the new resource.</p>",
          "shape": "Description"
        },
        "DestinationName": {
          "documentation": "<p>The name of the destination to assign to the new wireless device.</p>",
          "shape": "DestinationName"
        },
        "LoRaWAN": {
          "documentation": "<p>The device configuration information to use to create the wireless device.</p>",
          "shape": "LoRaWANDevice"
        },
        "Name": {
          "documentation": "<p>The name of the new resource.</p>",
          "shape": "WirelessDeviceName"
        },
        "Tags": {
          "documentation": "<p>The tags to attach to the new wireless device. Tags are metadata that you can use to manage a resource.</p>",
          "shape": "TagList"
        },
        "Type": {
          "documentation": "<p>The wireless device type.</p>",
          "shape": "WirelessDeviceType"
        }
      },
      "required": [
        "Type",
        "DestinationName"
      ],
      "type": "structure"
    },
    "CreateWirelessDeviceResponse": {
      "members": {
        "Arn": {
          "documentation": "<p>The Amazon Resource Name of the new resource.</p>",
          "shape": "WirelessDeviceArn"
        },
        "Id": {
          "documentation": "<p>The ID of the new wireless device.</p>",
          "shape": "WirelessDeviceId"
        }
      },
      "type": "structure"
    },
    "CreateWirelessGatewayRequest": {
      "members": {
        "ClientRequestToken": {
          "documentation": "<p>Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request. </p>",
          "idempotencyToken": true,
          "shape": "ClientRequestToken"
        },
        "Description": {
          "documentation": "<p>The description of the new resource.</p>",
          "shape": "Description"
        },
        "LoRaWAN": {
          "documentation": "<p>The gateway configuration information to use to create the wireless gateway.</p>",
          "shape": "LoRaWANGateway"
        },
        "Name": {
          "documentation": "<p>The name of the new resource.</p>",
          "shape": "WirelessGatewayName"
        },
        "Tags": {
          "documentation": "<p>The tags to attach to the new wireless gateway. Tags are metadata that you can use to manage a resource.</p>",
          "shape": "TagList"
        }
      },
      "required": [
        "LoRaWAN"
      ],
      "type": "structure"
    },
    "CreateWirelessGatewayResponse": {
      "members": {
        "Arn": {
          "documentation": "<p>The Amazon Resource Name of the new resource.</p>",
          "shape": "WirelessGatewayArn"
        },
        "Id": {
          "documentation": "<p>The ID of the new wireless gateway.</p>",
          "shape": "WirelessDeviceId"
        }
      },
      "type": "structure"
    },
    "CreateWirelessGatewayTaskDefinitionRequest": {
      "members": {
        "AutoCreateTasks": {
          "documentation": "<p>Whether to automatically create tasks using this task definition for all gateways with the specified current version. If <code>false</code>, the task must me created by calling <code>CreateWirelessGatewayTask</code>.</p>",
          "shape": "AutoCreateTasks"
        },
        "ClientRequestToken": {
          "documentation": "<p>Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request. </p>",
          "idempotencyToken": true,
          "shape": "ClientRequestToken"
        },
        "Name": {
          "documentation": "<p>The name of the new resource.</p>",
          "shape": "WirelessGatewayTaskName"
        },
        "Tags": {
          "documentation": "<p>The tags to attach to the specified resource. Tags are metadata that you can use to manage a resource.</p>",
          "shape": "TagList"
        },
        "Update": {
          "documentation": "<p>Information about the gateways to update.</p>",
          "shape": "UpdateWirelessGatewayTaskCreate"
        }
      },
      "required": [
        "AutoCreateTasks"
      ],
      "type": "structure"
    },
    "CreateWirelessGatewayTaskDefinitionResponse": {
      "members": {
        "Arn": {
          "documentation": "<p>The Amazon Resource Name of the resource.</p>",
          "shape": "WirelessGatewayTaskDefinitionArn"
        },
        "Id": {
          "documentation": "<p>The ID of the new wireless gateway task definition.</p>",
          "shape": "WirelessGatewayTaskDefinitionId"
        }
      },
      "type": "structure"
    },
    "CreateWirelessGatewayTaskRequest": {
      "members": {
        "Id": {
          "documentation": "<p>The ID of the resource to update.</p>",
          "location": "uri",
          "locationName": "Id",
          "shape": "WirelessGatewayId"
        },
        "WirelessGatewayTaskDefinitionId": {
          "documentation": "<p>The ID of the WirelessGatewayTaskDefinition.</p>",
          "shape": "WirelessGatewayTaskDefinitionId"
        }
      },
      "required": [
        "Id",
        "WirelessGatewayTaskDefinitionId"
      ],
      "type": "structure"
    },
    "CreateWirelessGatewayTaskResponse": {
      "members": {
        "Status": {
          "documentation": "<p>The status of the request.</p>",
          "shape": "WirelessGatewayTaskStatus"
        },
        "WirelessGatewayTaskDefinitionId": {
          "documentation": "<p>The ID of the WirelessGatewayTaskDefinition.</p>",
          "shape": "WirelessGatewayTaskDefinitionId"
        }
      },
      "type": "structure"
    },
    "CreatedAt": {
      "documentation": "<p>Created at timestamp for the resource.</p>",
      "type": "timestamp"
    },
    "DeleteDestinationRequest": {
      "members": {
        "Name": {
          "documentation": "<p>The name of the resource to delete.</p>",
          "location": "uri",
          "locationName": "Name",
          "shape": "DestinationName"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "DeleteDestinationResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteDeviceProfileRequest": {
      "members": {
        "Id": {
          "documentation": "<p>The ID of the resource to delete.</p>",
          "location": "uri",
          "locationName": "Id",
          "shape": "DeviceProfileId"
        }
      },
      "required": [
        "Id"
      ],
      "type": "structure"
    },
    "DeleteDeviceProfileResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteFuotaTaskRequest": {
      "members": {
        "Id": {
          "location": "uri",
          "locationName": "Id",
          "shape": "FuotaTaskId"
        }
      },
      "required": [
        "Id"
      ],
      "type": "structure"
    },
    "DeleteFuotaTaskResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteMulticastGroupRequest": {
      "members": {
        "Id": {
          "location": "uri",
          "locationName": "Id",
          "shape": "MulticastGroupId"
        }
      },
      "required": [
        "Id"
      ],
      "type": "structure"
    },
    "DeleteMulticastGroupResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteNetworkAnalyzerConfigurationRequest": {
      "members": {
        "ConfigurationName": {
          "location": "uri",
          "locationName": "ConfigurationName",
          "shape": "NetworkAnalyzerConfigurationName"
        }
      },
      "required": [
        "ConfigurationName"
      ],
      "type": "structure"
    },
    "DeleteNetworkAnalyzerConfigurationResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteQueuedMessagesRequest": {
      "members": {
        "Id": {
          "documentation": "<p>The ID of a given wireless device for which downlink messages will be deleted.</p>",
          "location": "uri",
          "locationName": "Id",
          "shape": "WirelessDeviceId"
        },
        "MessageId": {
          "documentation": "<p>If message ID is <code>\"*\"</code>, it cleares the entire downlink queue for a given device, specified by the wireless device ID. Otherwise, the downlink message with the specified message ID will be deleted.</p>",
          "location": "querystring",
          "locationName": "messageId",
          "shape": "MessageId"
        },
        "WirelessDeviceType": {
          "documentation": "<p>The wireless device type, which can be either Sidewalk or LoRaWAN.</p>",
          "location": "querystring",
          "locationName": "WirelessDeviceType",
          "shape": "WirelessDeviceType"
        }
      },
      "required": [
        "Id",
        "MessageId"
      ],
      "type": "structure"
    },
    "DeleteQueuedMessagesResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteServiceProfileRequest": {
      "members": {
        "Id": {
          "documentation": "<p>The ID of the resource to delete.</p>",
          "location": "uri",
          "locationName": "Id",
          "shape": "ServiceProfileId"
        }
      },
      "required": [
        "Id"
      ],
      "type": "structure"
    },
    "DeleteServiceProfileResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteWirelessDeviceRequest": {
      "members": {
        "Id": {
          "documentation": "<p>The ID of the resource to delete.</p>",
          "location": "uri",
          "locationName": "Id",
          "shape": "WirelessDeviceId"
        }
      },
      "required": [
        "Id"
      ],
      "type": "structure"
    },
    "DeleteWirelessDeviceResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteWirelessGatewayRequest": {
      "members": {
        "Id": {
          "documentation": "<p>The ID of the resource to delete.</p>",
          "location": "uri",
          "locationName": "Id",
          "shape": "WirelessGatewayId"
        }
      },
      "required": [
        "Id"
      ],
      "type": "structure"
    },
    "DeleteWirelessGatewayResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteWirelessGatewayTaskDefinitionRequest": {
      "members": {
        "Id": {
          "documentation": "<p>The ID of the resource to delete.</p>",
          "location": "uri",
          "locationName": "Id",
          "shape": "WirelessGatewayTaskDefinitionId"
        }
      },
      "required": [
        "Id"
      ],
      "type": "structure"
    },
    "DeleteWirelessGatewayTaskDefinitionResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteWirelessGatewayTaskRequest": {
      "members": {
        "Id": {
          "documentation": "<p>The ID of the resource to delete.</p>",
          "location": "uri",
          "locationName": "Id",
          "shape": "WirelessGatewayId"
        }
      },
      "required": [
        "Id"
      ],
      "type": "structure"
    },
    "DeleteWirelessGatewayTaskResponse": {
      "members": {},
      "type": "structure"
    },
    "Description": {
      "documentation": "<p>The description of the new resource.</p>",
      "max": 2048,
      "type": "string"
    },
    "DestinationArn": {
      "type": "string"
    },
    "DestinationList": {
      "member": {
        "shape": "Destinations"
      },
      "type": "list"
    },
    "DestinationName": {
      "max": 128,
      "pattern": "[a-zA-Z0-9-_]+",
      "type": "string"
    },
    "Destinations": {
      "documentation": "<p>Describes a destination.</p>",
      "members": {
        "Arn": {
          "documentation": "<p>The Amazon Resource Name of the resource.</p>",
          "shape": "DestinationArn"
        },
        "Description": {
          "documentation": "<p>The description of the resource.</p>",
          "shape": "Description"
        },
        "Expression": {
          "documentation": "<p>The rule name or topic rule to send messages to.</p>",
          "shape": "Expression"
        },
        "ExpressionType": {
          "documentation": "<p>The type of value in <code>Expression</code>.</p>",
          "shape": "ExpressionType"
        },
        "Name": {
          "documentation": "<p>The name of the resource.</p>",
          "shape": "DestinationName"
        },
        "RoleArn": {
          "documentation": "<p>The ARN of the IAM Role that authorizes the destination.</p>",
          "shape": "RoleArn"
        }
      },
      "type": "structure"
    },
    "DevAddr": {
      "pattern": "[a-fA-F0-9]{8}",
      "type": "string"
    },
    "DevEui": {
      "pattern": "[a-fA-F0-9]{16}",
      "type": "string"
    },
    "DevStatusReqFreq": {
      "max": 2147483647,
      "min": 0,
      "type": "integer"
    },
    "DeviceCertificateList": {
      "documentation": "<p>List of device certificate chain.</p>",
      "member": {
        "shape": "CertificateList"
      },
      "type": "list"
    },
    "DeviceProfile": {
      "documentation": "<p>Describes a device profile.</p>",
      "members": {
        "Arn": {
          "documentation": "<p>The Amazon Resource Name of the resource.</p>",
          "shape": "DeviceProfileArn"
        },
        "Id": {
          "documentation": "<p>The ID of the device profile.</p>",
          "shape": "DeviceProfileId"
        },
        "Name": {
          "documentation": "<p>The name of the resource.</p>",
          "shape": "DeviceProfileName"
        }
      },
      "type": "structure"
    },
    "DeviceProfileArn": {
      "type": "string"
    },
    "DeviceProfileId": {
      "max": 256,
      "type": "string"
    },
    "DeviceProfileList": {
      "member": {
        "shape": "DeviceProfile"
      },
      "type": "list"
    },
    "DeviceProfileName": {
      "max": 256,
      "type": "string"
    },
    "DeviceRegistrationStateEventConfiguration": {
      "documentation": "<p>Device registration state event configuration object for enabling and disabling relevant topics.</p>",
      "members": {
        "Sidewalk": {
          "documentation": "<p>Device registration state event configuration object for enabling or disabling Sidewalk related event topics.</p>",
          "shape": "SidewalkEventNotificationConfigurations"
        },
        "WirelessDeviceIdEventTopic": {
          "documentation": "<p>Denotes whether the wireless device ID device registration state event topic is enabled or disabled.</p>",
          "shape": "EventNotificationTopicStatus"
        }
      },
      "type": "structure"
    },
    "DeviceRegistrationStateResourceTypeEventConfiguration": {
      "documentation": "<p>Device registration state resource type event configuration object for enabling or disabling topic.</p>",
      "members": {
        "Sidewalk": {
          "documentation": "<p>Device registration resource type state event configuration object for enabling or disabling Sidewalk related event topics.</p>",
          "shape": "SidewalkResourceTypeEventConfiguration"
        }
      },
      "type": "structure"
    },
    "DeviceState": {
      "documentation": "<p>Device state defines the device status of sidewalk device.</p>",
      "enum": [
        "Provisioned",
        "RegisteredNotSeen",
        "RegisteredReachable",
        "RegisteredUnreachable"
      ],
      "type": "string"
    },
    "DisassociateAwsAccountFromPartnerAccountRequest": {
      "members": {
        "PartnerAccountId": {
          "documentation": "<p>The partner account ID to disassociate from the AWS account.</p>",
          "location": "uri",
          "locationName": "PartnerAccountId",
          "shape": "PartnerAccountId"
        },
        "PartnerType": {
          "documentation": "<p>The partner type.</p>",
          "location": "querystring",
          "locationName": "partnerType",
          "shape": "PartnerType"
        }
      },
      "required": [
        "PartnerAccountId",
        "PartnerType"
      ],
      "type": "structure"
    },
    "DisassociateAwsAccountFromPartnerAccountResponse": {
      "members": {},
      "type": "structure"
    },
    "DisassociateMulticastGroupFromFuotaTaskRequest": {
      "members": {
        "Id": {
          "location": "uri",
          "locationName": "Id",
          "shape": "FuotaTaskId"
        },
        "MulticastGroupId": {
          "location": "uri",
          "locationName": "MulticastGroupId",
          "shape": "MulticastGroupId"
        }
      },
      "required": [
        "Id",
        "MulticastGroupId"
      ],
      "type": "structure"
    },
    "DisassociateMulticastGroupFromFuotaTaskResponse": {
      "members": {},
      "type": "structure"
    },
    "DisassociateWirelessDeviceFromFuotaTaskRequest": {
      "members": {
        "Id": {
          "location": "uri",
          "locationName": "Id",
          "shape": "FuotaTaskId"
        },
        "WirelessDeviceId": {
          "location": "uri",
          "locationName": "WirelessDeviceId",
          "shape": "WirelessDeviceId"
        }
      },
      "required": [
        "Id",
        "WirelessDeviceId"
      ],
      "type": "structure"
    },
    "DisassociateWirelessDeviceFromFuotaTaskResponse": {
      "members": {},
      "type": "structure"
    },
    "DisassociateWirelessDeviceFromMulticastGroupRequest": {
      "members": {
        "Id": {
          "location": "uri",
          "locationName": "Id",
          "shape": "MulticastGroupId"
        },
        "WirelessDeviceId": {
          "location": "uri",
          "locationName": "WirelessDeviceId",
          "shape": "WirelessDeviceId"
        }
      },
      "required": [
        "Id",
        "WirelessDeviceId"
      ],
      "type": "structure"
    },
    "DisassociateWirelessDeviceFromMulticastGroupResponse": {
      "members": {},
      "type": "structure"
    },
    "DisassociateWirelessDeviceFromThingRequest": {
      "members": {
        "Id": {
          "documentation": "<p>The ID of the resource to update.</p>",
          "location": "uri",
          "locationName": "Id",
          "shape": "WirelessDeviceId"
        }
      },
      "required": [
        "Id"
      ],
      "type": "structure"
    },
    "DisassociateWirelessDeviceFromThingResponse": {
      "members": {},
      "type": "structure"
    },
    "DisassociateWirelessGatewayFromCertificateRequest": {
      "members": {
        "Id": {
          "documentation": "<p>The ID of the resource to update.</p>",
          "location": "uri",
          "locationName": "Id",
          "shape": "WirelessGatewayId"
        }
      },
      "required": [
        "Id"
      ],
      "type": "structure"
    },
    "DisassociateWirelessGatewayFromCertificateResponse": {
      "members": {},
      "type": "structure"
    },
    "DisassociateWirelessGatewayFromThingRequest": {
      "members": {
        "Id": {
          "documentation": "<p>The ID of the resource to update.</p>",
          "location": "uri",
          "locationName": "Id",
          "shape": "WirelessGatewayId"
        }
      },
      "required": [
        "Id"
      ],
      "type": "structure"
    },
    "DisassociateWirelessGatewayFromThingResponse": {
      "members": {},
      "type": "structure"
    },
    "DlBucketSize": {
      "max": 2147483647,
      "min": 0,
      "type": "integer"
    },
    "DlClass": {
      "documentation": "<p>DlClass for LoRaWAM, valid values are ClassB and ClassC.</p>",
      "enum": [
        "ClassB",
        "ClassC"
      ],
      "max": 256,
      "type": "string"
    },
    "DlDr": {
      "documentation": "<p>Downlink data rate.</p>",
      "max": 15,
      "min": 0,
      "type": "integer"
    },
    "DlFreq": {
      "documentation": "<p>Downlink frequency.</p>",
      "max": 1000000000,
      "min": 100000000,
      "type": "integer"
    },
    "DlRate": {
      "max": 2147483647,
      "min": 0,
      "type": "integer"
    },
    "DlRatePolicy": {
      "max": 256,
      "type": "string"
    },
    "Double": {
      "type": "double"
    },
    "DownlinkFrequency": {
      "max": 1000000000,
      "min": 100000000,
      "type": "integer"
    },
    "DownlinkMode": {
      "enum": [
        "SEQUENTIAL",
        "CONCURRENT",
        "USING_UPLINK_GATEWAY"
      ],
      "type": "string"
    },
    "DownlinkQueueMessage": {
      "documentation": "<p>The message in the downlink queue.</p>",
      "members": {
        "LoRaWAN": {
          "shape": "LoRaWANSendDataToDevice"
        },
        "MessageId": {
          "documentation": "<p> The message ID assigned by IoT Wireless to each downlink message, which helps identify the message.</p>",
          "shape": "MessageId"
        },
        "ReceivedAt": {
          "documentation": "<p>The time at which Iot Wireless received the downlink message.</p>",
          "shape": "ISODateTimeString"
        },
        "TransmitMode": {
          "documentation": "<p>The transmit mode to use for sending data to the wireless device. This can be <code>0</code> for UM (unacknowledge mode) or <code>1</code> for AM (acknowledge mode).</p>",
          "shape": "TransmitMode"
        }
      },
      "type": "structure"
    },
    "DownlinkQueueMessagesList": {
      "member": {
        "shape": "DownlinkQueueMessage"
      },
      "type": "list"
    },
    "DrMax": {
      "max": 15,
      "min": 0,
      "type": "integer"
    },
    "DrMaxBox": {
      "max": 15,
      "min": 0,
      "type": "integer"
    },
    "DrMin": {
      "max": 15,
      "min": 0,
      "type": "integer"
    },
    "DrMinBox": {
      "max": 15,
      "min": 0,
      "type": "integer"
    },
    "EndPoint": {
      "max": 256,
      "min": 1,
      "type": "string"
    },
    "Event": {
      "documentation": "<p>Sidewalk device status notification.</p>",
      "enum": [
        "discovered",
        "lost",
        "ack",
        "nack",
        "passthrough"
      ],
      "type": "string"
    },
    "EventConfigurationItem": {
      "documentation": "<p>Event configuration object for a single resource.</p>",
      "members": {
        "Events": {
          "shape": "EventNotificationItemConfigurations"
        },
        "Identifier": {
          "documentation": "<p>Resource identifier opted in for event messaging.</p>",
          "shape": "Identifier"
        },
        "IdentifierType": {
          "documentation": "<p>Identifier type of the particular resource identifier for event configuration.</p>",
          "shape": "IdentifierType"
        },
        "PartnerType": {
          "documentation": "<p>Partner type of the resource if the identifier type is PartnerAccountId.</p>",
          "shape": "EventNotificationPartnerType"
        }
      },
      "type": "structure"
    },
    "EventConfigurationsList": {
      "member": {
        "shape": "EventConfigurationItem"
      },
      "type": "list"
    },
    "EventNotificationItemConfigurations": {
      "documentation": "<p>Object of all event configurations and the status of the event topics.</p>",
      "members": {
        "ConnectionStatus": {
          "documentation": "<p>Connection status event configuration for an event configuration item.</p>",
          "shape": "ConnectionStatusEventConfiguration"
        },
        "DeviceRegistrationState": {
          "documentation": "<p>Device registration state event configuration for an event configuration item.</p>",
          "shape": "DeviceRegistrationStateEventConfiguration"
        },
        "Join": {
          "documentation": "<p>Join event configuration for an event configuration item.</p>",
          "shape": "JoinEventConfiguration"
        },
        "MessageDeliveryStatus": {
          "documentation": "<p>Message delivery status event configuration for an event configuration item.</p>",
          "shape": "MessageDeliveryStatusEventConfiguration"
        },
        "Proximity": {
          "documentation": "<p>Proximity event configuration for an event configuration item.</p>",
          "shape": "ProximityEventConfiguration"
        }
      },
      "type": "structure"
    },
    "EventNotificationPartnerType": {
      "enum": [
        "Sidewalk"
      ],
      "type": "string"
    },
    "EventNotificationResourceType": {
      "enum": [
        "SidewalkAccount",
        "WirelessDevice",
        "WirelessGateway"
      ],
      "type": "string"
    },
    "EventNotificationTopicStatus": {
      "enum": [
        "Enabled",
        "Disabled"
      ],
      "type": "string"
    },
    "Expression": {
      "max": 2048,
      "type": "string"
    },
    "ExpressionType": {
      "enum": [
        "RuleName",
        "MqttTopic"
      ],
      "type": "string"
    },
    "FCntStart": {
      "documentation": "<p>The FCnt init value.</p>",
      "max": 65535,
      "min": 0,
      "type": "integer"
    },
    "FNwkSIntKey": {
      "pattern": "[a-fA-F0-9]{32}",
      "type": "string"
    },
    "FPort": {
      "documentation": "<p>The Fport value.</p>",
      "max": 223,
      "min": 1,
      "type": "integer"
    },
    "FPorts": {
      "documentation": "<p>List of FPort assigned for different LoRaWAN application packages to use</p>",
      "members": {
        "ClockSync": {
          "shape": "FPort"
        },
        "Fuota": {
          "shape": "FPort"
        },
        "Multicast": {
          "shape": "FPort"
        },
        "Positioning": {
          "documentation": "<p>FPort values for the GNSS, stream, and ClockSync functions of the positioning information.</p>",
          "shape": "Positioning"
        }
      },
      "type": "structure"
    },
    "FactoryPresetFreqsList": {
      "max": 20,
      "member": {
        "shape": "PresetFreq"
      },
      "min": 0,
      "type": "list"
    },
    "Fingerprint": {
      "max": 64,
      "min": 64,
      "pattern": "[a-fA-F0-9]{64}",
      "sensitive": true,
      "type": "string"
    },
    "FirmwareUpdateImage": {
      "documentation": "<p>The S3 URI points to a firmware update image that is to be used with a FUOTA task.</p>",
      "max": 4096,
      "min": 1,
      "type": "string"
    },
    "FirmwareUpdateRole": {
      "documentation": "<p>The firmware update role that is to be used with a FUOTA task.</p>",
      "max": 2048,
      "min": 1,
      "type": "string"
    },
    "FuotaDeviceStatus": {
      "documentation": "<p>The status of a wireless device in a FUOTA task.</p>",
      "enum": [
        "Initial",
        "Package_Not_Supported",
        "FragAlgo_unsupported",
        "Not_enough_memory",
        "FragIndex_unsupported",
        "Wrong_descriptor",
        "SessionCnt_replay",
        "MissingFrag",
        "MemoryError",
        "MICError",
        "Successful"
      ],
      "type": "string"
    },
    "FuotaTask": {
      "documentation": "<p>A FUOTA task.</p>",
      "members": {
        "Arn": {
          "shape": "FuotaTaskArn"
        },
        "Id": {
          "shape": "FuotaTaskId"
        },
        "Name": {
          "shape": "FuotaTaskName"
        }
      },
      "type": "structure"
    },
    "FuotaTaskArn": {
      "documentation": "<p>The arn of a FUOTA task.</p>",
      "max": 128,
      "type": "string"
    },
    "FuotaTaskId": {
      "documentation": "<p>The ID of a FUOTA task.</p>",
      "max": 256,
      "type": "string"
    },
    "FuotaTaskList": {
      "documentation": "<p>Lists the FUOTA tasks registered to your AWS account.</p>",
      "member": {
        "shape": "FuotaTask"
      },
      "type": "list"
    },
    "FuotaTaskName": {
      "documentation": "<p>The name of a FUOTA task.</p>",
      "max": 256,
      "type": "string"
    },
    "FuotaTaskStatus": {
      "documentation": "<p>The status of a FUOTA task.</p>",
      "enum": [
        "Pending",
        "FuotaSession_Waiting",
        "In_FuotaSession",
        "FuotaDone",
        "Delete_Waiting"
      ],
      "type": "string"
    },
    "GatewayEui": {
      "pattern": "^(([0-9A-Fa-f]{2}-){7}|([0-9A-Fa-f]{2}:){7}|([0-9A-Fa-f]{2}\\s){7}|([0-9A-Fa-f]{2}){7})([0-9A-Fa-f]{2})$",
      "type": "string"
    },
    "GatewayList": {
      "member": {
        "shape": "GatewayListItem"
      },
      "type": "list"
    },
    "GatewayListItem": {
      "documentation": "<p>Gateway list item object that specifies the frequency and list of gateways for which the downlink message should be sent.</p>",
      "members": {
        "DownlinkFrequency": {
          "documentation": "<p>The frequency to use for the gateways when sending a downlink message to the wireless device.</p>",
          "shape": "DownlinkFrequency"
        },
        "GatewayId": {
          "documentation": "<p>The ID of the wireless gateways that you want to add to the list of gateways when sending downlink messages.</p>",
          "shape": "WirelessGatewayId"
        }
      },
      "required": [
        "GatewayId",
        "DownlinkFrequency"
      ],
      "type": "structure"
    },
    "GenAppKey": {
      "pattern": "[a-fA-F0-9]{32}",
      "type": "string"
    },
    "GetDestinationRequest": {
      "members": {
        "Name": {
          "documentation": "<p>The name of the resource to get.</p>",
          "location": "uri",
          "locationName": "Name",
          "shape": "DestinationName"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "GetDestinationResponse": {
      "members": {
        "Arn": {
          "documentation": "<p>The Amazon Resource Name of the resource.</p>",
          "shape": "DestinationArn"
        },
        "Description": {
          "documentation": "<p>The description of the resource.</p>",
          "shape": "Description"
        },
        "Expression": {
          "documentation": "<p>The rule name or topic rule to send messages to.</p>",
          "shape": "Expression"
        },
        "ExpressionType": {
          "documentation": "<p>The type of value in <code>Expression</code>.</p>",
          "shape": "ExpressionType"
        },
        "Name": {
          "documentation": "<p>The name of the resource.</p>",
          "shape": "DestinationName"
        },
        "RoleArn": {
          "documentation": "<p>The ARN of the IAM Role that authorizes the destination.</p>",
          "shape": "RoleArn"
        }
      },
      "type": "structure"
    },
    "GetDeviceProfileRequest": {
      "members": {
        "Id": {
          "documentation": "<p>The ID of the resource to get.</p>",
          "location": "uri",
          "locationName": "Id",
          "shape": "DeviceProfileId"
        }
      },
      "required": [
        "Id"
      ],
      "type": "structure"
    },
    "GetDeviceProfileResponse": {
      "members": {
        "Arn": {
          "documentation": "<p>The Amazon Resource Name of the resource.</p>",
          "shape": "DeviceProfileArn"
        },
        "Id": {
          "documentation": "<p>The ID of the device profile.</p>",
          "shape": "DeviceProfileId"
        },
        "LoRaWAN": {
          "documentation": "<p>Information about the device profile.</p>",
          "shape": "LoRaWANDeviceProfile"
        },
        "Name": {
          "documentation": "<p>The name of the resource.</p>",
          "shape": "DeviceProfileName"
        }
      },
      "type": "structure"
    },
    "GetEventConfigurationByResourceTypesRequest": {
      "members": {},
      "type": "structure"
    },
    "GetEventConfigurationByResourceTypesResponse": {
      "members": {
        "ConnectionStatus": {
          "documentation": "<p>Resource type event configuration for the connection status event.</p>",
          "shape": "ConnectionStatusResourceTypeEventConfiguration"
        },
        "DeviceRegistrationState": {
          "documentation": "<p>Resource type event configuration for the device registration state event.</p>",
          "shape": "DeviceRegistrationStateResourceTypeEventConfiguration"
        },
        "Join": {
          "documentation": "<p>Resource type event configuration for the join event.</p>",
          "shape": "JoinResourceTypeEventConfiguration"
        },
        "MessageDeliveryStatus": {
          "documentation": "<p>Resource type event configuration object for the message delivery status event.</p>",
          "shape": "MessageDeliveryStatusResourceTypeEventConfiguration"
        },
        "Proximity": {
          "documentation": "<p>Resource type event configuration for the proximity event.</p>",
          "shape": "ProximityResourceTypeEventConfiguration"
        }
      },
      "type": "structure"
    },
    "GetFuotaTaskRequest": {
      "members": {
        "Id": {
          "location": "uri",
          "locationName": "Id",
          "shape": "FuotaTaskId"
        }
      },
      "required": [
        "Id"
      ],
      "type": "structure"
    },
    "GetFuotaTaskResponse": {
      "members": {
        "Arn": {
          "shape": "FuotaTaskArn"
        },
        "CreatedAt": {
          "shape": "CreatedAt"
        },
        "Description": {
          "shape": "Description"
        },
        "FirmwareUpdateImage": {
          "shape": "FirmwareUpdateImage"
        },
        "FirmwareUpdateRole": {
          "shape": "FirmwareUpdateRole"
        },
        "Id": {
          "shape": "FuotaTaskId"
        },
        "LoRaWAN": {
          "shape": "LoRaWANFuotaTaskGetInfo"
        },
        "Name": {
          "shape": "FuotaTaskName"
        },
        "Status": {
          "shape": "FuotaTaskStatus"
        }
      },
      "type": "structure"
    },
    "GetLogLevelsByResourceTypesRequest": {
      "members": {},
      "type": "structure"
    },
    "GetLogLevelsByResourceTypesResponse": {
      "members": {
        "DefaultLogLevel": {
          "shape": "LogLevel"
        },
        "WirelessDeviceLogOptions": {
          "shape": "WirelessDeviceLogOptionList"
        },
        "WirelessGatewayLogOptions": {
          "shape": "WirelessGatewayLogOptionList"
        }
      },
      "type": "structure"
    },
    "GetMulticastGroupRequest": {
      "members": {
        "Id": {
          "location": "uri",
          "locationName": "Id",
          "shape": "MulticastGroupId"
        }
      },
      "required": [
        "Id"
      ],
      "type": "structure"
    },
    "GetMulticastGroupResponse": {
      "members": {
        "Arn": {
          "shape": "MulticastGroupArn"
        },
        "CreatedAt": {
          "shape": "CreatedAt"
        },
        "Description": {
          "shape": "Description"
        },
        "Id": {
          "shape": "MulticastGroupId"
        },
        "LoRaWAN": {
          "shape": "LoRaWANMulticastGet"
        },
        "Name": {
          "shape": "MulticastGroupName"
        },
        "Status": {
          "shape": "MulticastGroupStatus"
        }
      },
      "type": "structure"
    },
    "GetMulticastGroupSessionRequest": {
      "members": {
        "Id": {
          "location": "uri",
          "locationName": "Id",
          "shape": "MulticastGroupId"
        }
      },
      "required": [
        "Id"
      ],
      "type": "structure"
    },
    "GetMulticastGroupSessionResponse": {
      "members": {
        "LoRaWAN": {
          "shape": "LoRaWANMulticastSession"
        }
      },
      "type": "structure"
    },
    "GetNetworkAnalyzerConfigurationRequest": {
      "members": {
        "ConfigurationName": {
          "location": "uri",
          "locationName": "ConfigurationName",
          "shape": "NetworkAnalyzerConfigurationName"
        }
      },
      "required": [
        "ConfigurationName"
      ],
      "type": "structure"
    },
    "GetNetworkAnalyzerConfigurationResponse": {
      "members": {
        "Arn": {
          "documentation": "<p>The Amazon Resource Name of the new resource.</p>",
          "shape": "NetworkAnalyzerConfigurationArn"
        },
        "Description": {
          "shape": "Description"
        },
        "Name": {
          "shape": "NetworkAnalyzerConfigurationName"
        },
        "TraceContent": {
          "shape": "TraceContent"
        },
        "WirelessDevices": {
          "documentation": "<p>List of wireless gateway resources that have been added to the network analyzer configuration.</p>",
          "shape": "WirelessDeviceList"
        },
        "WirelessGateways": {
          "documentation": "<p>List of wireless gateway resources that have been added to the network analyzer configuration.</p>",
          "shape": "WirelessGatewayList"
        }
      },
      "type": "structure"
    },
    "GetPartnerAccountRequest": {
      "members": {
        "PartnerAccountId": {
          "documentation": "<p>The partner account ID to disassociate from the AWS account.</p>",
          "location": "uri",
          "locationName": "PartnerAccountId",
          "shape": "PartnerAccountId"
        },
        "PartnerType": {
          "documentation": "<p>The partner type.</p>",
          "location": "querystring",
          "locationName": "partnerType",
          "shape": "PartnerType"
        }
      },
      "required": [
        "PartnerAccountId",
        "PartnerType"
      ],
      "type": "structure"
    },
    "GetPartnerAccountResponse": {
      "members": {
        "AccountLinked": {
          "documentation": "<p>Whether the partner account is linked to the AWS account.</p>",
          "shape": "AccountLinked"
        },
        "Sidewalk": {
          "documentation": "<p>The Sidewalk account credentials.</p>",
          "shape": "SidewalkAccountInfoWithFingerprint"
        }
      },
      "type": "structure"
    },
    "GetPositionConfigurationRequest": {
      "members": {
        "ResourceIdentifier": {
          "documentation": "<p>Resource identifier used in a position configuration.</p>",
          "location": "uri",
          "locationName": "ResourceIdentifier",
          "shape": "PositionResourceIdentifier"
        },
        "ResourceType": {
          "documentation": "<p>Resource type of the resource for which position configuration is retrieved.</p>",
          "location": "querystring",
          "locationName": "resourceType",
          "shape": "PositionResourceType"
        }
      },
      "required": [
        "ResourceIdentifier",
        "ResourceType"
      ],
      "type": "structure"
    },
    "GetPositionConfigurationResponse": {
      "members": {
        "Destination": {
          "documentation": "<p>The position data destination that describes the AWS IoT rule that processes the device's position data for use by AWS IoT Core for LoRaWAN.</p>",
          "shape": "DestinationName"
        },
        "Solvers": {
          "documentation": "<p>The wrapper for the solver configuration details object.</p>",
          "shape": "PositionSolverDetails"
        }
      },
      "type": "structure"
    },
    "GetPositionRequest": {
      "members": {
        "ResourceIdentifier": {
          "documentation": "<p>Resource identifier used to retrieve the position information.</p>",
          "location": "uri",
          "locationName": "ResourceIdentifier",
          "shape": "PositionResourceIdentifier"
        },
        "ResourceType": {
          "documentation": "<p>Resource type of the resource for which position information is retrieved.</p>",
          "location": "querystring",
          "locationName": "resourceType",
          "shape": "PositionResourceType"
        }
      },
      "required": [
        "ResourceIdentifier",
        "ResourceType"
      ],
      "type": "structure"
    },
    "GetPositionResponse": {
      "members": {
        "Accuracy": {
          "documentation": "<p>The accuracy of the estimated position in meters. An empty value indicates that no position data is available. A value of \u20180.0\u2019 value indicates that position data is available. This data corresponds to the position information that you specified instead of the position computed by solver.</p>",
          "shape": "Accuracy"
        },
        "Position": {
          "documentation": "<p>The position information of the resource.</p>",
          "shape": "PositionCoordinate"
        },
        "SolverProvider": {
          "documentation": "<p>The vendor of the positioning solver.</p>",
          "shape": "PositionSolverProvider"
        },
        "SolverType": {
          "documentation": "<p>The type of solver used to identify the position of the resource.</p>",
          "shape": "PositionSolverType"
        },
        "SolverVersion": {
          "documentation": "<p>The version of the positioning solver.</p>",
          "shape": "PositionSolverVersion"
        },
        "Timestamp": {
          "documentation": "<p>The timestamp at which the device's position was determined.</p>",
          "shape": "ISODateTimeString"
        }
      },
      "type": "structure"
    },
    "GetResourceEventConfigurationRequest": {
      "members": {
        "Identifier": {
          "documentation": "<p>Resource identifier to opt in for event messaging.</p>",
          "location": "uri",
          "locationName": "Identifier",
          "shape": "Identifier"
        },
        "IdentifierType": {
          "documentation": "<p>Identifier type of the particular resource identifier for event configuration.</p>",
          "location": "querystring",
          "locationName": "identifierType",
          "shape": "IdentifierType"
        },
        "PartnerType": {
          "documentation": "<p>Partner type of the resource if the identifier type is <code>PartnerAccountId</code>.</p>",
          "location": "querystring",
          "locationName": "partnerType",
          "shape": "EventNotificationPartnerType"
        }
      },
      "required": [
        "Identifier",
        "IdentifierType"
      ],
      "type": "structure"
    },
    "GetResourceEventConfigurationResponse": {
      "members": {
        "ConnectionStatus": {
          "documentation": "<p>Event configuration for the connection status event.</p>",
          "shape": "ConnectionStatusEventConfiguration"
        },
        "DeviceRegistrationState": {
          "documentation": "<p>Event configuration for the device registration state event.</p>",
          "shape": "DeviceRegistrationStateEventConfiguration"
        },
        "Join": {
          "documentation": "<p>Event configuration for the join event.</p>",
          "shape": "JoinEventConfiguration"
        },
        "MessageDeliveryStatus": {
          "documentation": "<p>Event configuration for the message delivery status event.</p>",
          "shape": "MessageDeliveryStatusEventConfiguration"
        },
        "Proximity": {
          "documentation": "<p>Event configuration for the proximity event.</p>",
          "shape": "ProximityEventConfiguration"
        }
      },
      "type": "structure"
    },
    "GetResourceLogLevelRequest": {
      "members": {
        "ResourceIdentifier": {
          "location": "uri",
          "locationName": "ResourceIdentifier",
          "shape": "ResourceIdentifier"
        },
        "ResourceType": {
          "documentation": "<p>The type of the resource, which can be <code>WirelessDevice</code> or <code>WirelessGateway</code>.</p>",
          "location": "querystring",
          "locationName": "resourceType",
          "shape": "ResourceType"
        }
      },
      "required": [
        "ResourceIdentifier",
        "ResourceType"
      ],
      "type": "structure"
    },
    "GetResourceLogLevelResponse": {
      "members": {
        "LogLevel": {
          "shape": "LogLevel"
        }
      },
      "type": "structure"
    },
    "GetServiceEndpointRequest": {
      "members": {
        "ServiceType": {
          "documentation": "<p>The service type for which to get endpoint information about. Can be <code>CUPS</code> for the Configuration and Update Server endpoint, or <code>LNS</code> for the LoRaWAN Network Server endpoint or <code>CLAIM</code> for the global endpoint.</p>",
          "location": "querystring",
          "locationName": "serviceType",
          "shape": "WirelessGatewayServiceType"
        }
      },
      "type": "structure"
    },
    "GetServiceEndpointResponse": {
      "members": {
        "ServerTrust": {
          "documentation": "<p>The Root CA of the server trust certificate.</p>",
          "shape": "CertificatePEM"
        },
        "ServiceEndpoint": {
          "documentation": "<p>The service endpoint value.</p>",
          "shape": "EndPoint"
        },
        "ServiceType": {
          "documentation": "<p>The endpoint's service type.</p>",
          "shape": "WirelessGatewayServiceType"
        }
      },
      "type": "structure"
    },
    "GetServiceProfileRequest": {
      "members": {
        "Id": {
          "documentation": "<p>The ID of the resource to get.</p>",
          "location": "uri",
          "locationName": "Id",
          "shape": "ServiceProfileId"
        }
      },
      "required": [
        "Id"
      ],
      "type": "structure"
    },
    "GetServiceProfileResponse": {
      "members": {
        "Arn": {
          "documentation": "<p>The Amazon Resource Name of the resource.</p>",
          "shape": "ServiceProfileArn"
        },
        "Id": {
          "documentation": "<p>The ID of the service profile.</p>",
          "shape": "ServiceProfileId"
        },
        "LoRaWAN": {
          "documentation": "<p>Information about the service profile.</p>",
          "shape": "LoRaWANGetServiceProfileInfo"
        },
        "Name": {
          "documentation": "<p>The name of the resource.</p>",
          "shape": "ServiceProfileName"
        }
      },
      "type": "structure"
    },
    "GetWirelessDeviceRequest": {
      "members": {
        "Identifier": {
          "documentation": "<p>The identifier of the wireless device to get.</p>",
          "location": "uri",
          "locationName": "Identifier",
          "shape": "Identifier"
        },
        "IdentifierType": {
          "documentation": "<p>The type of identifier used in <code>identifier</code>.</p>",
          "location": "querystring",
          "locationName": "identifierType",
          "shape": "WirelessDeviceIdType"
        }
      },
      "required": [
        "Identifier",
        "IdentifierType"
      ],
      "type": "structure"
    },
    "GetWirelessDeviceResponse": {
      "members": {
        "Arn": {
          "documentation": "<p>The Amazon Resource Name of the resource.</p>",
          "shape": "WirelessDeviceArn"
        },
        "Description": {
          "documentation": "<p>The description of the resource.</p>",
          "shape": "Description"
        },
        "DestinationName": {
          "documentation": "<p>The name of the destination to which the device is assigned.</p>",
          "shape": "DestinationName"
        },
        "Id": {
          "documentation": "<p>The ID of the wireless device.</p>",
          "shape": "WirelessDeviceId"
        },
        "LoRaWAN": {
          "documentation": "<p>Information about the wireless device.</p>",
          "shape": "LoRaWANDevice"
        },
        "Name": {
          "documentation": "<p>The name of the resource.</p>",
          "shape": "WirelessDeviceName"
        },
        "Sidewalk": {
          "documentation": "<p>Sidewalk device object.</p>",
          "shape": "SidewalkDevice"
        },
        "ThingArn": {
          "documentation": "<p>The ARN of the thing associated with the wireless device.</p>",
          "shape": "ThingArn"
        },
        "ThingName": {
          "documentation": "<p>The name of the thing associated with the wireless device. The value is empty if a thing isn't associated with the device.</p>",
          "shape": "ThingName"
        },
        "Type": {
          "documentation": "<p>The wireless device type.</p>",
          "shape": "WirelessDeviceType"
        }
      },
      "type": "structure"
    },
    "GetWirelessDeviceStatisticsRequest": {
      "members": {
        "WirelessDeviceId": {
          "documentation": "<p>The ID of the wireless device for which to get the data.</p>",
          "location": "uri",
          "locationName": "Id",
          "shape": "WirelessDeviceId"
        }
      },
      "required": [
        "WirelessDeviceId"
      ],
      "type": "structure"
    },
    "GetWirelessDeviceStatisticsResponse": {
      "members": {
        "LastUplinkReceivedAt": {
          "documentation": "<p>The date and time when the most recent uplink was received.</p>",
          "shape": "ISODateTimeString"
        },
        "LoRaWAN": {
          "documentation": "<p>Information about the wireless device's operations.</p>",
          "shape": "LoRaWANDeviceMetadata"
        },
        "Sidewalk": {
          "documentation": "<p>MetaData for Sidewalk device.</p>",
          "shape": "SidewalkDeviceMetadata"
        },
        "WirelessDeviceId": {
          "documentation": "<p>The ID of the wireless device.</p>",
          "shape": "WirelessDeviceId"
        }
      },
      "type": "structure"
    },
    "GetWirelessGatewayCertificateRequest": {
      "members": {
        "Id": {
          "documentation": "<p>The ID of the resource to get.</p>",
          "location": "uri",
          "locationName": "Id",
          "shape": "WirelessGatewayId"
        }
      },
      "required": [
        "Id"
      ],
      "type": "structure"
    },
    "GetWirelessGatewayCertificateResponse": {
      "members": {
        "IotCertificateId": {
          "documentation": "<p>The ID of the certificate associated with the wireless gateway.</p>",
          "shape": "IotCertificateId"
        },
        "LoRaWANNetworkServerCertificateId": {
          "documentation": "<p>The ID of the certificate that is associated with the wireless gateway and used for the LoRaWANNetworkServer endpoint.</p>",
          "shape": "IotCertificateId"
        }
      },
      "type": "structure"
    },
    "GetWirelessGatewayFirmwareInformationRequest": {
      "members": {
        "Id": {
          "documentation": "<p>The ID of the resource to get.</p>",
          "location": "uri",
          "locationName": "Id",
          "shape": "WirelessGatewayId"
        }
      },
      "required": [
        "Id"
      ],
      "type": "structure"
    },
    "GetWirelessGatewayFirmwareInformationResponse": {
      "members": {
        "LoRaWAN": {
          "documentation": "<p>Information about the wireless gateway's firmware.</p>",
          "shape": "LoRaWANGatewayCurrentVersion"
        }
      },
      "type": "structure"
    },
    "GetWirelessGatewayRequest": {
      "members": {
        "Identifier": {
          "documentation": "<p>The identifier of the wireless gateway to get.</p>",
          "location": "uri",
          "locationName": "Identifier",
          "shape": "Identifier"
        },
        "IdentifierType": {
          "documentation": "<p>The type of identifier used in <code>identifier</code>.</p>",
          "location": "querystring",
          "locationName": "identifierType",
          "shape": "WirelessGatewayIdType"
        }
      },
      "required": [
        "Identifier",
        "IdentifierType"
      ],
      "type": "structure"
    },
    "GetWirelessGatewayResponse": {
      "members": {
        "Arn": {
          "documentation": "<p>The Amazon Resource Name of the resource.</p>",
          "shape": "WirelessGatewayArn"
        },
        "Description": {
          "documentation": "<p>The description of the resource.</p>",
          "shape": "Description"
        },
        "Id": {
          "documentation": "<p>The ID of the wireless gateway.</p>",
          "shape": "WirelessGatewayId"
        },
        "LoRaWAN": {
          "documentation": "<p>Information about the wireless gateway.</p>",
          "shape": "LoRaWANGateway"
        },
        "Name": {
          "documentation": "<p>The name of the resource.</p>",
          "shape": "WirelessGatewayName"
        },
        "ThingArn": {
          "documentation": "<p>The ARN of the thing associated with the wireless gateway.</p>",
          "shape": "ThingArn"
        },
        "ThingName": {
          "documentation": "<p>The name of the thing associated with the wireless gateway. The value is empty if a thing isn't associated with the gateway.</p>",
          "shape": "ThingName"
        }
      },
      "type": "structure"
    },
    "GetWirelessGatewayStatisticsRequest": {
      "members": {
        "WirelessGatewayId": {
          "documentation": "<p>The ID of the wireless gateway for which to get the data.</p>",
          "location": "uri",
          "locationName": "Id",
          "shape": "WirelessGatewayId"
        }
      },
      "required": [
        "WirelessGatewayId"
      ],
      "type": "structure"
    },
    "GetWirelessGatewayStatisticsResponse": {
      "members": {
        "ConnectionStatus": {
          "documentation": "<p>The connection status of the wireless gateway.</p>",
          "shape": "ConnectionStatus"
        },
        "LastUplinkReceivedAt": {
          "documentation": "<p>The date and time when the most recent uplink was received.</p>",
          "shape": "ISODateTimeString"
        },
        "WirelessGatewayId": {
          "documentation": "<p>The ID of the wireless gateway.</p>",
          "shape": "WirelessGatewayId"
        }
      },
      "type": "structure"
    },
    "GetWirelessGatewayTaskDefinitionRequest": {
      "members": {
        "Id": {
          "documentation": "<p>The ID of the resource to get.</p>",
          "location": "uri",
          "locationName": "Id",
          "shape": "WirelessGatewayTaskDefinitionId"
        }
      },
      "required": [
        "Id"
      ],
      "type": "structure"
    },
    "GetWirelessGatewayTaskDefinitionResponse": {
      "members": {
        "Arn": {
          "documentation": "<p>The Amazon Resource Name of the resource.</p>",
          "shape": "WirelessGatewayTaskDefinitionArn"
        },
        "AutoCreateTasks": {
          "documentation": "<p>Whether to automatically create tasks using this task definition for all gateways with the specified current version. If <code>false</code>, the task must me created by calling <code>CreateWirelessGatewayTask</code>.</p>",
          "shape": "AutoCreateTasks"
        },
        "Name": {
          "documentation": "<p>The name of the resource.</p>",
          "shape": "WirelessGatewayTaskName"
        },
        "Update": {
          "documentation": "<p>Information about the gateways to update.</p>",
          "shape": "UpdateWirelessGatewayTaskCreate"
        }
      },
      "type": "structure"
    },
    "GetWirelessGatewayTaskRequest": {
      "members": {
        "Id": {
          "documentation": "<p>The ID of the resource to get.</p>",
          "location": "uri",
          "locationName": "Id",
          "shape": "WirelessGatewayId"
        }
      },
      "required": [
        "Id"
      ],
      "type": "structure"
    },
    "GetWirelessGatewayTaskResponse": {
      "members": {
        "LastUplinkReceivedAt": {
          "documentation": "<p>The date and time when the most recent uplink was received.</p>",
          "shape": "ISODateTimeString"
        },
        "Status": {
          "documentation": "<p>The status of the request.</p>",
          "shape": "WirelessGatewayTaskStatus"
        },
        "TaskCreatedAt": {
          "documentation": "<p>The date and time when the task was created.</p>",
          "shape": "ISODateTimeString"
        },
        "WirelessGatewayId": {
          "documentation": "<p>The ID of the wireless gateway.</p>",
          "shape": "WirelessGatewayId"
        },
        "WirelessGatewayTaskDefinitionId": {
          "documentation": "<p>The ID of the WirelessGatewayTask.</p>",
          "shape": "WirelessGatewayTaskDefinitionId"
        }
      },
      "type": "structure"
    },
    "HorizontalAccuracy": {
      "min": 0,
      "type": "float"
    },
    "HrAllowed": {
      "type": "boolean"
    },
    "ISODateTimeString": {
      "pattern": "^([\\+-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T\\s]((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)([\\.,]\\d+(?!:))?)?(\\17[0-5]\\d([\\.,]\\d+)?)?([zZ]|([\\+-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?$",
      "type": "string"
    },
    "Identifier": {
      "max": 256,
      "type": "string"
    },
    "IdentifierType": {
      "enum": [
        "PartnerAccountId",
        "DevEui",
        "GatewayEui",
        "WirelessDeviceId",
        "WirelessGatewayId"
      ],
      "type": "string"
    },
    "Integer": {
      "type": "integer"
    },
    "InternalServerException": {
      "documentation": "<p>An unexpected error occurred while processing a request.</p>",
      "error": {
        "httpStatusCode": 500
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "Message"
        }
      },
      "type": "structure"
    },
    "IotCertificateId": {
      "max": 4096,
      "min": 1,
      "type": "string"
    },
    "JoinEui": {
      "pattern": "[a-fA-F0-9]{16}",
      "type": "string"
    },
    "JoinEuiFilters": {
      "documentation": "<p>A list of JoinEuiRange used by LoRa gateways to filter LoRa frames.</p>",
      "max": 3,
      "member": {
        "shape": "JoinEuiRange"
      },
      "min": 0,
      "type": "list"
    },
    "JoinEuiRange": {
      "documentation": "<p>A pair of join EUI describing a range [BegEui, EndEui], both ends are inclusive.</p>",
      "max": 2,
      "member": {
        "shape": "JoinEui"
      },
      "min": 2,
      "type": "list"
    },
    "JoinEventConfiguration": {
      "documentation": "<p>Join event configuration object for enabling or disabling topic.</p>",
      "members": {
        "LoRaWAN": {
          "documentation": "<p>Join event configuration object for enabling or disabling LoRaWAN related event topics.</p>",
          "shape": "LoRaWANJoinEventNotificationConfigurations"
        },
        "WirelessDeviceIdEventTopic": {
          "documentation": "<p>Denotes whether the wireless device ID join event topic is enabled or disabled.</p>",
          "shape": "EventNotificationTopicStatus"
        }
      },
      "type": "structure"
    },
    "JoinResourceTypeEventConfiguration": {
      "documentation": "<p>Join resource type event configuration object for enabling or disabling topic.</p>",
      "members": {
        "LoRaWAN": {
          "documentation": "<p>Join resource type event configuration object for enabling or disabling LoRaWAN related event topics.</p>",
          "shape": "LoRaWANJoinResourceTypeEventConfiguration"
        }
      },
      "type": "structure"
    },
    "ListDestinationsRequest": {
      "members": {
        "MaxResults": {
          "documentation": "<p>The maximum number of results to return in this operation.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "NextToken": {
          "documentation": "<p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListDestinationsResponse": {
      "members": {
        "DestinationList": {
          "documentation": "<p>The list of destinations.</p>",
          "shape": "DestinationList"
        },
        "NextToken": {
          "documentation": "<p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListDeviceProfilesRequest": {
      "members": {
        "MaxResults": {
          "documentation": "<p>The maximum number of results to return in this operation.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "NextToken": {
          "documentation": "<p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListDeviceProfilesResponse": {
      "members": {
        "DeviceProfileList": {
          "documentation": "<p>The list of device profiles.</p>",
          "shape": "DeviceProfileList"
        },
        "NextToken": {
          "documentation": "<p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListEventConfigurationsRequest": {
      "members": {
        "MaxResults": {
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "NextToken": {
          "documentation": "<p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        },
        "ResourceType": {
          "documentation": "<p>Resource type to filter event configurations.</p>",
          "location": "querystring",
          "locationName": "resourceType",
          "shape": "EventNotificationResourceType"
        }
      },
      "required": [
        "ResourceType"
      ],
      "type": "structure"
    },
    "ListEventConfigurationsResponse": {
      "members": {
        "EventConfigurationsList": {
          "documentation": "<p>Event configurations of all events for a single resource.</p>",
          "shape": "EventConfigurationsList"
        },
        "NextToken": {
          "documentation": "<p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListFuotaTasksRequest": {
      "members": {
        "MaxResults": {
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "NextToken": {
          "documentation": "<p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListFuotaTasksResponse": {
      "members": {
        "FuotaTaskList": {
          "shape": "FuotaTaskList"
        },
        "NextToken": {
          "documentation": "<p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListMulticastGroupsByFuotaTaskRequest": {
      "members": {
        "Id": {
          "location": "uri",
          "locationName": "Id",
          "shape": "FuotaTaskId"
        },
        "MaxResults": {
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "NextToken": {
          "documentation": "<p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        }
      },
      "required": [
        "Id"
      ],
      "type": "structure"
    },
    "ListMulticastGroupsByFuotaTaskResponse": {
      "members": {
        "MulticastGroupList": {
          "shape": "MulticastGroupListByFuotaTask"
        },
        "NextToken": {
          "documentation": "<p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListMulticastGroupsRequest": {
      "members": {
        "MaxResults": {
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "NextToken": {
          "documentation": "<p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListMulticastGroupsResponse": {
      "members": {
        "MulticastGroupList": {
          "shape": "MulticastGroupList"
        },
        "NextToken": {
          "documentation": "<p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListNetworkAnalyzerConfigurationsRequest": {
      "members": {
        "MaxResults": {
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "NextToken": {
          "documentation": "<p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListNetworkAnalyzerConfigurationsResponse": {
      "members": {
        "NetworkAnalyzerConfigurationList": {
          "documentation": "<p>The list of network analyzer configurations.</p>",
          "shape": "NetworkAnalyzerConfigurationList"
        },
        "NextToken": {
          "documentation": "<p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListPartnerAccountsRequest": {
      "members": {
        "MaxResults": {
          "documentation": "<p>The maximum number of results to return in this operation.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "NextToken": {
          "documentation": "<p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListPartnerAccountsResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>",
          "shape": "NextToken"
        },
        "Sidewalk": {
          "documentation": "<p>The Sidewalk account credentials.</p>",
          "shape": "SidewalkAccountList"
        }
      },
      "type": "structure"
    },
    "ListPositionConfigurationsRequest": {
      "members": {
        "MaxResults": {
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "NextToken": {
          "documentation": "<p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        },
        "ResourceType": {
          "documentation": "<p>Resource type for which position configurations are listed.</p>",
          "location": "querystring",
          "locationName": "resourceType",
          "shape": "PositionResourceType"
        }
      },
      "type": "structure"
    },
    "ListPositionConfigurationsResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>",
          "shape": "NextToken"
        },
        "PositionConfigurationList": {
          "documentation": "<p>A list of position configurations.</p>",
          "shape": "PositionConfigurationList"
        }
      },
      "type": "structure"
    },
    "ListQueuedMessagesRequest": {
      "members": {
        "Id": {
          "documentation": "<p>The ID of a given wireless device which the downlink message packets are being sent.</p>",
          "location": "uri",
          "locationName": "Id",
          "shape": "WirelessDeviceId"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of results to return in this operation.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "NextToken": {
          "documentation": "<p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        },
        "WirelessDeviceType": {
          "documentation": "<p>The wireless device type, whic can be either Sidewalk or LoRaWAN.</p>",
          "location": "querystring",
          "locationName": "WirelessDeviceType",
          "shape": "WirelessDeviceType"
        }
      },
      "required": [
        "Id"
      ],
      "type": "structure"
    },
    "ListQueuedMessagesResponse": {
      "members": {
        "DownlinkQueueMessagesList": {
          "documentation": "<p>The messages in the downlink queue.</p>",
          "shape": "DownlinkQueueMessagesList"
        },
        "NextToken": {
          "documentation": "<p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListServiceProfilesRequest": {
      "members": {
        "MaxResults": {
          "documentation": "<p>The maximum number of results to return in this operation.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "NextToken": {
          "documentation": "<p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListServiceProfilesResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>",
          "shape": "NextToken"
        },
        "ServiceProfileList": {
          "documentation": "<p>The list of service profiles.</p>",
          "shape": "ServiceProfileList"
        }
      },
      "type": "structure"
    },
    "ListTagsForResourceRequest": {
      "members": {
        "ResourceArn": {
          "documentation": "<p>The ARN of the resource for which you want to list tags.</p>",
          "location": "querystring",
          "locationName": "resourceArn",
          "shape": "AmazonResourceName"
        }
      },
      "required": [
        "ResourceArn"
      ],
      "type": "structure"
    },
    "ListTagsForResourceResponse": {
      "members": {
        "Tags": {
          "documentation": "<p>The tags to attach to the specified resource. Tags are metadata that you can use to manage a resource.</p>",
          "shape": "TagList"
        }
      },
      "type": "structure"
    },
    "ListWirelessDevicesRequest": {
      "members": {
        "DestinationName": {
          "documentation": "<p>A filter to list only the wireless devices that use this destination.</p>",
          "location": "querystring",
          "locationName": "destinationName",
          "shape": "DestinationName"
        },
        "DeviceProfileId": {
          "documentation": "<p>A filter to list only the wireless devices that use this device profile.</p>",
          "location": "querystring",
          "locationName": "deviceProfileId",
          "shape": "DeviceProfileId"
        },
        "FuotaTaskId": {
          "location": "querystring",
          "locationName": "fuotaTaskId",
          "shape": "FuotaTaskId"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of results to return in this operation.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "MulticastGroupId": {
          "location": "querystring",
          "locationName": "multicastGroupId",
          "shape": "MulticastGroupId"
        },
        "NextToken": {
          "documentation": "<p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        },
        "ServiceProfileId": {
          "documentation": "<p>A filter to list only the wireless devices that use this service profile.</p>",
          "location": "querystring",
          "locationName": "serviceProfileId",
          "shape": "ServiceProfileId"
        },
        "WirelessDeviceType": {
          "documentation": "<p>A filter to list only the wireless devices that use this wireless device type.</p>",
          "location": "querystring",
          "locationName": "wirelessDeviceType",
          "shape": "WirelessDeviceType"
        }
      },
      "type": "structure"
    },
    "ListWirelessDevicesResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>",
          "shape": "NextToken"
        },
        "WirelessDeviceList": {
          "documentation": "<p>The ID of the wireless device.</p>",
          "shape": "WirelessDeviceStatisticsList"
        }
      },
      "type": "structure"
    },
    "ListWirelessGatewayTaskDefinitionsRequest": {
      "members": {
        "MaxResults": {
          "documentation": "<p>The maximum number of results to return in this operation.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "NextToken": {
          "documentation": "<p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        },
        "TaskDefinitionType": {
          "documentation": "<p>A filter to list only the wireless gateway task definitions that use this task definition type.</p>",
          "location": "querystring",
          "locationName": "taskDefinitionType",
          "shape": "WirelessGatewayTaskDefinitionType"
        }
      },
      "type": "structure"
    },
    "ListWirelessGatewayTaskDefinitionsResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>",
          "shape": "NextToken"
        },
        "TaskDefinitions": {
          "documentation": "<p>The list of task definitions.</p>",
          "shape": "WirelessGatewayTaskDefinitionList"
        }
      },
      "type": "structure"
    },
    "ListWirelessGatewaysRequest": {
      "members": {
        "MaxResults": {
          "documentation": "<p>The maximum number of results to return in this operation.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "NextToken": {
          "documentation": "<p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListWirelessGatewaysResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>",
          "shape": "NextToken"
        },
        "WirelessGatewayList": {
          "documentation": "<p>The ID of the wireless gateway.</p>",
          "shape": "WirelessGatewayStatisticsList"
        }
      },
      "type": "structure"
    },
    "LoRaWANConnectionStatusEventNotificationConfigurations": {
      "documentation": "<p>Object for LoRaWAN connection status resource type event configuration.</p>",
      "members": {
        "GatewayEuiEventTopic": {
          "documentation": "<p>Denotes whether the gateway EUI connection status event topic is enabled or disabled.</p>",
          "shape": "EventNotificationTopicStatus"
        }
      },
      "type": "structure"
    },
    "LoRaWANConnectionStatusResourceTypeEventConfiguration": {
      "documentation": "<p>Object for LoRaWAN connection status resource type event configuration.</p>",
      "members": {
        "WirelessGatewayEventTopic": {
          "documentation": "<p>Denotes whether the wireless gateway connection status event topic is enabled or disabled.</p>",
          "shape": "EventNotificationTopicStatus"
        }
      },
      "type": "structure"
    },
    "LoRaWANDevice": {
      "documentation": "<p>LoRaWAN object for create functions.</p>",
      "members": {
        "AbpV1_0_x": {
          "documentation": "<p>LoRaWAN object for create APIs</p>",
          "shape": "AbpV1_0_x"
        },
        "AbpV1_1": {
          "documentation": "<p>ABP device object for create APIs for v1.1</p>",
          "shape": "AbpV1_1"
        },
        "DevEui": {
          "documentation": "<p>The DevEUI value.</p>",
          "shape": "DevEui"
        },
        "DeviceProfileId": {
          "documentation": "<p>The ID of the device profile for the new wireless device.</p>",
          "shape": "DeviceProfileId"
        },
        "FPorts": {
          "shape": "FPorts"
        },
        "OtaaV1_0_x": {
          "documentation": "<p>OTAA device object for create APIs for v1.0.x</p>",
          "shape": "OtaaV1_0_x"
        },
        "OtaaV1_1": {
          "documentation": "<p>OTAA device object for v1.1 for create APIs</p>",
          "shape": "OtaaV1_1"
        },
        "ServiceProfileId": {
          "documentation": "<p>The ID of the service profile.</p>",
          "shape": "ServiceProfileId"
        }
      },
      "type": "structure"
    },
    "LoRaWANDeviceMetadata": {
      "documentation": "<p>LoRaWAN device metatdata.</p>",
      "members": {
        "DataRate": {
          "documentation": "<p>The DataRate value.</p>",
          "shape": "Integer"
        },
        "DevEui": {
          "documentation": "<p>The DevEUI value.</p>",
          "shape": "DevEui"
        },
        "FPort": {
          "documentation": "<p>The FPort value.</p>",
          "shape": "Integer"
        },
        "Frequency": {
          "documentation": "<p>The device's channel frequency in Hz.</p>",
          "shape": "Integer"
        },
        "Gateways": {
          "documentation": "<p>Information about the gateways accessed by the device.</p>",
          "shape": "LoRaWANGatewayMetadataList"
        },
        "Timestamp": {
          "documentation": "<p>The date and time of the metadata.</p>",
          "shape": "ISODateTimeString"
        }
      },
      "type": "structure"
    },
    "LoRaWANDeviceProfile": {
      "documentation": "<p>LoRaWANDeviceProfile object.</p>",
      "members": {
        "ClassBTimeout": {
          "documentation": "<p>The ClassBTimeout value.</p>",
          "shape": "ClassBTimeout"
        },
        "ClassCTimeout": {
          "documentation": "<p>The ClassCTimeout value.</p>",
          "shape": "ClassCTimeout"
        },
        "FactoryPresetFreqsList": {
          "documentation": "<p>The list of values that make up the FactoryPresetFreqs value.</p>",
          "shape": "FactoryPresetFreqsList"
        },
        "MacVersion": {
          "documentation": "<p>The MAC version (such as OTAA 1.1 or OTAA 1.0.3) to use with this device profile.</p>",
          "shape": "MacVersion"
        },
        "MaxDutyCycle": {
          "documentation": "<p>The MaxDutyCycle value.</p>",
          "shape": "MaxDutyCycle"
        },
        "MaxEirp": {
          "documentation": "<p>The MaxEIRP value.</p>",
          "shape": "MaxEirp"
        },
        "PingSlotDr": {
          "documentation": "<p>The PingSlotDR value.</p>",
          "shape": "PingSlotDr"
        },
        "PingSlotFreq": {
          "documentation": "<p>The PingSlotFreq value.</p>",
          "shape": "PingSlotFreq"
        },
        "PingSlotPeriod": {
          "documentation": "<p>The PingSlotPeriod value.</p>",
          "shape": "PingSlotPeriod"
        },
        "RegParamsRevision": {
          "documentation": "<p>The version of regional parameters.</p>",
          "shape": "RegParamsRevision"
        },
        "RfRegion": {
          "documentation": "<p>The frequency band (RFRegion) value.</p>",
          "shape": "RfRegion"
        },
        "RxDataRate2": {
          "documentation": "<p>The RXDataRate2 value.</p>",
          "shape": "RxDataRate2"
        },
        "RxDelay1": {
          "documentation": "<p>The RXDelay1 value.</p>",
          "shape": "RxDelay1"
        },
        "RxDrOffset1": {
          "documentation": "<p>The RXDROffset1 value.</p>",
          "shape": "RxDrOffset1"
        },
        "RxFreq2": {
          "documentation": "<p>The RXFreq2 value.</p>",
          "shape": "RxFreq2"
        },
        "Supports32BitFCnt": {
          "documentation": "<p>The Supports32BitFCnt value.</p>",
          "shape": "Supports32BitFCnt"
        },
        "SupportsClassB": {
          "documentation": "<p>The SupportsClassB value.</p>",
          "shape": "SupportsClassB"
        },
        "SupportsClassC": {
          "documentation": "<p>The SupportsClassC value.</p>",
          "shape": "SupportsClassC"
        },
        "SupportsJoin": {
          "documentation": "<p>The SupportsJoin value.</p>",
          "shape": "SupportsJoin"
        }
      },
      "type": "structure"
    },
    "LoRaWANFuotaTask": {
      "documentation": "<p>The LoRaWAN information used with a FUOTA task.</p>",
      "members": {
        "RfRegion": {
          "shape": "SupportedRfRegion"
        }
      },
      "type": "structure"
    },
    "LoRaWANFuotaTaskGetInfo": {
      "documentation": "<p>The LoRaWAN information returned from getting a FUOTA task.</p>",
      "members": {
        "RfRegion": {
          "shape": "RfRegion"
        },
        "StartTime": {
          "shape": "StartTime"
        }
      },
      "type": "structure"
    },
    "LoRaWANGateway": {
      "documentation": "<p>LoRaWANGateway object.</p>",
      "members": {
        "Beaconing": {
          "documentation": "<p>Beaconing object information, which consists of the data rate and frequency parameters.</p>",
          "shape": "Beaconing"
        },
        "GatewayEui": {
          "documentation": "<p>The gateway's EUI value.</p>",
          "shape": "GatewayEui"
        },
        "JoinEuiFilters": {
          "shape": "JoinEuiFilters"
        },
        "NetIdFilters": {
          "shape": "NetIdFilters"
        },
        "RfRegion": {
          "documentation": "<p>The frequency band (RFRegion) value.</p>",
          "shape": "RfRegion"
        },
        "SubBands": {
          "shape": "SubBands"
        }
      },
      "type": "structure"
    },
    "LoRaWANGatewayCurrentVersion": {
      "documentation": "<p>LoRaWANGatewayCurrentVersion object.</p>",
      "members": {
        "CurrentVersion": {
          "documentation": "<p>The version of the gateways that should receive the update.</p>",
          "shape": "LoRaWANGatewayVersion"
        }
      },
      "type": "structure"
    },
    "LoRaWANGatewayMetadata": {
      "documentation": "<p>LoRaWAN gateway metatdata.</p>",
      "members": {
        "GatewayEui": {
          "documentation": "<p>The gateway's EUI value.</p>",
          "shape": "GatewayEui"
        },
        "Rssi": {
          "documentation": "<p>The RSSI value.</p>",
          "shape": "Double"
        },
        "Snr": {
          "documentation": "<p>The SNR value.</p>",
          "shape": "Double"
        }
      },
      "type": "structure"
    },
    "LoRaWANGatewayMetadataList": {
      "member": {
        "shape": "LoRaWANGatewayMetadata"
      },
      "type": "list"
    },
    "LoRaWANGatewayVersion": {
      "documentation": "<p>LoRaWANGatewayVersion object.</p>",
      "members": {
        "Model": {
          "documentation": "<p>The model number of the wireless gateway.</p>",
          "shape": "Model"
        },
        "PackageVersion": {
          "documentation": "<p>The version of the wireless gateway firmware.</p>",
          "shape": "PackageVersion"
        },
        "Station": {
          "documentation": "<p>The basic station version of the wireless gateway.</p>",
          "shape": "Station"
        }
      },
      "type": "structure"
    },
    "LoRaWANGetServiceProfileInfo": {
      "documentation": "<p>LoRaWANGetServiceProfileInfo object.</p>",
      "members": {
        "AddGwMetadata": {
          "documentation": "<p>The AddGWMetaData value.</p>",
          "shape": "AddGwMetadata"
        },
        "ChannelMask": {
          "documentation": "<p>The ChannelMask value.</p>",
          "shape": "ChannelMask"
        },
        "DevStatusReqFreq": {
          "documentation": "<p>The DevStatusReqFreq value.</p>",
          "shape": "DevStatusReqFreq"
        },
        "DlBucketSize": {
          "documentation": "<p>The DLBucketSize value.</p>",
          "shape": "DlBucketSize"
        },
        "DlRate": {
          "documentation": "<p>The DLRate value.</p>",
          "shape": "DlRate"
        },
        "DlRatePolicy": {
          "documentation": "<p>The DLRatePolicy value.</p>",
          "shape": "DlRatePolicy"
        },
        "DrMax": {
          "documentation": "<p>The DRMax value.</p>",
          "shape": "DrMax"
        },
        "DrMin": {
          "documentation": "<p>The DRMin value.</p>",
          "shape": "DrMin"
        },
        "HrAllowed": {
          "documentation": "<p>The HRAllowed value that describes whether handover roaming is allowed.</p>",
          "shape": "HrAllowed"
        },
        "MinGwDiversity": {
          "documentation": "<p>The MinGwDiversity value.</p>",
          "shape": "MinGwDiversity"
        },
        "NwkGeoLoc": {
          "documentation": "<p>The NwkGeoLoc value.</p>",
          "shape": "NwkGeoLoc"
        },
        "PrAllowed": {
          "documentation": "<p>The PRAllowed value that describes whether passive roaming is allowed.</p>",
          "shape": "PrAllowed"
        },
        "RaAllowed": {
          "documentation": "<p>The RAAllowed value that describes whether roaming activation is allowed.</p>",
          "shape": "RaAllowed"
        },
        "ReportDevStatusBattery": {
          "documentation": "<p>The ReportDevStatusBattery value.</p>",
          "shape": "ReportDevStatusBattery"
        },
        "ReportDevStatusMargin": {
          "documentation": "<p>The ReportDevStatusMargin value.</p>",
          "shape": "ReportDevStatusMargin"
        },
        "TargetPer": {
          "documentation": "<p>The TargetPER value.</p>",
          "shape": "TargetPer"
        },
        "UlBucketSize": {
          "documentation": "<p>The ULBucketSize value.</p>",
          "shape": "UlBucketSize"
        },
        "UlRate": {
          "documentation": "<p>The ULRate value.</p>",
          "shape": "UlRate"
        },
        "UlRatePolicy": {
          "documentation": "<p>The ULRatePolicy value.</p>",
          "shape": "UlRatePolicy"
        }
      },
      "type": "structure"
    },
    "LoRaWANJoinEventNotificationConfigurations": {
      "documentation": "<p>Object for LoRaWAN join resource type event configuration.</p>",
      "members": {
        "DevEuiEventTopic": {
          "documentation": "<p>Denotes whether the Dev EUI join event topic is enabled or disabled.</p>",
          "shape": "EventNotificationTopicStatus"
        }
      },
      "type": "structure"
    },
    "LoRaWANJoinResourceTypeEventConfiguration": {
      "documentation": "<p>Object for LoRaWAN join resource type event configuration.</p>",
      "members": {
        "WirelessDeviceEventTopic": {
          "documentation": "<p>Denotes whether the wireless device join event topic is enabled or disabled.</p>",
          "shape": "EventNotificationTopicStatus"
        }
      },
      "type": "structure"
    },
    "LoRaWANListDevice": {
      "documentation": "<p>LoRaWAN object for list functions.</p>",
      "members": {
        "DevEui": {
          "documentation": "<p>The DevEUI value.</p>",
          "shape": "DevEui"
        }
      },
      "type": "structure"
    },
    "LoRaWANMulticast": {
      "documentation": "<p>The LoRaWAN information that is to be used with the multicast group.</p>",
      "members": {
        "DlClass": {
          "shape": "DlClass"
        },
        "RfRegion": {
          "shape": "SupportedRfRegion"
        }
      },
      "type": "structure"
    },
    "LoRaWANMulticastGet": {
      "documentation": "<p>The LoRaWAN information that is to be returned from getting multicast group information.</p>",
      "members": {
        "DlClass": {
          "shape": "DlClass"
        },
        "NumberOfDevicesInGroup": {
          "shape": "NumberOfDevicesInGroup"
        },
        "NumberOfDevicesRequested": {
          "shape": "NumberOfDevicesRequested"
        },
        "RfRegion": {
          "shape": "SupportedRfRegion"
        }
      },
      "type": "structure"
    },
    "LoRaWANMulticastMetadata": {
      "documentation": "<p>The metadata information of the LoRaWAN multicast group.</p>",
      "members": {
        "FPort": {
          "shape": "FPort"
        }
      },
      "type": "structure"
    },
    "LoRaWANMulticastSession": {
      "documentation": "<p>The LoRaWAN information used with the multicast session.</p>",
      "members": {
        "DlDr": {
          "shape": "DlDr"
        },
        "DlFreq": {
          "shape": "DlFreq"
        },
        "SessionStartTime": {
          "shape": "SessionStartTimeTimestamp"
        },
        "SessionTimeout": {
          "shape": "SessionTimeout"
        }
      },
      "type": "structure"
    },
    "LoRaWANSendDataToDevice": {
      "documentation": "<p>LoRaWAN router info.</p>",
      "members": {
        "FPort": {
          "shape": "FPort"
        },
        "ParticipatingGateways": {
          "documentation": "<p>Choose the gateways that you want to use for the downlink data traffic when the wireless device is running in class B or class C mode.</p>",
          "shape": "ParticipatingGateways"
        }
      },
      "type": "structure"
    },
    "LoRaWANServiceProfile": {
      "documentation": "<p>LoRaWANServiceProfile object.</p>",
      "members": {
        "AddGwMetadata": {
          "documentation": "<p>The AddGWMetaData value.</p>",
          "shape": "AddGwMetadata"
        },
        "DrMax": {
          "documentation": "<p>The DrMax value.</p>",
          "shape": "DrMaxBox"
        },
        "DrMin": {
          "documentation": "<p>The DrMin value.</p>",
          "shape": "DrMinBox"
        }
      },
      "type": "structure"
    },
    "LoRaWANStartFuotaTask": {
      "documentation": "<p>The LoRaWAN information used to start a FUOTA task.</p>",
      "members": {
        "StartTime": {
          "shape": "StartTime"
        }
      },
      "type": "structure"
    },
    "LoRaWANUpdateDevice": {
      "documentation": "<p>LoRaWAN object for update functions.</p>",
      "members": {
        "AbpV1_0_x": {
          "documentation": "<p>ABP device object for update APIs for v1.0.x</p>",
          "shape": "UpdateAbpV1_0_x"
        },
        "AbpV1_1": {
          "documentation": "<p>ABP device object for update APIs for v1.1</p>",
          "shape": "UpdateAbpV1_1"
        },
        "DeviceProfileId": {
          "documentation": "<p>The ID of the device profile for the wireless device.</p>",
          "shape": "DeviceProfileId"
        },
        "FPorts": {
          "documentation": "<p>FPorts object for the positioning information of the device.</p>",
          "shape": "UpdateFPorts"
        },
        "ServiceProfileId": {
          "documentation": "<p>The ID of the service profile.</p>",
          "shape": "ServiceProfileId"
        }
      },
      "type": "structure"
    },
    "LoRaWANUpdateGatewayTaskCreate": {
      "documentation": "<p>LoRaWANUpdateGatewayTaskCreate object.</p>",
      "members": {
        "CurrentVersion": {
          "documentation": "<p>The version of the gateways that should receive the update.</p>",
          "shape": "LoRaWANGatewayVersion"
        },
        "SigKeyCrc": {
          "documentation": "<p>The CRC of the signature private key to check.</p>",
          "shape": "Crc"
        },
        "UpdateSignature": {
          "documentation": "<p>The signature used to verify the update firmware.</p>",
          "shape": "UpdateSignature"
        },
        "UpdateVersion": {
          "documentation": "<p>The firmware version to update the gateway to.</p>",
          "shape": "LoRaWANGatewayVersion"
        }
      },
      "type": "structure"
    },
    "LoRaWANUpdateGatewayTaskEntry": {
      "documentation": "<p>LoRaWANUpdateGatewayTaskEntry object.</p>",
      "members": {
        "CurrentVersion": {
          "documentation": "<p>The version of the gateways that should receive the update.</p>",
          "shape": "LoRaWANGatewayVersion"
        },
        "UpdateVersion": {
          "documentation": "<p>The firmware version to update the gateway to.</p>",
          "shape": "LoRaWANGatewayVersion"
        }
      },
      "type": "structure"
    },
    "LogLevel": {
      "documentation": "<p>The log level for a log message. The log levels can be disabled, or set to <code>ERROR</code> to display less verbose logs containing only error information, or to <code>INFO</code> for more detailed logs.</p>",
      "enum": [
        "INFO",
        "ERROR",
        "DISABLED"
      ],
      "type": "string"
    },
    "MacVersion": {
      "max": 64,
      "type": "string"
    },
    "MaxDutyCycle": {
      "max": 100,
      "min": 0,
      "type": "integer"
    },
    "MaxEirp": {
      "max": 15,
      "min": 0,
      "type": "integer"
    },
    "MaxResults": {
      "documentation": "<p>The maximum number of results to return in this operation.</p>",
      "max": 250,
      "min": 0,
      "type": "integer"
    },
    "McGroupId": {
      "documentation": "<p>Id of the multicast group.</p>",
      "max": 256,
      "min": 1,
      "type": "integer"
    },
    "Message": {
      "max": 2048,
      "type": "string"
    },
    "MessageDeliveryStatusEventConfiguration": {
      "documentation": "<p>Message delivery status event configuration object for enabling and disabling relevant topics.</p>",
      "members": {
        "Sidewalk": {
          "shape": "SidewalkEventNotificationConfigurations"
        },
        "WirelessDeviceIdEventTopic": {
          "documentation": "<p>Denotes whether the wireless device ID device registration state event topic is enabled or disabled.</p>",
          "shape": "EventNotificationTopicStatus"
        }
      },
      "type": "structure"
    },
    "MessageDeliveryStatusResourceTypeEventConfiguration": {
      "documentation": "<p>Message delivery status resource type event configuration object for enabling or disabling relevant topic.</p>",
      "members": {
        "Sidewalk": {
          "shape": "SidewalkResourceTypeEventConfiguration"
        }
      },
      "type": "structure"
    },
    "MessageId": {
      "type": "string"
    },
    "MessageType": {
      "documentation": "<p>Sidewalk device message type. Default value is <code>CUSTOM_COMMAND_ID_NOTIFY</code>.</p>",
      "enum": [
        "CUSTOM_COMMAND_ID_NOTIFY",
        "CUSTOM_COMMAND_ID_GET",
        "CUSTOM_COMMAND_ID_SET",
        "CUSTOM_COMMAND_ID_RESP"
      ],
      "type": "string"
    },
    "MinGwDiversity": {
      "max": 100,
      "min": 1,
      "type": "integer"
    },
    "Model": {
      "max": 4096,
      "min": 1,
      "type": "string"
    },
    "MulticastDeviceStatus": {
      "max": 256,
      "type": "string"
    },
    "MulticastGroup": {
      "documentation": "<p>A multicast group.</p>",
      "members": {
        "Arn": {
          "shape": "MulticastGroupArn"
        },
        "Id": {
          "shape": "MulticastGroupId"
        },
        "Name": {
          "shape": "MulticastGroupName"
        }
      },
      "type": "structure"
    },
    "MulticastGroupArn": {
      "documentation": "<p>The arn of the multicast group.</p>",
      "max": 128,
      "type": "string"
    },
    "MulticastGroupByFuotaTask": {
      "documentation": "<p>A multicast group that is associated with a FUOTA task.</p>",
      "members": {
        "Id": {
          "shape": "MulticastGroupId"
        }
      },
      "type": "structure"
    },
    "MulticastGroupId": {
      "documentation": "<p>The ID of the multicast group.</p>",
      "max": 256,
      "type": "string"
    },
    "MulticastGroupList": {
      "documentation": "<p>List of multicast groups.</p>",
      "member": {
        "shape": "MulticastGroup"
      },
      "type": "list"
    },
    "MulticastGroupListByFuotaTask": {
      "documentation": "<p>List of multicast groups associated with a FUOTA task.</p>",
      "member": {
        "shape": "MulticastGroupByFuotaTask"
      },
      "type": "list"
    },
    "MulticastGroupMessageId": {
      "documentation": "<p>ID of a multicast group message.</p>",
      "max": 256,
      "type": "string"
    },
    "MulticastGroupName": {
      "documentation": "<p>The name of the multicast group.</p>",
      "max": 256,
      "type": "string"
    },
    "MulticastGroupStatus": {
      "documentation": "<p>The status of the multicast group.</p>",
      "max": 256,
      "type": "string"
    },
    "MulticastWirelessMetadata": {
      "documentation": "<p>Wireless metadata that is to be sent to multicast group.</p>",
      "members": {
        "LoRaWAN": {
          "shape": "LoRaWANMulticastMetadata"
        }
      },
      "type": "structure"
    },
    "NetId": {
      "documentation": "<p>LoRaWAN network ID.</p>",
      "pattern": "[a-fA-F0-9]{6}",
      "type": "string"
    },
    "NetIdFilters": {
      "documentation": "<p>A list of NetId values that are used by LoRa gateways to filter the uplink frames.</p>",
      "max": 10,
      "member": {
        "shape": "NetId"
      },
      "min": 0,
      "type": "list"
    },
    "NetworkAnalyzerConfigurationArn": {
      "max": 1124,
      "type": "string"
    },
    "NetworkAnalyzerConfigurationList": {
      "member": {
        "shape": "NetworkAnalyzerConfigurations"
      },
      "type": "list"
    },
    "NetworkAnalyzerConfigurationName": {
      "documentation": "<p>Name of the network analyzer configuration.</p>",
      "max": 1024,
      "min": 1,
      "pattern": "[a-zA-Z0-9-_]+",
      "type": "string"
    },
    "NetworkAnalyzerConfigurations": {
      "documentation": "<p>Network analyzer configurations.</p>",
      "members": {
        "Arn": {
          "documentation": "<p>The Amazon Resource Name of the new resource.</p>",
          "shape": "NetworkAnalyzerConfigurationArn"
        },
        "Name": {
          "shape": "NetworkAnalyzerConfigurationName"
        }
      },
      "type": "structure"
    },
    "NextToken": {
      "max": 4096,
      "type": "string"
    },
    "NumberOfDevicesInGroup": {
      "documentation": "<p>Number of devices that are associated to the multicast group.</p>",
      "type": "integer"
    },
    "NumberOfDevicesRequested": {
      "documentation": "<p>Number of devices that are requested to be associated with the multicast group.</p>",
      "type": "integer"
    },
    "NwkGeoLoc": {
      "type": "boolean"
    },
    "NwkKey": {
      "pattern": "[a-fA-F0-9]{32}",
      "type": "string"
    },
    "NwkSEncKey": {
      "pattern": "[a-fA-F0-9]{32}",
      "type": "string"
    },
    "NwkSKey": {
      "pattern": "[a-fA-F0-9]{32}",
      "type": "string"
    },
    "OtaaV1_0_x": {
      "documentation": "<p>OTAA device object for v1.0.x</p>",
      "members": {
        "AppEui": {
          "documentation": "<p>The AppEUI value.</p>",
          "shape": "AppEui"
        },
        "AppKey": {
          "documentation": "<p>The AppKey value.</p>",
          "shape": "AppKey"
        },
        "GenAppKey": {
          "documentation": "<p>The GenAppKey value.</p>",
          "shape": "GenAppKey"
        }
      },
      "type": "structure"
    },
    "OtaaV1_1": {
      "documentation": "<p>OTAA device object for v1.1</p>",
      "members": {
        "AppKey": {
          "documentation": "<p>The AppKey value.</p>",
          "shape": "AppKey"
        },
        "JoinEui": {
          "documentation": "<p>The JoinEUI value.</p>",
          "shape": "JoinEui"
        },
        "NwkKey": {
          "documentation": "<p>The NwkKey value.</p>",
          "shape": "NwkKey"
        }
      },
      "type": "structure"
    },
    "PackageVersion": {
      "max": 32,
      "min": 1,
      "type": "string"
    },
    "ParticipatingGateways": {
      "documentation": "<p>Specify the list of gateways to which you want to send downlink data traffic when the wireless device is running in class B or class C mode.</p>",
      "members": {
        "DownlinkMode": {
          "documentation": "<p>Indicates whether to send the downlink message in sequential mode or concurrent mode, or to use only the chosen gateways from the previous uplink message transmission.</p>",
          "shape": "DownlinkMode"
        },
        "GatewayList": {
          "documentation": "<p>The list of gateways that you want to use for sending the downlink data traffic.</p>",
          "shape": "GatewayList"
        },
        "TransmissionInterval": {
          "documentation": "<p>The duration of time for which AWS IoT Core for LoRaWAN will wait before transmitting the payload to the next gateway.</p>",
          "shape": "TransmissionInterval"
        }
      },
      "required": [
        "DownlinkMode",
        "GatewayList",
        "TransmissionInterval"
      ],
      "type": "structure"
    },
    "PartnerAccountArn": {
      "type": "string"
    },
    "PartnerAccountId": {
      "max": 256,
      "type": "string"
    },
    "PartnerType": {
      "enum": [
        "Sidewalk"
      ],
      "type": "string"
    },
    "PayloadData": {
      "documentation": "<p>The binary to be sent to the end device, encoded in base64.</p>",
      "max": 2048,
      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
      "type": "string"
    },
    "PingSlotDr": {
      "max": 15,
      "min": 0,
      "type": "integer"
    },
    "PingSlotFreq": {
      "max": 16700000,
      "min": 1000000,
      "type": "integer"
    },
    "PingSlotPeriod": {
      "max": 4096,
      "min": 128,
      "type": "integer"
    },
    "PositionConfigurationFec": {
      "enum": [
        "ROSE",
        "NONE"
      ],
      "type": "string"
    },
    "PositionConfigurationItem": {
      "documentation": "<p>The wrapper for a position configuration.</p>",
      "members": {
        "Destination": {
          "documentation": "<p>The position data destination that describes the AWS IoT rule that processes the device's position data for use by AWS IoT Core for LoRaWAN.</p>",
          "shape": "DestinationName"
        },
        "ResourceIdentifier": {
          "documentation": "<p>Resource identifier for the position configuration.</p>",
          "shape": "PositionResourceIdentifier"
        },
        "ResourceType": {
          "documentation": "<p>Resource type of the resource for the position configuration.</p>",
          "shape": "PositionResourceType"
        },
        "Solvers": {
          "documentation": "<p>The details of the positioning solver object used to compute the location.</p>",
          "shape": "PositionSolverDetails"
        }
      },
      "type": "structure"
    },
    "PositionConfigurationList": {
      "member": {
        "shape": "PositionConfigurationItem"
      },
      "type": "list"
    },
    "PositionConfigurationStatus": {
      "enum": [
        "Enabled",
        "Disabled"
      ],
      "type": "string"
    },
    "PositionCoordinate": {
      "member": {
        "shape": "PositionCoordinateValue"
      },
      "type": "list"
    },
    "PositionCoordinateValue": {
      "type": "float"
    },
    "PositionResourceIdentifier": {
      "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
      "type": "string"
    },
    "PositionResourceType": {
      "enum": [
        "WirelessDevice",
        "WirelessGateway"
      ],
      "type": "string"
    },
    "PositionSolverConfigurations": {
      "documentation": "<p>The wrapper for position solver configurations.</p>",
      "members": {
        "SemtechGnss": {
          "documentation": "<p>The Semtech GNSS solver configuration object.</p>",
          "shape": "SemtechGnssConfiguration"
        }
      },
      "type": "structure"
    },
    "PositionSolverDetails": {
      "documentation": "<p>The wrapper for position solver details.</p>",
      "members": {
        "SemtechGnss": {
          "documentation": "<p>The Semtech GNSS solver object details.</p>",
          "shape": "SemtechGnssDetail"
        }
      },
      "type": "structure"
    },
    "PositionSolverProvider": {
      "enum": [
        "Semtech"
      ],
      "type": "string"
    },
    "PositionSolverType": {
      "enum": [
        "GNSS"
      ],
      "type": "string"
    },
    "PositionSolverVersion": {
      "max": 50,
      "min": 0,
      "type": "string"
    },
    "Positioning": {
      "documentation": "<p>The FPorts for the position information.</p>",
      "members": {
        "ClockSync": {
          "shape": "FPort"
        },
        "Gnss": {
          "shape": "FPort"
        },
        "Stream": {
          "shape": "FPort"
        }
      },
      "type": "structure"
    },
    "PrAllowed": {
      "type": "boolean"
    },
    "PresetFreq": {
      "max": 16700000,
      "min": 1000000,
      "type": "integer"
    },
    "ProximityEventConfiguration": {
      "documentation": "<p>Proximity event configuration object for enabling and disabling relevant topics.</p>",
      "members": {
        "Sidewalk": {
          "documentation": "<p>Proximity event configuration object for enabling or disabling Sidewalk related event topics.</p>",
          "shape": "SidewalkEventNotificationConfigurations"
        },
        "WirelessDeviceIdEventTopic": {
          "documentation": "<p>Denotes whether the wireless device ID proximity event topic is enabled or disabled.</p>",
          "shape": "EventNotificationTopicStatus"
        }
      },
      "type": "structure"
    },
    "ProximityResourceTypeEventConfiguration": {
      "documentation": "<p>Proximity resource type event configuration object for enabling or disabling topic.</p>",
      "members": {
        "Sidewalk": {
          "documentation": "<p>Proximity resource type event configuration object for enabling and disabling wireless device topic.</p>",
          "shape": "SidewalkResourceTypeEventConfiguration"
        }
      },
      "type": "structure"
    },
    "PutPositionConfigurationRequest": {
      "members": {
        "Destination": {
          "documentation": "<p>The position data destination that describes the AWS IoT rule that processes the device's position data for use by AWS IoT Core for LoRaWAN.</p>",
          "shape": "DestinationName"
        },
        "ResourceIdentifier": {
          "documentation": "<p>Resource identifier used to update the position configuration.</p>",
          "location": "uri",
          "locationName": "ResourceIdentifier",
          "shape": "PositionResourceIdentifier"
        },
        "ResourceType": {
          "documentation": "<p>Resource type of the resource for which you want to update the position configuration.</p>",
          "location": "querystring",
          "locationName": "resourceType",
          "shape": "PositionResourceType"
        },
        "Solvers": {
          "documentation": "<p>The positioning solvers used to update the position configuration of the resource.</p>",
          "shape": "PositionSolverConfigurations"
        }
      },
      "required": [
        "ResourceIdentifier",
        "ResourceType"
      ],
      "type": "structure"
    },
    "PutPositionConfigurationResponse": {
      "members": {},
      "type": "structure"
    },
    "PutResourceLogLevelRequest": {
      "members": {
        "LogLevel": {
          "shape": "LogLevel"
        },
        "ResourceIdentifier": {
          "location": "uri",
          "locationName": "ResourceIdentifier",
          "shape": "ResourceIdentifier"
        },
        "ResourceType": {
          "documentation": "<p>The type of the resource, which can be <code>WirelessDevice</code> or <code>WirelessGateway</code>.</p>",
          "location": "querystring",
          "locationName": "resourceType",
          "shape": "ResourceType"
        }
      },
      "required": [
        "ResourceIdentifier",
        "ResourceType",
        "LogLevel"
      ],
      "type": "structure"
    },
    "PutResourceLogLevelResponse": {
      "members": {},
      "type": "structure"
    },
    "QueryString": {
      "documentation": "<p>Query string used to search for wireless devices as part of the bulk associate and disassociate process.</p>",
      "max": 4096,
      "type": "string"
    },
    "RaAllowed": {
      "type": "boolean"
    },
    "RegParamsRevision": {
      "max": 64,
      "type": "string"
    },
    "ReportDevStatusBattery": {
      "type": "boolean"
    },
    "ReportDevStatusMargin": {
      "type": "boolean"
    },
    "ResetAllResourceLogLevelsRequest": {
      "members": {},
      "type": "structure"
    },
    "ResetAllResourceLogLevelsResponse": {
      "members": {},
      "type": "structure"
    },
    "ResetResourceLogLevelRequest": {
      "members": {
        "ResourceIdentifier": {
          "location": "uri",
          "locationName": "ResourceIdentifier",
          "shape": "ResourceIdentifier"
        },
        "ResourceType": {
          "documentation": "<p>The type of the resource, which can be <code>WirelessDevice</code> or <code>WirelessGateway</code>.</p>",
          "location": "querystring",
          "locationName": "resourceType",
          "shape": "ResourceType"
        }
      },
      "required": [
        "ResourceIdentifier",
        "ResourceType"
      ],
      "type": "structure"
    },
    "ResetResourceLogLevelResponse": {
      "members": {},
      "type": "structure"
    },
    "ResourceId": {
      "type": "string"
    },
    "ResourceIdentifier": {
      "documentation": "<p>The identifier of the resource. For a Wireless Device, it is the wireless device ID. For a wireless gateway, it is the wireless gateway ID.</p>",
      "max": 256,
      "type": "string"
    },
    "ResourceNotFoundException": {
      "documentation": "<p>Resource does not exist.</p>",
      "error": {
        "httpStatusCode": 404
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "Message"
        },
        "ResourceId": {
          "documentation": "<p>Id of the not found resource.</p>",
          "shape": "ResourceId"
        },
        "ResourceType": {
          "documentation": "<p>Type of the font found resource.</p>",
          "shape": "ResourceType"
        }
      },
      "type": "structure"
    },
    "ResourceType": {
      "type": "string"
    },
    "Result": {
      "max": 2048,
      "type": "string"
    },
    "RfRegion": {
      "documentation": "<p>The frequency band (RFRegion) value.</p>",
      "max": 64,
      "type": "string"
    },
    "RoleArn": {
      "max": 2048,
      "min": 20,
      "type": "string"
    },
    "RxDataRate2": {
      "max": 15,
      "min": 0,
      "type": "integer"
    },
    "RxDelay1": {
      "max": 15,
      "min": 0,
      "type": "integer"
    },
    "RxDrOffset1": {
      "max": 7,
      "min": 0,
      "type": "integer"
    },
    "RxFreq2": {
      "max": 16700000,
      "min": 1000000,
      "type": "integer"
    },
    "SNwkSIntKey": {
      "pattern": "[a-fA-F0-9]{32}",
      "type": "string"
    },
    "SemtechGnssConfiguration": {
      "documentation": "<p>Information about the Semtech GNSS solver configuration.</p>",
      "members": {
        "Fec": {
          "documentation": "<p>Whether forward error correction is enabled.</p>",
          "shape": "PositionConfigurationFec"
        },
        "Status": {
          "documentation": "<p>The status indicating whether the solver is enabled.</p>",
          "shape": "PositionConfigurationStatus"
        }
      },
      "required": [
        "Status",
        "Fec"
      ],
      "type": "structure"
    },
    "SemtechGnssDetail": {
      "documentation": "<p>Details of the Semtech GNSS solver object.</p>",
      "members": {
        "Fec": {
          "documentation": "<p>Whether forward error correction is enabled.</p>",
          "shape": "PositionConfigurationFec"
        },
        "Provider": {
          "documentation": "<p>The vendor of the solver object.</p>",
          "shape": "PositionSolverProvider"
        },
        "Status": {
          "documentation": "<p>The status indicating whether the solver is enabled.</p>",
          "shape": "PositionConfigurationStatus"
        },
        "Type": {
          "documentation": "<p>The type of positioning solver used.</p>",
          "shape": "PositionSolverType"
        }
      },
      "type": "structure"
    },
    "SendDataToMulticastGroupRequest": {
      "members": {
        "Id": {
          "location": "uri",
          "locationName": "Id",
          "shape": "MulticastGroupId"
        },
        "PayloadData": {
          "shape": "PayloadData"
        },
        "WirelessMetadata": {
          "shape": "MulticastWirelessMetadata"
        }
      },
      "required": [
        "Id",
        "PayloadData",
        "WirelessMetadata"
      ],
      "type": "structure"
    },
    "SendDataToMulticastGroupResponse": {
      "members": {
        "MessageId": {
          "shape": "MulticastGroupMessageId"
        }
      },
      "type": "structure"
    },
    "SendDataToWirelessDeviceRequest": {
      "members": {
        "Id": {
          "documentation": "<p>The ID of the wireless device to receive the data.</p>",
          "location": "uri",
          "locationName": "Id",
          "shape": "WirelessDeviceId"
        },
        "PayloadData": {
          "shape": "PayloadData"
        },
        "TransmitMode": {
          "documentation": "<p>The transmit mode to use to send data to the wireless device. Can be: <code>0</code> for UM (unacknowledge mode) or <code>1</code> for AM (acknowledge mode).</p>",
          "shape": "TransmitMode"
        },
        "WirelessMetadata": {
          "documentation": "<p>Metadata about the message request.</p>",
          "shape": "WirelessMetadata"
        }
      },
      "required": [
        "Id",
        "TransmitMode",
        "PayloadData"
      ],
      "type": "structure"
    },
    "SendDataToWirelessDeviceResponse": {
      "members": {
        "MessageId": {
          "documentation": "<p>The ID of the message sent to the wireless device.</p>",
          "shape": "MessageId"
        }
      },
      "type": "structure"
    },
    "Seq": {
      "max": 16383,
      "min": 0,
      "type": "integer"
    },
    "ServiceProfile": {
      "documentation": "<p>Information about a service profile.</p>",
      "members": {
        "Arn": {
          "documentation": "<p>The Amazon Resource Name of the resource.</p>",
          "shape": "ServiceProfileArn"
        },
        "Id": {
          "documentation": "<p>The ID of the service profile.</p>",
          "shape": "ServiceProfileId"
        },
        "Name": {
          "documentation": "<p>The name of the resource.</p>",
          "shape": "ServiceProfileName"
        }
      },
      "type": "structure"
    },
    "ServiceProfileArn": {
      "type": "string"
    },
    "ServiceProfileId": {
      "max": 256,
      "type": "string"
    },
    "ServiceProfileList": {
      "member": {
        "shape": "ServiceProfile"
      },
      "type": "list"
    },
    "ServiceProfileName": {
      "max": 256,
      "type": "string"
    },
    "SessionKeysAbpV1_0_x": {
      "documentation": "<p>Session keys for ABP v1.1</p>",
      "members": {
        "AppSKey": {
          "documentation": "<p>The AppSKey value.</p>",
          "shape": "AppSKey"
        },
        "NwkSKey": {
          "documentation": "<p>The NwkSKey value.</p>",
          "shape": "NwkSKey"
        }
      },
      "type": "structure"
    },
    "SessionKeysAbpV1_1": {
      "documentation": "<p>Session keys for ABP v1.1</p>",
      "members": {
        "AppSKey": {
          "documentation": "<p>The AppSKey value.</p>",
          "shape": "AppSKey"
        },
        "FNwkSIntKey": {
          "documentation": "<p>The FNwkSIntKey value.</p>",
          "shape": "FNwkSIntKey"
        },
        "NwkSEncKey": {
          "documentation": "<p>The NwkSEncKey value.</p>",
          "shape": "NwkSEncKey"
        },
        "SNwkSIntKey": {
          "documentation": "<p>The SNwkSIntKey value.</p>",
          "shape": "SNwkSIntKey"
        }
      },
      "type": "structure"
    },
    "SessionStartTimeTimestamp": {
      "documentation": "<p>Timestamp of when the multicast group session is to start.</p>",
      "timestampFormat": "iso8601",
      "type": "timestamp"
    },
    "SessionTimeout": {
      "documentation": "<p>How long before a multicast group session is to timeout.</p>",
      "max": 172800,
      "min": 60,
      "type": "integer"
    },
    "SidewalkAccountInfo": {
      "documentation": "<p>Information about a Sidewalk account.</p>",
      "members": {
        "AmazonId": {
          "documentation": "<p>The Sidewalk Amazon ID.</p>",
          "shape": "AmazonId"
        },
        "AppServerPrivateKey": {
          "documentation": "<p>The Sidewalk application server private key.</p>",
          "shape": "AppServerPrivateKey"
        }
      },
      "type": "structure"
    },
    "SidewalkAccountInfoWithFingerprint": {
      "documentation": "<p>Information about a Sidewalk account.</p>",
      "members": {
        "AmazonId": {
          "documentation": "<p>The Sidewalk Amazon ID.</p>",
          "shape": "AmazonId"
        },
        "Arn": {
          "documentation": "<p>The Amazon Resource Name of the resource.</p>",
          "shape": "PartnerAccountArn"
        },
        "Fingerprint": {
          "documentation": "<p>The fingerprint of the Sidewalk application server private key.</p>",
          "shape": "Fingerprint"
        }
      },
      "type": "structure"
    },
    "SidewalkAccountList": {
      "member": {
        "shape": "SidewalkAccountInfoWithFingerprint"
      },
      "type": "list"
    },
    "SidewalkDevice": {
      "documentation": "<p>Sidewalk device object.</p>",
      "members": {
        "AmazonId": {
          "shape": "AmazonId"
        },
        "DeviceCertificates": {
          "documentation": "<p>The sidewalk device certificates for Ed25519 and P256r1.</p>",
          "shape": "DeviceCertificateList"
        },
        "SidewalkId": {
          "documentation": "<p>The sidewalk device identification.</p>",
          "shape": "SidewalkId"
        },
        "SidewalkManufacturingSn": {
          "documentation": "<p>The Sidewalk manufacturing series number.</p>",
          "shape": "SidewalkManufacturingSn"
        }
      },
      "type": "structure"
    },
    "SidewalkDeviceMetadata": {
      "documentation": "<p>MetaData for Sidewalk device.</p>",
      "members": {
        "BatteryLevel": {
          "documentation": "<p>Sidewalk device battery level.</p>",
          "shape": "BatteryLevel"
        },
        "DeviceState": {
          "documentation": "<p>Device state defines the device status of sidewalk device.</p>",
          "shape": "DeviceState"
        },
        "Event": {
          "documentation": "<p>Sidewalk device status notification.</p>",
          "shape": "Event"
        },
        "Rssi": {
          "documentation": "<p>The RSSI value.</p>",
          "shape": "Integer"
        }
      },
      "type": "structure"
    },
    "SidewalkEventNotificationConfigurations": {
      "documentation": "<p> <code>SidewalkEventNotificationConfigurations</code> object, which is the event configuration object for Sidewalk-related event topics.</p>",
      "members": {
        "AmazonIdEventTopic": {
          "documentation": "<p>Denotes whether the Amazon ID event topic is enabled or disabled.</p>",
          "shape": "EventNotificationTopicStatus"
        }
      },
      "type": "structure"
    },
    "SidewalkId": {
      "documentation": "<p>The sidewalk device identification.</p>",
      "max": 256,
      "type": "string"
    },
    "SidewalkListDevice": {
      "documentation": "<p>Sidewalk object used by list functions.</p>",
      "members": {
        "AmazonId": {
          "documentation": "<p>The Sidewalk Amazon ID.</p>",
          "shape": "AmazonId"
        },
        "DeviceCertificates": {
          "documentation": "<p>The sidewalk device certificates for Ed25519 and P256r1.</p>",
          "shape": "DeviceCertificateList"
        },
        "SidewalkId": {
          "documentation": "<p>The sidewalk device identification.</p>",
          "shape": "SidewalkId"
        },
        "SidewalkManufacturingSn": {
          "documentation": "<p>The Sidewalk manufacturing series number.</p>",
          "shape": "SidewalkManufacturingSn"
        }
      },
      "type": "structure"
    },
    "SidewalkManufacturingSn": {
      "max": 64,
      "type": "string"
    },
    "SidewalkResourceTypeEventConfiguration": {
      "documentation": "<p>Sidewalk resource type event configuration object for enabling or disabling topic.</p>",
      "members": {
        "WirelessDeviceEventTopic": {
          "documentation": "<p>Denotes whether the wireless device join event topic is enabled or disabled.</p>",
          "shape": "EventNotificationTopicStatus"
        }
      },
      "type": "structure"
    },
    "SidewalkSendDataToDevice": {
      "documentation": "<p>Information about a Sidewalk router.</p>",
      "members": {
        "AckModeRetryDurationSecs": {
          "documentation": "<p>The duration of time in seconds for which you want to retry sending the ACK.</p>",
          "shape": "AckModeRetryDurationSecs"
        },
        "MessageType": {
          "shape": "MessageType"
        },
        "Seq": {
          "documentation": "<p>The sequence number.</p>",
          "shape": "Seq"
        }
      },
      "type": "structure"
    },
    "SidewalkUpdateAccount": {
      "documentation": "<p>Sidewalk update.</p>",
      "members": {
        "AppServerPrivateKey": {
          "documentation": "<p>The new Sidewalk application server private key.</p>",
          "shape": "AppServerPrivateKey"
        }
      },
      "type": "structure"
    },
    "SigningAlg": {
      "documentation": "<p>The certificate chain algorithm provided by sidewalk.</p>",
      "enum": [
        "Ed25519",
        "P256r1"
      ],
      "type": "string"
    },
    "StartBulkAssociateWirelessDeviceWithMulticastGroupRequest": {
      "members": {
        "Id": {
          "location": "uri",
          "locationName": "Id",
          "shape": "MulticastGroupId"
        },
        "QueryString": {
          "shape": "QueryString"
        },
        "Tags": {
          "shape": "TagList"
        }
      },
      "required": [
        "Id"
      ],
      "type": "structure"
    },
    "StartBulkAssociateWirelessDeviceWithMulticastGroupResponse": {
      "members": {},
      "type": "structure"
    },
    "StartBulkDisassociateWirelessDeviceFromMulticastGroupRequest": {
      "members": {
        "Id": {
          "location": "uri",
          "locationName": "Id",
          "shape": "MulticastGroupId"
        },
        "QueryString": {
          "shape": "QueryString"
        },
        "Tags": {
          "shape": "TagList"
        }
      },
      "required": [
        "Id"
      ],
      "type": "structure"
    },
    "StartBulkDisassociateWirelessDeviceFromMulticastGroupResponse": {
      "members": {},
      "type": "structure"
    },
    "StartFuotaTaskRequest": {
      "members": {
        "Id": {
          "location": "uri",
          "locationName": "Id",
          "shape": "FuotaTaskId"
        },
        "LoRaWAN": {
          "shape": "LoRaWANStartFuotaTask"
        }
      },
      "required": [
        "Id"
      ],
      "type": "structure"
    },
    "StartFuotaTaskResponse": {
      "members": {},
      "type": "structure"
    },
    "StartMulticastGroupSessionRequest": {
      "members": {
        "Id": {
          "location": "uri",
          "locationName": "Id",
          "shape": "MulticastGroupId"
        },
        "LoRaWAN": {
          "shape": "LoRaWANMulticastSession"
        }
      },
      "required": [
        "Id",
        "LoRaWAN"
      ],
      "type": "structure"
    },
    "StartMulticastGroupSessionResponse": {
      "members": {},
      "type": "structure"
    },
    "StartTime": {
      "documentation": "<p>Start time of a FUOTA task.</p>",
      "timestampFormat": "iso8601",
      "type": "timestamp"
    },
    "Station": {
      "max": 4096,
      "min": 1,
      "type": "string"
    },
    "SubBand": {
      "documentation": "<p>A subset of supported frequency channels in a certain RFRegion.</p>",
      "max": 8,
      "min": 1,
      "type": "integer"
    },
    "SubBands": {
      "documentation": "<p>A list of integer indicating which sub bands are supported by LoRa gateway.</p>",
      "max": 8,
      "member": {
        "shape": "SubBand"
      },
      "min": 0,
      "type": "list"
    },
    "SupportedRfRegion": {
      "documentation": "<p>Supported RfRegions</p>",
      "enum": [
        "EU868",
        "US915",
        "AU915",
        "AS923-1"
      ],
      "type": "string"
    },
    "Supports32BitFCnt": {
      "type": "boolean"
    },
    "SupportsClassB": {
      "type": "boolean"
    },
    "SupportsClassC": {
      "type": "boolean"
    },
    "SupportsJoin": {
      "type": "boolean"
    },
    "Tag": {
      "documentation": "<p>A simple label consisting of a customer-defined key-value pair</p>",
      "members": {
        "Key": {
          "documentation": "<p>The tag's key value.</p>",
          "shape": "TagKey"
        },
        "Value": {
          "documentation": "<p>The tag's value.</p>",
          "shape": "TagValue"
        }
      },
      "required": [
        "Key",
        "Value"
      ],
      "type": "structure"
    },
    "TagKey": {
      "max": 128,
      "min": 1,
      "type": "string"
    },
    "TagKeyList": {
      "max": 200,
      "member": {
        "shape": "TagKey"
      },
      "min": 0,
      "type": "list"
    },
    "TagList": {
      "documentation": "<p>The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.</p>",
      "max": 200,
      "member": {
        "shape": "Tag"
      },
      "min": 0,
      "type": "list"
    },
    "TagResourceRequest": {
      "members": {
        "ResourceArn": {
          "documentation": "<p>The ARN of the resource to add tags to.</p>",
          "location": "querystring",
          "locationName": "resourceArn",
          "shape": "AmazonResourceName"
        },
        "Tags": {
          "documentation": "<p>Adds to or modifies the tags of the given resource. Tags are metadata that you can use to manage a resource.</p>",
          "shape": "TagList"
        }
      },
      "required": [
        "ResourceArn",
        "Tags"
      ],
      "type": "structure"
    },
    "TagResourceResponse": {
      "members": {},
      "type": "structure"
    },
    "TagValue": {
      "max": 256,
      "min": 0,
      "type": "string"
    },
    "TargetPer": {
      "max": 100,
      "min": 0,
      "type": "integer"
    },
    "TestWirelessDeviceRequest": {
      "members": {
        "Id": {
          "documentation": "<p>The ID of the wireless device to test.</p>",
          "location": "uri",
          "locationName": "Id",
          "shape": "WirelessDeviceId"
        }
      },
      "required": [
        "Id"
      ],
      "type": "structure"
    },
    "TestWirelessDeviceResponse": {
      "members": {
        "Result": {
          "documentation": "<p>The result returned by the test.</p>",
          "shape": "Result"
        }
      },
      "type": "structure"
    },
    "ThingArn": {
      "type": "string"
    },
    "ThingName": {
      "type": "string"
    },
    "ThrottlingException": {
      "documentation": "<p>The request was denied because it exceeded the allowed API request rate.</p>",
      "error": {
        "httpStatusCode": 429
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "Message"
        }
      },
      "type": "structure"
    },
    "TooManyTagsException": {
      "documentation": "<p>The request was denied because the resource can't have any more tags.</p>",
      "error": {
        "httpStatusCode": 400
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "Message"
        },
        "ResourceName": {
          "documentation": "<p>Name of the resource that exceeds maximum number of tags allowed.</p>",
          "shape": "AmazonResourceName"
        }
      },
      "type": "structure"
    },
    "TraceContent": {
      "documentation": "<p>Trace content for your wireless gateway and wireless device resources.</p>",
      "members": {
        "LogLevel": {
          "shape": "LogLevel"
        },
        "WirelessDeviceFrameInfo": {
          "shape": "WirelessDeviceFrameInfo"
        }
      },
      "type": "structure"
    },
    "TransmissionInterval": {
      "max": 604800,
      "min": 1,
      "type": "integer"
    },
    "TransmitMode": {
      "max": 1,
      "min": 0,
      "type": "integer"
    },
    "UlBucketSize": {
      "max": 2147483647,
      "min": 0,
      "type": "integer"
    },
    "UlRate": {
      "max": 2147483647,
      "min": 0,
      "type": "integer"
    },
    "UlRatePolicy": {
      "max": 256,
      "type": "string"
    },
    "UntagResourceRequest": {
      "members": {
        "ResourceArn": {
          "documentation": "<p>The ARN of the resource to remove tags from.</p>",
          "location": "querystring",
          "locationName": "resourceArn",
          "shape": "AmazonResourceName"
        },
        "TagKeys": {
          "documentation": "<p>A list of the keys of the tags to remove from the resource.</p>",
          "location": "querystring",
          "locationName": "tagKeys",
          "shape": "TagKeyList"
        }
      },
      "required": [
        "ResourceArn",
        "TagKeys"
      ],
      "type": "structure"
    },
    "UntagResourceResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateAbpV1_0_x": {
      "documentation": "<p>ABP device object for LoRaWAN specification v1.0.x</p>",
      "members": {
        "FCntStart": {
          "documentation": "<p>The FCnt init value.</p>",
          "shape": "FCntStart"
        }
      },
      "type": "structure"
    },
    "UpdateAbpV1_1": {
      "documentation": "<p>ABP device object for LoRaWAN specification v1.1</p>",
      "members": {
        "FCntStart": {
          "documentation": "<p>The FCnt init value.</p>",
          "shape": "FCntStart"
        }
      },
      "type": "structure"
    },
    "UpdateDataSource": {
      "max": 4096,
      "min": 1,
      "type": "string"
    },
    "UpdateDestinationRequest": {
      "members": {
        "Description": {
          "documentation": "<p>A new description of the resource.</p>",
          "shape": "Description"
        },
        "Expression": {
          "documentation": "<p>The new rule name or topic rule to send messages to.</p>",
          "shape": "Expression"
        },
        "ExpressionType": {
          "documentation": "<p>The type of value in <code>Expression</code>.</p>",
          "shape": "ExpressionType"
        },
        "Name": {
          "documentation": "<p>The new name of the resource.</p>",
          "location": "uri",
          "locationName": "Name",
          "shape": "DestinationName"
        },
        "RoleArn": {
          "documentation": "<p>The ARN of the IAM Role that authorizes the destination.</p>",
          "shape": "RoleArn"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "UpdateDestinationResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateEventConfigurationByResourceTypesRequest": {
      "members": {
        "ConnectionStatus": {
          "documentation": "<p>Connection status resource type event configuration object for enabling and disabling wireless gateway topic.</p>",
          "shape": "ConnectionStatusResourceTypeEventConfiguration"
        },
        "DeviceRegistrationState": {
          "documentation": "<p>Device registration state resource type event configuration object for enabling and disabling wireless gateway topic.</p>",
          "shape": "DeviceRegistrationStateResourceTypeEventConfiguration"
        },
        "Join": {
          "documentation": "<p>Join resource type event configuration object for enabling and disabling wireless device topic.</p>",
          "shape": "JoinResourceTypeEventConfiguration"
        },
        "MessageDeliveryStatus": {
          "documentation": "<p>Message delivery status resource type event configuration object for enabling and disabling wireless device topic.</p>",
          "shape": "MessageDeliveryStatusResourceTypeEventConfiguration"
        },
        "Proximity": {
          "documentation": "<p>Proximity resource type event configuration object for enabling and disabling wireless gateway topic.</p>",
          "shape": "ProximityResourceTypeEventConfiguration"
        }
      },
      "type": "structure"
    },
    "UpdateEventConfigurationByResourceTypesResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateFPorts": {
      "documentation": "<p>Object for updating the FPorts information.</p>",
      "members": {
        "Positioning": {
          "documentation": "<p>Positioning FPorts for the ClockSync, Stream, and GNSS functions.</p>",
          "shape": "Positioning"
        }
      },
      "type": "structure"
    },
    "UpdateFuotaTaskRequest": {
      "members": {
        "Description": {
          "shape": "Description"
        },
        "FirmwareUpdateImage": {
          "shape": "FirmwareUpdateImage"
        },
        "FirmwareUpdateRole": {
          "shape": "FirmwareUpdateRole"
        },
        "Id": {
          "location": "uri",
          "locationName": "Id",
          "shape": "FuotaTaskId"
        },
        "LoRaWAN": {
          "shape": "LoRaWANFuotaTask"
        },
        "Name": {
          "shape": "FuotaTaskName"
        }
      },
      "required": [
        "Id"
      ],
      "type": "structure"
    },
    "UpdateFuotaTaskResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateLogLevelsByResourceTypesRequest": {
      "members": {
        "DefaultLogLevel": {
          "shape": "LogLevel"
        },
        "WirelessDeviceLogOptions": {
          "shape": "WirelessDeviceLogOptionList"
        },
        "WirelessGatewayLogOptions": {
          "shape": "WirelessGatewayLogOptionList"
        }
      },
      "type": "structure"
    },
    "UpdateLogLevelsByResourceTypesResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateMulticastGroupRequest": {
      "members": {
        "Description": {
          "shape": "Description"
        },
        "Id": {
          "location": "uri",
          "locationName": "Id",
          "shape": "MulticastGroupId"
        },
        "LoRaWAN": {
          "shape": "LoRaWANMulticast"
        },
        "Name": {
          "shape": "MulticastGroupName"
        }
      },
      "required": [
        "Id"
      ],
      "type": "structure"
    },
    "UpdateMulticastGroupResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateNetworkAnalyzerConfigurationRequest": {
      "members": {
        "ConfigurationName": {
          "location": "uri",
          "locationName": "ConfigurationName",
          "shape": "NetworkAnalyzerConfigurationName"
        },
        "Description": {
          "shape": "Description"
        },
        "TraceContent": {
          "shape": "TraceContent"
        },
        "WirelessDevicesToAdd": {
          "documentation": "<p>Wireless device resources to add to the network analyzer configuration. Provide the <code>WirelessDeviceId</code> of the resource to add in the input array.</p>",
          "shape": "WirelessDeviceList"
        },
        "WirelessDevicesToRemove": {
          "documentation": "<p>Wireless device resources to remove from the network analyzer configuration. Provide the <code>WirelessDeviceId</code> of the resources to remove in the input array.</p>",
          "shape": "WirelessDeviceList"
        },
        "WirelessGatewaysToAdd": {
          "documentation": "<p>Wireless gateway resources to add to the network analyzer configuration. Provide the <code>WirelessGatewayId</code> of the resource to add in the input array.</p>",
          "shape": "WirelessGatewayList"
        },
        "WirelessGatewaysToRemove": {
          "documentation": "<p>Wireless gateway resources to remove from the network analyzer configuration. Provide the <code>WirelessGatewayId</code> of the resources to remove in the input array.</p>",
          "shape": "WirelessGatewayList"
        }
      },
      "required": [
        "ConfigurationName"
      ],
      "type": "structure"
    },
    "UpdateNetworkAnalyzerConfigurationResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdatePartnerAccountRequest": {
      "members": {
        "PartnerAccountId": {
          "documentation": "<p>The ID of the partner account to update.</p>",
          "location": "uri",
          "locationName": "PartnerAccountId",
          "shape": "PartnerAccountId"
        },
        "PartnerType": {
          "documentation": "<p>The partner type.</p>",
          "location": "querystring",
          "locationName": "partnerType",
          "shape": "PartnerType"
        },
        "Sidewalk": {
          "documentation": "<p>The Sidewalk account credentials.</p>",
          "shape": "SidewalkUpdateAccount"
        }
      },
      "required": [
        "Sidewalk",
        "PartnerAccountId",
        "PartnerType"
      ],
      "type": "structure"
    },
    "UpdatePartnerAccountResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdatePositionRequest": {
      "members": {
        "Position": {
          "documentation": "<p>The position information of the resource.</p>",
          "shape": "PositionCoordinate"
        },
        "ResourceIdentifier": {
          "documentation": "<p>Resource identifier of the resource for which position is updated.</p>",
          "location": "uri",
          "locationName": "ResourceIdentifier",
          "shape": "PositionResourceIdentifier"
        },
        "ResourceType": {
          "documentation": "<p>Resource type of the resource for which position is updated.</p>",
          "location": "querystring",
          "locationName": "resourceType",
          "shape": "PositionResourceType"
        }
      },
      "required": [
        "ResourceIdentifier",
        "ResourceType",
        "Position"
      ],
      "type": "structure"
    },
    "UpdatePositionResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateResourceEventConfigurationRequest": {
      "members": {
        "ConnectionStatus": {
          "documentation": "<p>Event configuration for the connection status event.</p>",
          "shape": "ConnectionStatusEventConfiguration"
        },
        "DeviceRegistrationState": {
          "documentation": "<p>Event configuration for the device registration state event.</p>",
          "shape": "DeviceRegistrationStateEventConfiguration"
        },
        "Identifier": {
          "documentation": "<p>Resource identifier to opt in for event messaging.</p>",
          "location": "uri",
          "locationName": "Identifier",
          "shape": "Identifier"
        },
        "IdentifierType": {
          "documentation": "<p>Identifier type of the particular resource identifier for event configuration.</p>",
          "location": "querystring",
          "locationName": "identifierType",
          "shape": "IdentifierType"
        },
        "Join": {
          "documentation": "<p>Event configuration for the join event.</p>",
          "shape": "JoinEventConfiguration"
        },
        "MessageDeliveryStatus": {
          "documentation": "<p>Event configuration for the message delivery status event.</p>",
          "shape": "MessageDeliveryStatusEventConfiguration"
        },
        "PartnerType": {
          "documentation": "<p>Partner type of the resource if the identifier type is <code>PartnerAccountId</code> </p>",
          "location": "querystring",
          "locationName": "partnerType",
          "shape": "EventNotificationPartnerType"
        },
        "Proximity": {
          "documentation": "<p>Event configuration for the proximity event.</p>",
          "shape": "ProximityEventConfiguration"
        }
      },
      "required": [
        "Identifier",
        "IdentifierType"
      ],
      "type": "structure"
    },
    "UpdateResourceEventConfigurationResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateSignature": {
      "max": 4096,
      "min": 1,
      "type": "string"
    },
    "UpdateWirelessDeviceRequest": {
      "members": {
        "Description": {
          "documentation": "<p>A new description of the resource.</p>",
          "shape": "Description"
        },
        "DestinationName": {
          "documentation": "<p>The name of the new destination for the device.</p>",
          "shape": "DestinationName"
        },
        "Id": {
          "documentation": "<p>The ID of the resource to update.</p>",
          "location": "uri",
          "locationName": "Id",
          "shape": "WirelessDeviceId"
        },
        "LoRaWAN": {
          "documentation": "<p>The updated wireless device's configuration.</p>",
          "shape": "LoRaWANUpdateDevice"
        },
        "Name": {
          "documentation": "<p>The new name of the resource.</p>",
          "shape": "WirelessDeviceName"
        }
      },
      "required": [
        "Id"
      ],
      "type": "structure"
    },
    "UpdateWirelessDeviceResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateWirelessGatewayRequest": {
      "members": {
        "Description": {
          "documentation": "<p>A new description of the resource.</p>",
          "shape": "Description"
        },
        "Id": {
          "documentation": "<p>The ID of the resource to update.</p>",
          "location": "uri",
          "locationName": "Id",
          "shape": "WirelessGatewayId"
        },
        "JoinEuiFilters": {
          "shape": "JoinEuiFilters"
        },
        "Name": {
          "documentation": "<p>The new name of the resource.</p>",
          "shape": "WirelessGatewayName"
        },
        "NetIdFilters": {
          "shape": "NetIdFilters"
        }
      },
      "required": [
        "Id"
      ],
      "type": "structure"
    },
    "UpdateWirelessGatewayResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateWirelessGatewayTaskCreate": {
      "documentation": "<p>UpdateWirelessGatewayTaskCreate object.</p>",
      "members": {
        "LoRaWAN": {
          "documentation": "<p>The properties that relate to the LoRaWAN wireless gateway.</p>",
          "shape": "LoRaWANUpdateGatewayTaskCreate"
        },
        "UpdateDataRole": {
          "documentation": "<p>The IAM role used to read data from the S3 bucket.</p>",
          "shape": "UpdateDataSource"
        },
        "UpdateDataSource": {
          "documentation": "<p>The link to the S3 bucket.</p>",
          "shape": "UpdateDataSource"
        }
      },
      "type": "structure"
    },
    "UpdateWirelessGatewayTaskEntry": {
      "documentation": "<p>UpdateWirelessGatewayTaskEntry object.</p>",
      "members": {
        "Arn": {
          "documentation": "<p>The Amazon Resource Name of the resource.</p>",
          "shape": "WirelessGatewayTaskDefinitionArn"
        },
        "Id": {
          "documentation": "<p>The ID of the new wireless gateway task entry.</p>",
          "shape": "WirelessGatewayTaskDefinitionId"
        },
        "LoRaWAN": {
          "documentation": "<p>The properties that relate to the LoRaWAN wireless gateway.</p>",
          "shape": "LoRaWANUpdateGatewayTaskEntry"
        }
      },
      "type": "structure"
    },
    "ValidationException": {
      "documentation": "<p>The input did not meet the specified constraints.</p>",
      "error": {
        "httpStatusCode": 400
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "Message"
        }
      },
      "type": "structure"
    },
    "VerticalAccuracy": {
      "min": 0,
      "type": "float"
    },
    "WirelessDeviceArn": {
      "type": "string"
    },
    "WirelessDeviceEvent": {
      "documentation": "<p>The event for a log message, if the log message is tied to a wireless device.</p>",
      "enum": [
        "Join",
        "Rejoin",
        "Uplink_Data",
        "Downlink_Data",
        "Registration"
      ],
      "type": "string"
    },
    "WirelessDeviceEventLogOption": {
      "documentation": "<p>The log options for a wireless device event and can be used to set log levels for a specific wireless device event.</p> <p>For a LoRaWAN device, possible events for a log messsage are: <code>Join</code>, <code>Rejoin</code>, <code>Downlink_Data</code>, and <code>Uplink_Data</code>. For a Sidewalk device, possible events for a log message are <code>Registration</code>, <code>Downlink_Data</code>, and <code>Uplink_Data</code>.</p>",
      "members": {
        "Event": {
          "shape": "WirelessDeviceEvent"
        },
        "LogLevel": {
          "shape": "LogLevel"
        }
      },
      "required": [
        "Event",
        "LogLevel"
      ],
      "type": "structure"
    },
    "WirelessDeviceEventLogOptionList": {
      "documentation": "<p>The list of wireless device event log options.</p>",
      "member": {
        "shape": "WirelessDeviceEventLogOption"
      },
      "type": "list"
    },
    "WirelessDeviceFrameInfo": {
      "documentation": "<p> <code>FrameInfo</code> of your wireless device resources for the trace content. Use FrameInfo to debug the communication between your LoRaWAN end devices and the network server.</p>",
      "enum": [
        "ENABLED",
        "DISABLED"
      ],
      "type": "string"
    },
    "WirelessDeviceId": {
      "documentation": "<p>The ID of the wireless device.</p>",
      "max": 256,
      "type": "string"
    },
    "WirelessDeviceIdType": {
      "enum": [
        "WirelessDeviceId",
        "DevEui",
        "ThingName",
        "SidewalkManufacturingSn"
      ],
      "type": "string"
    },
    "WirelessDeviceList": {
      "max": 250,
      "member": {
        "shape": "WirelessDeviceId"
      },
      "min": 0,
      "type": "list"
    },
    "WirelessDeviceLogOption": {
      "documentation": "<p>The log options for wireless devices and can be used to set log levels for a specific type of wireless device.</p>",
      "members": {
        "Events": {
          "shape": "WirelessDeviceEventLogOptionList"
        },
        "LogLevel": {
          "shape": "LogLevel"
        },
        "Type": {
          "documentation": "<p>The wireless device type.</p>",
          "shape": "WirelessDeviceType"
        }
      },
      "required": [
        "Type",
        "LogLevel"
      ],
      "type": "structure"
    },
    "WirelessDeviceLogOptionList": {
      "documentation": "<p>The list of wireless device log options.</p>",
      "member": {
        "shape": "WirelessDeviceLogOption"
      },
      "type": "list"
    },
    "WirelessDeviceName": {
      "max": 256,
      "type": "string"
    },
    "WirelessDeviceStatistics": {
      "documentation": "<p>Information about a wireless device's operation.</p>",
      "members": {
        "Arn": {
          "documentation": "<p>The Amazon Resource Name of the resource.</p>",
          "shape": "WirelessDeviceArn"
        },
        "DestinationName": {
          "documentation": "<p>The name of the destination to which the device is assigned.</p>",
          "shape": "DestinationName"
        },
        "FuotaDeviceStatus": {
          "shape": "FuotaDeviceStatus"
        },
        "Id": {
          "documentation": "<p>The ID of the wireless device reporting the data.</p>",
          "shape": "WirelessDeviceId"
        },
        "LastUplinkReceivedAt": {
          "documentation": "<p>The date and time when the most recent uplink was received.</p>",
          "shape": "ISODateTimeString"
        },
        "LoRaWAN": {
          "documentation": "<p>LoRaWAN device info.</p>",
          "shape": "LoRaWANListDevice"
        },
        "McGroupId": {
          "shape": "McGroupId"
        },
        "MulticastDeviceStatus": {
          "documentation": "<p>The status of the wireless device in the multicast group.</p>",
          "shape": "MulticastDeviceStatus"
        },
        "Name": {
          "documentation": "<p>The name of the resource.</p>",
          "shape": "WirelessDeviceName"
        },
        "Sidewalk": {
          "documentation": "<p>The Sidewalk account credentials.</p>",
          "shape": "SidewalkListDevice"
        },
        "Type": {
          "documentation": "<p>The wireless device type.</p>",
          "shape": "WirelessDeviceType"
        }
      },
      "type": "structure"
    },
    "WirelessDeviceStatisticsList": {
      "member": {
        "shape": "WirelessDeviceStatistics"
      },
      "type": "list"
    },
    "WirelessDeviceType": {
      "enum": [
        "Sidewalk",
        "LoRaWAN"
      ],
      "type": "string"
    },
    "WirelessGatewayArn": {
      "type": "string"
    },
    "WirelessGatewayEvent": {
      "documentation": "<p>The event for a log message, if the log message is tied to a wireless gateway.</p>",
      "enum": [
        "CUPS_Request",
        "Certificate"
      ],
      "type": "string"
    },
    "WirelessGatewayEventLogOption": {
      "documentation": "<p>The log options for a wireless gateway event and can be used to set log levels for a specific wireless gateway event.</p> <p>For a LoRaWAN gateway, possible events for a log message are <code>CUPS_Request</code> and <code>Certificate</code>.</p>",
      "members": {
        "Event": {
          "shape": "WirelessGatewayEvent"
        },
        "LogLevel": {
          "shape": "LogLevel"
        }
      },
      "required": [
        "Event",
        "LogLevel"
      ],
      "type": "structure"
    },
    "WirelessGatewayEventLogOptionList": {
      "documentation": "<p>The list of wireless gateway event log options.</p>",
      "member": {
        "shape": "WirelessGatewayEventLogOption"
      },
      "type": "list"
    },
    "WirelessGatewayId": {
      "max": 256,
      "type": "string"
    },
    "WirelessGatewayIdType": {
      "enum": [
        "GatewayEui",
        "WirelessGatewayId",
        "ThingName"
      ],
      "type": "string"
    },
    "WirelessGatewayList": {
      "member": {
        "shape": "WirelessGatewayId"
      },
      "type": "list"
    },
    "WirelessGatewayLogOption": {
      "documentation": "<p>The log options for wireless gateways and can be used to set log levels for a specific type of wireless gateway.</p>",
      "members": {
        "Events": {
          "shape": "WirelessGatewayEventLogOptionList"
        },
        "LogLevel": {
          "shape": "LogLevel"
        },
        "Type": {
          "shape": "WirelessGatewayType"
        }
      },
      "required": [
        "Type",
        "LogLevel"
      ],
      "type": "structure"
    },
    "WirelessGatewayLogOptionList": {
      "documentation": "<p>The list of wireless gateway log options.</p>",
      "member": {
        "shape": "WirelessGatewayLogOption"
      },
      "type": "list"
    },
    "WirelessGatewayName": {
      "max": 256,
      "type": "string"
    },
    "WirelessGatewayServiceType": {
      "enum": [
        "CUPS",
        "LNS"
      ],
      "type": "string"
    },
    "WirelessGatewayStatistics": {
      "documentation": "<p>Information about a wireless gateway's operation.</p>",
      "members": {
        "Arn": {
          "documentation": "<p>The Amazon Resource Name of the resource.</p>",
          "shape": "WirelessGatewayArn"
        },
        "Description": {
          "documentation": "<p>The description of the resource.</p>",
          "shape": "Description"
        },
        "Id": {
          "documentation": "<p>The ID of the wireless gateway reporting the data.</p>",
          "shape": "WirelessGatewayId"
        },
        "LastUplinkReceivedAt": {
          "documentation": "<p>The date and time when the most recent uplink was received.</p>",
          "shape": "ISODateTimeString"
        },
        "LoRaWAN": {
          "documentation": "<p>LoRaWAN gateway info.</p>",
          "shape": "LoRaWANGateway"
        },
        "Name": {
          "documentation": "<p>The name of the resource.</p>",
          "shape": "WirelessGatewayName"
        }
      },
      "type": "structure"
    },
    "WirelessGatewayStatisticsList": {
      "member": {
        "shape": "WirelessGatewayStatistics"
      },
      "type": "list"
    },
    "WirelessGatewayTaskDefinitionArn": {
      "type": "string"
    },
    "WirelessGatewayTaskDefinitionId": {
      "max": 36,
      "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
      "type": "string"
    },
    "WirelessGatewayTaskDefinitionList": {
      "member": {
        "shape": "UpdateWirelessGatewayTaskEntry"
      },
      "type": "list"
    },
    "WirelessGatewayTaskDefinitionType": {
      "enum": [
        "UPDATE"
      ],
      "type": "string"
    },
    "WirelessGatewayTaskName": {
      "max": 2048,
      "min": 1,
      "type": "string"
    },
    "WirelessGatewayTaskStatus": {
      "enum": [
        "PENDING",
        "IN_PROGRESS",
        "FIRST_RETRY",
        "SECOND_RETRY",
        "COMPLETED",
        "FAILED"
      ],
      "type": "string"
    },
    "WirelessGatewayType": {
      "documentation": "<p>The wireless gateway type.</p>",
      "enum": [
        "LoRaWAN"
      ],
      "type": "string"
    },
    "WirelessMetadata": {
      "documentation": "<p>WirelessMetadata object.</p>",
      "members": {
        "LoRaWAN": {
          "documentation": "<p>LoRaWAN device info.</p>",
          "shape": "LoRaWANSendDataToDevice"
        },
        "Sidewalk": {
          "documentation": "<p>The Sidewalk account credentials.</p>",
          "shape": "SidewalkSendDataToDevice"
        }
      },
      "type": "structure"
    }
  },
  "version": "2.0"
}
