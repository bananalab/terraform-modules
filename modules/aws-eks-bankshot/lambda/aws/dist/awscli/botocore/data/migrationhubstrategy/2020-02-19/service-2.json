{
  "documentation": "<p><fullname>Migration Hub Strategy Recommendations</fullname></p> <pre><code> &lt;p&gt;This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see &lt;a href=&quot;http://aws.amazon.com/tools/#SDKs&quot;&gt;AWS SDKs&lt;/a&gt;.&lt;/p&gt; </code></pre>",
  "metadata": {
    "apiVersion": "2020-02-19",
    "endpointPrefix": "migrationhub-strategy",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "Migration Hub Strategy Recommendations",
    "serviceId": "MigrationHubStrategy",
    "signatureVersion": "v4",
    "signingName": "migrationhub-strategy",
    "uid": "migrationhubstrategy-2020-02-19"
  },
  "operations": {
    "GetApplicationComponentDetails": {
      "documentation": "<p> Retrieves details about an application component. </p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/get-applicationcomponent-details/{applicationComponentId}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetApplicationComponentDetailsRequest"
      },
      "name": "GetApplicationComponentDetails",
      "output": {
        "shape": "GetApplicationComponentDetailsResponse"
      }
    },
    "GetApplicationComponentStrategies": {
      "documentation": "<p> Retrieves a list of all the recommended strategies and tools for an application component running on a server. </p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/get-applicationcomponent-strategies/{applicationComponentId}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetApplicationComponentStrategiesRequest"
      },
      "name": "GetApplicationComponentStrategies",
      "output": {
        "shape": "GetApplicationComponentStrategiesResponse"
      }
    },
    "GetAssessment": {
      "documentation": "<p> Retrieves the status of an on-going assessment. </p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/get-assessment/{id}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetAssessmentRequest"
      },
      "name": "GetAssessment",
      "output": {
        "shape": "GetAssessmentResponse"
      }
    },
    "GetImportFileTask": {
      "documentation": "<p> Retrieves the details about a specific import task. </p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/get-import-file-task/{id}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetImportFileTaskRequest"
      },
      "name": "GetImportFileTask",
      "output": {
        "shape": "GetImportFileTaskResponse"
      }
    },
    "GetPortfolioPreferences": {
      "documentation": "<p> Retrieves your migration and modernization preferences. </p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/get-portfolio-preferences",
        "responseCode": 200
      },
      "input": {
        "shape": "GetPortfolioPreferencesRequest"
      },
      "name": "GetPortfolioPreferences",
      "output": {
        "shape": "GetPortfolioPreferencesResponse"
      }
    },
    "GetPortfolioSummary": {
      "documentation": "<p> Retrieves overall summary including the number of servers to rehost and the overall number of anti-patterns. </p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/get-portfolio-summary",
        "responseCode": 200
      },
      "input": {
        "shape": "GetPortfolioSummaryRequest"
      },
      "name": "GetPortfolioSummary",
      "output": {
        "shape": "GetPortfolioSummaryResponse"
      }
    },
    "GetRecommendationReportDetails": {
      "documentation": "<p> Retrieves detailed information about the specified recommendation report. </p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/get-recommendation-report-details/{id}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetRecommendationReportDetailsRequest"
      },
      "name": "GetRecommendationReportDetails",
      "output": {
        "shape": "GetRecommendationReportDetailsResponse"
      }
    },
    "GetServerDetails": {
      "documentation": "<p> Retrieves detailed information about a specified server. </p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/get-server-details/{serverId}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetServerDetailsRequest"
      },
      "name": "GetServerDetails",
      "output": {
        "shape": "GetServerDetailsResponse"
      }
    },
    "GetServerStrategies": {
      "documentation": "<p> Retrieves recommended strategies and tools for the specified server. </p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/get-server-strategies/{serverId}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetServerStrategiesRequest"
      },
      "name": "GetServerStrategies",
      "output": {
        "shape": "GetServerStrategiesResponse"
      }
    },
    "ListApplicationComponents": {
      "documentation": "<p> Retrieves a list of all the application components (processes). </p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ServiceLinkedRoleLockClientException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/list-applicationcomponents",
        "responseCode": 200
      },
      "input": {
        "shape": "ListApplicationComponentsRequest"
      },
      "name": "ListApplicationComponents",
      "output": {
        "shape": "ListApplicationComponentsResponse"
      }
    },
    "ListCollectors": {
      "documentation": "<p> Retrieves a list of all the installed collectors. </p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/list-collectors",
        "responseCode": 200
      },
      "input": {
        "shape": "ListCollectorsRequest"
      },
      "name": "ListCollectors",
      "output": {
        "shape": "ListCollectorsResponse"
      }
    },
    "ListImportFileTask": {
      "documentation": "<p> Retrieves a list of all the imports performed. </p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/list-import-file-task",
        "responseCode": 200
      },
      "input": {
        "shape": "ListImportFileTaskRequest"
      },
      "name": "ListImportFileTask",
      "output": {
        "shape": "ListImportFileTaskResponse"
      }
    },
    "ListServers": {
      "documentation": "<p> Returns a list of all the servers. </p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/list-servers",
        "responseCode": 200
      },
      "input": {
        "shape": "ListServersRequest"
      },
      "name": "ListServers",
      "output": {
        "shape": "ListServersResponse"
      }
    },
    "PutPortfolioPreferences": {
      "documentation": "<p> Saves the specified migration and modernization preferences. </p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/put-portfolio-preferences",
        "responseCode": 200
      },
      "input": {
        "shape": "PutPortfolioPreferencesRequest"
      },
      "name": "PutPortfolioPreferences",
      "output": {
        "shape": "PutPortfolioPreferencesResponse"
      }
    },
    "StartAssessment": {
      "documentation": "<p> Starts the assessment of an on-premises environment. </p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/start-assessment",
        "responseCode": 200
      },
      "input": {
        "shape": "StartAssessmentRequest"
      },
      "name": "StartAssessment",
      "output": {
        "shape": "StartAssessmentResponse"
      }
    },
    "StartImportFileTask": {
      "documentation": "<p> Starts a file import. </p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/start-import-file-task",
        "responseCode": 200
      },
      "input": {
        "shape": "StartImportFileTaskRequest"
      },
      "name": "StartImportFileTask",
      "output": {
        "shape": "StartImportFileTaskResponse"
      }
    },
    "StartRecommendationReportGeneration": {
      "documentation": "<p> Starts generating a recommendation report. </p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/start-recommendation-report-generation",
        "responseCode": 200
      },
      "input": {
        "shape": "StartRecommendationReportGenerationRequest"
      },
      "name": "StartRecommendationReportGeneration",
      "output": {
        "shape": "StartRecommendationReportGenerationResponse"
      }
    },
    "StopAssessment": {
      "documentation": "<p> Stops the assessment of an on-premises environment. </p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/stop-assessment",
        "responseCode": 200
      },
      "input": {
        "shape": "StopAssessmentRequest"
      },
      "name": "StopAssessment",
      "output": {
        "shape": "StopAssessmentResponse"
      }
    },
    "UpdateApplicationComponentConfig": {
      "documentation": "<p> Updates the configuration of an application component. </p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/update-applicationcomponent-config/",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateApplicationComponentConfigRequest"
      },
      "name": "UpdateApplicationComponentConfig",
      "output": {
        "shape": "UpdateApplicationComponentConfigResponse"
      }
    },
    "UpdateServerConfig": {
      "documentation": "<p> Updates the configuration of the specified server. </p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/update-server-config/",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateServerConfigRequest"
      },
      "name": "UpdateServerConfig",
      "output": {
        "shape": "UpdateServerConfigResponse"
      }
    }
  },
  "shapes": {
    "AccessDeniedException": {
      "documentation": "<p> The AWS user account does not have permission to perform the action. Check the AWS Identity and Access Management (IAM) policy associated with this account.</p>",
      "error": {
        "httpStatusCode": 403,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "String"
        }
      },
      "required": [
        "message"
      ],
      "type": "structure"
    },
    "AntipatternReportStatus": {
      "enum": [
        "FAILED",
        "IN_PROGRESS",
        "SUCCESS"
      ],
      "type": "string"
    },
    "AntipatternSeveritySummary": {
      "documentation": "<p> Contains the summary of anti-patterns and their severity. </p>",
      "members": {
        "count": {
          "documentation": "<p> Contains the count of anti-patterns. </p>",
          "shape": "Integer"
        },
        "severity": {
          "documentation": "<p> Contains the severity of anti-patterns. </p>",
          "shape": "Severity"
        }
      },
      "type": "structure"
    },
    "AppType": {
      "enum": [
        "DotNetFramework",
        "Java",
        "SQLServer",
        "IIS",
        "Oracle",
        "Other"
      ],
      "type": "string"
    },
    "ApplicationComponentCriteria": {
      "enum": [
        "NOT_DEFINED",
        "APP_NAME",
        "SERVER_ID",
        "APP_TYPE",
        "STRATEGY",
        "DESTINATION"
      ],
      "type": "string"
    },
    "ApplicationComponentDetail": {
      "documentation": "<p> Contains detailed information about an application component. </p>",
      "members": {
        "analysisStatus": {
          "documentation": "<p> The status of analysis, if the application component has source code or an associated database. </p>",
          "shape": "SrcCodeOrDbAnalysisStatus"
        },
        "antipatternReportS3Object": {
          "documentation": "<p> The S3 bucket name and the Amazon S3 key name for the anti-pattern report. </p>",
          "shape": "S3Object"
        },
        "antipatternReportStatus": {
          "documentation": "<p> The status of the anti-pattern report generation.</p>",
          "shape": "AntipatternReportStatus"
        },
        "antipatternReportStatusMessage": {
          "documentation": "<p> The status message for the anti-pattern. </p>",
          "shape": "StatusMessage"
        },
        "appType": {
          "documentation": "<p> The type of application component. </p>",
          "shape": "AppType"
        },
        "associatedServerId": {
          "documentation": "<p> The ID of the server that the application component is running on. </p>",
          "shape": "ServerId"
        },
        "databaseConfigDetail": {
          "documentation": "<p> Configuration details for the database associated with the application component. </p>",
          "shape": "DatabaseConfigDetail"
        },
        "id": {
          "documentation": "<p> The ID of the application component. </p>",
          "shape": "ResourceId"
        },
        "inclusionStatus": {
          "documentation": "<p> Indicates whether the application component has been included for server recommendation or not. </p>",
          "shape": "InclusionStatus"
        },
        "lastAnalyzedTimestamp": {
          "documentation": "<p> The timestamp of when the application component was assessed. </p>",
          "shape": "TimeStamp"
        },
        "listAntipatternSeveritySummary": {
          "documentation": "<p> A list of anti-pattern severity summaries. </p>",
          "shape": "ListAntipatternSeveritySummary"
        },
        "moreServerAssociationExists": {
          "documentation": "<p> Set to true if the application component is running on multiple servers.</p>",
          "shape": "Boolean"
        },
        "name": {
          "documentation": "<p> The name of application component. </p>",
          "shape": "ResourceName"
        },
        "osDriver": {
          "documentation": "<p> OS driver. </p>",
          "shape": "String"
        },
        "osVersion": {
          "documentation": "<p> OS version. </p>",
          "shape": "String"
        },
        "recommendationSet": {
          "documentation": "<p> The top recommendation set for the application component. </p>",
          "shape": "RecommendationSet"
        },
        "resourceSubType": {
          "documentation": "<p> The application component subtype.</p>",
          "shape": "ResourceSubType"
        },
        "sourceCodeRepositories": {
          "documentation": "<p> Details about the source code repository associated with the application component. </p>",
          "shape": "SourceCodeRepositories"
        },
        "statusMessage": {
          "documentation": "<p> A detailed description of the analysis status and any failure message. </p>",
          "shape": "StatusMessage"
        }
      },
      "type": "structure"
    },
    "ApplicationComponentDetails": {
      "member": {
        "shape": "ApplicationComponentDetail"
      },
      "type": "list"
    },
    "ApplicationComponentId": {
      "max": 44,
      "min": 0,
      "pattern": "[0-9a-zA-Z-]+",
      "type": "string"
    },
    "ApplicationComponentStrategies": {
      "member": {
        "shape": "ApplicationComponentStrategy"
      },
      "type": "list"
    },
    "ApplicationComponentStrategy": {
      "documentation": "<p> Contains information about a strategy recommendation for an application component. </p>",
      "members": {
        "isPreferred": {
          "documentation": "<p> Set to true if the recommendation is set as preferred. </p>",
          "shape": "Boolean"
        },
        "recommendation": {
          "documentation": "<p> Strategy recommendation for the application component. </p>",
          "shape": "RecommendationSet"
        },
        "status": {
          "documentation": "<p> The recommendation status of a strategy for an application component. </p>",
          "shape": "StrategyRecommendation"
        }
      },
      "type": "structure"
    },
    "ApplicationComponentSummary": {
      "documentation": "<p> Contains the summary of application components. </p>",
      "members": {
        "appType": {
          "documentation": "<p> Contains the name of application types. </p>",
          "shape": "AppType"
        },
        "count": {
          "documentation": "<p> Contains the count of application type. </p>",
          "shape": "Integer"
        }
      },
      "type": "structure"
    },
    "ApplicationPreferences": {
      "documentation": "<p> Application preferences that you specify. </p>",
      "members": {
        "managementPreference": {
          "documentation": "<p> Application preferences that you specify to prefer managed environment. </p>",
          "shape": "ManagementPreference"
        }
      },
      "type": "structure"
    },
    "AssessmentStatus": {
      "enum": [
        "IN_PROGRESS",
        "COMPLETE",
        "FAILED",
        "STOPPED"
      ],
      "type": "string"
    },
    "AssessmentSummary": {
      "documentation": "<p> Contains the summary of the assessment results. </p>",
      "members": {
        "antipatternReportS3Object": {
          "documentation": "<p> The Amazon S3 object containing the anti-pattern report. </p>",
          "shape": "S3Object"
        },
        "antipatternReportStatus": {
          "documentation": "<p> The status of the anti-pattern report. </p>",
          "shape": "AntipatternReportStatus"
        },
        "antipatternReportStatusMessage": {
          "documentation": "<p> The status message of the anti-pattern report. </p>",
          "shape": "StatusMessage"
        },
        "lastAnalyzedTimestamp": {
          "documentation": "<p> The time the assessment was performed. </p>",
          "shape": "TimeStamp"
        },
        "listAntipatternSeveritySummary": {
          "documentation": "<p> List of AntipatternSeveritySummary. </p>",
          "shape": "ListAntipatternSeveritySummary"
        },
        "listApplicationComponentStrategySummary": {
          "documentation": "<p> List of ApplicationComponentStrategySummary. </p>",
          "shape": "ListStrategySummary"
        },
        "listApplicationComponentSummary": {
          "documentation": "<p> List of ApplicationComponentSummary. </p>",
          "shape": "ListApplicationComponentSummary"
        },
        "listServerStrategySummary": {
          "documentation": "<p> List of ServerStrategySummary. </p>",
          "shape": "ListStrategySummary"
        },
        "listServerSummary": {
          "documentation": "<p> List of ServerSummary. </p>",
          "shape": "ListServerSummary"
        }
      },
      "type": "structure"
    },
    "AssociatedApplication": {
      "documentation": "<p> Object containing details about applications as defined in Application Discovery Service. </p>",
      "members": {
        "id": {
          "documentation": "<p> ID of the application as defined in Application Discovery Service. </p>",
          "shape": "String"
        },
        "name": {
          "documentation": "<p> Name of the application as defined in Application Discovery Service. </p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "AssociatedApplications": {
      "member": {
        "shape": "AssociatedApplication"
      },
      "type": "list"
    },
    "AssociatedServerIDs": {
      "member": {
        "shape": "String"
      },
      "type": "list"
    },
    "AsyncTaskId": {
      "max": 52,
      "min": 0,
      "pattern": "[0-9a-z-:]+",
      "type": "string"
    },
    "AwsManagedResources": {
      "documentation": "<p> Object containing the choice of application destination that you specify. </p>",
      "members": {
        "targetDestination": {
          "documentation": "<p> The choice of application destination that you specify. </p>",
          "shape": "AwsManagedTargetDestinations"
        }
      },
      "required": [
        "targetDestination"
      ],
      "type": "structure"
    },
    "AwsManagedTargetDestination": {
      "enum": [
        "None specified",
        "AWS Elastic BeanStalk",
        "AWS Fargate"
      ],
      "type": "string"
    },
    "AwsManagedTargetDestinations": {
      "max": 1,
      "member": {
        "shape": "AwsManagedTargetDestination"
      },
      "min": 1,
      "type": "list"
    },
    "Boolean": {
      "box": true,
      "type": "boolean"
    },
    "BusinessGoals": {
      "documentation": "<p> Business goals that you specify. </p>",
      "members": {
        "licenseCostReduction": {
          "documentation": "<p> Business goal to reduce license costs. </p>",
          "shape": "BusinessGoalsInteger"
        },
        "modernizeInfrastructureWithCloudNativeTechnologies": {
          "documentation": "<p> Business goal to modernize infrastructure by moving to cloud native technologies. </p>",
          "shape": "BusinessGoalsInteger"
        },
        "reduceOperationalOverheadWithManagedServices": {
          "documentation": "<p> Business goal to reduce the operational overhead on the team by moving into managed services. </p>",
          "shape": "BusinessGoalsInteger"
        },
        "speedOfMigration": {
          "documentation": "<p> Business goal to achieve migration at a fast pace. </p>",
          "shape": "BusinessGoalsInteger"
        }
      },
      "type": "structure"
    },
    "BusinessGoalsInteger": {
      "box": true,
      "max": 5,
      "min": 1,
      "type": "integer"
    },
    "Collector": {
      "documentation": "<p> Process data collector that runs in the environment that you specify. </p>",
      "members": {
        "collectorHealth": {
          "documentation": "<p> Indicates the health of a collector. </p>",
          "shape": "CollectorHealth"
        },
        "collectorId": {
          "documentation": "<p> The ID of the collector. </p>",
          "shape": "String"
        },
        "collectorVersion": {
          "documentation": "<p> Current version of the collector that is running in the environment that you specify. </p>",
          "shape": "String"
        },
        "hostName": {
          "documentation": "<p> Hostname of the server that is hosting the collector. </p>",
          "shape": "String"
        },
        "ipAddress": {
          "documentation": "<p> IP address of the server that is hosting the collector. </p>",
          "shape": "String"
        },
        "lastActivityTimeStamp": {
          "documentation": "<p> Time when the collector last pinged the service. </p>",
          "shape": "String"
        },
        "registeredTimeStamp": {
          "documentation": "<p> Time when the collector registered with the service. </p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "CollectorHealth": {
      "enum": [
        "COLLECTOR_HEALTHY",
        "COLLECTOR_UNHEALTHY"
      ],
      "type": "string"
    },
    "Collectors": {
      "member": {
        "shape": "Collector"
      },
      "type": "list"
    },
    "ConflictException": {
      "documentation": "<p> Exception to indicate that there is an ongoing task when a new task is created. Return when once the existing tasks are complete. </p>",
      "error": {
        "httpStatusCode": 409,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "String"
        }
      },
      "required": [
        "message"
      ],
      "type": "structure"
    },
    "DataCollectionDetails": {
      "documentation": "<p> Detailed information about an assessment. </p>",
      "members": {
        "completionTime": {
          "documentation": "<p> The time the assessment completes. </p>",
          "shape": "TimeStamp"
        },
        "failed": {
          "documentation": "<p> The number of failed servers in the assessment. </p>",
          "shape": "Integer"
        },
        "inProgress": {
          "documentation": "<p> The number of servers with the assessment status <code>IN_PROGESS</code>. </p>",
          "shape": "Integer"
        },
        "servers": {
          "documentation": "<p> The total number of servers in the assessment. </p>",
          "shape": "Integer"
        },
        "startTime": {
          "documentation": "<p> The start time of assessment. </p>",
          "shape": "TimeStamp"
        },
        "status": {
          "documentation": "<p> The status of the assessment. </p>",
          "shape": "AssessmentStatus"
        },
        "success": {
          "documentation": "<p> The number of successful servers in the assessment. </p>",
          "shape": "Integer"
        }
      },
      "type": "structure"
    },
    "DataSourceType": {
      "enum": [
        "ApplicationDiscoveryService",
        "MPA"
      ],
      "type": "string"
    },
    "DatabaseConfigDetail": {
      "documentation": "<p> Configuration information used for assessing databases. </p>",
      "members": {
        "secretName": {
          "documentation": "<p> AWS Secrets Manager key that holds the credentials that you use to connect to a database. </p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "DatabaseManagementPreference": {
      "enum": [
        "AWS-managed",
        "Self-manage",
        "No preference"
      ],
      "type": "string"
    },
    "DatabaseMigrationPreference": {
      "documentation": "<p> Preferences for migrating a database to AWS. </p>",
      "members": {
        "heterogeneous": {
          "documentation": "<p> Indicates whether you are interested in moving from one type of database to another. For example, from SQL Server to Amazon Aurora MySQL-Compatible Edition. </p>",
          "shape": "Heterogeneous"
        },
        "homogeneous": {
          "documentation": "<p> Indicates whether you are interested in moving to the same type of database into AWS. For example, from SQL Server in your environment to SQL Server on AWS. </p>",
          "shape": "Homogeneous"
        },
        "noPreference": {
          "documentation": "<p> Indicated that you do not prefer heterogeneous or homogeneous. </p>",
          "shape": "NoDatabaseMigrationPreference"
        }
      },
      "type": "structure",
      "union": true
    },
    "DatabasePreferences": {
      "documentation": "<p> Preferences on managing your databases on AWS. </p>",
      "members": {
        "databaseManagementPreference": {
          "documentation": "<p> Specifies whether you're interested in self-managed databases or databases managed by AWS. </p>",
          "shape": "DatabaseManagementPreference"
        },
        "databaseMigrationPreference": {
          "documentation": "<p> Specifies your preferred migration path. </p>",
          "shape": "DatabaseMigrationPreference"
        }
      },
      "type": "structure"
    },
    "GetApplicationComponentDetailsRequest": {
      "members": {
        "applicationComponentId": {
          "documentation": "<p> The ID of the application component. The ID is unique within an AWS account.</p>",
          "location": "uri",
          "locationName": "applicationComponentId",
          "shape": "ApplicationComponentId"
        }
      },
      "required": [
        "applicationComponentId"
      ],
      "type": "structure"
    },
    "GetApplicationComponentDetailsResponse": {
      "members": {
        "applicationComponentDetail": {
          "documentation": "<p> Detailed information about an application component. </p>",
          "shape": "ApplicationComponentDetail"
        },
        "associatedApplications": {
          "documentation": "<p> The associated application group as defined in AWS Application Discovery Service. </p>",
          "shape": "AssociatedApplications"
        },
        "associatedServerIds": {
          "documentation": "<p> A list of the IDs of the servers on which the application component is running. </p>",
          "shape": "AssociatedServerIDs"
        },
        "moreApplicationResource": {
          "documentation": "<p> Set to true if the application component belongs to more than one application group. </p>",
          "shape": "Boolean"
        }
      },
      "type": "structure"
    },
    "GetApplicationComponentStrategiesRequest": {
      "members": {
        "applicationComponentId": {
          "documentation": "<p> The ID of the application component. The ID is unique within an AWS account.</p>",
          "location": "uri",
          "locationName": "applicationComponentId",
          "shape": "ApplicationComponentId"
        }
      },
      "required": [
        "applicationComponentId"
      ],
      "type": "structure"
    },
    "GetApplicationComponentStrategiesResponse": {
      "members": {
        "applicationComponentStrategies": {
          "documentation": "<p> A list of application component strategy recommendations. </p>",
          "shape": "ApplicationComponentStrategies"
        }
      },
      "type": "structure"
    },
    "GetAssessmentRequest": {
      "members": {
        "id": {
          "documentation": "<p> The <code>assessmentid</code> returned by <a>StartAssessment</a>.</p>",
          "location": "uri",
          "locationName": "id",
          "shape": "AsyncTaskId"
        }
      },
      "required": [
        "id"
      ],
      "type": "structure"
    },
    "GetAssessmentResponse": {
      "members": {
        "dataCollectionDetails": {
          "documentation": "<p> Detailed information about the assessment. </p>",
          "shape": "DataCollectionDetails"
        },
        "id": {
          "documentation": "<p> The ID for the specific assessment task. </p>",
          "shape": "AsyncTaskId"
        }
      },
      "type": "structure"
    },
    "GetImportFileTaskRequest": {
      "members": {
        "id": {
          "documentation": "<p> The ID of the import file task. This ID is returned in the response of <a>StartImportFileTask</a>. </p>",
          "location": "uri",
          "locationName": "id",
          "shape": "String"
        }
      },
      "required": [
        "id"
      ],
      "type": "structure"
    },
    "GetImportFileTaskResponse": {
      "members": {
        "completionTime": {
          "documentation": "<p> The time that the import task completed. </p>",
          "shape": "TimeStamp"
        },
        "id": {
          "documentation": "<p> The import file task <code>id</code> returned in the response of <a>StartImportFileTask</a>. </p>",
          "shape": "String"
        },
        "importName": {
          "documentation": "<p> The name of the import task given in <a>StartImportFileTask</a>. </p>",
          "shape": "String"
        },
        "inputS3Bucket": {
          "documentation": "<p> The S3 bucket where import file is located. </p>",
          "shape": "importS3Bucket"
        },
        "inputS3Key": {
          "documentation": "<p> The Amazon S3 key name of the import file. </p>",
          "shape": "importS3Key"
        },
        "numberOfRecordsFailed": {
          "documentation": "<p> The number of records that failed to be imported. </p>",
          "shape": "Integer"
        },
        "numberOfRecordsSuccess": {
          "documentation": "<p> The number of records successfully imported. </p>",
          "shape": "Integer"
        },
        "startTime": {
          "documentation": "<p> Start time of the import task. </p>",
          "shape": "TimeStamp"
        },
        "status": {
          "documentation": "<p> Status of import file task. </p>",
          "shape": "ImportFileTaskStatus"
        },
        "statusReportS3Bucket": {
          "documentation": "<p> The S3 bucket name for status report of import task. </p>",
          "shape": "importS3Bucket"
        },
        "statusReportS3Key": {
          "documentation": "<p> The Amazon S3 key name for status report of import task. The report contains details about whether each record imported successfully or why it did not.</p>",
          "shape": "importS3Key"
        }
      },
      "type": "structure"
    },
    "GetPortfolioPreferencesRequest": {
      "members": {},
      "type": "structure"
    },
    "GetPortfolioPreferencesResponse": {
      "members": {
        "applicationPreferences": {
          "documentation": "<p> The transformation preferences for non-database applications. </p>",
          "shape": "ApplicationPreferences"
        },
        "databasePreferences": {
          "documentation": "<p> The transformation preferences for database applications. </p>",
          "shape": "DatabasePreferences"
        },
        "prioritizeBusinessGoals": {
          "documentation": "<p> The rank of business goals based on priority. </p>",
          "shape": "PrioritizeBusinessGoals"
        }
      },
      "type": "structure"
    },
    "GetPortfolioSummaryRequest": {
      "members": {},
      "type": "structure"
    },
    "GetPortfolioSummaryResponse": {
      "members": {
        "assessmentSummary": {
          "documentation": "<p> An assessment summary for the portfolio including the number of servers to rehost and the overall number of anti-patterns. </p>",
          "shape": "AssessmentSummary"
        }
      },
      "type": "structure"
    },
    "GetRecommendationReportDetailsRequest": {
      "members": {
        "id": {
          "documentation": "<p> The recommendation report generation task <code>id</code> returned by <a>StartRecommendationReportGeneration</a>. </p>",
          "location": "uri",
          "locationName": "id",
          "shape": "RecommendationTaskId"
        }
      },
      "required": [
        "id"
      ],
      "type": "structure"
    },
    "GetRecommendationReportDetailsResponse": {
      "members": {
        "id": {
          "documentation": "<p> The ID of the recommendation report generation task. See the response of <a>StartRecommendationReportGeneration</a>. </p>",
          "shape": "RecommendationTaskId"
        },
        "recommendationReportDetails": {
          "documentation": "<p> Detailed information about the recommendation report. </p>",
          "shape": "RecommendationReportDetails"
        }
      },
      "type": "structure"
    },
    "GetServerDetailsRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p> The maximum number of items to include in the response. The maximum value is 100. </p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResult"
        },
        "nextToken": {
          "documentation": "<p> The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set <code>maxResults</code> to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10. </p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        },
        "serverId": {
          "documentation": "<p> The ID of the server. </p>",
          "location": "uri",
          "locationName": "serverId",
          "shape": "ServerId"
        }
      },
      "required": [
        "serverId"
      ],
      "type": "structure"
    },
    "GetServerDetailsResponse": {
      "members": {
        "associatedApplications": {
          "documentation": "<p> The associated application group the server belongs to, as defined in AWS Application Discovery Service. </p>",
          "shape": "AssociatedApplications"
        },
        "nextToken": {
          "documentation": "<p> The token you use to retrieve the next set of results, or null if there are no more results. </p>",
          "shape": "String"
        },
        "serverDetail": {
          "documentation": "<p> Detailed information about the server. </p>",
          "shape": "ServerDetail"
        }
      },
      "type": "structure"
    },
    "GetServerStrategiesRequest": {
      "members": {
        "serverId": {
          "documentation": "<p> The ID of the server. </p>",
          "location": "uri",
          "locationName": "serverId",
          "shape": "ServerId"
        }
      },
      "required": [
        "serverId"
      ],
      "type": "structure"
    },
    "GetServerStrategiesResponse": {
      "members": {
        "serverStrategies": {
          "documentation": "<p> A list of strategy recommendations for the server. </p>",
          "shape": "ServerStrategies"
        }
      },
      "type": "structure"
    },
    "Group": {
      "documentation": "<p> The object containing information about distinct imports or groups for Strategy Recommendations. </p>",
      "members": {
        "name": {
          "documentation": "<p> The key of the specific import group. </p>",
          "shape": "GroupName"
        },
        "value": {
          "documentation": "<p> The value of the specific import group. </p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "GroupIds": {
      "member": {
        "shape": "Group"
      },
      "type": "list"
    },
    "GroupName": {
      "enum": [
        "ExternalId"
      ],
      "type": "string"
    },
    "Heterogeneous": {
      "documentation": "<p> The object containing details about heterogeneous database preferences. </p>",
      "members": {
        "targetDatabaseEngine": {
          "documentation": "<p> The target database engine for heterogeneous database migration preference. </p>",
          "shape": "HeterogeneousTargetDatabaseEngines"
        }
      },
      "required": [
        "targetDatabaseEngine"
      ],
      "type": "structure"
    },
    "HeterogeneousTargetDatabaseEngine": {
      "enum": [
        "None specified",
        "Amazon Aurora",
        "AWS PostgreSQL",
        "MySQL",
        "Microsoft SQL Server",
        "Oracle Database",
        "MariaDB",
        "SAP",
        "Db2 LUW",
        "MongoDB"
      ],
      "type": "string"
    },
    "HeterogeneousTargetDatabaseEngines": {
      "max": 1,
      "member": {
        "shape": "HeterogeneousTargetDatabaseEngine"
      },
      "min": 1,
      "type": "list"
    },
    "Homogeneous": {
      "documentation": "<p> The object containing details about homogeneous database preferences. </p>",
      "members": {
        "targetDatabaseEngine": {
          "documentation": "<p> The target database engine for homogeneous database migration preferences. </p>",
          "shape": "HomogeneousTargetDatabaseEngines"
        }
      },
      "type": "structure"
    },
    "HomogeneousTargetDatabaseEngine": {
      "enum": [
        "None specified"
      ],
      "type": "string"
    },
    "HomogeneousTargetDatabaseEngines": {
      "max": 1,
      "member": {
        "shape": "HomogeneousTargetDatabaseEngine"
      },
      "min": 0,
      "type": "list"
    },
    "IPAddress": {
      "max": 15,
      "min": 0,
      "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
      "type": "string"
    },
    "ImportFileTaskInformation": {
      "documentation": "<p> Information about the import file tasks you request. </p>",
      "members": {
        "completionTime": {
          "documentation": "<p> The time that the import task completes. </p>",
          "shape": "TimeStamp"
        },
        "id": {
          "documentation": "<p> The ID of the import file task. </p>",
          "shape": "String"
        },
        "importName": {
          "documentation": "<p> The name of the import task given in <code>StartImportFileTask</code>. </p>",
          "shape": "String"
        },
        "inputS3Bucket": {
          "documentation": "<p> The S3 bucket where the import file is located. </p>",
          "shape": "importS3Bucket"
        },
        "inputS3Key": {
          "documentation": "<p> The Amazon S3 key name of the import file. </p>",
          "shape": "importS3Key"
        },
        "numberOfRecordsFailed": {
          "documentation": "<p> The number of records that failed to be imported. </p>",
          "shape": "Integer"
        },
        "numberOfRecordsSuccess": {
          "documentation": "<p> The number of records successfully imported. </p>",
          "shape": "Integer"
        },
        "startTime": {
          "documentation": "<p> Start time of the import task. </p>",
          "shape": "TimeStamp"
        },
        "status": {
          "documentation": "<p> Status of import file task. </p>",
          "shape": "ImportFileTaskStatus"
        },
        "statusReportS3Bucket": {
          "documentation": "<p> The S3 bucket name for status report of import task. </p>",
          "shape": "importS3Bucket"
        },
        "statusReportS3Key": {
          "documentation": "<p> The Amazon S3 key name for status report of import task. The report contains details about whether each record imported successfully or why it did not. </p>",
          "shape": "importS3Key"
        }
      },
      "type": "structure"
    },
    "ImportFileTaskStatus": {
      "enum": [
        "ImportInProgress",
        "ImportFailed",
        "ImportPartialSuccess",
        "ImportSuccess",
        "DeleteInProgress",
        "DeleteFailed",
        "DeletePartialSuccess",
        "DeleteSuccess"
      ],
      "type": "string"
    },
    "InclusionStatus": {
      "enum": [
        "excludeFromAssessment",
        "includeInAssessment"
      ],
      "type": "string"
    },
    "Integer": {
      "box": true,
      "type": "integer"
    },
    "InterfaceName": {
      "max": 1024,
      "min": 0,
      "pattern": ".*",
      "type": "string"
    },
    "InternalServerException": {
      "documentation": "<p> The server experienced an internal error. Try again. </p>",
      "error": {
        "httpStatusCode": 500
      },
      "exception": true,
      "fault": true,
      "members": {
        "message": {
          "shape": "errorMessage"
        }
      },
      "type": "structure"
    },
    "ListAntipatternSeveritySummary": {
      "member": {
        "shape": "AntipatternSeveritySummary"
      },
      "type": "list"
    },
    "ListApplicationComponentSummary": {
      "member": {
        "shape": "ApplicationComponentSummary"
      },
      "type": "list"
    },
    "ListApplicationComponentsRequest": {
      "members": {
        "applicationComponentCriteria": {
          "documentation": "<p> Criteria for filtering the list of application components. </p>",
          "shape": "ApplicationComponentCriteria"
        },
        "filterValue": {
          "documentation": "<p> Specify the value based on the application component criteria type. For example, if <code>applicationComponentCriteria</code> is set to <code>SERVER_ID</code> and <code>filterValue</code> is set to <code>server1</code>, then <a>ListApplicationComponents</a> returns all the application components running on server1. </p>",
          "shape": "ListApplicationComponentsRequestFilterValueString"
        },
        "groupIdFilter": {
          "documentation": "<p> The group ID specified in to filter on. </p>",
          "shape": "GroupIds"
        },
        "maxResults": {
          "documentation": "<p> The maximum number of items to include in the response. The maximum value is 100. </p>",
          "shape": "MaxResult"
        },
        "nextToken": {
          "documentation": "<p> The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set <code>maxResults</code> to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10. </p>",
          "shape": "NextToken"
        },
        "sort": {
          "documentation": "<p> Specifies whether to sort by ascending (<code>ASC</code>) or descending (<code>DESC</code>) order. </p>",
          "shape": "SortOrder"
        }
      },
      "type": "structure"
    },
    "ListApplicationComponentsRequestFilterValueString": {
      "max": 256,
      "min": 0,
      "pattern": ".*\\S.*",
      "type": "string"
    },
    "ListApplicationComponentsResponse": {
      "members": {
        "applicationComponentInfos": {
          "documentation": "<p> The list of application components with detailed information about each component. </p>",
          "shape": "ApplicationComponentDetails"
        },
        "nextToken": {
          "documentation": "<p> The token you use to retrieve the next set of results, or null if there are no more results. </p>",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListCollectorsRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p> The maximum number of items to include in the response. The maximum value is 100. </p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResult"
        },
        "nextToken": {
          "documentation": "<p> The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set <code>maxResults</code> to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10. </p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListCollectorsResponse": {
      "members": {
        "Collectors": {
          "documentation": "<p> The list of all the installed collectors. </p>",
          "shape": "Collectors"
        },
        "nextToken": {
          "documentation": "<p> The token you use to retrieve the next set of results, or null if there are no more results. </p>",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListImportFileTaskInformation": {
      "member": {
        "shape": "ImportFileTaskInformation"
      },
      "type": "list"
    },
    "ListImportFileTaskRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p> The total number of items to return. The maximum value is 100. </p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "Integer"
        },
        "nextToken": {
          "documentation": "<p> The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set <code>maxResults</code> to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10. </p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ListImportFileTaskResponse": {
      "members": {
        "nextToken": {
          "documentation": "<p> The token you use to retrieve the next set of results, or null if there are no more results. </p>",
          "shape": "String"
        },
        "taskInfos": {
          "documentation": "<p> Lists information about the files you import.</p>",
          "shape": "ListImportFileTaskInformation"
        }
      },
      "type": "structure"
    },
    "ListServerSummary": {
      "member": {
        "shape": "ServerSummary"
      },
      "type": "list"
    },
    "ListServersRequest": {
      "members": {
        "filterValue": {
          "documentation": "<p> Specifies the filter value, which is based on the type of server criteria. For example, if <code>serverCriteria</code> is <code>OS_NAME</code>, and the <code>filterValue</code> is equal to <code>WindowsServer</code>, then <code>ListServers</code> returns all of the servers matching the OS name <code>WindowsServer</code>. </p>",
          "shape": "String"
        },
        "groupIdFilter": {
          "documentation": "<p> Specifies the group ID to filter on. </p>",
          "shape": "GroupIds"
        },
        "maxResults": {
          "documentation": "<p> The maximum number of items to include in the response. The maximum value is 100. </p>",
          "shape": "MaxResult"
        },
        "nextToken": {
          "documentation": "<p> The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set <code>maxResults</code> to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10. </p>",
          "shape": "NextToken"
        },
        "serverCriteria": {
          "documentation": "<p> Criteria for filtering servers. </p>",
          "shape": "ServerCriteria"
        },
        "sort": {
          "documentation": "<p> Specifies whether to sort by ascending (<code>ASC</code>) or descending (<code>DESC</code>) order. </p>",
          "shape": "SortOrder"
        }
      },
      "type": "structure"
    },
    "ListServersResponse": {
      "members": {
        "nextToken": {
          "documentation": "<p> The token you use to retrieve the next set of results, or null if there are no more results. </p>",
          "shape": "NextToken"
        },
        "serverInfos": {
          "documentation": "<p> The list of servers with detailed information about each server. </p>",
          "shape": "ServerDetails"
        }
      },
      "type": "structure"
    },
    "ListStrategySummary": {
      "member": {
        "shape": "StrategySummary"
      },
      "type": "list"
    },
    "Location": {
      "max": 128,
      "min": 1,
      "pattern": ".*\\S.*",
      "type": "string"
    },
    "MacAddress": {
      "max": 17,
      "min": 0,
      "pattern": "^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|([0-9a-fA-F]{4}\\\\.[0-9a-fA-F]{4}\\\\.[0-9a-fA-F]{4})$\u201d$",
      "type": "string"
    },
    "ManagementPreference": {
      "documentation": "<p> Preferences for migrating an application to AWS. </p>",
      "members": {
        "awsManagedResources": {
          "documentation": "<p> Indicates interest in solutions that are managed by AWS. </p>",
          "shape": "AwsManagedResources"
        },
        "noPreference": {
          "documentation": "<p> No specific preference. </p>",
          "shape": "NoManagementPreference"
        },
        "selfManageResources": {
          "documentation": "<p> Indicates interest in managing your own resources on AWS. </p>",
          "shape": "SelfManageResources"
        }
      },
      "type": "structure",
      "union": true
    },
    "MaxResult": {
      "box": true,
      "type": "integer"
    },
    "NetMask": {
      "max": 1024,
      "min": 0,
      "pattern": ".*",
      "type": "string"
    },
    "NetworkInfo": {
      "documentation": "<p> Information about the server's network for which the assessment was run. </p>",
      "members": {
        "interfaceName": {
          "documentation": "<p> Information about the name of the interface of the server for which the assessment was run. </p>",
          "shape": "InterfaceName"
        },
        "ipAddress": {
          "documentation": "<p> Information about the IP address of the server for which the assessment was run. </p>",
          "shape": "IPAddress"
        },
        "macAddress": {
          "documentation": "<p> Information about the MAC address of the server for which the assessment was run. </p>",
          "shape": "MacAddress"
        },
        "netMask": {
          "documentation": "<p> Information about the subnet mask of the server for which the assessment was run. </p>",
          "shape": "NetMask"
        }
      },
      "required": [
        "interfaceName",
        "ipAddress",
        "macAddress",
        "netMask"
      ],
      "type": "structure"
    },
    "NetworkInfoList": {
      "member": {
        "shape": "NetworkInfo"
      },
      "type": "list"
    },
    "NextToken": {
      "max": 2048,
      "min": 0,
      "pattern": ".*\\S.*",
      "type": "string"
    },
    "NoDatabaseMigrationPreference": {
      "documentation": "<p> The object containing details about database migration preferences, when you have no particular preference. </p>",
      "members": {
        "targetDatabaseEngine": {
          "documentation": "<p> The target database engine for database migration preference that you specify. </p>",
          "shape": "TargetDatabaseEngines"
        }
      },
      "required": [
        "targetDatabaseEngine"
      ],
      "type": "structure"
    },
    "NoManagementPreference": {
      "documentation": "<p> Object containing the choice of application destination that you specify. </p>",
      "members": {
        "targetDestination": {
          "documentation": "<p> The choice of application destination that you specify. </p>",
          "shape": "NoPreferenceTargetDestinations"
        }
      },
      "required": [
        "targetDestination"
      ],
      "type": "structure"
    },
    "NoPreferenceTargetDestination": {
      "enum": [
        "None specified",
        "AWS Elastic BeanStalk",
        "AWS Fargate",
        "Amazon Elastic Cloud Compute (EC2)",
        "Amazon Elastic Container Service (ECS)",
        "Amazon Elastic Kubernetes Service (EKS)"
      ],
      "type": "string"
    },
    "NoPreferenceTargetDestinations": {
      "max": 1,
      "member": {
        "shape": "NoPreferenceTargetDestination"
      },
      "min": 1,
      "type": "list"
    },
    "OSInfo": {
      "documentation": "<p> Information about the operating system. </p>",
      "members": {
        "type": {
          "documentation": "<p> Information about the type of operating system. </p>",
          "shape": "OSType"
        },
        "version": {
          "documentation": "<p> Information about the version of operating system. </p>",
          "shape": "OSVersion"
        }
      },
      "type": "structure"
    },
    "OSType": {
      "enum": [
        "LINUX",
        "WINDOWS"
      ],
      "type": "string"
    },
    "OSVersion": {
      "max": 64,
      "min": 1,
      "pattern": ".*\\S.*",
      "type": "string"
    },
    "OutputFormat": {
      "enum": [
        "Excel",
        "Json"
      ],
      "type": "string"
    },
    "PrioritizeBusinessGoals": {
      "documentation": "<p> Rank of business goals based on priority. </p>",
      "members": {
        "businessGoals": {
          "documentation": "<p> Rank of business goals based on priority. </p>",
          "shape": "BusinessGoals"
        }
      },
      "type": "structure"
    },
    "PutPortfolioPreferencesRequest": {
      "members": {
        "applicationPreferences": {
          "documentation": "<p> The transformation preferences for non-database applications. </p>",
          "shape": "ApplicationPreferences"
        },
        "databasePreferences": {
          "documentation": "<p> The transformation preferences for database applications. </p>",
          "shape": "DatabasePreferences"
        },
        "prioritizeBusinessGoals": {
          "documentation": "<p> The rank of the business goals based on priority. </p>",
          "shape": "PrioritizeBusinessGoals"
        }
      },
      "type": "structure"
    },
    "PutPortfolioPreferencesResponse": {
      "members": {},
      "type": "structure"
    },
    "RecommendationReportDetails": {
      "documentation": "<p> Contains detailed information about a recommendation report. </p>",
      "members": {
        "completionTime": {
          "documentation": "<p> The time that the recommendation report generation task completes. </p>",
          "shape": "RecommendationReportTimeStamp"
        },
        "s3Bucket": {
          "documentation": "<p> The S3 bucket where the report file is located. </p>",
          "shape": "String"
        },
        "s3Keys": {
          "documentation": "<p> The Amazon S3 key name of the report file. </p>",
          "shape": "S3Keys"
        },
        "startTime": {
          "documentation": "<p> The time that the recommendation report generation task starts. </p>",
          "shape": "RecommendationReportTimeStamp"
        },
        "status": {
          "documentation": "<p> The status of the recommendation report generation task. </p>",
          "shape": "RecommendationReportStatus"
        },
        "statusMessage": {
          "documentation": "<p> The status message for recommendation report generation. </p>",
          "shape": "RecommendationReportStatusMessage"
        }
      },
      "type": "structure"
    },
    "RecommendationReportStatus": {
      "enum": [
        "FAILED",
        "IN_PROGRESS",
        "SUCCESS"
      ],
      "type": "string"
    },
    "RecommendationReportStatusMessage": {
      "max": 512,
      "min": 0,
      "pattern": ".*\\S.*",
      "type": "string"
    },
    "RecommendationReportTimeStamp": {
      "type": "timestamp"
    },
    "RecommendationSet": {
      "documentation": "<p> Contains a recommendation set. </p>",
      "members": {
        "strategy": {
          "documentation": "<p> The recommended strategy. </p>",
          "shape": "Strategy"
        },
        "targetDestination": {
          "documentation": "<p> The recommended target destination. </p>",
          "shape": "TargetDestination"
        },
        "transformationTool": {
          "documentation": "<p> The target destination for the recommendation set. </p>",
          "shape": "TransformationTool"
        }
      },
      "type": "structure"
    },
    "RecommendationTaskId": {
      "max": 52,
      "min": 0,
      "pattern": "[0-9a-z-:]+",
      "type": "string"
    },
    "ResourceId": {
      "max": 44,
      "min": 0,
      "pattern": "^[0-9a-b]+",
      "type": "string"
    },
    "ResourceName": {
      "type": "string"
    },
    "ResourceNotFoundException": {
      "documentation": "<p> The specified ID in the request is not found. </p>",
      "error": {
        "httpStatusCode": 404,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "errorMessage"
        }
      },
      "type": "structure"
    },
    "ResourceSubType": {
      "enum": [
        "Database",
        "Process",
        "DatabaseProcess"
      ],
      "type": "string"
    },
    "RunTimeAssessmentStatus": {
      "enum": [
        "dataCollectionTaskToBeScheduled",
        "dataCollectionTaskScheduled",
        "dataCollectionTaskStarted",
        "dataCollectionTaskStopped",
        "dataCollectionTaskSuccess",
        "dataCollectionTaskFailed",
        "dataCollectionTaskPartialSuccess"
      ],
      "type": "string"
    },
    "S3Bucket": {
      "max": 63,
      "min": 0,
      "pattern": "[0-9a-z]+[0-9a-z\\.\\-]*[0-9a-z]+",
      "type": "string"
    },
    "S3Key": {
      "max": 1024,
      "min": 0,
      "pattern": ".*\\S.*",
      "type": "string"
    },
    "S3Keys": {
      "member": {
        "shape": "String"
      },
      "type": "list"
    },
    "S3Object": {
      "documentation": "<p> Contains the S3 bucket name and the Amazon S3 key name. </p>",
      "members": {
        "s3Bucket": {
          "documentation": "<p> The S3 bucket name. </p>",
          "shape": "S3Bucket"
        },
        "s3key": {
          "documentation": "<p> The Amazon S3 key name. </p>",
          "shape": "S3Key"
        }
      },
      "type": "structure"
    },
    "SecretsManagerKey": {
      "max": 512,
      "min": 1,
      "pattern": ".*",
      "sensitive": true,
      "type": "string"
    },
    "SelfManageResources": {
      "documentation": "<p> Self-managed resources. </p>",
      "members": {
        "targetDestination": {
          "documentation": "<p> Self-managed resources target destination. </p>",
          "shape": "SelfManageTargetDestinations"
        }
      },
      "required": [
        "targetDestination"
      ],
      "type": "structure"
    },
    "SelfManageTargetDestination": {
      "enum": [
        "None specified",
        "Amazon Elastic Cloud Compute (EC2)",
        "Amazon Elastic Container Service (ECS)",
        "Amazon Elastic Kubernetes Service (EKS)"
      ],
      "type": "string"
    },
    "SelfManageTargetDestinations": {
      "max": 1,
      "member": {
        "shape": "SelfManageTargetDestination"
      },
      "min": 1,
      "type": "list"
    },
    "ServerCriteria": {
      "enum": [
        "NOT_DEFINED",
        "OS_NAME",
        "STRATEGY",
        "DESTINATION",
        "SERVER_ID"
      ],
      "type": "string"
    },
    "ServerDetail": {
      "documentation": "<p> Detailed information about a server. </p>",
      "members": {
        "antipatternReportS3Object": {
          "documentation": "<p> The S3 bucket name and Amazon S3 key name for anti-pattern report. </p>",
          "shape": "S3Object"
        },
        "antipatternReportStatus": {
          "documentation": "<p> The status of the anti-pattern report generation. </p>",
          "shape": "AntipatternReportStatus"
        },
        "antipatternReportStatusMessage": {
          "documentation": "<p> A message about the status of the anti-pattern report generation. </p>",
          "shape": "StatusMessage"
        },
        "applicationComponentStrategySummary": {
          "documentation": "<p> A list of strategy summaries. </p>",
          "shape": "ListStrategySummary"
        },
        "dataCollectionStatus": {
          "documentation": "<p> The status of assessment for the server. </p>",
          "shape": "RunTimeAssessmentStatus"
        },
        "id": {
          "documentation": "<p> The server ID. </p>",
          "shape": "ResourceId"
        },
        "lastAnalyzedTimestamp": {
          "documentation": "<p> The timestamp of when the server was assessed. </p>",
          "shape": "TimeStamp"
        },
        "listAntipatternSeveritySummary": {
          "documentation": "<p> A list of anti-pattern severity summaries. </p>",
          "shape": "ListAntipatternSeveritySummary"
        },
        "name": {
          "documentation": "<p> The name of the server. </p>",
          "shape": "ResourceName"
        },
        "recommendationSet": {
          "documentation": "<p> A set of recommendations. </p>",
          "shape": "RecommendationSet"
        },
        "serverType": {
          "documentation": "<p> The type of server. </p>",
          "shape": "String"
        },
        "statusMessage": {
          "documentation": "<p> A message about the status of data collection, which contains detailed descriptions of any error messages. </p>",
          "shape": "StatusMessage"
        },
        "systemInfo": {
          "documentation": "<p> System information about the server. </p>",
          "shape": "SystemInfo"
        }
      },
      "type": "structure"
    },
    "ServerDetails": {
      "member": {
        "shape": "ServerDetail"
      },
      "type": "list"
    },
    "ServerId": {
      "max": 27,
      "min": 1,
      "pattern": ".*\\S.*",
      "type": "string"
    },
    "ServerOsType": {
      "enum": [
        "WindowsServer",
        "AmazonLinux",
        "EndOfSupportWindowsServer",
        "Redhat",
        "Other"
      ],
      "type": "string"
    },
    "ServerStrategies": {
      "member": {
        "shape": "ServerStrategy"
      },
      "type": "list"
    },
    "ServerStrategy": {
      "documentation": "<p> Contains information about a strategy recommendation for a server. </p>",
      "members": {
        "isPreferred": {
          "documentation": "<p> Set to true if the recommendation is set as preferred. </p>",
          "shape": "Boolean"
        },
        "numberOfApplicationComponents": {
          "documentation": "<p> The number of application components with this strategy recommendation running on the server. </p>",
          "shape": "Integer"
        },
        "recommendation": {
          "documentation": "<p> Strategy recommendation for the server. </p>",
          "shape": "RecommendationSet"
        },
        "status": {
          "documentation": "<p> The recommendation status of the strategy for the server. </p>",
          "shape": "StrategyRecommendation"
        }
      },
      "type": "structure"
    },
    "ServerSummary": {
      "documentation": "<p> Object containing details about the servers imported by Application Discovery Service </p>",
      "members": {
        "ServerOsType": {
          "documentation": "<p> Type of operating system for the servers. </p>",
          "shape": "ServerOsType"
        },
        "count": {
          "documentation": "<p> Number of servers. </p>",
          "shape": "Integer"
        }
      },
      "type": "structure"
    },
    "ServiceLinkedRoleLockClientException": {
      "documentation": "<p> Exception to indicate that the service-linked role (SLR) is locked. </p>",
      "error": {
        "httpStatusCode": 400,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "errorMessage"
        }
      },
      "type": "structure"
    },
    "ServiceQuotaExceededException": {
      "documentation": "<p> The AWS account has reached its quota of imports. Contact AWS Support to increase the quota for this account. </p>",
      "error": {
        "httpStatusCode": 402,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "String"
        }
      },
      "required": [
        "message"
      ],
      "type": "structure"
    },
    "Severity": {
      "enum": [
        "HIGH",
        "MEDIUM",
        "LOW"
      ],
      "type": "string"
    },
    "SortOrder": {
      "enum": [
        "ASC",
        "DESC"
      ],
      "type": "string"
    },
    "SourceCode": {
      "documentation": "<p> Object containing source code information that is linked to an application component. </p>",
      "members": {
        "location": {
          "documentation": "<p> The repository name for the source code. </p>",
          "shape": "Location"
        },
        "sourceVersion": {
          "documentation": "<p> The branch of the source code. </p>",
          "shape": "SourceVersion"
        },
        "versionControl": {
          "documentation": "<p> The type of repository to use for the source code. </p>",
          "shape": "VersionControl"
        }
      },
      "type": "structure"
    },
    "SourceCodeList": {
      "member": {
        "shape": "SourceCode"
      },
      "type": "list"
    },
    "SourceCodeRepositories": {
      "member": {
        "shape": "SourceCodeRepository"
      },
      "type": "list"
    },
    "SourceCodeRepository": {
      "documentation": "<p> Object containing source code information that is linked to an application component. </p>",
      "members": {
        "branch": {
          "documentation": "<p> The branch of the source code. </p>",
          "shape": "String"
        },
        "repository": {
          "documentation": "<p> The repository name for the source code. </p>",
          "shape": "String"
        },
        "versionControlType": {
          "documentation": "<p> The type of repository to use for the source code. </p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "SourceVersion": {
      "max": 40,
      "min": 1,
      "pattern": ".*\\S.*",
      "type": "string"
    },
    "SrcCodeOrDbAnalysisStatus": {
      "enum": [
        "ANALYSIS_TO_BE_SCHEDULED",
        "ANALYSIS_STARTED",
        "ANALYSIS_SUCCESS",
        "ANALYSIS_FAILED"
      ],
      "type": "string"
    },
    "StartAssessmentRequest": {
      "members": {
        "s3bucketForAnalysisData": {
          "documentation": "<p> The S3 bucket used by the collectors to send analysis data to the service. The bucket name must begin with <code>migrationhub-strategy-</code>. </p>",
          "shape": "StartAssessmentRequestS3bucketForAnalysisDataString"
        },
        "s3bucketForReportData": {
          "documentation": "<p> The S3 bucket where all the reports generated by the service are stored. The bucket name must begin with <code>migrationhub-strategy-</code>. </p>",
          "shape": "StartAssessmentRequestS3bucketForReportDataString"
        }
      },
      "type": "structure"
    },
    "StartAssessmentRequestS3bucketForAnalysisDataString": {
      "max": 63,
      "min": 0,
      "pattern": "[0-9a-z]+[0-9a-z\\.\\-]*[0-9a-z]+",
      "type": "string"
    },
    "StartAssessmentRequestS3bucketForReportDataString": {
      "max": 63,
      "min": 0,
      "pattern": "[0-9a-z]+[0-9a-z\\.\\-]*[0-9a-z]+",
      "type": "string"
    },
    "StartAssessmentResponse": {
      "members": {
        "assessmentId": {
          "documentation": "<p> The ID of the assessment. </p>",
          "shape": "AsyncTaskId"
        }
      },
      "type": "structure"
    },
    "StartImportFileTaskRequest": {
      "members": {
        "S3Bucket": {
          "documentation": "<p> The S3 bucket where the import file is located. The bucket name is required to begin with <code>migrationhub-strategy-</code>.</p>",
          "shape": "importS3Bucket"
        },
        "dataSourceType": {
          "documentation": "<p>Specifies the source that the servers are coming from. By default, Strategy Recommendations assumes that the servers specified in the import file are available in AWS Application Discovery Service. </p>",
          "shape": "DataSourceType"
        },
        "groupId": {
          "documentation": "<p>Groups the resources in the import file together with a unique name. This ID can be as filter in <code>ListApplicationComponents</code> and <code>ListServers</code>. </p>",
          "shape": "GroupIds"
        },
        "name": {
          "documentation": "<p> A descriptive name for the request. </p>",
          "shape": "StartImportFileTaskRequestNameString"
        },
        "s3bucketForReportData": {
          "documentation": "<p> The S3 bucket where Strategy Recommendations uploads import results. The bucket name is required to begin with migrationhub-strategy-. </p>",
          "shape": "StartImportFileTaskRequestS3bucketForReportDataString"
        },
        "s3key": {
          "documentation": "<p> The Amazon S3 key name of the import file. </p>",
          "shape": "String"
        }
      },
      "required": [
        "S3Bucket",
        "name",
        "s3key"
      ],
      "type": "structure"
    },
    "StartImportFileTaskRequestNameString": {
      "max": 50,
      "min": 1,
      "pattern": "[a-zA-Z0-9_-]+",
      "type": "string"
    },
    "StartImportFileTaskRequestS3bucketForReportDataString": {
      "max": 63,
      "min": 0,
      "pattern": "[0-9a-z]+[0-9a-z\\.\\-]*[0-9a-z]+",
      "type": "string"
    },
    "StartImportFileTaskResponse": {
      "members": {
        "id": {
          "documentation": "<p> The ID for a specific import task. The ID is unique within an AWS account. </p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "StartRecommendationReportGenerationRequest": {
      "members": {
        "groupIdFilter": {
          "documentation": "<p> Groups the resources in the recommendation report with a unique name. </p>",
          "shape": "GroupIds"
        },
        "outputFormat": {
          "documentation": "<p> The output format for the recommendation report file. The default format is Microsoft Excel. </p>",
          "shape": "OutputFormat"
        }
      },
      "type": "structure"
    },
    "StartRecommendationReportGenerationResponse": {
      "members": {
        "id": {
          "documentation": "<p> The ID of the recommendation report generation task. </p>",
          "shape": "RecommendationTaskId"
        }
      },
      "type": "structure"
    },
    "StatusMessage": {
      "max": 1024,
      "min": 0,
      "pattern": ".*\\S.*",
      "type": "string"
    },
    "StopAssessmentRequest": {
      "members": {
        "assessmentId": {
          "documentation": "<p> The <code>assessmentId</code> returned by <a>StartAssessment</a>. </p>",
          "shape": "AsyncTaskId"
        }
      },
      "required": [
        "assessmentId"
      ],
      "type": "structure"
    },
    "StopAssessmentResponse": {
      "members": {},
      "type": "structure"
    },
    "Strategy": {
      "enum": [
        "Rehost",
        "Retirement",
        "Refactor",
        "Replatform",
        "Retain",
        "Relocate",
        "Repurchase"
      ],
      "type": "string"
    },
    "StrategyOption": {
      "documentation": "<p> Information about all the available strategy options for migrating and modernizing an application component. </p>",
      "members": {
        "isPreferred": {
          "documentation": "<p> Indicates if a specific strategy is preferred for the application component. </p>",
          "shape": "Boolean"
        },
        "strategy": {
          "documentation": "<p> Type of transformation. For example, Rehost, Replatform, and so on. </p>",
          "shape": "Strategy"
        },
        "targetDestination": {
          "documentation": "<p> Destination information about where the application component can migrate to. For example, <code>EC2</code>, <code>ECS</code>, and so on. </p>",
          "shape": "TargetDestination"
        },
        "toolName": {
          "documentation": "<p> The name of the tool that can be used to transform an application component using this strategy. </p>",
          "shape": "TransformationToolName"
        }
      },
      "type": "structure"
    },
    "StrategyRecommendation": {
      "enum": [
        "recommended",
        "viableOption",
        "notRecommended"
      ],
      "type": "string"
    },
    "StrategySummary": {
      "documentation": "<p> Object containing the summary of the strategy recommendations. </p>",
      "members": {
        "count": {
          "documentation": "<p> The count of recommendations per strategy. </p>",
          "shape": "Integer"
        },
        "strategy": {
          "documentation": "<p> The name of recommended strategy. </p>",
          "shape": "Strategy"
        }
      },
      "type": "structure"
    },
    "String": {
      "max": 1024,
      "min": 0,
      "pattern": ".*\\S.*",
      "type": "string"
    },
    "SystemInfo": {
      "documentation": "<p> Information about the server that hosts application components. </p>",
      "members": {
        "cpuArchitecture": {
          "documentation": "<p> CPU architecture type for the server. </p>",
          "shape": "String"
        },
        "fileSystemType": {
          "documentation": "<p> File system type for the server. </p>",
          "shape": "String"
        },
        "networkInfoList": {
          "documentation": "<p> Networking information related to a server. </p>",
          "shape": "NetworkInfoList"
        },
        "osInfo": {
          "documentation": "<p> Operating system corresponding to a server. </p>",
          "shape": "OSInfo"
        }
      },
      "type": "structure"
    },
    "TargetDatabaseEngine": {
      "enum": [
        "None specified",
        "Amazon Aurora",
        "AWS PostgreSQL",
        "MySQL",
        "Microsoft SQL Server",
        "Oracle Database",
        "MariaDB",
        "SAP",
        "Db2 LUW",
        "MongoDB"
      ],
      "type": "string"
    },
    "TargetDatabaseEngines": {
      "max": 1,
      "member": {
        "shape": "TargetDatabaseEngine"
      },
      "min": 1,
      "type": "list"
    },
    "TargetDestination": {
      "enum": [
        "None specified",
        "AWS Elastic BeanStalk",
        "AWS Fargate",
        "Amazon Elastic Cloud Compute (EC2)",
        "Amazon Elastic Container Service (ECS)",
        "Amazon Elastic Kubernetes Service (EKS)",
        "Aurora MySQL",
        "Aurora PostgreSQL",
        "Amazon Relational Database Service on MySQL",
        "Amazon Relational Database Service on PostgreSQL",
        "Amazon DocumentDB",
        "Amazon DynamoDB",
        "Amazon Relational Database Service"
      ],
      "type": "string"
    },
    "ThrottlingException": {
      "documentation": "<p> The request was denied due to request throttling. </p>",
      "error": {
        "httpStatusCode": 429,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "errorMessage"
        }
      },
      "type": "structure"
    },
    "TimeStamp": {
      "type": "timestamp"
    },
    "TranformationToolDescription": {
      "max": 1024,
      "min": 1,
      "pattern": ".*\\S.*",
      "type": "string"
    },
    "TranformationToolInstallationLink": {
      "max": 1024,
      "min": 1,
      "pattern": ".*\\S.*",
      "type": "string"
    },
    "TransformationTool": {
      "documentation": "<p> Information of the transformation tool that can be used to migrate and modernize the application. </p>",
      "members": {
        "description": {
          "documentation": "<p> Description of the tool. </p>",
          "shape": "TranformationToolDescription"
        },
        "name": {
          "documentation": "<p> Name of the tool. </p>",
          "shape": "TransformationToolName"
        },
        "tranformationToolInstallationLink": {
          "documentation": "<p> URL for installing the tool. </p>",
          "shape": "TranformationToolInstallationLink"
        }
      },
      "type": "structure"
    },
    "TransformationToolName": {
      "enum": [
        "App2Container",
        "Porting Assistant For .NET",
        "End of Support Migration",
        "Windows Web Application Migration Assistant",
        "Application Migration Service",
        "Strategy Recommendation Support",
        "In Place Operating System Upgrade",
        "Schema Conversion Tool",
        "Database Migration Service",
        "Native SQL Server Backup/Restore"
      ],
      "type": "string"
    },
    "UpdateApplicationComponentConfigRequest": {
      "members": {
        "applicationComponentId": {
          "documentation": "<p> The ID of the application component. The ID is unique within an AWS account. </p>",
          "shape": "ApplicationComponentId"
        },
        "inclusionStatus": {
          "documentation": "<p> Indicates whether the application component has been included for server recommendation or not. </p>",
          "shape": "InclusionStatus"
        },
        "secretsManagerKey": {
          "documentation": "<p> Database credentials. </p>",
          "shape": "SecretsManagerKey"
        },
        "sourceCodeList": {
          "documentation": "<p> The list of source code configurations to update for the application component. </p>",
          "shape": "SourceCodeList"
        },
        "strategyOption": {
          "documentation": "<p> The preferred strategy options for the application component. Use values from the <a>GetApplicationComponentStrategies</a> response. </p>",
          "shape": "StrategyOption"
        }
      },
      "required": [
        "applicationComponentId"
      ],
      "type": "structure"
    },
    "UpdateApplicationComponentConfigResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateServerConfigRequest": {
      "members": {
        "serverId": {
          "documentation": "<p> The ID of the server. </p>",
          "shape": "ServerId"
        },
        "strategyOption": {
          "documentation": "<p> The preferred strategy options for the application component. See the response from <a>GetServerStrategies</a>.</p>",
          "shape": "StrategyOption"
        }
      },
      "required": [
        "serverId"
      ],
      "type": "structure"
    },
    "UpdateServerConfigResponse": {
      "members": {},
      "type": "structure"
    },
    "ValidationException": {
      "documentation": "<p> The request body isn't valid. </p>",
      "error": {
        "httpStatusCode": 400,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "errorMessage"
        }
      },
      "type": "structure"
    },
    "VersionControl": {
      "enum": [
        "GITHUB",
        "GITHUB_ENTERPRISE"
      ],
      "type": "string"
    },
    "errorMessage": {
      "type": "string"
    },
    "importS3Bucket": {
      "max": 63,
      "min": 0,
      "pattern": "[0-9a-z]+[0-9a-z\\.\\-]*[0-9a-z]+",
      "type": "string"
    },
    "importS3Key": {
      "max": 1024,
      "min": 0,
      "pattern": ".*\\S.*",
      "type": "string"
    }
  },
  "version": "2.0"
}
