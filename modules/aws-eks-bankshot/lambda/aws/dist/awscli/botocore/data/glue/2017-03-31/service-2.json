{
  "documentation": "<fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>",
  "metadata": {
    "apiVersion": "2017-03-31",
    "endpointPrefix": "glue",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "AWS Glue",
    "serviceId": "Glue",
    "signatureVersion": "v4",
    "targetPrefix": "AWSGlue",
    "uid": "glue-2017-03-31"
  },
  "operations": {
    "BatchCreatePartition": {
      "documentation": "<p>Creates one or more partitions in a batch operation.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "AlreadyExistsException"
        },
        {
          "shape": "ResourceNumberLimitExceededException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "GlueEncryptionException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "BatchCreatePartitionRequest"
      },
      "name": "BatchCreatePartition",
      "output": {
        "shape": "BatchCreatePartitionResponse"
      }
    },
    "BatchDeleteConnection": {
      "documentation": "<p>Deletes a list of connection definitions from the Data Catalog.</p>",
      "errors": [
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "BatchDeleteConnectionRequest"
      },
      "name": "BatchDeleteConnection",
      "output": {
        "shape": "BatchDeleteConnectionResponse"
      }
    },
    "BatchDeletePartition": {
      "documentation": "<p>Deletes one or more partitions in a batch operation.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "BatchDeletePartitionRequest"
      },
      "name": "BatchDeletePartition",
      "output": {
        "shape": "BatchDeletePartitionResponse"
      }
    },
    "BatchDeleteTable": {
      "documentation": "<p>Deletes multiple tables at once.</p> <note> <p>After completing this operation, you no longer have access to the table versions and partitions that belong to the deleted table. Glue deletes these \"orphaned\" resources asynchronously in a timely manner, at the discretion of the service.</p> <p>To ensure the immediate deletion of all related resources, before calling <code>BatchDeleteTable</code>, use <code>DeleteTableVersion</code> or <code>BatchDeleteTableVersion</code>, and <code>DeletePartition</code> or <code>BatchDeletePartition</code>, to delete any resources that belong to the table.</p> </note>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "GlueEncryptionException"
        },
        {
          "shape": "ResourceNotReadyException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "BatchDeleteTableRequest"
      },
      "name": "BatchDeleteTable",
      "output": {
        "shape": "BatchDeleteTableResponse"
      }
    },
    "BatchDeleteTableVersion": {
      "documentation": "<p>Deletes a specified batch of versions of a table.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "BatchDeleteTableVersionRequest"
      },
      "name": "BatchDeleteTableVersion",
      "output": {
        "shape": "BatchDeleteTableVersionResponse"
      }
    },
    "BatchGetBlueprints": {
      "documentation": "<p>Retrieves information about a list of blueprints.</p>",
      "errors": [
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InvalidInputException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "BatchGetBlueprintsRequest"
      },
      "name": "BatchGetBlueprints",
      "output": {
        "shape": "BatchGetBlueprintsResponse"
      }
    },
    "BatchGetCrawlers": {
      "documentation": "<p>Returns a list of resource metadata for a given list of crawler names. After calling the <code>ListCrawlers</code> operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "BatchGetCrawlersRequest"
      },
      "name": "BatchGetCrawlers",
      "output": {
        "shape": "BatchGetCrawlersResponse"
      }
    },
    "BatchGetCustomEntityTypes": {
      "documentation": "<p>Retrieves the details for the custom patterns specified by a list of names.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "BatchGetCustomEntityTypesRequest"
      },
      "name": "BatchGetCustomEntityTypes",
      "output": {
        "shape": "BatchGetCustomEntityTypesResponse"
      }
    },
    "BatchGetDevEndpoints": {
      "documentation": "<p>Returns a list of resource metadata for a given list of development endpoint names. After calling the <code>ListDevEndpoints</code> operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags.</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InvalidInputException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "BatchGetDevEndpointsRequest"
      },
      "name": "BatchGetDevEndpoints",
      "output": {
        "shape": "BatchGetDevEndpointsResponse"
      }
    },
    "BatchGetJobs": {
      "documentation": "<p>Returns a list of resource metadata for a given list of job names. After calling the <code>ListJobs</code> operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags. </p>",
      "errors": [
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InvalidInputException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "BatchGetJobsRequest"
      },
      "name": "BatchGetJobs",
      "output": {
        "shape": "BatchGetJobsResponse"
      }
    },
    "BatchGetPartition": {
      "documentation": "<p>Retrieves partitions in a batch request.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "GlueEncryptionException"
        },
        {
          "shape": "InvalidStateException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "BatchGetPartitionRequest"
      },
      "name": "BatchGetPartition",
      "output": {
        "shape": "BatchGetPartitionResponse"
      }
    },
    "BatchGetTriggers": {
      "documentation": "<p>Returns a list of resource metadata for a given list of trigger names. After calling the <code>ListTriggers</code> operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags.</p>",
      "errors": [
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InvalidInputException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "BatchGetTriggersRequest"
      },
      "name": "BatchGetTriggers",
      "output": {
        "shape": "BatchGetTriggersResponse"
      }
    },
    "BatchGetWorkflows": {
      "documentation": "<p>Returns a list of resource metadata for a given list of workflow names. After calling the <code>ListWorkflows</code> operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags.</p>",
      "errors": [
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InvalidInputException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "BatchGetWorkflowsRequest"
      },
      "name": "BatchGetWorkflows",
      "output": {
        "shape": "BatchGetWorkflowsResponse"
      }
    },
    "BatchStopJobRun": {
      "documentation": "<p>Stops one or more job runs for a specified job definition.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "BatchStopJobRunRequest"
      },
      "name": "BatchStopJobRun",
      "output": {
        "shape": "BatchStopJobRunResponse"
      }
    },
    "BatchUpdatePartition": {
      "documentation": "<p>Updates one or more partitions in a batch operation.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "GlueEncryptionException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "BatchUpdatePartitionRequest"
      },
      "name": "BatchUpdatePartition",
      "output": {
        "shape": "BatchUpdatePartitionResponse"
      }
    },
    "CancelMLTaskRun": {
      "documentation": "<p>Cancels (stops) a task run. Machine learning task runs are asynchronous tasks that Glue runs on your behalf as part of various machine learning workflows. You can cancel a machine learning task run at any time by calling <code>CancelMLTaskRun</code> with a task run's parent transform's <code>TransformID</code> and the task run's <code>TaskRunId</code>. </p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InternalServiceException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "CancelMLTaskRunRequest"
      },
      "name": "CancelMLTaskRun",
      "output": {
        "shape": "CancelMLTaskRunResponse"
      }
    },
    "CancelStatement": {
      "documentation": "<p>Cancels the statement.</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "IllegalSessionStateException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "CancelStatementRequest"
      },
      "name": "CancelStatement",
      "output": {
        "shape": "CancelStatementResponse"
      }
    },
    "CheckSchemaVersionValidity": {
      "documentation": "<p>Validates the supplied schema. This call has no side effects, it simply validates using the supplied schema using <code>DataFormat</code> as the format. Since it does not take a schema set name, no compatibility checks are performed.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServiceException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "CheckSchemaVersionValidityInput"
      },
      "name": "CheckSchemaVersionValidity",
      "output": {
        "shape": "CheckSchemaVersionValidityResponse"
      }
    },
    "CreateBlueprint": {
      "documentation": "<p>Registers a blueprint with Glue.</p>",
      "errors": [
        {
          "shape": "AlreadyExistsException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "ResourceNumberLimitExceededException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "CreateBlueprintRequest"
      },
      "name": "CreateBlueprint",
      "output": {
        "shape": "CreateBlueprintResponse"
      }
    },
    "CreateClassifier": {
      "documentation": "<p>Creates a classifier in the user's account. This can be a <code>GrokClassifier</code>, an <code>XMLClassifier</code>, a <code>JsonClassifier</code>, or a <code>CsvClassifier</code>, depending on which field of the request is present.</p>",
      "errors": [
        {
          "shape": "AlreadyExistsException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "CreateClassifierRequest"
      },
      "name": "CreateClassifier",
      "output": {
        "shape": "CreateClassifierResponse"
      }
    },
    "CreateConnection": {
      "documentation": "<p>Creates a connection definition in the Data Catalog.</p>",
      "errors": [
        {
          "shape": "AlreadyExistsException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "ResourceNumberLimitExceededException"
        },
        {
          "shape": "GlueEncryptionException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "CreateConnectionRequest"
      },
      "name": "CreateConnection",
      "output": {
        "shape": "CreateConnectionResponse"
      }
    },
    "CreateCrawler": {
      "documentation": "<p>Creates a new crawler with specified targets, role, configuration, and optional schedule. At least one crawl target must be specified, in the <code>s3Targets</code> field, the <code>jdbcTargets</code> field, or the <code>DynamoDBTargets</code> field.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "AlreadyExistsException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "ResourceNumberLimitExceededException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "CreateCrawlerRequest"
      },
      "name": "CreateCrawler",
      "output": {
        "shape": "CreateCrawlerResponse"
      }
    },
    "CreateCustomEntityType": {
      "documentation": "<p>Creates a custom pattern that is used to detect sensitive data across the columns and rows of your structured data.</p> <p>Each custom pattern you create specifies a regular expression and an optional list of context words. If no context words are passed only a regular expression is checked.</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "AlreadyExistsException"
        },
        {
          "shape": "IdempotentParameterMismatchException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "ResourceNumberLimitExceededException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "CreateCustomEntityTypeRequest"
      },
      "name": "CreateCustomEntityType",
      "output": {
        "shape": "CreateCustomEntityTypeResponse"
      }
    },
    "CreateDatabase": {
      "documentation": "<p>Creates a new database in a Data Catalog.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "AlreadyExistsException"
        },
        {
          "shape": "ResourceNumberLimitExceededException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "GlueEncryptionException"
        },
        {
          "shape": "ConcurrentModificationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "CreateDatabaseRequest"
      },
      "name": "CreateDatabase",
      "output": {
        "shape": "CreateDatabaseResponse"
      }
    },
    "CreateDevEndpoint": {
      "documentation": "<p>Creates a new development endpoint.</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "AlreadyExistsException"
        },
        {
          "shape": "IdempotentParameterMismatchException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNumberLimitExceededException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "CreateDevEndpointRequest"
      },
      "name": "CreateDevEndpoint",
      "output": {
        "shape": "CreateDevEndpointResponse"
      }
    },
    "CreateJob": {
      "documentation": "<p>Creates a new job definition.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "IdempotentParameterMismatchException"
        },
        {
          "shape": "AlreadyExistsException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "ResourceNumberLimitExceededException"
        },
        {
          "shape": "ConcurrentModificationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "CreateJobRequest"
      },
      "name": "CreateJob",
      "output": {
        "shape": "CreateJobResponse"
      }
    },
    "CreateMLTransform": {
      "documentation": "<p>Creates an Glue machine learning transform. This operation creates the transform and all the necessary parameters to train it.</p> <p>Call this operation as the first step in the process of using a machine learning transform (such as the <code>FindMatches</code> transform) for deduplicating data. You can provide an optional <code>Description</code>, in addition to the parameters that you want to use for your algorithm.</p> <p>You must also specify certain parameters for the tasks that Glue runs on your behalf as part of learning from your data and creating a high-quality machine learning transform. These parameters include <code>Role</code>, and optionally, <code>AllocatedCapacity</code>, <code>Timeout</code>, and <code>MaxRetries</code>. For more information, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-jobs-job.html\">Jobs</a>.</p>",
      "errors": [
        {
          "shape": "AlreadyExistsException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNumberLimitExceededException"
        },
        {
          "shape": "IdempotentParameterMismatchException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "CreateMLTransformRequest"
      },
      "name": "CreateMLTransform",
      "output": {
        "shape": "CreateMLTransformResponse"
      }
    },
    "CreatePartition": {
      "documentation": "<p>Creates a new partition.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "AlreadyExistsException"
        },
        {
          "shape": "ResourceNumberLimitExceededException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "GlueEncryptionException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "CreatePartitionRequest"
      },
      "name": "CreatePartition",
      "output": {
        "shape": "CreatePartitionResponse"
      }
    },
    "CreatePartitionIndex": {
      "documentation": "<p>Creates a specified partition index in an existing table.</p>",
      "errors": [
        {
          "shape": "AlreadyExistsException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "ResourceNumberLimitExceededException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "GlueEncryptionException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "CreatePartitionIndexRequest"
      },
      "name": "CreatePartitionIndex",
      "output": {
        "shape": "CreatePartitionIndexResponse"
      }
    },
    "CreateRegistry": {
      "documentation": "<p>Creates a new registry which may be used to hold a collection of schemas.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "AlreadyExistsException"
        },
        {
          "shape": "ResourceNumberLimitExceededException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "InternalServiceException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "CreateRegistryInput"
      },
      "name": "CreateRegistry",
      "output": {
        "shape": "CreateRegistryResponse"
      }
    },
    "CreateSchema": {
      "documentation": "<p>Creates a new schema set and registers the schema definition. Returns an error if the schema set already exists without actually registering the version.</p> <p>When the schema set is created, a version checkpoint will be set to the first version. Compatibility mode \"DISABLED\" restricts any additional schema versions from being added after the first schema version. For all other compatibility modes, validation of compatibility settings will be applied only from the second version onwards when the <code>RegisterSchemaVersion</code> API is used.</p> <p>When this API is called without a <code>RegistryId</code>, this will create an entry for a \"default-registry\" in the registry database tables, if it is not already present.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "AlreadyExistsException"
        },
        {
          "shape": "ResourceNumberLimitExceededException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "InternalServiceException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "CreateSchemaInput"
      },
      "name": "CreateSchema",
      "output": {
        "shape": "CreateSchemaResponse"
      }
    },
    "CreateScript": {
      "documentation": "<p>Transforms a directed acyclic graph (DAG) into code.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "CreateScriptRequest"
      },
      "name": "CreateScript",
      "output": {
        "shape": "CreateScriptResponse"
      }
    },
    "CreateSecurityConfiguration": {
      "documentation": "<p>Creates a new security configuration. A security configuration is a set of security properties that can be used by Glue. You can use a security configuration to encrypt data at rest. For information about using security configurations in Glue, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/encryption-security-configuration.html\">Encrypting Data Written by Crawlers, Jobs, and Development Endpoints</a>.</p>",
      "errors": [
        {
          "shape": "AlreadyExistsException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "ResourceNumberLimitExceededException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "CreateSecurityConfigurationRequest"
      },
      "name": "CreateSecurityConfiguration",
      "output": {
        "shape": "CreateSecurityConfigurationResponse"
      }
    },
    "CreateSession": {
      "documentation": "<p>Creates a new session.</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "IdempotentParameterMismatchException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AlreadyExistsException"
        },
        {
          "shape": "ResourceNumberLimitExceededException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "CreateSessionRequest"
      },
      "name": "CreateSession",
      "output": {
        "shape": "CreateSessionResponse"
      }
    },
    "CreateTable": {
      "documentation": "<p>Creates a new table definition in the Data Catalog.</p>",
      "errors": [
        {
          "shape": "AlreadyExistsException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "ResourceNumberLimitExceededException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "GlueEncryptionException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "ResourceNotReadyException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "CreateTableRequest"
      },
      "name": "CreateTable",
      "output": {
        "shape": "CreateTableResponse"
      }
    },
    "CreateTrigger": {
      "documentation": "<p>Creates a new trigger.</p>",
      "errors": [
        {
          "shape": "AlreadyExistsException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "IdempotentParameterMismatchException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "ResourceNumberLimitExceededException"
        },
        {
          "shape": "ConcurrentModificationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "CreateTriggerRequest"
      },
      "name": "CreateTrigger",
      "output": {
        "shape": "CreateTriggerResponse"
      }
    },
    "CreateUserDefinedFunction": {
      "documentation": "<p>Creates a new function definition in the Data Catalog.</p>",
      "errors": [
        {
          "shape": "AlreadyExistsException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "ResourceNumberLimitExceededException"
        },
        {
          "shape": "GlueEncryptionException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "CreateUserDefinedFunctionRequest"
      },
      "name": "CreateUserDefinedFunction",
      "output": {
        "shape": "CreateUserDefinedFunctionResponse"
      }
    },
    "CreateWorkflow": {
      "documentation": "<p>Creates a new workflow.</p>",
      "errors": [
        {
          "shape": "AlreadyExistsException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "ResourceNumberLimitExceededException"
        },
        {
          "shape": "ConcurrentModificationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "CreateWorkflowRequest"
      },
      "name": "CreateWorkflow",
      "output": {
        "shape": "CreateWorkflowResponse"
      }
    },
    "DeleteBlueprint": {
      "documentation": "<p>Deletes an existing blueprint.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InternalServiceException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DeleteBlueprintRequest"
      },
      "name": "DeleteBlueprint",
      "output": {
        "shape": "DeleteBlueprintResponse"
      }
    },
    "DeleteClassifier": {
      "documentation": "<p>Removes a classifier from the Data Catalog.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DeleteClassifierRequest"
      },
      "name": "DeleteClassifier",
      "output": {
        "shape": "DeleteClassifierResponse"
      }
    },
    "DeleteColumnStatisticsForPartition": {
      "documentation": "<p>Delete the partition column statistics of a column.</p> <p>The Identity and Access Management (IAM) permission required for this operation is <code>DeletePartition</code>.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "GlueEncryptionException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DeleteColumnStatisticsForPartitionRequest"
      },
      "name": "DeleteColumnStatisticsForPartition",
      "output": {
        "shape": "DeleteColumnStatisticsForPartitionResponse"
      }
    },
    "DeleteColumnStatisticsForTable": {
      "documentation": "<p>Retrieves table statistics of columns.</p> <p>The Identity and Access Management (IAM) permission required for this operation is <code>DeleteTable</code>.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "GlueEncryptionException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DeleteColumnStatisticsForTableRequest"
      },
      "name": "DeleteColumnStatisticsForTable",
      "output": {
        "shape": "DeleteColumnStatisticsForTableResponse"
      }
    },
    "DeleteConnection": {
      "documentation": "<p>Deletes a connection from the Data Catalog.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DeleteConnectionRequest"
      },
      "name": "DeleteConnection",
      "output": {
        "shape": "DeleteConnectionResponse"
      }
    },
    "DeleteCrawler": {
      "documentation": "<p>Removes a specified crawler from the Glue Data Catalog, unless the crawler state is <code>RUNNING</code>.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "CrawlerRunningException"
        },
        {
          "shape": "SchedulerTransitioningException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DeleteCrawlerRequest"
      },
      "name": "DeleteCrawler",
      "output": {
        "shape": "DeleteCrawlerResponse"
      }
    },
    "DeleteCustomEntityType": {
      "documentation": "<p>Deletes a custom pattern by specifying its name.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DeleteCustomEntityTypeRequest"
      },
      "name": "DeleteCustomEntityType",
      "output": {
        "shape": "DeleteCustomEntityTypeResponse"
      }
    },
    "DeleteDatabase": {
      "documentation": "<p>Removes a specified database from a Data Catalog.</p> <note> <p>After completing this operation, you no longer have access to the tables (and all table versions and partitions that might belong to the tables) and the user-defined functions in the deleted database. Glue deletes these \"orphaned\" resources asynchronously in a timely manner, at the discretion of the service.</p> <p>To ensure the immediate deletion of all related resources, before calling <code>DeleteDatabase</code>, use <code>DeleteTableVersion</code> or <code>BatchDeleteTableVersion</code>, <code>DeletePartition</code> or <code>BatchDeletePartition</code>, <code>DeleteUserDefinedFunction</code>, and <code>DeleteTable</code> or <code>BatchDeleteTable</code>, to delete any resources that belong to the database.</p> </note>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "ConcurrentModificationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DeleteDatabaseRequest"
      },
      "name": "DeleteDatabase",
      "output": {
        "shape": "DeleteDatabaseResponse"
      }
    },
    "DeleteDevEndpoint": {
      "documentation": "<p>Deletes a specified development endpoint.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InvalidInputException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DeleteDevEndpointRequest"
      },
      "name": "DeleteDevEndpoint",
      "output": {
        "shape": "DeleteDevEndpointResponse"
      }
    },
    "DeleteJob": {
      "documentation": "<p>Deletes a specified job definition. If the job definition is not found, no exception is thrown.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DeleteJobRequest"
      },
      "name": "DeleteJob",
      "output": {
        "shape": "DeleteJobResponse"
      }
    },
    "DeleteMLTransform": {
      "documentation": "<p>Deletes an Glue machine learning transform. Machine learning transforms are a special type of transform that use machine learning to learn the details of the transformation to be performed by learning from examples provided by humans. These transformations are then saved by Glue. If you no longer need a transform, you can delete it by calling <code>DeleteMLTransforms</code>. However, any Glue jobs that still reference the deleted transform will no longer succeed.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InternalServiceException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DeleteMLTransformRequest"
      },
      "name": "DeleteMLTransform",
      "output": {
        "shape": "DeleteMLTransformResponse"
      }
    },
    "DeletePartition": {
      "documentation": "<p>Deletes a specified partition.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DeletePartitionRequest"
      },
      "name": "DeletePartition",
      "output": {
        "shape": "DeletePartitionResponse"
      }
    },
    "DeletePartitionIndex": {
      "documentation": "<p>Deletes a specified partition index from an existing table.</p>",
      "errors": [
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "GlueEncryptionException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DeletePartitionIndexRequest"
      },
      "name": "DeletePartitionIndex",
      "output": {
        "shape": "DeletePartitionIndexResponse"
      }
    },
    "DeleteRegistry": {
      "documentation": "<p>Delete the entire registry including schema and all of its versions. To get the status of the delete operation, you can call the <code>GetRegistry</code> API after the asynchronous call. Deleting a registry will deactivate all online operations for the registry such as the <code>UpdateRegistry</code>, <code>CreateSchema</code>, <code>UpdateSchema</code>, and <code>RegisterSchemaVersion</code> APIs. </p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ConcurrentModificationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DeleteRegistryInput"
      },
      "name": "DeleteRegistry",
      "output": {
        "shape": "DeleteRegistryResponse"
      }
    },
    "DeleteResourcePolicy": {
      "documentation": "<p>Deletes a specified policy.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "ConditionCheckFailureException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DeleteResourcePolicyRequest"
      },
      "name": "DeleteResourcePolicy",
      "output": {
        "shape": "DeleteResourcePolicyResponse"
      }
    },
    "DeleteSchema": {
      "documentation": "<p>Deletes the entire schema set, including the schema set and all of its versions. To get the status of the delete operation, you can call <code>GetSchema</code> API after the asynchronous call. Deleting a registry will deactivate all online operations for the schema, such as the <code>GetSchemaByDefinition</code>, and <code>RegisterSchemaVersion</code> APIs.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ConcurrentModificationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DeleteSchemaInput"
      },
      "name": "DeleteSchema",
      "output": {
        "shape": "DeleteSchemaResponse"
      }
    },
    "DeleteSchemaVersions": {
      "documentation": "<p>Remove versions from the specified schema. A version number or range may be supplied. If the compatibility mode forbids deleting of a version that is necessary, such as BACKWARDS_FULL, an error is returned. Calling the <code>GetSchemaVersions</code> API after this call will list the status of the deleted versions.</p> <p>When the range of version numbers contain check pointed version, the API will return a 409 conflict and will not proceed with the deletion. You have to remove the checkpoint first using the <code>DeleteSchemaCheckpoint</code> API before using this API.</p> <p>You cannot use the <code>DeleteSchemaVersions</code> API to delete the first schema version in the schema set. The first schema version can only be deleted by the <code>DeleteSchema</code> API. This operation will also delete the attached <code>SchemaVersionMetadata</code> under the schema versions. Hard deletes will be enforced on the database.</p> <p>If the compatibility mode forbids deleting of a version that is necessary, such as BACKWARDS_FULL, an error is returned.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ConcurrentModificationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DeleteSchemaVersionsInput"
      },
      "name": "DeleteSchemaVersions",
      "output": {
        "shape": "DeleteSchemaVersionsResponse"
      }
    },
    "DeleteSecurityConfiguration": {
      "documentation": "<p>Deletes a specified security configuration.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DeleteSecurityConfigurationRequest"
      },
      "name": "DeleteSecurityConfiguration",
      "output": {
        "shape": "DeleteSecurityConfigurationResponse"
      }
    },
    "DeleteSession": {
      "documentation": "<p>Deletes the session.</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "IllegalSessionStateException"
        },
        {
          "shape": "ConcurrentModificationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DeleteSessionRequest"
      },
      "name": "DeleteSession",
      "output": {
        "shape": "DeleteSessionResponse"
      }
    },
    "DeleteTable": {
      "documentation": "<p>Removes a table definition from the Data Catalog.</p> <note> <p>After completing this operation, you no longer have access to the table versions and partitions that belong to the deleted table. Glue deletes these \"orphaned\" resources asynchronously in a timely manner, at the discretion of the service.</p> <p>To ensure the immediate deletion of all related resources, before calling <code>DeleteTable</code>, use <code>DeleteTableVersion</code> or <code>BatchDeleteTableVersion</code>, and <code>DeletePartition</code> or <code>BatchDeletePartition</code>, to delete any resources that belong to the table.</p> </note>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "ResourceNotReadyException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DeleteTableRequest"
      },
      "name": "DeleteTable",
      "output": {
        "shape": "DeleteTableResponse"
      }
    },
    "DeleteTableVersion": {
      "documentation": "<p>Deletes a specified version of a table.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DeleteTableVersionRequest"
      },
      "name": "DeleteTableVersion",
      "output": {
        "shape": "DeleteTableVersionResponse"
      }
    },
    "DeleteTrigger": {
      "documentation": "<p>Deletes a specified trigger. If the trigger is not found, no exception is thrown.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "ConcurrentModificationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DeleteTriggerRequest"
      },
      "name": "DeleteTrigger",
      "output": {
        "shape": "DeleteTriggerResponse"
      }
    },
    "DeleteUserDefinedFunction": {
      "documentation": "<p>Deletes an existing function definition from the Data Catalog.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DeleteUserDefinedFunctionRequest"
      },
      "name": "DeleteUserDefinedFunction",
      "output": {
        "shape": "DeleteUserDefinedFunctionResponse"
      }
    },
    "DeleteWorkflow": {
      "documentation": "<p>Deletes a workflow.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "ConcurrentModificationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DeleteWorkflowRequest"
      },
      "name": "DeleteWorkflow",
      "output": {
        "shape": "DeleteWorkflowResponse"
      }
    },
    "GetBlueprint": {
      "documentation": "<p>Retrieves the details of a blueprint.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InternalServiceException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetBlueprintRequest"
      },
      "name": "GetBlueprint",
      "output": {
        "shape": "GetBlueprintResponse"
      }
    },
    "GetBlueprintRun": {
      "documentation": "<p>Retrieves the details of a blueprint run.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetBlueprintRunRequest"
      },
      "name": "GetBlueprintRun",
      "output": {
        "shape": "GetBlueprintRunResponse"
      }
    },
    "GetBlueprintRuns": {
      "documentation": "<p>Retrieves the details of blueprint runs for a specified blueprint.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InvalidInputException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetBlueprintRunsRequest"
      },
      "name": "GetBlueprintRuns",
      "output": {
        "shape": "GetBlueprintRunsResponse"
      }
    },
    "GetCatalogImportStatus": {
      "documentation": "<p>Retrieves the status of a migration operation.</p>",
      "errors": [
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetCatalogImportStatusRequest"
      },
      "name": "GetCatalogImportStatus",
      "output": {
        "shape": "GetCatalogImportStatusResponse"
      }
    },
    "GetClassifier": {
      "documentation": "<p>Retrieve a classifier by name.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetClassifierRequest"
      },
      "name": "GetClassifier",
      "output": {
        "shape": "GetClassifierResponse"
      }
    },
    "GetClassifiers": {
      "documentation": "<p>Lists all classifier objects in the Data Catalog.</p>",
      "errors": [
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetClassifiersRequest"
      },
      "name": "GetClassifiers",
      "output": {
        "shape": "GetClassifiersResponse"
      }
    },
    "GetColumnStatisticsForPartition": {
      "documentation": "<p>Retrieves partition statistics of columns.</p> <p>The Identity and Access Management (IAM) permission required for this operation is <code>GetPartition</code>.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "GlueEncryptionException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetColumnStatisticsForPartitionRequest"
      },
      "name": "GetColumnStatisticsForPartition",
      "output": {
        "shape": "GetColumnStatisticsForPartitionResponse"
      }
    },
    "GetColumnStatisticsForTable": {
      "documentation": "<p>Retrieves table statistics of columns.</p> <p>The Identity and Access Management (IAM) permission required for this operation is <code>GetTable</code>.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "GlueEncryptionException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetColumnStatisticsForTableRequest"
      },
      "name": "GetColumnStatisticsForTable",
      "output": {
        "shape": "GetColumnStatisticsForTableResponse"
      }
    },
    "GetConnection": {
      "documentation": "<p>Retrieves a connection definition from the Data Catalog.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "GlueEncryptionException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetConnectionRequest"
      },
      "name": "GetConnection",
      "output": {
        "shape": "GetConnectionResponse"
      }
    },
    "GetConnections": {
      "documentation": "<p>Retrieves a list of connection definitions from the Data Catalog.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "GlueEncryptionException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetConnectionsRequest"
      },
      "name": "GetConnections",
      "output": {
        "shape": "GetConnectionsResponse"
      }
    },
    "GetCrawler": {
      "documentation": "<p>Retrieves metadata for a specified crawler.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetCrawlerRequest"
      },
      "name": "GetCrawler",
      "output": {
        "shape": "GetCrawlerResponse"
      }
    },
    "GetCrawlerMetrics": {
      "documentation": "<p>Retrieves metrics about specified crawlers.</p>",
      "errors": [
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetCrawlerMetricsRequest"
      },
      "name": "GetCrawlerMetrics",
      "output": {
        "shape": "GetCrawlerMetricsResponse"
      }
    },
    "GetCrawlers": {
      "documentation": "<p>Retrieves metadata for all crawlers defined in the customer account.</p>",
      "errors": [
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetCrawlersRequest"
      },
      "name": "GetCrawlers",
      "output": {
        "shape": "GetCrawlersResponse"
      }
    },
    "GetCustomEntityType": {
      "documentation": "<p>Retrieves the details of a custom pattern by specifying its name.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetCustomEntityTypeRequest"
      },
      "name": "GetCustomEntityType",
      "output": {
        "shape": "GetCustomEntityTypeResponse"
      }
    },
    "GetDataCatalogEncryptionSettings": {
      "documentation": "<p>Retrieves the security configuration for a specified catalog.</p>",
      "errors": [
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetDataCatalogEncryptionSettingsRequest"
      },
      "name": "GetDataCatalogEncryptionSettings",
      "output": {
        "shape": "GetDataCatalogEncryptionSettingsResponse"
      }
    },
    "GetDatabase": {
      "documentation": "<p>Retrieves the definition of a specified database.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "GlueEncryptionException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetDatabaseRequest"
      },
      "name": "GetDatabase",
      "output": {
        "shape": "GetDatabaseResponse"
      }
    },
    "GetDatabases": {
      "documentation": "<p>Retrieves all databases defined in a given Data Catalog.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "GlueEncryptionException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetDatabasesRequest"
      },
      "name": "GetDatabases",
      "output": {
        "shape": "GetDatabasesResponse"
      }
    },
    "GetDataflowGraph": {
      "documentation": "<p>Transforms a Python script into a directed acyclic graph (DAG). </p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetDataflowGraphRequest"
      },
      "name": "GetDataflowGraph",
      "output": {
        "shape": "GetDataflowGraphResponse"
      }
    },
    "GetDevEndpoint": {
      "documentation": "<p>Retrieves information about a specified development endpoint.</p> <note> <p>When you create a development endpoint in a virtual private cloud (VPC), Glue returns only a private IP address, and the public IP address field is not populated. When you create a non-VPC development endpoint, Glue returns only a public IP address.</p> </note>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InvalidInputException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetDevEndpointRequest"
      },
      "name": "GetDevEndpoint",
      "output": {
        "shape": "GetDevEndpointResponse"
      }
    },
    "GetDevEndpoints": {
      "documentation": "<p>Retrieves all the development endpoints in this AWS account.</p> <note> <p>When you create a development endpoint in a virtual private cloud (VPC), Glue returns only a private IP address and the public IP address field is not populated. When you create a non-VPC development endpoint, Glue returns only a public IP address.</p> </note>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InvalidInputException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetDevEndpointsRequest"
      },
      "name": "GetDevEndpoints",
      "output": {
        "shape": "GetDevEndpointsResponse"
      }
    },
    "GetJob": {
      "documentation": "<p>Retrieves an existing job definition.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetJobRequest"
      },
      "name": "GetJob",
      "output": {
        "shape": "GetJobResponse"
      }
    },
    "GetJobBookmark": {
      "documentation": "<p>Returns information on a job bookmark entry.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetJobBookmarkRequest"
      },
      "name": "GetJobBookmark",
      "output": {
        "shape": "GetJobBookmarkResponse"
      }
    },
    "GetJobRun": {
      "documentation": "<p>Retrieves the metadata for a given job run.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetJobRunRequest"
      },
      "name": "GetJobRun",
      "output": {
        "shape": "GetJobRunResponse"
      }
    },
    "GetJobRuns": {
      "documentation": "<p>Retrieves metadata for all runs of a given job definition.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetJobRunsRequest"
      },
      "name": "GetJobRuns",
      "output": {
        "shape": "GetJobRunsResponse"
      }
    },
    "GetJobs": {
      "documentation": "<p>Retrieves all current job definitions.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetJobsRequest"
      },
      "name": "GetJobs",
      "output": {
        "shape": "GetJobsResponse"
      }
    },
    "GetMLTaskRun": {
      "documentation": "<p>Gets details for a specific task run on a machine learning transform. Machine learning task runs are asynchronous tasks that Glue runs on your behalf as part of various machine learning workflows. You can check the stats of any task run by calling <code>GetMLTaskRun</code> with the <code>TaskRunID</code> and its parent transform's <code>TransformID</code>.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InternalServiceException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetMLTaskRunRequest"
      },
      "name": "GetMLTaskRun",
      "output": {
        "shape": "GetMLTaskRunResponse"
      }
    },
    "GetMLTaskRuns": {
      "documentation": "<p>Gets a list of runs for a machine learning transform. Machine learning task runs are asynchronous tasks that Glue runs on your behalf as part of various machine learning workflows. You can get a sortable, filterable list of machine learning task runs by calling <code>GetMLTaskRuns</code> with their parent transform's <code>TransformID</code> and other optional parameters as documented in this section.</p> <p>This operation returns a list of historic runs and must be paginated.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InternalServiceException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetMLTaskRunsRequest"
      },
      "name": "GetMLTaskRuns",
      "output": {
        "shape": "GetMLTaskRunsResponse"
      }
    },
    "GetMLTransform": {
      "documentation": "<p>Gets an Glue machine learning transform artifact and all its corresponding metadata. Machine learning transforms are a special type of transform that use machine learning to learn the details of the transformation to be performed by learning from examples provided by humans. These transformations are then saved by Glue. You can retrieve their metadata by calling <code>GetMLTransform</code>.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InternalServiceException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetMLTransformRequest"
      },
      "name": "GetMLTransform",
      "output": {
        "shape": "GetMLTransformResponse"
      }
    },
    "GetMLTransforms": {
      "documentation": "<p>Gets a sortable, filterable list of existing Glue machine learning transforms. Machine learning transforms are a special type of transform that use machine learning to learn the details of the transformation to be performed by learning from examples provided by humans. These transformations are then saved by Glue, and you can retrieve their metadata by calling <code>GetMLTransforms</code>.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InternalServiceException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetMLTransformsRequest"
      },
      "name": "GetMLTransforms",
      "output": {
        "shape": "GetMLTransformsResponse"
      }
    },
    "GetMapping": {
      "documentation": "<p>Creates mappings.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "EntityNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetMappingRequest"
      },
      "name": "GetMapping",
      "output": {
        "shape": "GetMappingResponse"
      }
    },
    "GetPartition": {
      "documentation": "<p>Retrieves information about a specified partition.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "GlueEncryptionException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetPartitionRequest"
      },
      "name": "GetPartition",
      "output": {
        "shape": "GetPartitionResponse"
      }
    },
    "GetPartitionIndexes": {
      "documentation": "<p>Retrieves the partition indexes associated with a table.</p>",
      "errors": [
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "ConflictException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetPartitionIndexesRequest"
      },
      "name": "GetPartitionIndexes",
      "output": {
        "shape": "GetPartitionIndexesResponse"
      }
    },
    "GetPartitions": {
      "documentation": "<p>Retrieves information about the partitions in a table.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "GlueEncryptionException"
        },
        {
          "shape": "InvalidStateException"
        },
        {
          "shape": "ResourceNotReadyException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetPartitionsRequest"
      },
      "name": "GetPartitions",
      "output": {
        "shape": "GetPartitionsResponse"
      }
    },
    "GetPlan": {
      "documentation": "<p>Gets code to perform a specified mapping.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetPlanRequest"
      },
      "name": "GetPlan",
      "output": {
        "shape": "GetPlanResponse"
      }
    },
    "GetRegistry": {
      "documentation": "<p>Describes the specified registry in detail.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetRegistryInput"
      },
      "name": "GetRegistry",
      "output": {
        "shape": "GetRegistryResponse"
      }
    },
    "GetResourcePolicies": {
      "documentation": "<p>Retrieves the resource policies set on individual resources by Resource Access Manager during cross-account permission grants. Also retrieves the Data Catalog resource policy.</p> <p>If you enabled metadata encryption in Data Catalog settings, and you do not have permission on the KMS key, the operation can't return the Data Catalog resource policy.</p>",
      "errors": [
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "GlueEncryptionException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetResourcePoliciesRequest"
      },
      "name": "GetResourcePolicies",
      "output": {
        "shape": "GetResourcePoliciesResponse"
      }
    },
    "GetResourcePolicy": {
      "documentation": "<p>Retrieves a specified resource policy.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InvalidInputException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetResourcePolicyRequest"
      },
      "name": "GetResourcePolicy",
      "output": {
        "shape": "GetResourcePolicyResponse"
      }
    },
    "GetSchema": {
      "documentation": "<p>Describes the specified schema in detail.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetSchemaInput"
      },
      "name": "GetSchema",
      "output": {
        "shape": "GetSchemaResponse"
      }
    },
    "GetSchemaByDefinition": {
      "documentation": "<p>Retrieves a schema by the <code>SchemaDefinition</code>. The schema definition is sent to the Schema Registry, canonicalized, and hashed. If the hash is matched within the scope of the <code>SchemaName</code> or ARN (or the default registry, if none is supplied), that schema\u2019s metadata is returned. Otherwise, a 404 or NotFound error is returned. Schema versions in <code>Deleted</code> statuses will not be included in the results.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetSchemaByDefinitionInput"
      },
      "name": "GetSchemaByDefinition",
      "output": {
        "shape": "GetSchemaByDefinitionResponse"
      }
    },
    "GetSchemaVersion": {
      "documentation": "<p>Get the specified schema by its unique ID assigned when a version of the schema is created or registered. Schema versions in Deleted status will not be included in the results.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetSchemaVersionInput"
      },
      "name": "GetSchemaVersion",
      "output": {
        "shape": "GetSchemaVersionResponse"
      }
    },
    "GetSchemaVersionsDiff": {
      "documentation": "<p>Fetches the schema version difference in the specified difference type between two stored schema versions in the Schema Registry.</p> <p>This API allows you to compare two schema versions between two schema definitions under the same schema.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServiceException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetSchemaVersionsDiffInput"
      },
      "name": "GetSchemaVersionsDiff",
      "output": {
        "shape": "GetSchemaVersionsDiffResponse"
      }
    },
    "GetSecurityConfiguration": {
      "documentation": "<p>Retrieves a specified security configuration.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetSecurityConfigurationRequest"
      },
      "name": "GetSecurityConfiguration",
      "output": {
        "shape": "GetSecurityConfigurationResponse"
      }
    },
    "GetSecurityConfigurations": {
      "documentation": "<p>Retrieves a list of all security configurations.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetSecurityConfigurationsRequest"
      },
      "name": "GetSecurityConfigurations",
      "output": {
        "shape": "GetSecurityConfigurationsResponse"
      }
    },
    "GetSession": {
      "documentation": "<p>Retrieves the session.</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InvalidInputException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetSessionRequest"
      },
      "name": "GetSession",
      "output": {
        "shape": "GetSessionResponse"
      }
    },
    "GetStatement": {
      "documentation": "<p>Retrieves the statement.</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "IllegalSessionStateException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetStatementRequest"
      },
      "name": "GetStatement",
      "output": {
        "shape": "GetStatementResponse"
      }
    },
    "GetTable": {
      "documentation": "<p>Retrieves the <code>Table</code> definition in a Data Catalog for a specified table.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "GlueEncryptionException"
        },
        {
          "shape": "ResourceNotReadyException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetTableRequest"
      },
      "name": "GetTable",
      "output": {
        "shape": "GetTableResponse"
      }
    },
    "GetTableVersion": {
      "documentation": "<p>Retrieves a specified version of a table.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "GlueEncryptionException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetTableVersionRequest"
      },
      "name": "GetTableVersion",
      "output": {
        "shape": "GetTableVersionResponse"
      }
    },
    "GetTableVersions": {
      "documentation": "<p>Retrieves a list of strings that identify available versions of a specified table.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "GlueEncryptionException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetTableVersionsRequest"
      },
      "name": "GetTableVersions",
      "output": {
        "shape": "GetTableVersionsResponse"
      }
    },
    "GetTables": {
      "documentation": "<p>Retrieves the definitions of some or all of the tables in a given <code>Database</code>.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "GlueEncryptionException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetTablesRequest"
      },
      "name": "GetTables",
      "output": {
        "shape": "GetTablesResponse"
      }
    },
    "GetTags": {
      "documentation": "<p>Retrieves a list of tags associated with a resource.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "EntityNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetTagsRequest"
      },
      "name": "GetTags",
      "output": {
        "shape": "GetTagsResponse"
      }
    },
    "GetTrigger": {
      "documentation": "<p>Retrieves the definition of a trigger.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetTriggerRequest"
      },
      "name": "GetTrigger",
      "output": {
        "shape": "GetTriggerResponse"
      }
    },
    "GetTriggers": {
      "documentation": "<p>Gets all the triggers associated with a job.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetTriggersRequest"
      },
      "name": "GetTriggers",
      "output": {
        "shape": "GetTriggersResponse"
      }
    },
    "GetUnfilteredPartitionMetadata": {
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "GlueEncryptionException"
        },
        {
          "shape": "PermissionTypeMismatchException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetUnfilteredPartitionMetadataRequest"
      },
      "name": "GetUnfilteredPartitionMetadata",
      "output": {
        "shape": "GetUnfilteredPartitionMetadataResponse"
      }
    },
    "GetUnfilteredPartitionsMetadata": {
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "GlueEncryptionException"
        },
        {
          "shape": "PermissionTypeMismatchException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetUnfilteredPartitionsMetadataRequest"
      },
      "name": "GetUnfilteredPartitionsMetadata",
      "output": {
        "shape": "GetUnfilteredPartitionsMetadataResponse"
      }
    },
    "GetUnfilteredTableMetadata": {
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "GlueEncryptionException"
        },
        {
          "shape": "PermissionTypeMismatchException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetUnfilteredTableMetadataRequest"
      },
      "name": "GetUnfilteredTableMetadata",
      "output": {
        "shape": "GetUnfilteredTableMetadataResponse"
      }
    },
    "GetUserDefinedFunction": {
      "documentation": "<p>Retrieves a specified function definition from the Data Catalog.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "GlueEncryptionException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetUserDefinedFunctionRequest"
      },
      "name": "GetUserDefinedFunction",
      "output": {
        "shape": "GetUserDefinedFunctionResponse"
      }
    },
    "GetUserDefinedFunctions": {
      "documentation": "<p>Retrieves multiple function definitions from the Data Catalog.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "GlueEncryptionException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetUserDefinedFunctionsRequest"
      },
      "name": "GetUserDefinedFunctions",
      "output": {
        "shape": "GetUserDefinedFunctionsResponse"
      }
    },
    "GetWorkflow": {
      "documentation": "<p>Retrieves resource metadata for a workflow.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetWorkflowRequest"
      },
      "name": "GetWorkflow",
      "output": {
        "shape": "GetWorkflowResponse"
      }
    },
    "GetWorkflowRun": {
      "documentation": "<p>Retrieves the metadata for a given workflow run. </p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetWorkflowRunRequest"
      },
      "name": "GetWorkflowRun",
      "output": {
        "shape": "GetWorkflowRunResponse"
      }
    },
    "GetWorkflowRunProperties": {
      "documentation": "<p>Retrieves the workflow run properties which were set during the run.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetWorkflowRunPropertiesRequest"
      },
      "name": "GetWorkflowRunProperties",
      "output": {
        "shape": "GetWorkflowRunPropertiesResponse"
      }
    },
    "GetWorkflowRuns": {
      "documentation": "<p>Retrieves metadata for all runs of a given workflow.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "GetWorkflowRunsRequest"
      },
      "name": "GetWorkflowRuns",
      "output": {
        "shape": "GetWorkflowRunsResponse"
      }
    },
    "ImportCatalogToGlue": {
      "documentation": "<p>Imports an existing Amazon Athena Data Catalog to Glue.</p>",
      "errors": [
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "ImportCatalogToGlueRequest"
      },
      "name": "ImportCatalogToGlue",
      "output": {
        "shape": "ImportCatalogToGlueResponse"
      }
    },
    "ListBlueprints": {
      "documentation": "<p>Lists all the blueprint names in an account.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "ListBlueprintsRequest"
      },
      "name": "ListBlueprints",
      "output": {
        "shape": "ListBlueprintsResponse"
      }
    },
    "ListCrawlers": {
      "documentation": "<p>Retrieves the names of all crawler resources in this Amazon Web Services account, or the resources with the specified tag. This operation allows you to see which resources are available in your account, and their names.</p> <p>This operation takes the optional <code>Tags</code> field, which you can use as a filter on the response so that tagged resources can be retrieved as a group. If you choose to use tags filtering, only resources with the tag are retrieved.</p>",
      "errors": [
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "ListCrawlersRequest"
      },
      "name": "ListCrawlers",
      "output": {
        "shape": "ListCrawlersResponse"
      }
    },
    "ListCrawls": {
      "documentation": "<p>Returns all the crawls of a specified crawler. Returns only the crawls that have occurred since the launch date of the crawler history feature, and only retains up to 12 months of crawls. Older crawls will not be returned.</p> <p>You may use this API to:</p> <ul> <li> <p>Retrive all the crawls of a specified crawler.</p> </li> <li> <p>Retrieve all the crawls of a specified crawler within a limited count.</p> </li> <li> <p>Retrieve all the crawls of a specified crawler in a specific time range.</p> </li> <li> <p>Retrieve all the crawls of a specified crawler with a particular state, crawl ID, or DPU hour value.</p> </li> </ul>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InvalidInputException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "ListCrawlsRequest"
      },
      "name": "ListCrawls",
      "output": {
        "shape": "ListCrawlsResponse"
      }
    },
    "ListCustomEntityTypes": {
      "documentation": "<p>Lists all the custom patterns that have been created.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InternalServiceException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "ListCustomEntityTypesRequest"
      },
      "name": "ListCustomEntityTypes",
      "output": {
        "shape": "ListCustomEntityTypesResponse"
      }
    },
    "ListDevEndpoints": {
      "documentation": "<p>Retrieves the names of all <code>DevEndpoint</code> resources in this Amazon Web Services account, or the resources with the specified tag. This operation allows you to see which resources are available in your account, and their names.</p> <p>This operation takes the optional <code>Tags</code> field, which you can use as a filter on the response so that tagged resources can be retrieved as a group. If you choose to use tags filtering, only resources with the tag are retrieved.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "ListDevEndpointsRequest"
      },
      "name": "ListDevEndpoints",
      "output": {
        "shape": "ListDevEndpointsResponse"
      }
    },
    "ListJobs": {
      "documentation": "<p>Retrieves the names of all job resources in this Amazon Web Services account, or the resources with the specified tag. This operation allows you to see which resources are available in your account, and their names.</p> <p>This operation takes the optional <code>Tags</code> field, which you can use as a filter on the response so that tagged resources can be retrieved as a group. If you choose to use tags filtering, only resources with the tag are retrieved.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "ListJobsRequest"
      },
      "name": "ListJobs",
      "output": {
        "shape": "ListJobsResponse"
      }
    },
    "ListMLTransforms": {
      "documentation": "<p> Retrieves a sortable, filterable list of existing Glue machine learning transforms in this Amazon Web Services account, or the resources with the specified tag. This operation takes the optional <code>Tags</code> field, which you can use as a filter of the responses so that tagged resources can be retrieved as a group. If you choose to use tag filtering, only resources with the tags are retrieved. </p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InternalServiceException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "ListMLTransformsRequest"
      },
      "name": "ListMLTransforms",
      "output": {
        "shape": "ListMLTransformsResponse"
      }
    },
    "ListRegistries": {
      "documentation": "<p>Returns a list of registries that you have created, with minimal registry information. Registries in the <code>Deleting</code> status will not be included in the results. Empty results will be returned if there are no registries available.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServiceException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "ListRegistriesInput"
      },
      "name": "ListRegistries",
      "output": {
        "shape": "ListRegistriesResponse"
      }
    },
    "ListSchemaVersions": {
      "documentation": "<p>Returns a list of schema versions that you have created, with minimal information. Schema versions in Deleted status will not be included in the results. Empty results will be returned if there are no schema versions available.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "ListSchemaVersionsInput"
      },
      "name": "ListSchemaVersions",
      "output": {
        "shape": "ListSchemaVersionsResponse"
      }
    },
    "ListSchemas": {
      "documentation": "<p>Returns a list of schemas with minimal details. Schemas in Deleting status will not be included in the results. Empty results will be returned if there are no schemas available.</p> <p>When the <code>RegistryId</code> is not provided, all the schemas across registries will be part of the API response.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "ListSchemasInput"
      },
      "name": "ListSchemas",
      "output": {
        "shape": "ListSchemasResponse"
      }
    },
    "ListSessions": {
      "documentation": "<p>Retrieve a list of sessions.</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "ListSessionsRequest"
      },
      "name": "ListSessions",
      "output": {
        "shape": "ListSessionsResponse"
      }
    },
    "ListStatements": {
      "documentation": "<p>Lists statements for the session.</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "IllegalSessionStateException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "ListStatementsRequest"
      },
      "name": "ListStatements",
      "output": {
        "shape": "ListStatementsResponse"
      }
    },
    "ListTriggers": {
      "documentation": "<p>Retrieves the names of all trigger resources in this Amazon Web Services account, or the resources with the specified tag. This operation allows you to see which resources are available in your account, and their names.</p> <p>This operation takes the optional <code>Tags</code> field, which you can use as a filter on the response so that tagged resources can be retrieved as a group. If you choose to use tags filtering, only resources with the tag are retrieved.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "ListTriggersRequest"
      },
      "name": "ListTriggers",
      "output": {
        "shape": "ListTriggersResponse"
      }
    },
    "ListWorkflows": {
      "documentation": "<p>Lists names of workflows created in the account.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "ListWorkflowsRequest"
      },
      "name": "ListWorkflows",
      "output": {
        "shape": "ListWorkflowsResponse"
      }
    },
    "PutDataCatalogEncryptionSettings": {
      "documentation": "<p>Sets the security configuration for a specified catalog. After the configuration has been set, the specified encryption is applied to every catalog write thereafter.</p>",
      "errors": [
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "PutDataCatalogEncryptionSettingsRequest"
      },
      "name": "PutDataCatalogEncryptionSettings",
      "output": {
        "shape": "PutDataCatalogEncryptionSettingsResponse"
      }
    },
    "PutResourcePolicy": {
      "documentation": "<p>Sets the Data Catalog resource policy for access control.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "ConditionCheckFailureException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "PutResourcePolicyRequest"
      },
      "name": "PutResourcePolicy",
      "output": {
        "shape": "PutResourcePolicyResponse"
      }
    },
    "PutSchemaVersionMetadata": {
      "documentation": "<p>Puts the metadata key value pair for a specified schema version ID. A maximum of 10 key value pairs will be allowed per schema version. They can be added over one or more calls.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "AlreadyExistsException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "ResourceNumberLimitExceededException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "PutSchemaVersionMetadataInput"
      },
      "name": "PutSchemaVersionMetadata",
      "output": {
        "shape": "PutSchemaVersionMetadataResponse"
      }
    },
    "PutWorkflowRunProperties": {
      "documentation": "<p>Puts the specified workflow run properties for the given workflow run. If a property already exists for the specified run, then it overrides the value otherwise adds the property to existing properties.</p>",
      "errors": [
        {
          "shape": "AlreadyExistsException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "ResourceNumberLimitExceededException"
        },
        {
          "shape": "ConcurrentModificationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "PutWorkflowRunPropertiesRequest"
      },
      "name": "PutWorkflowRunProperties",
      "output": {
        "shape": "PutWorkflowRunPropertiesResponse"
      }
    },
    "QuerySchemaVersionMetadata": {
      "documentation": "<p>Queries for the schema version metadata information. </p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "EntityNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "QuerySchemaVersionMetadataInput"
      },
      "name": "QuerySchemaVersionMetadata",
      "output": {
        "shape": "QuerySchemaVersionMetadataResponse"
      }
    },
    "RegisterSchemaVersion": {
      "documentation": "<p>Adds a new version to the existing schema. Returns an error if new version of schema does not meet the compatibility requirements of the schema set. This API will not create a new schema set and will return a 404 error if the schema set is not already present in the Schema Registry.</p> <p>If this is the first schema definition to be registered in the Schema Registry, this API will store the schema version and return immediately. Otherwise, this call has the potential to run longer than other operations due to compatibility modes. You can call the <code>GetSchemaVersion</code> API with the <code>SchemaVersionId</code> to check compatibility modes.</p> <p>If the same schema definition is already stored in Schema Registry as a version, the schema ID of the existing schema is returned to the caller.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "ResourceNumberLimitExceededException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "InternalServiceException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "RegisterSchemaVersionInput"
      },
      "name": "RegisterSchemaVersion",
      "output": {
        "shape": "RegisterSchemaVersionResponse"
      }
    },
    "RemoveSchemaVersionMetadata": {
      "documentation": "<p>Removes a key value pair from the schema version metadata for the specified schema version ID.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "EntityNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "RemoveSchemaVersionMetadataInput"
      },
      "name": "RemoveSchemaVersionMetadata",
      "output": {
        "shape": "RemoveSchemaVersionMetadataResponse"
      }
    },
    "ResetJobBookmark": {
      "documentation": "<p>Resets a bookmark entry.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "ResetJobBookmarkRequest"
      },
      "name": "ResetJobBookmark",
      "output": {
        "shape": "ResetJobBookmarkResponse"
      }
    },
    "ResumeWorkflowRun": {
      "documentation": "<p>Restarts selected nodes of a previous partially completed workflow run and resumes the workflow run. The selected nodes and all nodes that are downstream from the selected nodes are run.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "ConcurrentRunsExceededException"
        },
        {
          "shape": "IllegalWorkflowStateException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "ResumeWorkflowRunRequest"
      },
      "name": "ResumeWorkflowRun",
      "output": {
        "shape": "ResumeWorkflowRunResponse"
      }
    },
    "RunStatement": {
      "documentation": "<p>Executes the statement.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNumberLimitExceededException"
        },
        {
          "shape": "IllegalSessionStateException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "RunStatementRequest"
      },
      "name": "RunStatement",
      "output": {
        "shape": "RunStatementResponse"
      }
    },
    "SearchTables": {
      "documentation": "<p>Searches a set of tables based on properties in the table metadata as well as on the parent database. You can search against text or filter conditions. </p> <p>You can only get tables that you have access to based on the security policies defined in Lake Formation. You need at least a read-only access to the table for it to be returned. If you do not have access to all the columns in the table, these columns will not be searched against when returning the list of tables back to you. If you have access to the columns but not the data in the columns, those columns and the associated metadata for those columns will be included in the search. </p>",
      "errors": [
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "SearchTablesRequest"
      },
      "name": "SearchTables",
      "output": {
        "shape": "SearchTablesResponse"
      }
    },
    "StartBlueprintRun": {
      "documentation": "<p>Starts a new run of the specified blueprint.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "ResourceNumberLimitExceededException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "IllegalBlueprintStateException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "StartBlueprintRunRequest"
      },
      "name": "StartBlueprintRun",
      "output": {
        "shape": "StartBlueprintRunResponse"
      }
    },
    "StartCrawler": {
      "documentation": "<p>Starts a crawl using the specified crawler, regardless of what is scheduled. If the crawler is already running, returns a <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-exceptions.html#aws-glue-api-exceptions-CrawlerRunningException\">CrawlerRunningException</a>.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "CrawlerRunningException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "StartCrawlerRequest"
      },
      "name": "StartCrawler",
      "output": {
        "shape": "StartCrawlerResponse"
      }
    },
    "StartCrawlerSchedule": {
      "documentation": "<p>Changes the schedule state of the specified crawler to <code>SCHEDULED</code>, unless the crawler is already running or the schedule state is already <code>SCHEDULED</code>.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "SchedulerRunningException"
        },
        {
          "shape": "SchedulerTransitioningException"
        },
        {
          "shape": "NoScheduleException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "StartCrawlerScheduleRequest"
      },
      "name": "StartCrawlerSchedule",
      "output": {
        "shape": "StartCrawlerScheduleResponse"
      }
    },
    "StartExportLabelsTaskRun": {
      "documentation": "<p>Begins an asynchronous task to export all labeled data for a particular transform. This task is the only label-related API call that is not part of the typical active learning workflow. You typically use <code>StartExportLabelsTaskRun</code> when you want to work with all of your existing labels at the same time, such as when you want to remove or change labels that were previously submitted as truth. This API operation accepts the <code>TransformId</code> whose labels you want to export and an Amazon Simple Storage Service (Amazon S3) path to export the labels to. The operation returns a <code>TaskRunId</code>. You can check on the status of your task run by calling the <code>GetMLTaskRun</code> API.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InternalServiceException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "StartExportLabelsTaskRunRequest"
      },
      "name": "StartExportLabelsTaskRun",
      "output": {
        "shape": "StartExportLabelsTaskRunResponse"
      }
    },
    "StartImportLabelsTaskRun": {
      "documentation": "<p>Enables you to provide additional labels (examples of truth) to be used to teach the machine learning transform and improve its quality. This API operation is generally used as part of the active learning workflow that starts with the <code>StartMLLabelingSetGenerationTaskRun</code> call and that ultimately results in improving the quality of your machine learning transform. </p> <p>After the <code>StartMLLabelingSetGenerationTaskRun</code> finishes, Glue machine learning will have generated a series of questions for humans to answer. (Answering these questions is often called 'labeling' in the machine learning workflows). In the case of the <code>FindMatches</code> transform, these questions are of the form, \u201cWhat is the correct way to group these rows together into groups composed entirely of matching records?\u201d After the labeling process is finished, users upload their answers/labels with a call to <code>StartImportLabelsTaskRun</code>. After <code>StartImportLabelsTaskRun</code> finishes, all future runs of the machine learning transform use the new and improved labels and perform a higher-quality transformation.</p> <p>By default, <code>StartMLLabelingSetGenerationTaskRun</code> continually learns from and combines all labels that you upload unless you set <code>Replace</code> to true. If you set <code>Replace</code> to true, <code>StartImportLabelsTaskRun</code> deletes and forgets all previously uploaded labels and learns only from the exact set that you upload. Replacing labels can be helpful if you realize that you previously uploaded incorrect labels, and you believe that they are having a negative effect on your transform quality.</p> <p>You can check on the status of your task run by calling the <code>GetMLTaskRun</code> operation. </p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "ResourceNumberLimitExceededException"
        },
        {
          "shape": "InternalServiceException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "StartImportLabelsTaskRunRequest"
      },
      "name": "StartImportLabelsTaskRun",
      "output": {
        "shape": "StartImportLabelsTaskRunResponse"
      }
    },
    "StartJobRun": {
      "documentation": "<p>Starts a job run using a job definition.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "ResourceNumberLimitExceededException"
        },
        {
          "shape": "ConcurrentRunsExceededException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "StartJobRunRequest"
      },
      "name": "StartJobRun",
      "output": {
        "shape": "StartJobRunResponse"
      }
    },
    "StartMLEvaluationTaskRun": {
      "documentation": "<p>Starts a task to estimate the quality of the transform. </p> <p>When you provide label sets as examples of truth, Glue machine learning uses some of those examples to learn from them. The rest of the labels are used as a test to estimate quality.</p> <p>Returns a unique identifier for the run. You can call <code>GetMLTaskRun</code> to get more information about the stats of the <code>EvaluationTaskRun</code>.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "ConcurrentRunsExceededException"
        },
        {
          "shape": "MLTransformNotReadyException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "StartMLEvaluationTaskRunRequest"
      },
      "name": "StartMLEvaluationTaskRun",
      "output": {
        "shape": "StartMLEvaluationTaskRunResponse"
      }
    },
    "StartMLLabelingSetGenerationTaskRun": {
      "documentation": "<p>Starts the active learning workflow for your machine learning transform to improve the transform's quality by generating label sets and adding labels.</p> <p>When the <code>StartMLLabelingSetGenerationTaskRun</code> finishes, Glue will have generated a \"labeling set\" or a set of questions for humans to answer.</p> <p>In the case of the <code>FindMatches</code> transform, these questions are of the form, \u201cWhat is the correct way to group these rows together into groups composed entirely of matching records?\u201d </p> <p>After the labeling process is finished, you can upload your labels with a call to <code>StartImportLabelsTaskRun</code>. After <code>StartImportLabelsTaskRun</code> finishes, all future runs of the machine learning transform will use the new and improved labels and perform a higher-quality transformation.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "ConcurrentRunsExceededException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "StartMLLabelingSetGenerationTaskRunRequest"
      },
      "name": "StartMLLabelingSetGenerationTaskRun",
      "output": {
        "shape": "StartMLLabelingSetGenerationTaskRunResponse"
      }
    },
    "StartTrigger": {
      "documentation": "<p>Starts an existing trigger. See <a href=\"https://docs.aws.amazon.com/glue/latest/dg/trigger-job.html\">Triggering Jobs</a> for information about how different types of trigger are started.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "ResourceNumberLimitExceededException"
        },
        {
          "shape": "ConcurrentRunsExceededException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "StartTriggerRequest"
      },
      "name": "StartTrigger",
      "output": {
        "shape": "StartTriggerResponse"
      }
    },
    "StartWorkflowRun": {
      "documentation": "<p>Starts a new run of the specified workflow.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "ResourceNumberLimitExceededException"
        },
        {
          "shape": "ConcurrentRunsExceededException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "StartWorkflowRunRequest"
      },
      "name": "StartWorkflowRun",
      "output": {
        "shape": "StartWorkflowRunResponse"
      }
    },
    "StopCrawler": {
      "documentation": "<p>If the specified crawler is running, stops the crawl.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "CrawlerNotRunningException"
        },
        {
          "shape": "CrawlerStoppingException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "StopCrawlerRequest"
      },
      "name": "StopCrawler",
      "output": {
        "shape": "StopCrawlerResponse"
      }
    },
    "StopCrawlerSchedule": {
      "documentation": "<p>Sets the schedule state of the specified crawler to <code>NOT_SCHEDULED</code>, but does not stop the crawler if it is already running.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "SchedulerNotRunningException"
        },
        {
          "shape": "SchedulerTransitioningException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "StopCrawlerScheduleRequest"
      },
      "name": "StopCrawlerSchedule",
      "output": {
        "shape": "StopCrawlerScheduleResponse"
      }
    },
    "StopSession": {
      "documentation": "<p>Stops the session.</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "IllegalSessionStateException"
        },
        {
          "shape": "ConcurrentModificationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "StopSessionRequest"
      },
      "name": "StopSession",
      "output": {
        "shape": "StopSessionResponse"
      }
    },
    "StopTrigger": {
      "documentation": "<p>Stops a specified trigger.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "ConcurrentModificationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "StopTriggerRequest"
      },
      "name": "StopTrigger",
      "output": {
        "shape": "StopTriggerResponse"
      }
    },
    "StopWorkflowRun": {
      "documentation": "<p>Stops the execution of the specified workflow run.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "IllegalWorkflowStateException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "StopWorkflowRunRequest"
      },
      "name": "StopWorkflowRun",
      "output": {
        "shape": "StopWorkflowRunResponse"
      }
    },
    "TagResource": {
      "documentation": "<p>Adds tags to a resource. A tag is a label you can assign to an Amazon Web Services resource. In Glue, you can tag only certain resources. For information about what resources you can tag, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html\">Amazon Web Services Tags in Glue</a>.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "EntityNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "TagResourceRequest"
      },
      "name": "TagResource",
      "output": {
        "shape": "TagResourceResponse"
      }
    },
    "UntagResource": {
      "documentation": "<p>Removes tags from a resource.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "EntityNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "UntagResourceRequest"
      },
      "name": "UntagResource",
      "output": {
        "shape": "UntagResourceResponse"
      }
    },
    "UpdateBlueprint": {
      "documentation": "<p>Updates a registered blueprint.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "IllegalBlueprintStateException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "UpdateBlueprintRequest"
      },
      "name": "UpdateBlueprint",
      "output": {
        "shape": "UpdateBlueprintResponse"
      }
    },
    "UpdateClassifier": {
      "documentation": "<p>Modifies an existing classifier (a <code>GrokClassifier</code>, an <code>XMLClassifier</code>, a <code>JsonClassifier</code>, or a <code>CsvClassifier</code>, depending on which field is present).</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "VersionMismatchException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "UpdateClassifierRequest"
      },
      "name": "UpdateClassifier",
      "output": {
        "shape": "UpdateClassifierResponse"
      }
    },
    "UpdateColumnStatisticsForPartition": {
      "documentation": "<p>Creates or updates partition statistics of columns.</p> <p>The Identity and Access Management (IAM) permission required for this operation is <code>UpdatePartition</code>.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "GlueEncryptionException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "UpdateColumnStatisticsForPartitionRequest"
      },
      "name": "UpdateColumnStatisticsForPartition",
      "output": {
        "shape": "UpdateColumnStatisticsForPartitionResponse"
      }
    },
    "UpdateColumnStatisticsForTable": {
      "documentation": "<p>Creates or updates table statistics of columns.</p> <p>The Identity and Access Management (IAM) permission required for this operation is <code>UpdateTable</code>.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "GlueEncryptionException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "UpdateColumnStatisticsForTableRequest"
      },
      "name": "UpdateColumnStatisticsForTable",
      "output": {
        "shape": "UpdateColumnStatisticsForTableResponse"
      }
    },
    "UpdateConnection": {
      "documentation": "<p>Updates a connection definition in the Data Catalog.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "GlueEncryptionException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "UpdateConnectionRequest"
      },
      "name": "UpdateConnection",
      "output": {
        "shape": "UpdateConnectionResponse"
      }
    },
    "UpdateCrawler": {
      "documentation": "<p>Updates a crawler. If a crawler is running, you must stop it using <code>StopCrawler</code> before updating it.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "VersionMismatchException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "CrawlerRunningException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "UpdateCrawlerRequest"
      },
      "name": "UpdateCrawler",
      "output": {
        "shape": "UpdateCrawlerResponse"
      }
    },
    "UpdateCrawlerSchedule": {
      "documentation": "<p>Updates the schedule of a crawler using a <code>cron</code> expression. </p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "VersionMismatchException"
        },
        {
          "shape": "SchedulerTransitioningException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "UpdateCrawlerScheduleRequest"
      },
      "name": "UpdateCrawlerSchedule",
      "output": {
        "shape": "UpdateCrawlerScheduleResponse"
      }
    },
    "UpdateDatabase": {
      "documentation": "<p>Updates an existing database definition in a Data Catalog.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "GlueEncryptionException"
        },
        {
          "shape": "ConcurrentModificationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "UpdateDatabaseRequest"
      },
      "name": "UpdateDatabase",
      "output": {
        "shape": "UpdateDatabaseResponse"
      }
    },
    "UpdateDevEndpoint": {
      "documentation": "<p>Updates a specified development endpoint.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "ValidationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "UpdateDevEndpointRequest"
      },
      "name": "UpdateDevEndpoint",
      "output": {
        "shape": "UpdateDevEndpointResponse"
      }
    },
    "UpdateJob": {
      "documentation": "<p>Updates an existing job definition. The previous job definition is completely overwritten by this information.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "ConcurrentModificationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "UpdateJobRequest"
      },
      "name": "UpdateJob",
      "output": {
        "shape": "UpdateJobResponse"
      }
    },
    "UpdateJobFromSourceControl": {
      "documentation": "<p>Synchronizes a job from the source control repository. This operation takes the job artifacts that are located in the remote repository and updates the Glue internal stores with these artifacts.</p> <p>This API supports optional parameters which take in the repository information.</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "AlreadyExistsException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "UpdateJobFromSourceControlRequest"
      },
      "name": "UpdateJobFromSourceControl",
      "output": {
        "shape": "UpdateJobFromSourceControlResponse"
      }
    },
    "UpdateMLTransform": {
      "documentation": "<p>Updates an existing machine learning transform. Call this operation to tune the algorithm parameters to achieve better results.</p> <p>After calling this operation, you can call the <code>StartMLEvaluationTaskRun</code> operation to assess how well your new parameters achieved your goals (such as improving the quality of your machine learning transform, or making it more cost-effective).</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "UpdateMLTransformRequest"
      },
      "name": "UpdateMLTransform",
      "output": {
        "shape": "UpdateMLTransformResponse"
      }
    },
    "UpdatePartition": {
      "documentation": "<p>Updates a partition.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "GlueEncryptionException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "UpdatePartitionRequest"
      },
      "name": "UpdatePartition",
      "output": {
        "shape": "UpdatePartitionResponse"
      }
    },
    "UpdateRegistry": {
      "documentation": "<p>Updates an existing registry which is used to hold a collection of schemas. The updated properties relate to the registry, and do not modify any of the schemas within the registry. </p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "InternalServiceException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "UpdateRegistryInput"
      },
      "name": "UpdateRegistry",
      "output": {
        "shape": "UpdateRegistryResponse"
      }
    },
    "UpdateSchema": {
      "documentation": "<p>Updates the description, compatibility setting, or version checkpoint for a schema set.</p> <p>For updating the compatibility setting, the call will not validate compatibility for the entire set of schema versions with the new compatibility setting. If the value for <code>Compatibility</code> is provided, the <code>VersionNumber</code> (a checkpoint) is also required. The API will validate the checkpoint version number for consistency.</p> <p>If the value for the <code>VersionNumber</code> (checkpoint) is provided, <code>Compatibility</code> is optional and this can be used to set/reset a checkpoint for the schema.</p> <p>This update will happen only if the schema is in the AVAILABLE state.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "InternalServiceException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "UpdateSchemaInput"
      },
      "name": "UpdateSchema",
      "output": {
        "shape": "UpdateSchemaResponse"
      }
    },
    "UpdateSourceControlFromJob": {
      "documentation": "<p>Synchronizes a job to the source control repository. This operation takes the job artifacts from the Glue internal stores and makes a commit to the remote repository that is configured on the job.</p> <p>This API supports optional parameters which take in the repository information.</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "AlreadyExistsException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "UpdateSourceControlFromJobRequest"
      },
      "name": "UpdateSourceControlFromJob",
      "output": {
        "shape": "UpdateSourceControlFromJobResponse"
      }
    },
    "UpdateTable": {
      "documentation": "<p>Updates a metadata table in the Data Catalog.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "ResourceNumberLimitExceededException"
        },
        {
          "shape": "GlueEncryptionException"
        },
        {
          "shape": "ResourceNotReadyException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "UpdateTableRequest"
      },
      "name": "UpdateTable",
      "output": {
        "shape": "UpdateTableResponse"
      }
    },
    "UpdateTrigger": {
      "documentation": "<p>Updates a trigger definition.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "ConcurrentModificationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "UpdateTriggerRequest"
      },
      "name": "UpdateTrigger",
      "output": {
        "shape": "UpdateTriggerResponse"
      }
    },
    "UpdateUserDefinedFunction": {
      "documentation": "<p>Updates an existing function definition in the Data Catalog.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "GlueEncryptionException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "UpdateUserDefinedFunctionRequest"
      },
      "name": "UpdateUserDefinedFunction",
      "output": {
        "shape": "UpdateUserDefinedFunctionResponse"
      }
    },
    "UpdateWorkflow": {
      "documentation": "<p>Updates an existing workflow.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "ConcurrentModificationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "UpdateWorkflowRequest"
      },
      "name": "UpdateWorkflow",
      "output": {
        "shape": "UpdateWorkflowResponse"
      }
    }
  },
  "shapes": {
    "AccessDeniedException": {
      "documentation": "<p>Access to a resource was denied.</p>",
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "AccountId": {
      "max": 12,
      "min": 0,
      "type": "string"
    },
    "Action": {
      "documentation": "<p>Defines an action to be initiated by a trigger.</p>",
      "members": {
        "Arguments": {
          "documentation": "<p>The job arguments used when this trigger fires. For this job run, they replace the default arguments set in the job definition itself.</p> <p>You can specify arguments here that your own job-execution script consumes, as well as arguments that Glue itself consumes.</p> <p>For information about how to specify and consume your own Job arguments, see the <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling Glue APIs in Python</a> topic in the developer guide.</p> <p>For information about the key-value pairs that Glue consumes to set up your job, see the <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by Glue</a> topic in the developer guide.</p>",
          "shape": "GenericMap"
        },
        "CrawlerName": {
          "documentation": "<p>The name of the crawler to be used with this action.</p>",
          "shape": "NameString"
        },
        "JobName": {
          "documentation": "<p>The name of a job to be run.</p>",
          "shape": "NameString"
        },
        "NotificationProperty": {
          "documentation": "<p>Specifies configuration properties of a job run notification.</p>",
          "shape": "NotificationProperty"
        },
        "SecurityConfiguration": {
          "documentation": "<p>The name of the <code>SecurityConfiguration</code> structure to be used with this action.</p>",
          "shape": "NameString"
        },
        "Timeout": {
          "documentation": "<p>The <code>JobRun</code> timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters <code>TIMEOUT</code> status. The default is 2,880 minutes (48 hours). This overrides the timeout value set in the parent job.</p>",
          "shape": "Timeout"
        }
      },
      "type": "structure"
    },
    "ActionList": {
      "member": {
        "shape": "Action"
      },
      "type": "list"
    },
    "AdditionalOptions": {
      "key": {
        "shape": "EnclosedInStringProperty"
      },
      "type": "map",
      "value": {
        "shape": "EnclosedInStringProperty"
      }
    },
    "AdditionalPlanOptionsMap": {
      "key": {
        "shape": "GenericString"
      },
      "type": "map",
      "value": {
        "shape": "GenericString"
      }
    },
    "AggFunction": {
      "enum": [
        "avg",
        "countDistinct",
        "count",
        "first",
        "last",
        "kurtosis",
        "max",
        "min",
        "skewness",
        "stddev_samp",
        "stddev_pop",
        "sum",
        "sumDistinct",
        "var_samp",
        "var_pop"
      ],
      "type": "string"
    },
    "Aggregate": {
      "documentation": "<p>Specifies a transform that groups rows by chosen fields and computes the aggregated value by specified function.</p>",
      "members": {
        "Aggs": {
          "documentation": "<p>Specifies the aggregate functions to be performed on specified fields. </p>",
          "shape": "AggregateOperations"
        },
        "Groups": {
          "documentation": "<p>Specifies the fields to group by.</p>",
          "shape": "GlueStudioPathList"
        },
        "Inputs": {
          "documentation": "<p>Specifies the fields and rows to use as inputs for the aggregate transform.</p>",
          "shape": "OneInput"
        },
        "Name": {
          "documentation": "<p>The name of the transform node.</p>",
          "shape": "NodeName"
        }
      },
      "required": [
        "Name",
        "Inputs",
        "Groups",
        "Aggs"
      ],
      "type": "structure"
    },
    "AggregateOperation": {
      "documentation": "<p>Specifies the set of parameters needed to perform aggregation in the aggregate transform.</p>",
      "members": {
        "AggFunc": {
          "documentation": "<p>Specifies the aggregation function to apply.</p> <p>Possible aggregation functions include: avg countDistinct, count, first, last, kurtosis, max, min, skewness, stddev_samp, stddev_pop, sum, sumDistinct, var_samp, var_pop</p>",
          "shape": "AggFunction"
        },
        "Column": {
          "documentation": "<p>Specifies the column on the data set on which the aggregation function will be applied.</p>",
          "shape": "EnclosedInStringProperties"
        }
      },
      "required": [
        "Column",
        "AggFunc"
      ],
      "type": "structure"
    },
    "AggregateOperations": {
      "max": 30,
      "member": {
        "shape": "AggregateOperation"
      },
      "min": 1,
      "type": "list"
    },
    "AlreadyExistsException": {
      "documentation": "<p>A resource to be created or added already exists.</p>",
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "ApplyMapping": {
      "documentation": "<p>Specifies a transform that maps data property keys in the data source to data property keys in the data target. You can rename keys, modify the data types for keys, and choose which keys to drop from the dataset.</p>",
      "members": {
        "Inputs": {
          "documentation": "<p>The data inputs identified by their node names.</p>",
          "shape": "OneInput"
        },
        "Mapping": {
          "documentation": "<p>Specifies the mapping of data property keys in the data source to data property keys in the data target.</p>",
          "shape": "Mappings"
        },
        "Name": {
          "documentation": "<p>The name of the transform node.</p>",
          "shape": "NodeName"
        }
      },
      "required": [
        "Name",
        "Inputs",
        "Mapping"
      ],
      "type": "structure"
    },
    "AthenaConnectorSource": {
      "documentation": "<p>Specifies a connector to an Amazon Athena data source.</p>",
      "members": {
        "ConnectionName": {
          "documentation": "<p>The name of the connection that is associated with the connector.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "ConnectionTable": {
          "documentation": "<p>The name of the table in the data source.</p>",
          "shape": "EnclosedInStringPropertyWithQuote"
        },
        "ConnectionType": {
          "documentation": "<p>The type of connection, such as marketplace.athena or custom.athena, designating a connection to an Amazon Athena data store.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "ConnectorName": {
          "documentation": "<p>The name of a connector that assists with accessing the data store in Glue Studio.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "Name": {
          "documentation": "<p>The name of the data source.</p>",
          "shape": "NodeName"
        },
        "OutputSchemas": {
          "documentation": "<p>Specifies the data schema for the custom Athena source.</p>",
          "shape": "GlueSchemas"
        },
        "SchemaName": {
          "documentation": "<p>The name of the Cloudwatch log group to read from. For example, <code>/aws-glue/jobs/output</code>.</p>",
          "shape": "EnclosedInStringProperty"
        }
      },
      "required": [
        "Name",
        "ConnectionName",
        "ConnectorName",
        "ConnectionType",
        "SchemaName"
      ],
      "type": "structure"
    },
    "AttemptCount": {
      "type": "integer"
    },
    "AuditColumnNamesList": {
      "member": {
        "shape": "ColumnNameString"
      },
      "type": "list"
    },
    "AuditContext": {
      "documentation": "<p>A structure containing information for audit.</p>",
      "members": {
        "AdditionalAuditContext": {
          "documentation": "<p>The context for the audit..</p>",
          "shape": "AuditContextString"
        },
        "AllColumnsRequested": {
          "documentation": "<p>All columns request for audit.</p>",
          "shape": "NullableBoolean"
        },
        "RequestedColumns": {
          "documentation": "<p>The requested columns for audit.</p>",
          "shape": "AuditColumnNamesList"
        }
      },
      "type": "structure"
    },
    "AuditContextString": {
      "max": 2048,
      "min": 0,
      "type": "string"
    },
    "AuthTokenString": {
      "max": 255,
      "min": 1,
      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
      "type": "string"
    },
    "BackfillError": {
      "documentation": "<p>A list of errors that can occur when registering partition indexes for an existing table.</p> <p>These errors give the details about why an index registration failed and provide a limited number of partitions in the response, so that you can fix the partitions at fault and try registering the index again. The most common set of errors that can occur are categorized as follows:</p> <ul> <li> <p>EncryptedPartitionError: The partitions are encrypted.</p> </li> <li> <p>InvalidPartitionTypeDataError: The partition value doesn't match the data type for that partition column.</p> </li> <li> <p>MissingPartitionValueError: The partitions are encrypted.</p> </li> <li> <p>UnsupportedPartitionCharacterError: Characters inside the partition value are not supported. For example: U+0000 , U+0001, U+0002.</p> </li> <li> <p>InternalError: Any error which does not belong to other error codes.</p> </li> </ul>",
      "members": {
        "Code": {
          "documentation": "<p>The error code for an error that occurred when registering partition indexes for an existing table.</p>",
          "shape": "BackfillErrorCode"
        },
        "Partitions": {
          "documentation": "<p>A list of a limited number of partitions in the response.</p>",
          "shape": "BackfillErroredPartitionsList"
        }
      },
      "type": "structure"
    },
    "BackfillErrorCode": {
      "enum": [
        "ENCRYPTED_PARTITION_ERROR",
        "INTERNAL_ERROR",
        "INVALID_PARTITION_TYPE_DATA_ERROR",
        "MISSING_PARTITION_VALUE_ERROR",
        "UNSUPPORTED_PARTITION_CHARACTER_ERROR"
      ],
      "type": "string"
    },
    "BackfillErroredPartitionsList": {
      "member": {
        "shape": "PartitionValueList"
      },
      "type": "list"
    },
    "BackfillErrors": {
      "member": {
        "shape": "BackfillError"
      },
      "type": "list"
    },
    "BasicCatalogTarget": {
      "documentation": "<p>Specifies a target that uses a Glue Data Catalog table.</p>",
      "members": {
        "Database": {
          "documentation": "<p>The database that contains the table you want to use as the target. This database must already exist in the Data Catalog.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "Inputs": {
          "documentation": "<p>The nodes that are inputs to the data target.</p>",
          "shape": "OneInput"
        },
        "Name": {
          "documentation": "<p>The name of your data target.</p>",
          "shape": "NodeName"
        },
        "Table": {
          "documentation": "<p>The table that defines the schema of your output data. This table must already exist in the Data Catalog.</p>",
          "shape": "EnclosedInStringProperty"
        }
      },
      "required": [
        "Name",
        "Inputs",
        "Database",
        "Table"
      ],
      "type": "structure"
    },
    "BatchCreatePartitionRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the catalog in which the partition is to be created. Currently, this should be the Amazon Web Services account ID.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>The name of the metadata database in which the partition is to be created.</p>",
          "shape": "NameString"
        },
        "PartitionInputList": {
          "documentation": "<p>A list of <code>PartitionInput</code> structures that define the partitions to be created.</p>",
          "shape": "PartitionInputList"
        },
        "TableName": {
          "documentation": "<p>The name of the metadata table in which the partition is to be created.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "PartitionInputList"
      ],
      "type": "structure"
    },
    "BatchCreatePartitionResponse": {
      "members": {
        "Errors": {
          "documentation": "<p>The errors encountered when trying to create the requested partitions.</p>",
          "shape": "PartitionErrors"
        }
      },
      "type": "structure"
    },
    "BatchDeleteConnectionRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog in which the connections reside. If none is provided, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "ConnectionNameList": {
          "documentation": "<p>A list of names of the connections to delete.</p>",
          "shape": "DeleteConnectionNameList"
        }
      },
      "required": [
        "ConnectionNameList"
      ],
      "type": "structure"
    },
    "BatchDeleteConnectionResponse": {
      "members": {
        "Errors": {
          "documentation": "<p>A map of the names of connections that were not successfully deleted to error details.</p>",
          "shape": "ErrorByName"
        },
        "Succeeded": {
          "documentation": "<p>A list of names of the connection definitions that were successfully deleted.</p>",
          "shape": "NameStringList"
        }
      },
      "type": "structure"
    },
    "BatchDeletePartitionRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog where the partition to be deleted resides. If none is provided, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>The name of the catalog database in which the table in question resides.</p>",
          "shape": "NameString"
        },
        "PartitionsToDelete": {
          "documentation": "<p>A list of <code>PartitionInput</code> structures that define the partitions to be deleted.</p>",
          "shape": "BatchDeletePartitionValueList"
        },
        "TableName": {
          "documentation": "<p>The name of the table that contains the partitions to be deleted.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "PartitionsToDelete"
      ],
      "type": "structure"
    },
    "BatchDeletePartitionResponse": {
      "members": {
        "Errors": {
          "documentation": "<p>The errors encountered when trying to delete the requested partitions.</p>",
          "shape": "PartitionErrors"
        }
      },
      "type": "structure"
    },
    "BatchDeletePartitionValueList": {
      "max": 25,
      "member": {
        "shape": "PartitionValueList"
      },
      "min": 0,
      "type": "list"
    },
    "BatchDeleteTableNameList": {
      "max": 100,
      "member": {
        "shape": "NameString"
      },
      "min": 0,
      "type": "list"
    },
    "BatchDeleteTableRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog where the table resides. If none is provided, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>The name of the catalog database in which the tables to delete reside. For Hive compatibility, this name is entirely lowercase.</p>",
          "shape": "NameString"
        },
        "TablesToDelete": {
          "documentation": "<p>A list of the table to delete.</p>",
          "shape": "BatchDeleteTableNameList"
        },
        "TransactionId": {
          "documentation": "<p>The transaction ID at which to delete the table contents.</p>",
          "shape": "TransactionIdString"
        }
      },
      "required": [
        "DatabaseName",
        "TablesToDelete"
      ],
      "type": "structure"
    },
    "BatchDeleteTableResponse": {
      "members": {
        "Errors": {
          "documentation": "<p>A list of errors encountered in attempting to delete the specified tables.</p>",
          "shape": "TableErrors"
        }
      },
      "type": "structure"
    },
    "BatchDeleteTableVersionList": {
      "max": 100,
      "member": {
        "shape": "VersionString"
      },
      "min": 0,
      "type": "list"
    },
    "BatchDeleteTableVersionRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog where the tables reside. If none is provided, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>The database in the catalog in which the table resides. For Hive compatibility, this name is entirely lowercase.</p>",
          "shape": "NameString"
        },
        "TableName": {
          "documentation": "<p>The name of the table. For Hive compatibility, this name is entirely lowercase.</p>",
          "shape": "NameString"
        },
        "VersionIds": {
          "documentation": "<p>A list of the IDs of versions to be deleted. A <code>VersionId</code> is a string representation of an integer. Each version is incremented by 1.</p>",
          "shape": "BatchDeleteTableVersionList"
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "VersionIds"
      ],
      "type": "structure"
    },
    "BatchDeleteTableVersionResponse": {
      "members": {
        "Errors": {
          "documentation": "<p>A list of errors encountered while trying to delete the specified table versions.</p>",
          "shape": "TableVersionErrors"
        }
      },
      "type": "structure"
    },
    "BatchGetBlueprintNames": {
      "max": 25,
      "member": {
        "shape": "OrchestrationNameString"
      },
      "min": 1,
      "type": "list"
    },
    "BatchGetBlueprintsRequest": {
      "members": {
        "IncludeBlueprint": {
          "documentation": "<p>Specifies whether or not to include the blueprint in the response.</p>",
          "shape": "NullableBoolean"
        },
        "IncludeParameterSpec": {
          "documentation": "<p>Specifies whether or not to include the parameters, as a JSON string, for the blueprint in the response.</p>",
          "shape": "NullableBoolean"
        },
        "Names": {
          "documentation": "<p>A list of blueprint names.</p>",
          "shape": "BatchGetBlueprintNames"
        }
      },
      "required": [
        "Names"
      ],
      "type": "structure"
    },
    "BatchGetBlueprintsResponse": {
      "members": {
        "Blueprints": {
          "documentation": "<p>Returns a list of blueprint as a <code>Blueprints</code> object.</p>",
          "shape": "Blueprints"
        },
        "MissingBlueprints": {
          "documentation": "<p>Returns a list of <code>BlueprintNames</code> that were not found.</p>",
          "shape": "BlueprintNames"
        }
      },
      "type": "structure"
    },
    "BatchGetCrawlersRequest": {
      "members": {
        "CrawlerNames": {
          "documentation": "<p>A list of crawler names, which might be the names returned from the <code>ListCrawlers</code> operation.</p>",
          "shape": "CrawlerNameList"
        }
      },
      "required": [
        "CrawlerNames"
      ],
      "type": "structure"
    },
    "BatchGetCrawlersResponse": {
      "members": {
        "Crawlers": {
          "documentation": "<p>A list of crawler definitions.</p>",
          "shape": "CrawlerList"
        },
        "CrawlersNotFound": {
          "documentation": "<p>A list of names of crawlers that were not found.</p>",
          "shape": "CrawlerNameList"
        }
      },
      "type": "structure"
    },
    "BatchGetCustomEntityTypesRequest": {
      "members": {
        "Names": {
          "documentation": "<p>A list of names of the custom patterns that you want to retrieve.</p>",
          "shape": "CustomEntityTypeNames"
        }
      },
      "required": [
        "Names"
      ],
      "type": "structure"
    },
    "BatchGetCustomEntityTypesResponse": {
      "members": {
        "CustomEntityTypes": {
          "documentation": "<p>A list of <code>CustomEntityType</code> objects representing the custom patterns that have been created.</p>",
          "shape": "CustomEntityTypes"
        },
        "CustomEntityTypesNotFound": {
          "documentation": "<p>A list of the names of custom patterns that were not found.</p>",
          "shape": "CustomEntityTypeNames"
        }
      },
      "type": "structure"
    },
    "BatchGetDevEndpointsRequest": {
      "members": {
        "DevEndpointNames": {
          "documentation": "<p>The list of <code>DevEndpoint</code> names, which might be the names returned from the <code>ListDevEndpoint</code> operation.</p>",
          "shape": "DevEndpointNames"
        }
      },
      "required": [
        "DevEndpointNames"
      ],
      "type": "structure"
    },
    "BatchGetDevEndpointsResponse": {
      "members": {
        "DevEndpoints": {
          "documentation": "<p>A list of <code>DevEndpoint</code> definitions.</p>",
          "shape": "DevEndpointList"
        },
        "DevEndpointsNotFound": {
          "documentation": "<p>A list of <code>DevEndpoints</code> not found.</p>",
          "shape": "DevEndpointNames"
        }
      },
      "type": "structure"
    },
    "BatchGetJobsRequest": {
      "members": {
        "JobNames": {
          "documentation": "<p>A list of job names, which might be the names returned from the <code>ListJobs</code> operation.</p>",
          "shape": "JobNameList"
        }
      },
      "required": [
        "JobNames"
      ],
      "type": "structure"
    },
    "BatchGetJobsResponse": {
      "members": {
        "Jobs": {
          "documentation": "<p>A list of job definitions.</p>",
          "shape": "JobList"
        },
        "JobsNotFound": {
          "documentation": "<p>A list of names of jobs not found.</p>",
          "shape": "JobNameList"
        }
      },
      "type": "structure"
    },
    "BatchGetPartitionRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog where the partitions in question reside. If none is supplied, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>The name of the catalog database where the partitions reside.</p>",
          "shape": "NameString"
        },
        "PartitionsToGet": {
          "documentation": "<p>A list of partition values identifying the partitions to retrieve.</p>",
          "shape": "BatchGetPartitionValueList"
        },
        "TableName": {
          "documentation": "<p>The name of the partitions' table.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "PartitionsToGet"
      ],
      "type": "structure"
    },
    "BatchGetPartitionResponse": {
      "members": {
        "Partitions": {
          "documentation": "<p>A list of the requested partitions.</p>",
          "shape": "PartitionList"
        },
        "UnprocessedKeys": {
          "documentation": "<p>A list of the partition values in the request for which partitions were not returned.</p>",
          "shape": "BatchGetPartitionValueList"
        }
      },
      "type": "structure"
    },
    "BatchGetPartitionValueList": {
      "max": 1000,
      "member": {
        "shape": "PartitionValueList"
      },
      "min": 0,
      "type": "list"
    },
    "BatchGetTriggersRequest": {
      "members": {
        "TriggerNames": {
          "documentation": "<p>A list of trigger names, which may be the names returned from the <code>ListTriggers</code> operation.</p>",
          "shape": "TriggerNameList"
        }
      },
      "required": [
        "TriggerNames"
      ],
      "type": "structure"
    },
    "BatchGetTriggersResponse": {
      "members": {
        "Triggers": {
          "documentation": "<p>A list of trigger definitions.</p>",
          "shape": "TriggerList"
        },
        "TriggersNotFound": {
          "documentation": "<p>A list of names of triggers not found.</p>",
          "shape": "TriggerNameList"
        }
      },
      "type": "structure"
    },
    "BatchGetWorkflowsRequest": {
      "members": {
        "IncludeGraph": {
          "documentation": "<p>Specifies whether to include a graph when returning the workflow resource metadata.</p>",
          "shape": "NullableBoolean"
        },
        "Names": {
          "documentation": "<p>A list of workflow names, which may be the names returned from the <code>ListWorkflows</code> operation.</p>",
          "shape": "WorkflowNames"
        }
      },
      "required": [
        "Names"
      ],
      "type": "structure"
    },
    "BatchGetWorkflowsResponse": {
      "members": {
        "MissingWorkflows": {
          "documentation": "<p>A list of names of workflows not found.</p>",
          "shape": "WorkflowNames"
        },
        "Workflows": {
          "documentation": "<p>A list of workflow resource metadata.</p>",
          "shape": "Workflows"
        }
      },
      "type": "structure"
    },
    "BatchSize": {
      "max": 100,
      "min": 1,
      "type": "integer"
    },
    "BatchStopJobRunError": {
      "documentation": "<p>Records an error that occurred when attempting to stop a specified job run.</p>",
      "members": {
        "ErrorDetail": {
          "documentation": "<p>Specifies details about the error that was encountered.</p>",
          "shape": "ErrorDetail"
        },
        "JobName": {
          "documentation": "<p>The name of the job definition that is used in the job run in question.</p>",
          "shape": "NameString"
        },
        "JobRunId": {
          "documentation": "<p>The <code>JobRunId</code> of the job run in question.</p>",
          "shape": "IdString"
        }
      },
      "type": "structure"
    },
    "BatchStopJobRunErrorList": {
      "member": {
        "shape": "BatchStopJobRunError"
      },
      "type": "list"
    },
    "BatchStopJobRunJobRunIdList": {
      "max": 25,
      "member": {
        "shape": "IdString"
      },
      "min": 1,
      "type": "list"
    },
    "BatchStopJobRunRequest": {
      "members": {
        "JobName": {
          "documentation": "<p>The name of the job definition for which to stop job runs.</p>",
          "shape": "NameString"
        },
        "JobRunIds": {
          "documentation": "<p>A list of the <code>JobRunIds</code> that should be stopped for that job definition.</p>",
          "shape": "BatchStopJobRunJobRunIdList"
        }
      },
      "required": [
        "JobName",
        "JobRunIds"
      ],
      "type": "structure"
    },
    "BatchStopJobRunResponse": {
      "members": {
        "Errors": {
          "documentation": "<p>A list of the errors that were encountered in trying to stop <code>JobRuns</code>, including the <code>JobRunId</code> for which each error was encountered and details about the error.</p>",
          "shape": "BatchStopJobRunErrorList"
        },
        "SuccessfulSubmissions": {
          "documentation": "<p>A list of the JobRuns that were successfully submitted for stopping.</p>",
          "shape": "BatchStopJobRunSuccessfulSubmissionList"
        }
      },
      "type": "structure"
    },
    "BatchStopJobRunSuccessfulSubmission": {
      "documentation": "<p>Records a successful request to stop a specified <code>JobRun</code>.</p>",
      "members": {
        "JobName": {
          "documentation": "<p>The name of the job definition used in the job run that was stopped.</p>",
          "shape": "NameString"
        },
        "JobRunId": {
          "documentation": "<p>The <code>JobRunId</code> of the job run that was stopped.</p>",
          "shape": "IdString"
        }
      },
      "type": "structure"
    },
    "BatchStopJobRunSuccessfulSubmissionList": {
      "member": {
        "shape": "BatchStopJobRunSuccessfulSubmission"
      },
      "type": "list"
    },
    "BatchUpdatePartitionFailureEntry": {
      "documentation": "<p>Contains information about a batch update partition error.</p>",
      "members": {
        "ErrorDetail": {
          "documentation": "<p>The details about the batch update partition error.</p>",
          "shape": "ErrorDetail"
        },
        "PartitionValueList": {
          "documentation": "<p>A list of values defining the partitions.</p>",
          "shape": "BoundedPartitionValueList"
        }
      },
      "type": "structure"
    },
    "BatchUpdatePartitionFailureList": {
      "member": {
        "shape": "BatchUpdatePartitionFailureEntry"
      },
      "type": "list"
    },
    "BatchUpdatePartitionRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the catalog in which the partition is to be updated. Currently, this should be the Amazon Web Services account ID.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>The name of the metadata database in which the partition is to be updated.</p>",
          "shape": "NameString"
        },
        "Entries": {
          "documentation": "<p>A list of up to 100 <code>BatchUpdatePartitionRequestEntry</code> objects to update.</p>",
          "shape": "BatchUpdatePartitionRequestEntryList"
        },
        "TableName": {
          "documentation": "<p>The name of the metadata table in which the partition is to be updated.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "Entries"
      ],
      "type": "structure"
    },
    "BatchUpdatePartitionRequestEntry": {
      "documentation": "<p>A structure that contains the values and structure used to update a partition.</p>",
      "members": {
        "PartitionInput": {
          "documentation": "<p>The structure used to update a partition.</p>",
          "shape": "PartitionInput"
        },
        "PartitionValueList": {
          "documentation": "<p>A list of values defining the partitions.</p>",
          "shape": "BoundedPartitionValueList"
        }
      },
      "required": [
        "PartitionValueList",
        "PartitionInput"
      ],
      "type": "structure"
    },
    "BatchUpdatePartitionRequestEntryList": {
      "max": 100,
      "member": {
        "shape": "BatchUpdatePartitionRequestEntry"
      },
      "min": 1,
      "type": "list"
    },
    "BatchUpdatePartitionResponse": {
      "members": {
        "Errors": {
          "documentation": "<p>The errors encountered when trying to update the requested partitions. A list of <code>BatchUpdatePartitionFailureEntry</code> objects.</p>",
          "shape": "BatchUpdatePartitionFailureList"
        }
      },
      "type": "structure"
    },
    "BatchWindow": {
      "box": true,
      "max": 900,
      "min": 1,
      "type": "integer"
    },
    "BinaryColumnStatisticsData": {
      "documentation": "<p>Defines column statistics supported for bit sequence data values.</p>",
      "members": {
        "AverageLength": {
          "documentation": "<p>The average bit sequence length in the column.</p>",
          "shape": "NonNegativeDouble"
        },
        "MaximumLength": {
          "documentation": "<p>The size of the longest bit sequence in the column.</p>",
          "shape": "NonNegativeLong"
        },
        "NumberOfNulls": {
          "documentation": "<p>The number of null values in the column.</p>",
          "shape": "NonNegativeLong"
        }
      },
      "required": [
        "MaximumLength",
        "AverageLength",
        "NumberOfNulls"
      ],
      "type": "structure"
    },
    "Blob": {
      "type": "blob"
    },
    "Blueprint": {
      "documentation": "<p>The details of a blueprint.</p>",
      "members": {
        "BlueprintLocation": {
          "documentation": "<p>Specifies the path in Amazon S3 where the blueprint is published.</p>",
          "shape": "GenericString"
        },
        "BlueprintServiceLocation": {
          "documentation": "<p>Specifies a path in Amazon S3 where the blueprint is copied when you call <code>CreateBlueprint/UpdateBlueprint</code> to register the blueprint in Glue.</p>",
          "shape": "GenericString"
        },
        "CreatedOn": {
          "documentation": "<p>The date and time the blueprint was registered.</p>",
          "shape": "TimestampValue"
        },
        "Description": {
          "documentation": "<p>The description of the blueprint.</p>",
          "shape": "Generic512CharString"
        },
        "ErrorMessage": {
          "documentation": "<p>An error message.</p>",
          "shape": "ErrorString"
        },
        "LastActiveDefinition": {
          "documentation": "<p>When there are multiple versions of a blueprint and the latest version has some errors, this attribute indicates the last successful blueprint definition that is available with the service.</p>",
          "shape": "LastActiveDefinition"
        },
        "LastModifiedOn": {
          "documentation": "<p>The date and time the blueprint was last modified.</p>",
          "shape": "TimestampValue"
        },
        "Name": {
          "documentation": "<p>The name of the blueprint.</p>",
          "shape": "OrchestrationNameString"
        },
        "ParameterSpec": {
          "documentation": "<p>A JSON string that indicates the list of parameter specifications for the blueprint.</p>",
          "shape": "BlueprintParameterSpec"
        },
        "Status": {
          "documentation": "<p>The status of the blueprint registration.</p> <ul> <li> <p>Creating \u2014 The blueprint registration is in progress.</p> </li> <li> <p>Active \u2014 The blueprint has been successfully registered.</p> </li> <li> <p>Updating \u2014 An update to the blueprint registration is in progress.</p> </li> <li> <p>Failed \u2014 The blueprint registration failed.</p> </li> </ul>",
          "shape": "BlueprintStatus"
        }
      },
      "type": "structure"
    },
    "BlueprintDetails": {
      "documentation": "<p>The details of a blueprint.</p>",
      "members": {
        "BlueprintName": {
          "documentation": "<p>The name of the blueprint.</p>",
          "shape": "OrchestrationNameString"
        },
        "RunId": {
          "documentation": "<p>The run ID for this blueprint.</p>",
          "shape": "IdString"
        }
      },
      "type": "structure"
    },
    "BlueprintNames": {
      "member": {
        "shape": "OrchestrationNameString"
      },
      "type": "list"
    },
    "BlueprintParameterSpec": {
      "max": 131072,
      "min": 1,
      "type": "string"
    },
    "BlueprintParameters": {
      "max": 131072,
      "min": 1,
      "type": "string"
    },
    "BlueprintRun": {
      "documentation": "<p>The details of a blueprint run.</p>",
      "members": {
        "BlueprintName": {
          "documentation": "<p>The name of the blueprint.</p>",
          "shape": "OrchestrationNameString"
        },
        "CompletedOn": {
          "documentation": "<p>The date and time that the blueprint run completed.</p>",
          "shape": "TimestampValue"
        },
        "ErrorMessage": {
          "documentation": "<p>Indicates any errors that are seen while running the blueprint.</p>",
          "shape": "MessageString"
        },
        "Parameters": {
          "documentation": "<p>The blueprint parameters as a string. You will have to provide a value for each key that is required from the parameter spec that is defined in the <code>Blueprint$ParameterSpec</code>.</p>",
          "shape": "BlueprintParameters"
        },
        "RoleArn": {
          "documentation": "<p>The role ARN. This role will be assumed by the Glue service and will be used to create the workflow and other entities of a workflow.</p>",
          "shape": "OrchestrationIAMRoleArn"
        },
        "RollbackErrorMessage": {
          "documentation": "<p>If there are any errors while creating the entities of a workflow, we try to roll back the created entities until that point and delete them. This attribute indicates the errors seen while trying to delete the entities that are created.</p>",
          "shape": "MessageString"
        },
        "RunId": {
          "documentation": "<p>The run ID for this blueprint run.</p>",
          "shape": "IdString"
        },
        "StartedOn": {
          "documentation": "<p>The date and time that the blueprint run started.</p>",
          "shape": "TimestampValue"
        },
        "State": {
          "documentation": "<p>The state of the blueprint run. Possible values are:</p> <ul> <li> <p>Running \u2014 The blueprint run is in progress.</p> </li> <li> <p>Succeeded \u2014 The blueprint run completed successfully.</p> </li> <li> <p>Failed \u2014 The blueprint run failed and rollback is complete.</p> </li> <li> <p>Rolling Back \u2014 The blueprint run failed and rollback is in progress.</p> </li> </ul>",
          "shape": "BlueprintRunState"
        },
        "WorkflowName": {
          "documentation": "<p>The name of a workflow that is created as a result of a successful blueprint run. If a blueprint run has an error, there will not be a workflow created.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "BlueprintRunState": {
      "enum": [
        "RUNNING",
        "SUCCEEDED",
        "FAILED",
        "ROLLING_BACK"
      ],
      "type": "string"
    },
    "BlueprintRuns": {
      "member": {
        "shape": "BlueprintRun"
      },
      "type": "list"
    },
    "BlueprintStatus": {
      "enum": [
        "CREATING",
        "ACTIVE",
        "UPDATING",
        "FAILED"
      ],
      "type": "string"
    },
    "Blueprints": {
      "member": {
        "shape": "Blueprint"
      },
      "type": "list"
    },
    "Boolean": {
      "type": "boolean"
    },
    "BooleanColumnStatisticsData": {
      "documentation": "<p>Defines column statistics supported for Boolean data columns.</p>",
      "members": {
        "NumberOfFalses": {
          "documentation": "<p>The number of false values in the column.</p>",
          "shape": "NonNegativeLong"
        },
        "NumberOfNulls": {
          "documentation": "<p>The number of null values in the column.</p>",
          "shape": "NonNegativeLong"
        },
        "NumberOfTrues": {
          "documentation": "<p>The number of true values in the column.</p>",
          "shape": "NonNegativeLong"
        }
      },
      "required": [
        "NumberOfTrues",
        "NumberOfFalses",
        "NumberOfNulls"
      ],
      "type": "structure"
    },
    "BooleanNullable": {
      "type": "boolean"
    },
    "BooleanValue": {
      "type": "boolean"
    },
    "BoundedPartitionValueList": {
      "max": 100,
      "member": {
        "shape": "ValueString"
      },
      "min": 0,
      "type": "list"
    },
    "BoxedBoolean": {
      "box": true,
      "type": "boolean"
    },
    "BoxedDoubleFraction": {
      "box": true,
      "max": 1,
      "min": 0,
      "type": "double"
    },
    "BoxedLong": {
      "box": true,
      "type": "long"
    },
    "BoxedNonNegativeInt": {
      "box": true,
      "min": 0,
      "type": "integer"
    },
    "BoxedNonNegativeLong": {
      "box": true,
      "min": 0,
      "type": "long"
    },
    "BoxedPositiveInt": {
      "box": true,
      "min": 0,
      "type": "integer"
    },
    "CancelMLTaskRunRequest": {
      "members": {
        "TaskRunId": {
          "documentation": "<p>A unique identifier for the task run.</p>",
          "shape": "HashString"
        },
        "TransformId": {
          "documentation": "<p>The unique identifier of the machine learning transform.</p>",
          "shape": "HashString"
        }
      },
      "required": [
        "TransformId",
        "TaskRunId"
      ],
      "type": "structure"
    },
    "CancelMLTaskRunResponse": {
      "members": {
        "Status": {
          "documentation": "<p>The status for this run.</p>",
          "shape": "TaskStatusType"
        },
        "TaskRunId": {
          "documentation": "<p>The unique identifier for the task run.</p>",
          "shape": "HashString"
        },
        "TransformId": {
          "documentation": "<p>The unique identifier of the machine learning transform.</p>",
          "shape": "HashString"
        }
      },
      "type": "structure"
    },
    "CancelStatementRequest": {
      "members": {
        "Id": {
          "documentation": "<p>The ID of the statement to be cancelled.</p>",
          "shape": "IntegerValue"
        },
        "RequestOrigin": {
          "documentation": "<p>The origin of the request to cancel the statement.</p>",
          "shape": "OrchestrationNameString"
        },
        "SessionId": {
          "documentation": "<p>The Session ID of the statement to be cancelled.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "SessionId",
        "Id"
      ],
      "type": "structure"
    },
    "CancelStatementResponse": {
      "members": {},
      "type": "structure"
    },
    "CatalogEncryptionMode": {
      "enum": [
        "DISABLED",
        "SSE-KMS"
      ],
      "type": "string"
    },
    "CatalogEntries": {
      "member": {
        "shape": "CatalogEntry"
      },
      "type": "list"
    },
    "CatalogEntry": {
      "documentation": "<p>Specifies a table definition in the Glue Data Catalog.</p>",
      "members": {
        "DatabaseName": {
          "documentation": "<p>The database in which the table metadata resides.</p>",
          "shape": "NameString"
        },
        "TableName": {
          "documentation": "<p>The name of the table in question.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "DatabaseName",
        "TableName"
      ],
      "type": "structure"
    },
    "CatalogGetterPageSize": {
      "box": true,
      "max": 100,
      "min": 1,
      "type": "integer"
    },
    "CatalogIdString": {
      "max": 255,
      "min": 1,
      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
      "type": "string"
    },
    "CatalogImportStatus": {
      "documentation": "<p>A structure containing migration status information.</p>",
      "members": {
        "ImportCompleted": {
          "documentation": "<p> <code>True</code> if the migration has completed, or <code>False</code> otherwise.</p>",
          "shape": "Boolean"
        },
        "ImportTime": {
          "documentation": "<p>The time that the migration was started.</p>",
          "shape": "Timestamp"
        },
        "ImportedBy": {
          "documentation": "<p>The name of the person who initiated the migration.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "CatalogKafkaSource": {
      "documentation": "<p>Specifies an Apache Kafka data store in the Data Catalog.</p>",
      "members": {
        "DataPreviewOptions": {
          "documentation": "<p>Specifies options related to data preview for viewing a sample of your data.</p>",
          "shape": "StreamingDataPreviewOptions"
        },
        "Database": {
          "documentation": "<p>The name of the database to read from.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "DetectSchema": {
          "box": true,
          "documentation": "<p>Whether to automatically determine the schema from the incoming data.</p>",
          "shape": "BoxedBoolean"
        },
        "Name": {
          "documentation": "<p>The name of the data store.</p>",
          "shape": "NodeName"
        },
        "StreamingOptions": {
          "documentation": "<p>Specifies the streaming options.</p>",
          "shape": "KafkaStreamingSourceOptions"
        },
        "Table": {
          "documentation": "<p>The name of the table in the database to read from.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "WindowSize": {
          "box": true,
          "documentation": "<p>The amount of time to spend processing each micro batch.</p>",
          "shape": "BoxedPositiveInt"
        }
      },
      "required": [
        "Name",
        "Table",
        "Database"
      ],
      "type": "structure"
    },
    "CatalogKinesisSource": {
      "documentation": "<p>Specifies a Kinesis data source in the Glue Data Catalog.</p>",
      "members": {
        "DataPreviewOptions": {
          "documentation": "<p>Additional options for data preview.</p>",
          "shape": "StreamingDataPreviewOptions"
        },
        "Database": {
          "documentation": "<p>The name of the database to read from.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "DetectSchema": {
          "box": true,
          "documentation": "<p>Whether to automatically determine the schema from the incoming data.</p>",
          "shape": "BoxedBoolean"
        },
        "Name": {
          "documentation": "<p>The name of the data source.</p>",
          "shape": "NodeName"
        },
        "StreamingOptions": {
          "documentation": "<p>Additional options for the Kinesis streaming data source.</p>",
          "shape": "KinesisStreamingSourceOptions"
        },
        "Table": {
          "documentation": "<p>The name of the table in the database to read from.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "WindowSize": {
          "documentation": "<p>The amount of time to spend processing each micro batch.</p>",
          "shape": "BoxedPositiveInt"
        }
      },
      "required": [
        "Name",
        "Table",
        "Database"
      ],
      "type": "structure"
    },
    "CatalogSchemaChangePolicy": {
      "documentation": "<p>A policy that specifies update behavior for the crawler.</p>",
      "members": {
        "EnableUpdateCatalog": {
          "documentation": "<p>Whether to use the specified update behavior when the crawler finds a changed schema.</p>",
          "shape": "BoxedBoolean"
        },
        "UpdateBehavior": {
          "documentation": "<p>The update behavior when the crawler finds a changed schema.</p>",
          "shape": "UpdateCatalogBehavior"
        }
      },
      "type": "structure"
    },
    "CatalogSource": {
      "documentation": "<p>Specifies a data store in the Glue Data Catalog.</p>",
      "members": {
        "Database": {
          "documentation": "<p>The name of the database to read from.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "Name": {
          "documentation": "<p>The name of the data store.</p>",
          "shape": "NodeName"
        },
        "Table": {
          "documentation": "<p>The name of the table in the database to read from.</p>",
          "shape": "EnclosedInStringProperty"
        }
      },
      "required": [
        "Name",
        "Database",
        "Table"
      ],
      "type": "structure"
    },
    "CatalogTablesList": {
      "member": {
        "shape": "NameString"
      },
      "min": 1,
      "type": "list"
    },
    "CatalogTarget": {
      "documentation": "<p>Specifies an Glue Data Catalog target.</p>",
      "members": {
        "ConnectionName": {
          "documentation": "<p>The name of the connection for an Amazon S3-backed Data Catalog table to be a target of the crawl when using a <code>Catalog</code> connection type paired with a <code>NETWORK</code> Connection type.</p>",
          "shape": "ConnectionName"
        },
        "DatabaseName": {
          "documentation": "<p>The name of the database to be synchronized.</p>",
          "shape": "NameString"
        },
        "DlqEventQueueArn": {
          "documentation": "<p>A valid Amazon dead-letter SQS ARN. For example, <code>arn:aws:sqs:region:account:deadLetterQueue</code>.</p>",
          "shape": "EventQueueArn"
        },
        "EventQueueArn": {
          "documentation": "<p>A valid Amazon SQS ARN. For example, <code>arn:aws:sqs:region:account:sqs</code>.</p>",
          "shape": "EventQueueArn"
        },
        "Tables": {
          "documentation": "<p>A list of the tables to be synchronized.</p>",
          "shape": "CatalogTablesList"
        }
      },
      "required": [
        "DatabaseName",
        "Tables"
      ],
      "type": "structure"
    },
    "CatalogTargetList": {
      "member": {
        "shape": "CatalogTarget"
      },
      "type": "list"
    },
    "CheckSchemaVersionValidityInput": {
      "members": {
        "DataFormat": {
          "documentation": "<p>The data format of the schema definition. Currently <code>AVRO</code>, <code>JSON</code> and <code>PROTOBUF</code> are supported.</p>",
          "shape": "DataFormat"
        },
        "SchemaDefinition": {
          "documentation": "<p>The definition of the schema that has to be validated.</p>",
          "shape": "SchemaDefinitionString"
        }
      },
      "required": [
        "DataFormat",
        "SchemaDefinition"
      ],
      "type": "structure"
    },
    "CheckSchemaVersionValidityResponse": {
      "members": {
        "Error": {
          "documentation": "<p>A validation failure error message.</p>",
          "shape": "SchemaValidationError"
        },
        "Valid": {
          "documentation": "<p>Return true, if the schema is valid and false otherwise.</p>",
          "shape": "IsVersionValid"
        }
      },
      "type": "structure"
    },
    "Classification": {
      "type": "string"
    },
    "Classifier": {
      "documentation": "<p>Classifiers are triggered during a crawl task. A classifier checks whether a given file is in a format it can handle. If it is, the classifier creates a schema in the form of a <code>StructType</code> object that matches that data format.</p> <p>You can use the standard classifiers that Glue provides, or you can write your own classifiers to best categorize your data sources and specify the appropriate schemas to use for them. A classifier can be a <code>grok</code> classifier, an <code>XML</code> classifier, a <code>JSON</code> classifier, or a custom <code>CSV</code> classifier, as specified in one of the fields in the <code>Classifier</code> object.</p>",
      "members": {
        "CsvClassifier": {
          "documentation": "<p>A classifier for comma-separated values (CSV).</p>",
          "shape": "CsvClassifier"
        },
        "GrokClassifier": {
          "documentation": "<p>A classifier that uses <code>grok</code>.</p>",
          "shape": "GrokClassifier"
        },
        "JsonClassifier": {
          "documentation": "<p>A classifier for JSON content.</p>",
          "shape": "JsonClassifier"
        },
        "XMLClassifier": {
          "documentation": "<p>A classifier for XML content.</p>",
          "shape": "XMLClassifier"
        }
      },
      "type": "structure"
    },
    "ClassifierList": {
      "member": {
        "shape": "Classifier"
      },
      "type": "list"
    },
    "ClassifierNameList": {
      "member": {
        "shape": "NameString"
      },
      "type": "list"
    },
    "CloudWatchEncryption": {
      "documentation": "<p>Specifies how Amazon CloudWatch data should be encrypted.</p>",
      "members": {
        "CloudWatchEncryptionMode": {
          "documentation": "<p>The encryption mode to use for CloudWatch data.</p>",
          "shape": "CloudWatchEncryptionMode"
        },
        "KmsKeyArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.</p>",
          "shape": "KmsKeyArn"
        }
      },
      "type": "structure"
    },
    "CloudWatchEncryptionMode": {
      "enum": [
        "DISABLED",
        "SSE-KMS"
      ],
      "type": "string"
    },
    "CodeGenArgName": {
      "type": "string"
    },
    "CodeGenArgValue": {
      "type": "string"
    },
    "CodeGenConfigurationNode": {
      "documentation": "<p> <code>CodeGenConfigurationNode</code> enumerates all valid Node types. One and only one of its member variables can be populated.</p>",
      "members": {
        "Aggregate": {
          "documentation": "<p>Specifies a transform that groups rows by chosen fields and computes the aggregated value by specified function.</p>",
          "shape": "Aggregate"
        },
        "ApplyMapping": {
          "documentation": "<p>Specifies a transform that maps data property keys in the data source to data property keys in the data target. You can rename keys, modify the data types for keys, and choose which keys to drop from the dataset.</p>",
          "shape": "ApplyMapping"
        },
        "AthenaConnectorSource": {
          "documentation": "<p>Specifies a connector to an Amazon Athena data source.</p>",
          "shape": "AthenaConnectorSource"
        },
        "CatalogKafkaSource": {
          "documentation": "<p>Specifies an Apache Kafka data store in the Data Catalog.</p>",
          "shape": "CatalogKafkaSource"
        },
        "CatalogKinesisSource": {
          "documentation": "<p>Specifies a Kinesis data source in the Glue Data Catalog.</p>",
          "shape": "CatalogKinesisSource"
        },
        "CatalogSource": {
          "documentation": "<p>Specifies a data store in the Glue Data Catalog.</p>",
          "shape": "CatalogSource"
        },
        "CatalogTarget": {
          "documentation": "<p>Specifies a target that uses a Glue Data Catalog table.</p>",
          "shape": "BasicCatalogTarget"
        },
        "CustomCode": {
          "documentation": "<p>Specifies a transform that uses custom code you provide to perform the data transformation. The output is a collection of DynamicFrames.</p>",
          "shape": "CustomCode"
        },
        "DirectKafkaSource": {
          "documentation": "<p>Specifies an Apache Kafka data store.</p>",
          "shape": "DirectKafkaSource"
        },
        "DirectKinesisSource": {
          "documentation": "<p>Specifies a direct Amazon Kinesis data source.</p>",
          "shape": "DirectKinesisSource"
        },
        "DropDuplicates": {
          "documentation": "<p>Specifies a transform that removes rows of repeating data from a data set.</p>",
          "shape": "DropDuplicates"
        },
        "DropFields": {
          "documentation": "<p>Specifies a transform that chooses the data property keys that you want to drop.</p>",
          "shape": "DropFields"
        },
        "DropNullFields": {
          "documentation": "<p>Specifies a transform that removes columns from the dataset if all values in the column are 'null'. By default, Glue Studio will recognize null objects, but some values such as empty strings, strings that are \"null\", -1 integers or other placeholders such as zeros, are not automatically recognized as nulls.</p>",
          "shape": "DropNullFields"
        },
        "DynamoDBCatalogSource": {
          "shape": "DynamoDBCatalogSource"
        },
        "FillMissingValues": {
          "documentation": "<p>Specifies a transform that locates records in the dataset that have missing values and adds a new field with a value determined by imputation. The input data set is used to train the machine learning model that determines what the missing value should be.</p>",
          "shape": "FillMissingValues"
        },
        "Filter": {
          "documentation": "<p>Specifies a transform that splits a dataset into two, based on a filter condition.</p>",
          "shape": "Filter"
        },
        "GovernedCatalogSource": {
          "documentation": "<p>Specifies a data source in a goverened Data Catalog.</p>",
          "shape": "GovernedCatalogSource"
        },
        "GovernedCatalogTarget": {
          "documentation": "<p>Specifies a data target that writes to a goverened catalog.</p>",
          "shape": "GovernedCatalogTarget"
        },
        "JDBCConnectorSource": {
          "documentation": "<p>Specifies a connector to a JDBC data source.</p>",
          "shape": "JDBCConnectorSource"
        },
        "JDBCConnectorTarget": {
          "documentation": "<p>Specifies a data target that writes to Amazon S3 in Apache Parquet columnar storage.</p>",
          "shape": "JDBCConnectorTarget"
        },
        "Join": {
          "documentation": "<p>Specifies a transform that joins two datasets into one dataset using a comparison phrase on the specified data property keys. You can use inner, outer, left, right, left semi, and left anti joins.</p>",
          "shape": "Join"
        },
        "Merge": {
          "documentation": "<p>Specifies a transform that merges a <code>DynamicFrame</code> with a staging <code>DynamicFrame</code> based on the specified primary keys to identify records. Duplicate records (records with the same primary keys) are not de-duplicated. </p>",
          "shape": "Merge"
        },
        "MicrosoftSQLServerCatalogSource": {
          "documentation": "<p>Specifies a Microsoft SQL server data source in the Glue Data Catalog.</p>",
          "shape": "MicrosoftSQLServerCatalogSource"
        },
        "MicrosoftSQLServerCatalogTarget": {
          "documentation": "<p>Specifies a target that uses Microsoft SQL.</p>",
          "shape": "MicrosoftSQLServerCatalogTarget"
        },
        "MySQLCatalogSource": {
          "documentation": "<p>Specifies a MySQL data source in the Glue Data Catalog.</p>",
          "shape": "MySQLCatalogSource"
        },
        "MySQLCatalogTarget": {
          "documentation": "<p>Specifies a target that uses MySQL.</p>",
          "shape": "MySQLCatalogTarget"
        },
        "OracleSQLCatalogSource": {
          "documentation": "<p>Specifies an Oracle data source in the Glue Data Catalog.</p>",
          "shape": "OracleSQLCatalogSource"
        },
        "OracleSQLCatalogTarget": {
          "documentation": "<p>Specifies a target that uses Oracle SQL.</p>",
          "shape": "OracleSQLCatalogTarget"
        },
        "PIIDetection": {
          "documentation": "<p>Specifies a transform that identifies, removes or masks PII data.</p>",
          "shape": "PIIDetection"
        },
        "PostgreSQLCatalogSource": {
          "documentation": "<p>Specifies a PostgresSQL data source in the Glue Data Catalog.</p>",
          "shape": "PostgreSQLCatalogSource"
        },
        "PostgreSQLCatalogTarget": {
          "documentation": "<p>Specifies a target that uses Postgres SQL.</p>",
          "shape": "PostgreSQLCatalogTarget"
        },
        "RedshiftSource": {
          "documentation": "<p>Specifies an Amazon Redshift data store.</p>",
          "shape": "RedshiftSource"
        },
        "RedshiftTarget": {
          "documentation": "<p>Specifies a target that uses Amazon Redshift.</p>",
          "shape": "RedshiftTarget"
        },
        "RelationalCatalogSource": {
          "shape": "RelationalCatalogSource"
        },
        "RenameField": {
          "documentation": "<p>Specifies a transform that renames a single data property key.</p>",
          "shape": "RenameField"
        },
        "S3CatalogSource": {
          "documentation": "<p>Specifies an Amazon S3 data store in the Glue Data Catalog.</p>",
          "shape": "S3CatalogSource"
        },
        "S3CatalogTarget": {
          "documentation": "<p>Specifies a data target that writes to Amazon S3 using the Glue Data Catalog.</p>",
          "shape": "S3CatalogTarget"
        },
        "S3CsvSource": {
          "documentation": "<p>Specifies a command-separated value (CSV) data store stored in Amazon S3.</p>",
          "shape": "S3CsvSource"
        },
        "S3DirectTarget": {
          "documentation": "<p>Specifies a data target that writes to Amazon S3.</p>",
          "shape": "S3DirectTarget"
        },
        "S3GlueParquetTarget": {
          "documentation": "<p>Specifies a data target that writes to Amazon S3 in Apache Parquet columnar storage.</p>",
          "shape": "S3GlueParquetTarget"
        },
        "S3JsonSource": {
          "documentation": "<p>Specifies a JSON data store stored in Amazon S3.</p>",
          "shape": "S3JsonSource"
        },
        "S3ParquetSource": {
          "documentation": "<p>Specifies an Apache Parquet data store stored in Amazon S3.</p>",
          "shape": "S3ParquetSource"
        },
        "SelectFields": {
          "documentation": "<p>Specifies a transform that chooses the data property keys that you want to keep.</p>",
          "shape": "SelectFields"
        },
        "SelectFromCollection": {
          "documentation": "<p>Specifies a transform that chooses one <code>DynamicFrame</code> from a collection of <code>DynamicFrames</code>. The output is the selected <code>DynamicFrame</code> </p>",
          "shape": "SelectFromCollection"
        },
        "SparkConnectorSource": {
          "documentation": "<p>Specifies a connector to an Apache Spark data source.</p>",
          "shape": "SparkConnectorSource"
        },
        "SparkConnectorTarget": {
          "documentation": "<p>Specifies a target that uses an Apache Spark connector.</p>",
          "shape": "SparkConnectorTarget"
        },
        "SparkSQL": {
          "documentation": "<p>Specifies a transform where you enter a SQL query using Spark SQL syntax to transform the data. The output is a single <code>DynamicFrame</code>.</p>",
          "shape": "SparkSQL"
        },
        "Spigot": {
          "documentation": "<p>Specifies a transform that writes samples of the data to an Amazon S3 bucket.</p>",
          "shape": "Spigot"
        },
        "SplitFields": {
          "documentation": "<p>Specifies a transform that splits data property keys into two <code>DynamicFrames</code>. The output is a collection of <code>DynamicFrames</code>: one with selected data property keys, and one with the remaining data property keys.</p>",
          "shape": "SplitFields"
        },
        "Union": {
          "documentation": "<p>Specifies a transform that combines the rows from two or more datasets into a single result.</p>",
          "shape": "Union"
        }
      },
      "type": "structure"
    },
    "CodeGenConfigurationNodes": {
      "key": {
        "shape": "NodeId"
      },
      "sensitive": true,
      "type": "map",
      "value": {
        "shape": "CodeGenConfigurationNode"
      }
    },
    "CodeGenEdge": {
      "documentation": "<p>Represents a directional edge in a directed acyclic graph (DAG).</p>",
      "members": {
        "Source": {
          "documentation": "<p>The ID of the node at which the edge starts.</p>",
          "shape": "CodeGenIdentifier"
        },
        "Target": {
          "documentation": "<p>The ID of the node at which the edge ends.</p>",
          "shape": "CodeGenIdentifier"
        },
        "TargetParameter": {
          "documentation": "<p>The target of the edge.</p>",
          "shape": "CodeGenArgName"
        }
      },
      "required": [
        "Source",
        "Target"
      ],
      "type": "structure"
    },
    "CodeGenIdentifier": {
      "max": 255,
      "min": 1,
      "pattern": "[A-Za-z_][A-Za-z0-9_]*",
      "type": "string"
    },
    "CodeGenNode": {
      "documentation": "<p>Represents a node in a directed acyclic graph (DAG)</p>",
      "members": {
        "Args": {
          "documentation": "<p>Properties of the node, in the form of name-value pairs.</p>",
          "shape": "CodeGenNodeArgs"
        },
        "Id": {
          "documentation": "<p>A node identifier that is unique within the node's graph.</p>",
          "shape": "CodeGenIdentifier"
        },
        "LineNumber": {
          "documentation": "<p>The line number of the node.</p>",
          "shape": "Integer"
        },
        "NodeType": {
          "documentation": "<p>The type of node that this is.</p>",
          "shape": "CodeGenNodeType"
        }
      },
      "required": [
        "Id",
        "NodeType",
        "Args"
      ],
      "type": "structure"
    },
    "CodeGenNodeArg": {
      "documentation": "<p>An argument or property of a node.</p>",
      "members": {
        "Name": {
          "documentation": "<p>The name of the argument or property.</p>",
          "shape": "CodeGenArgName"
        },
        "Param": {
          "documentation": "<p>True if the value is used as a parameter.</p>",
          "shape": "Boolean"
        },
        "Value": {
          "documentation": "<p>The value of the argument or property.</p>",
          "shape": "CodeGenArgValue"
        }
      },
      "required": [
        "Name",
        "Value"
      ],
      "type": "structure"
    },
    "CodeGenNodeArgs": {
      "max": 50,
      "member": {
        "shape": "CodeGenNodeArg"
      },
      "min": 0,
      "type": "list"
    },
    "CodeGenNodeType": {
      "type": "string"
    },
    "Column": {
      "documentation": "<p>A column in a <code>Table</code>.</p>",
      "members": {
        "Comment": {
          "documentation": "<p>A free-form text comment.</p>",
          "shape": "CommentString"
        },
        "Name": {
          "documentation": "<p>The name of the <code>Column</code>.</p>",
          "shape": "NameString"
        },
        "Parameters": {
          "documentation": "<p>These key-value pairs define properties associated with the column.</p>",
          "shape": "ParametersMap"
        },
        "Type": {
          "documentation": "<p>The data type of the <code>Column</code>.</p>",
          "shape": "ColumnTypeString"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "ColumnError": {
      "documentation": "<p>Encapsulates a column name that failed and the reason for failure.</p>",
      "members": {
        "ColumnName": {
          "documentation": "<p>The name of the column that failed.</p>",
          "shape": "NameString"
        },
        "Error": {
          "documentation": "<p>An error message with the reason for the failure of an operation.</p>",
          "shape": "ErrorDetail"
        }
      },
      "type": "structure"
    },
    "ColumnErrors": {
      "member": {
        "shape": "ColumnError"
      },
      "type": "list"
    },
    "ColumnImportance": {
      "documentation": "<p>A structure containing the column name and column importance score for a column. </p> <p>Column importance helps you understand how columns contribute to your model, by identifying which columns in your records are more important than others.</p>",
      "members": {
        "ColumnName": {
          "documentation": "<p>The name of a column.</p>",
          "shape": "NameString"
        },
        "Importance": {
          "documentation": "<p>The column importance score for the column, as a decimal.</p>",
          "shape": "GenericBoundedDouble"
        }
      },
      "type": "structure"
    },
    "ColumnImportanceList": {
      "max": 100,
      "member": {
        "shape": "ColumnImportance"
      },
      "min": 0,
      "type": "list"
    },
    "ColumnList": {
      "member": {
        "shape": "Column"
      },
      "type": "list"
    },
    "ColumnNameString": {
      "max": 1024,
      "min": 1,
      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
      "type": "string"
    },
    "ColumnRowFilter": {
      "members": {
        "ColumnName": {
          "shape": "NameString"
        },
        "RowFilterExpression": {
          "shape": "PredicateString"
        }
      },
      "type": "structure"
    },
    "ColumnRowFilterList": {
      "member": {
        "shape": "ColumnRowFilter"
      },
      "type": "list"
    },
    "ColumnStatistics": {
      "documentation": "<p>Represents the generated column-level statistics for a table or partition.</p>",
      "members": {
        "AnalyzedTime": {
          "documentation": "<p>The timestamp of when column statistics were generated.</p>",
          "shape": "Timestamp"
        },
        "ColumnName": {
          "documentation": "<p>Name of column which statistics belong to.</p>",
          "shape": "NameString"
        },
        "ColumnType": {
          "documentation": "<p>The data type of the column.</p>",
          "shape": "TypeString"
        },
        "StatisticsData": {
          "documentation": "<p>A <code>ColumnStatisticData</code> object that contains the statistics data values.</p>",
          "shape": "ColumnStatisticsData"
        }
      },
      "required": [
        "ColumnName",
        "ColumnType",
        "AnalyzedTime",
        "StatisticsData"
      ],
      "type": "structure"
    },
    "ColumnStatisticsData": {
      "documentation": "<p>Contains the individual types of column statistics data. Only one data object should be set and indicated by the <code>Type</code> attribute.</p>",
      "members": {
        "BinaryColumnStatisticsData": {
          "documentation": "<p>Binary column statistics data.</p>",
          "shape": "BinaryColumnStatisticsData"
        },
        "BooleanColumnStatisticsData": {
          "documentation": "<p>Boolean column statistics data.</p>",
          "shape": "BooleanColumnStatisticsData"
        },
        "DateColumnStatisticsData": {
          "documentation": "<p>Date column statistics data.</p>",
          "shape": "DateColumnStatisticsData"
        },
        "DecimalColumnStatisticsData": {
          "documentation": "<p>Decimal column statistics data.</p>",
          "shape": "DecimalColumnStatisticsData"
        },
        "DoubleColumnStatisticsData": {
          "documentation": "<p>Double column statistics data.</p>",
          "shape": "DoubleColumnStatisticsData"
        },
        "LongColumnStatisticsData": {
          "documentation": "<p>Long column statistics data.</p>",
          "shape": "LongColumnStatisticsData"
        },
        "StringColumnStatisticsData": {
          "documentation": "<p>String column statistics data.</p>",
          "shape": "StringColumnStatisticsData"
        },
        "Type": {
          "documentation": "<p>The type of column statistics data.</p>",
          "shape": "ColumnStatisticsType"
        }
      },
      "required": [
        "Type"
      ],
      "type": "structure"
    },
    "ColumnStatisticsError": {
      "documentation": "<p>Encapsulates a <code>ColumnStatistics</code> object that failed and the reason for failure.</p>",
      "members": {
        "ColumnStatistics": {
          "documentation": "<p>The <code>ColumnStatistics</code> of the column.</p>",
          "shape": "ColumnStatistics"
        },
        "Error": {
          "documentation": "<p>An error message with the reason for the failure of an operation.</p>",
          "shape": "ErrorDetail"
        }
      },
      "type": "structure"
    },
    "ColumnStatisticsErrors": {
      "member": {
        "shape": "ColumnStatisticsError"
      },
      "type": "list"
    },
    "ColumnStatisticsList": {
      "member": {
        "shape": "ColumnStatistics"
      },
      "type": "list"
    },
    "ColumnStatisticsType": {
      "enum": [
        "BOOLEAN",
        "DATE",
        "DECIMAL",
        "DOUBLE",
        "LONG",
        "STRING",
        "BINARY"
      ],
      "type": "string"
    },
    "ColumnTypeString": {
      "max": 131072,
      "min": 0,
      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
      "type": "string"
    },
    "ColumnValueStringList": {
      "member": {
        "shape": "ColumnValuesString"
      },
      "type": "list"
    },
    "ColumnValuesString": {
      "type": "string"
    },
    "CommentString": {
      "max": 255,
      "min": 0,
      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
      "type": "string"
    },
    "CommitIdString": {
      "max": 40,
      "min": 1,
      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
      "type": "string"
    },
    "Comparator": {
      "enum": [
        "EQUALS",
        "GREATER_THAN",
        "LESS_THAN",
        "GREATER_THAN_EQUALS",
        "LESS_THAN_EQUALS"
      ],
      "type": "string"
    },
    "Compatibility": {
      "enum": [
        "NONE",
        "DISABLED",
        "BACKWARD",
        "BACKWARD_ALL",
        "FORWARD",
        "FORWARD_ALL",
        "FULL",
        "FULL_ALL"
      ],
      "type": "string"
    },
    "CompressionType": {
      "enum": [
        "gzip",
        "bzip2"
      ],
      "type": "string"
    },
    "ConcurrentModificationException": {
      "documentation": "<p>Two processes are trying to modify a resource simultaneously.</p>",
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "ConcurrentRunsExceededException": {
      "documentation": "<p>Too many jobs are being run concurrently.</p>",
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "Condition": {
      "documentation": "<p>Defines a condition under which a trigger fires.</p>",
      "members": {
        "CrawlState": {
          "documentation": "<p>The state of the crawler to which this condition applies.</p>",
          "shape": "CrawlState"
        },
        "CrawlerName": {
          "documentation": "<p>The name of the crawler to which this condition applies.</p>",
          "shape": "NameString"
        },
        "JobName": {
          "documentation": "<p>The name of the job whose <code>JobRuns</code> this condition applies to, and on which this trigger waits.</p>",
          "shape": "NameString"
        },
        "LogicalOperator": {
          "documentation": "<p>A logical operator.</p>",
          "shape": "LogicalOperator"
        },
        "State": {
          "documentation": "<p>The condition state. Currently, the only job states that a trigger can listen for are <code>SUCCEEDED</code>, <code>STOPPED</code>, <code>FAILED</code>, and <code>TIMEOUT</code>. The only crawler states that a trigger can listen for are <code>SUCCEEDED</code>, <code>FAILED</code>, and <code>CANCELLED</code>.</p>",
          "shape": "JobRunState"
        }
      },
      "type": "structure"
    },
    "ConditionCheckFailureException": {
      "documentation": "<p>A specified condition was not satisfied.</p>",
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "ConditionList": {
      "member": {
        "shape": "Condition"
      },
      "type": "list"
    },
    "ConflictException": {
      "documentation": "<p>The <code>CreatePartitions</code> API was called on a table that has indexes enabled. </p>",
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "ConfusionMatrix": {
      "documentation": "<p>The confusion matrix shows you what your transform is predicting accurately and what types of errors it is making.</p> <p>For more information, see <a href=\"https://en.wikipedia.org/wiki/Confusion_matrix\">Confusion matrix</a> in Wikipedia.</p>",
      "members": {
        "NumFalseNegatives": {
          "documentation": "<p>The number of matches in the data that the transform didn't find, in the confusion matrix for your transform.</p>",
          "shape": "RecordsCount"
        },
        "NumFalsePositives": {
          "documentation": "<p>The number of nonmatches in the data that the transform incorrectly classified as a match, in the confusion matrix for your transform.</p>",
          "shape": "RecordsCount"
        },
        "NumTrueNegatives": {
          "documentation": "<p>The number of nonmatches in the data that the transform correctly rejected, in the confusion matrix for your transform.</p>",
          "shape": "RecordsCount"
        },
        "NumTruePositives": {
          "documentation": "<p>The number of matches in the data that the transform correctly found, in the confusion matrix for your transform.</p>",
          "shape": "RecordsCount"
        }
      },
      "type": "structure"
    },
    "Connection": {
      "documentation": "<p>Defines a connection to a data source.</p>",
      "members": {
        "ConnectionProperties": {
          "documentation": "<p>These key-value pairs define parameters for the connection:</p> <ul> <li> <p> <code>HOST</code> - The host URI: either the fully qualified domain name (FQDN) or the IPv4 address of the database host.</p> </li> <li> <p> <code>PORT</code> - The port number, between 1024 and 65535, of the port on which the database host is listening for database connections.</p> </li> <li> <p> <code>USER_NAME</code> - The name under which to log in to the database. The value string for <code>USER_NAME</code> is \"<code>USERNAME</code>\".</p> </li> <li> <p> <code>PASSWORD</code> - A password, if one is used, for the user name.</p> </li> <li> <p> <code>ENCRYPTED_PASSWORD</code> - When you enable connection password protection by setting <code>ConnectionPasswordEncryption</code> in the Data Catalog encryption settings, this field stores the encrypted password.</p> </li> <li> <p> <code>JDBC_DRIVER_JAR_URI</code> - The Amazon Simple Storage Service (Amazon S3) path of the JAR file that contains the JDBC driver to use.</p> </li> <li> <p> <code>JDBC_DRIVER_CLASS_NAME</code> - The class name of the JDBC driver to use.</p> </li> <li> <p> <code>JDBC_ENGINE</code> - The name of the JDBC engine to use.</p> </li> <li> <p> <code>JDBC_ENGINE_VERSION</code> - The version of the JDBC engine to use.</p> </li> <li> <p> <code>CONFIG_FILES</code> - (Reserved for future use.)</p> </li> <li> <p> <code>INSTANCE_ID</code> - The instance ID to use.</p> </li> <li> <p> <code>JDBC_CONNECTION_URL</code> - The URL for connecting to a JDBC data source.</p> </li> <li> <p> <code>JDBC_ENFORCE_SSL</code> - A Boolean string (true, false) specifying whether Secure Sockets Layer (SSL) with hostname matching is enforced for the JDBC connection on the client. The default is false.</p> </li> <li> <p> <code>CUSTOM_JDBC_CERT</code> - An Amazon S3 location specifying the customer's root certificate. Glue uses this root certificate to validate the customer\u2019s certificate when connecting to the customer database. Glue only handles X.509 certificates. The certificate provided must be DER-encoded and supplied in Base64 encoding PEM format.</p> </li> <li> <p> <code>SKIP_CUSTOM_JDBC_CERT_VALIDATION</code> - By default, this is <code>false</code>. Glue validates the Signature algorithm and Subject Public Key Algorithm for the customer certificate. The only permitted algorithms for the Signature algorithm are SHA256withRSA, SHA384withRSA or SHA512withRSA. For the Subject Public Key Algorithm, the key length must be at least 2048. You can set the value of this property to <code>true</code> to skip Glue\u2019s validation of the customer certificate.</p> </li> <li> <p> <code>CUSTOM_JDBC_CERT_STRING</code> - A custom JDBC certificate string which is used for domain match or distinguished name match to prevent a man-in-the-middle attack. In Oracle database, this is used as the <code>SSL_SERVER_CERT_DN</code>; in Microsoft SQL Server, this is used as the <code>hostNameInCertificate</code>.</p> </li> <li> <p> <code>CONNECTION_URL</code> - The URL for connecting to a general (non-JDBC) data source.</p> </li> <li> <p> <code>SECRET_ID</code> - The secret ID used for the secret manager of credentials.</p> </li> <li> <p> <code>CONNECTOR_URL</code> - The connector URL for a MARKETPLACE or CUSTOM connection.</p> </li> <li> <p> <code>CONNECTOR_TYPE</code> - The connector type for a MARKETPLACE or CUSTOM connection.</p> </li> <li> <p> <code>CONNECTOR_CLASS_NAME</code> - The connector class name for a MARKETPLACE or CUSTOM connection.</p> </li> <li> <p> <code>KAFKA_BOOTSTRAP_SERVERS</code> - A comma-separated list of host and port pairs that are the addresses of the Apache Kafka brokers in a Kafka cluster to which a Kafka client will connect to and bootstrap itself.</p> </li> <li> <p> <code>KAFKA_SSL_ENABLED</code> - Whether to enable or disable SSL on an Apache Kafka connection. Default value is \"true\".</p> </li> <li> <p> <code>KAFKA_CUSTOM_CERT</code> - The Amazon S3 URL for the private CA cert file (.pem format). The default is an empty string.</p> </li> <li> <p> <code>KAFKA_SKIP_CUSTOM_CERT_VALIDATION</code> - Whether to skip the validation of the CA cert file or not. Glue validates for three algorithms: SHA256withRSA, SHA384withRSA and SHA512withRSA. Default value is \"false\".</p> </li> <li> <p> <code>KAFKA_CLIENT_KEYSTORE</code> - The Amazon S3 location of the client keystore file for Kafka client side authentication (Optional).</p> </li> <li> <p> <code>KAFKA_CLIENT_KEYSTORE_PASSWORD</code> - The password to access the provided keystore (Optional).</p> </li> <li> <p> <code>KAFKA_CLIENT_KEY_PASSWORD</code> - A keystore can consist of multiple keys, so this is the password to access the client key to be used with the Kafka server side key (Optional).</p> </li> <li> <p> <code>ENCRYPTED_KAFKA_CLIENT_KEYSTORE_PASSWORD</code> - The encrypted version of the Kafka client keystore password (if the user has the Glue encrypt passwords setting selected).</p> </li> <li> <p> <code>ENCRYPTED_KAFKA_CLIENT_KEY_PASSWORD</code> - The encrypted version of the Kafka client key password (if the user has the Glue encrypt passwords setting selected).</p> </li> <li> <p> <code>KAFKA_SASL_MECHANISM</code> - <code>\"SCRAM-SHA-512\"</code> or <code>\"GSSAPI\"</code>. These are the two supported <a href=\"https://www.iana.org/assignments/sasl-mechanisms/sasl-mechanisms.xhtml\">SASL Mechanisms</a>.</p> </li> <li> <p> <code>KAFKA_SASL_SCRAM_USERNAME</code> - A plaintext username used to authenticate with the \"SCRAM-SHA-512\" mechanism.</p> </li> <li> <p> <code>KAFKA_SASL_SCRAM_PASSWORD</code> - A plaintext password used to authenticate with the \"SCRAM-SHA-512\" mechanism.</p> </li> <li> <p> <code>ENCRYPTED_KAFKA_SASL_SCRAM_PASSWORD</code> - The encrypted version of the Kafka SASL SCRAM password (if the user has the Glue encrypt passwords setting selected).</p> </li> <li> <p> <code>KAFKA_SASL_GSSAPI_KEYTAB</code> - The S3 location of a Kerberos <code>keytab</code> file. A keytab stores long-term keys for one or more principals. For more information, see <a href=\"https://web.mit.edu/kerberos/krb5-latest/doc/basic/keytab_def.html\">MIT Kerberos Documentation: Keytab</a>.</p> </li> <li> <p> <code>KAFKA_SASL_GSSAPI_KRB5_CONF</code> - The S3 location of a Kerberos <code>krb5.conf</code> file. A krb5.conf stores Kerberos configuration information, such as the location of the KDC server. For more information, see <a href=\"https://web.mit.edu/kerberos/krb5-1.12/doc/admin/conf_files/krb5_conf.html\">MIT Kerberos Documentation: krb5.conf</a>.</p> </li> <li> <p> <code>KAFKA_SASL_GSSAPI_SERVICE</code> - The Kerberos service name, as set with <code>sasl.kerberos.service.name</code> in your <a href=\"https://kafka.apache.org/documentation/#brokerconfigs_sasl.kerberos.service.name\">Kafka Configuration</a>.</p> </li> <li> <p> <code>KAFKA_SASL_GSSAPI_PRINCIPAL</code> - The name of the Kerberos princial used by Glue. For more information, see <a href=\"https://kafka.apache.org/documentation/#security_sasl_kerberos_clientconfig\">Kafka Documentation: Configuring Kafka Brokers</a>.</p> </li> </ul>",
          "shape": "ConnectionProperties"
        },
        "ConnectionType": {
          "documentation": "<p>The type of the connection. Currently, SFTP is not supported.</p>",
          "shape": "ConnectionType"
        },
        "CreationTime": {
          "documentation": "<p>The time that this connection definition was created.</p>",
          "shape": "Timestamp"
        },
        "Description": {
          "documentation": "<p>The description of the connection.</p>",
          "shape": "DescriptionString"
        },
        "LastUpdatedBy": {
          "documentation": "<p>The user, group, or role that last updated this connection definition.</p>",
          "shape": "NameString"
        },
        "LastUpdatedTime": {
          "documentation": "<p>The last time that this connection definition was updated.</p>",
          "shape": "Timestamp"
        },
        "MatchCriteria": {
          "documentation": "<p>A list of criteria that can be used in selecting this connection.</p>",
          "shape": "MatchCriteria"
        },
        "Name": {
          "documentation": "<p>The name of the connection definition.</p>",
          "shape": "NameString"
        },
        "PhysicalConnectionRequirements": {
          "documentation": "<p>A map of physical connection requirements, such as virtual private cloud (VPC) and <code>SecurityGroup</code>, that are needed to make this connection successfully.</p>",
          "shape": "PhysicalConnectionRequirements"
        }
      },
      "type": "structure"
    },
    "ConnectionInput": {
      "documentation": "<p>A structure that is used to specify a connection to create or update.</p>",
      "members": {
        "ConnectionProperties": {
          "documentation": "<p>These key-value pairs define parameters for the connection.</p>",
          "shape": "ConnectionProperties"
        },
        "ConnectionType": {
          "documentation": "<p>The type of the connection. Currently, these types are supported:</p> <ul> <li> <p> <code>JDBC</code> - Designates a connection to a database through Java Database Connectivity (JDBC).</p> </li> <li> <p> <code>KAFKA</code> - Designates a connection to an Apache Kafka streaming platform.</p> </li> <li> <p> <code>MONGODB</code> - Designates a connection to a MongoDB document database.</p> </li> <li> <p> <code>NETWORK</code> - Designates a network connection to a data source within an Amazon Virtual Private Cloud environment (Amazon VPC).</p> </li> <li> <p> <code>MARKETPLACE</code> - Uses configuration settings contained in a connector purchased from Amazon Web Services Marketplace to read from and write to data stores that are not natively supported by Glue.</p> </li> <li> <p> <code>CUSTOM</code> - Uses configuration settings contained in a custom connector to read from and write to data stores that are not natively supported by Glue.</p> </li> </ul> <p>SFTP is not supported.</p>",
          "shape": "ConnectionType"
        },
        "Description": {
          "documentation": "<p>The description of the connection.</p>",
          "shape": "DescriptionString"
        },
        "MatchCriteria": {
          "documentation": "<p>A list of criteria that can be used in selecting this connection.</p>",
          "shape": "MatchCriteria"
        },
        "Name": {
          "documentation": "<p>The name of the connection.</p>",
          "shape": "NameString"
        },
        "PhysicalConnectionRequirements": {
          "documentation": "<p>A map of physical connection requirements, such as virtual private cloud (VPC) and <code>SecurityGroup</code>, that are needed to successfully make this connection.</p>",
          "shape": "PhysicalConnectionRequirements"
        }
      },
      "required": [
        "Name",
        "ConnectionType",
        "ConnectionProperties"
      ],
      "type": "structure"
    },
    "ConnectionList": {
      "member": {
        "shape": "Connection"
      },
      "type": "list"
    },
    "ConnectionName": {
      "type": "string"
    },
    "ConnectionPasswordEncryption": {
      "documentation": "<p>The data structure used by the Data Catalog to encrypt the password as part of <code>CreateConnection</code> or <code>UpdateConnection</code> and store it in the <code>ENCRYPTED_PASSWORD</code> field in the connection properties. You can enable catalog encryption or only password encryption.</p> <p>When a <code>CreationConnection</code> request arrives containing a password, the Data Catalog first encrypts the password using your KMS key. It then encrypts the whole connection object again if catalog encryption is also enabled.</p> <p>This encryption requires that you set KMS key permissions to enable or restrict access on the password key according to your security requirements. For example, you might want only administrators to have decrypt permission on the password key.</p>",
      "members": {
        "AwsKmsKeyId": {
          "documentation": "<p>An KMS key that is used to encrypt the connection password. </p> <p>If connection password protection is enabled, the caller of <code>CreateConnection</code> and <code>UpdateConnection</code> needs at least <code>kms:Encrypt</code> permission on the specified KMS key, to encrypt passwords before storing them in the Data Catalog. </p> <p>You can set the decrypt permission to enable or restrict access on the password key according to your security requirements.</p>",
          "shape": "NameString"
        },
        "ReturnConnectionPasswordEncrypted": {
          "documentation": "<p>When the <code>ReturnConnectionPasswordEncrypted</code> flag is set to \"true\", passwords remain encrypted in the responses of <code>GetConnection</code> and <code>GetConnections</code>. This encryption takes effect independently from catalog encryption. </p>",
          "shape": "Boolean"
        }
      },
      "required": [
        "ReturnConnectionPasswordEncrypted"
      ],
      "type": "structure"
    },
    "ConnectionProperties": {
      "key": {
        "shape": "ConnectionPropertyKey"
      },
      "max": 100,
      "min": 0,
      "type": "map",
      "value": {
        "shape": "ValueString"
      }
    },
    "ConnectionPropertyKey": {
      "enum": [
        "HOST",
        "PORT",
        "USERNAME",
        "PASSWORD",
        "ENCRYPTED_PASSWORD",
        "JDBC_DRIVER_JAR_URI",
        "JDBC_DRIVER_CLASS_NAME",
        "JDBC_ENGINE",
        "JDBC_ENGINE_VERSION",
        "CONFIG_FILES",
        "INSTANCE_ID",
        "JDBC_CONNECTION_URL",
        "JDBC_ENFORCE_SSL",
        "CUSTOM_JDBC_CERT",
        "SKIP_CUSTOM_JDBC_CERT_VALIDATION",
        "CUSTOM_JDBC_CERT_STRING",
        "CONNECTION_URL",
        "KAFKA_BOOTSTRAP_SERVERS",
        "KAFKA_SSL_ENABLED",
        "KAFKA_CUSTOM_CERT",
        "KAFKA_SKIP_CUSTOM_CERT_VALIDATION",
        "KAFKA_CLIENT_KEYSTORE",
        "KAFKA_CLIENT_KEYSTORE_PASSWORD",
        "KAFKA_CLIENT_KEY_PASSWORD",
        "ENCRYPTED_KAFKA_CLIENT_KEYSTORE_PASSWORD",
        "ENCRYPTED_KAFKA_CLIENT_KEY_PASSWORD",
        "SECRET_ID",
        "CONNECTOR_URL",
        "CONNECTOR_TYPE",
        "CONNECTOR_CLASS_NAME"
      ],
      "type": "string"
    },
    "ConnectionType": {
      "enum": [
        "JDBC",
        "SFTP",
        "MONGODB",
        "KAFKA",
        "NETWORK",
        "MARKETPLACE",
        "CUSTOM"
      ],
      "type": "string"
    },
    "ConnectionsList": {
      "documentation": "<p>Specifies the connections used by a job.</p>",
      "members": {
        "Connections": {
          "documentation": "<p>A list of connections used by the job.</p>",
          "shape": "OrchestrationStringList"
        }
      },
      "type": "structure"
    },
    "ContextWords": {
      "max": 20,
      "member": {
        "shape": "NameString"
      },
      "min": 1,
      "type": "list"
    },
    "Crawl": {
      "documentation": "<p>The details of a crawl in the workflow.</p>",
      "members": {
        "CompletedOn": {
          "documentation": "<p>The date and time on which the crawl completed.</p>",
          "shape": "TimestampValue"
        },
        "ErrorMessage": {
          "documentation": "<p>The error message associated with the crawl.</p>",
          "shape": "DescriptionString"
        },
        "LogGroup": {
          "documentation": "<p>The log group associated with the crawl.</p>",
          "shape": "LogGroup"
        },
        "LogStream": {
          "documentation": "<p>The log stream associated with the crawl.</p>",
          "shape": "LogStream"
        },
        "StartedOn": {
          "documentation": "<p>The date and time on which the crawl started.</p>",
          "shape": "TimestampValue"
        },
        "State": {
          "documentation": "<p>The state of the crawler.</p>",
          "shape": "CrawlState"
        }
      },
      "type": "structure"
    },
    "CrawlId": {
      "type": "string"
    },
    "CrawlList": {
      "member": {
        "shape": "Crawl"
      },
      "type": "list"
    },
    "CrawlState": {
      "enum": [
        "RUNNING",
        "CANCELLING",
        "CANCELLED",
        "SUCCEEDED",
        "FAILED",
        "ERROR"
      ],
      "type": "string"
    },
    "Crawler": {
      "documentation": "<p>Specifies a crawler program that examines a data source and uses classifiers to try to determine its schema. If successful, the crawler records metadata concerning the data source in the Glue Data Catalog.</p>",
      "members": {
        "Classifiers": {
          "documentation": "<p>A list of UTF-8 strings that specify the custom classifiers that are associated with the crawler.</p>",
          "shape": "ClassifierNameList"
        },
        "Configuration": {
          "documentation": "<p>Crawler configuration information. This versioned JSON string allows users to specify aspects of a crawler's behavior. For more information, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/define-crawler.html#crawler-data-stores-exclude\">Include and Exclude Patterns</a>.</p>",
          "shape": "CrawlerConfiguration"
        },
        "CrawlElapsedTime": {
          "documentation": "<p>If the crawler is running, contains the total time elapsed since the last crawl began.</p>",
          "shape": "MillisecondsCount"
        },
        "CrawlerSecurityConfiguration": {
          "documentation": "<p>The name of the <code>SecurityConfiguration</code> structure to be used by this crawler.</p>",
          "shape": "CrawlerSecurityConfiguration"
        },
        "CreationTime": {
          "documentation": "<p>The time that the crawler was created.</p>",
          "shape": "Timestamp"
        },
        "DatabaseName": {
          "documentation": "<p>The name of the database in which the crawler's output is stored.</p>",
          "shape": "DatabaseName"
        },
        "Description": {
          "documentation": "<p>A description of the crawler.</p>",
          "shape": "DescriptionString"
        },
        "LakeFormationConfiguration": {
          "documentation": "<p>Specifies whether the crawler should use Lake Formation credentials for the crawler instead of the IAM role credentials.</p>",
          "shape": "LakeFormationConfiguration"
        },
        "LastCrawl": {
          "documentation": "<p>The status of the last crawl, and potentially error information if an error occurred.</p>",
          "shape": "LastCrawlInfo"
        },
        "LastUpdated": {
          "documentation": "<p>The time that the crawler was last updated.</p>",
          "shape": "Timestamp"
        },
        "LineageConfiguration": {
          "documentation": "<p>A configuration that specifies whether data lineage is enabled for the crawler.</p>",
          "shape": "LineageConfiguration"
        },
        "Name": {
          "documentation": "<p>The name of the crawler.</p>",
          "shape": "NameString"
        },
        "RecrawlPolicy": {
          "documentation": "<p>A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.</p>",
          "shape": "RecrawlPolicy"
        },
        "Role": {
          "documentation": "<p>The Amazon Resource Name (ARN) of an IAM role that's used to access customer resources, such as Amazon Simple Storage Service (Amazon S3) data.</p>",
          "shape": "Role"
        },
        "Schedule": {
          "documentation": "<p>For scheduled crawlers, the schedule when the crawler runs.</p>",
          "shape": "Schedule"
        },
        "SchemaChangePolicy": {
          "documentation": "<p>The policy that specifies update and delete behaviors for the crawler.</p>",
          "shape": "SchemaChangePolicy"
        },
        "State": {
          "documentation": "<p>Indicates whether the crawler is running, or whether a run is pending.</p>",
          "shape": "CrawlerState"
        },
        "TablePrefix": {
          "documentation": "<p>The prefix added to the names of tables that are created.</p>",
          "shape": "TablePrefix"
        },
        "Targets": {
          "documentation": "<p>A collection of targets to crawl.</p>",
          "shape": "CrawlerTargets"
        },
        "Version": {
          "documentation": "<p>The version of the crawler.</p>",
          "shape": "VersionId"
        }
      },
      "type": "structure"
    },
    "CrawlerConfiguration": {
      "type": "string"
    },
    "CrawlerHistory": {
      "documentation": "<p>Contains the information for a run of a crawler.</p>",
      "members": {
        "CrawlId": {
          "documentation": "<p>A UUID identifier for each crawl.</p>",
          "shape": "CrawlId"
        },
        "DPUHour": {
          "documentation": "<p>The number of data processing units (DPU) used in hours for the crawl.</p>",
          "shape": "NonNegativeDouble"
        },
        "EndTime": {
          "documentation": "<p>The date and time on which the crawl ended.</p>",
          "shape": "Timestamp"
        },
        "ErrorMessage": {
          "documentation": "<p>If an error occurred, the error message associated with the crawl.</p>",
          "shape": "DescriptionString"
        },
        "LogGroup": {
          "documentation": "<p>The log group associated with the crawl.</p>",
          "shape": "LogGroup"
        },
        "LogStream": {
          "documentation": "<p>The log stream associated with the crawl.</p>",
          "shape": "LogStream"
        },
        "MessagePrefix": {
          "documentation": "<p>The prefix for a CloudWatch message about this crawl.</p>",
          "shape": "MessagePrefix"
        },
        "StartTime": {
          "documentation": "<p>The date and time on which the crawl started.</p>",
          "shape": "Timestamp"
        },
        "State": {
          "documentation": "<p>The state of the crawl.</p>",
          "shape": "CrawlerHistoryState"
        },
        "Summary": {
          "documentation": "<p>A run summary for the specific crawl in JSON. Contains the catalog tables and partitions that were added, updated, or deleted.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "CrawlerHistoryList": {
      "member": {
        "shape": "CrawlerHistory"
      },
      "type": "list"
    },
    "CrawlerHistoryState": {
      "enum": [
        "RUNNING",
        "COMPLETED",
        "FAILED",
        "STOPPED"
      ],
      "type": "string"
    },
    "CrawlerLineageSettings": {
      "enum": [
        "ENABLE",
        "DISABLE"
      ],
      "type": "string"
    },
    "CrawlerList": {
      "member": {
        "shape": "Crawler"
      },
      "type": "list"
    },
    "CrawlerMetrics": {
      "documentation": "<p>Metrics for a specified crawler.</p>",
      "members": {
        "CrawlerName": {
          "documentation": "<p>The name of the crawler.</p>",
          "shape": "NameString"
        },
        "LastRuntimeSeconds": {
          "documentation": "<p>The duration of the crawler's most recent run, in seconds.</p>",
          "shape": "NonNegativeDouble"
        },
        "MedianRuntimeSeconds": {
          "documentation": "<p>The median duration of this crawler's runs, in seconds.</p>",
          "shape": "NonNegativeDouble"
        },
        "StillEstimating": {
          "documentation": "<p>True if the crawler is still estimating how long it will take to complete this run.</p>",
          "shape": "Boolean"
        },
        "TablesCreated": {
          "documentation": "<p>The number of tables created by this crawler.</p>",
          "shape": "NonNegativeInteger"
        },
        "TablesDeleted": {
          "documentation": "<p>The number of tables deleted by this crawler.</p>",
          "shape": "NonNegativeInteger"
        },
        "TablesUpdated": {
          "documentation": "<p>The number of tables updated by this crawler.</p>",
          "shape": "NonNegativeInteger"
        },
        "TimeLeftSeconds": {
          "documentation": "<p>The estimated time left to complete a running crawl.</p>",
          "shape": "NonNegativeDouble"
        }
      },
      "type": "structure"
    },
    "CrawlerMetricsList": {
      "member": {
        "shape": "CrawlerMetrics"
      },
      "type": "list"
    },
    "CrawlerNameList": {
      "max": 100,
      "member": {
        "shape": "NameString"
      },
      "min": 0,
      "type": "list"
    },
    "CrawlerNodeDetails": {
      "documentation": "<p>The details of a Crawler node present in the workflow.</p>",
      "members": {
        "Crawls": {
          "documentation": "<p>A list of crawls represented by the crawl node.</p>",
          "shape": "CrawlList"
        }
      },
      "type": "structure"
    },
    "CrawlerNotRunningException": {
      "documentation": "<p>The specified crawler is not running.</p>",
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "CrawlerRunningException": {
      "documentation": "<p>The operation cannot be performed because the crawler is already running.</p>",
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "CrawlerSecurityConfiguration": {
      "max": 128,
      "min": 0,
      "type": "string"
    },
    "CrawlerState": {
      "enum": [
        "READY",
        "RUNNING",
        "STOPPING"
      ],
      "type": "string"
    },
    "CrawlerStoppingException": {
      "documentation": "<p>The specified crawler is stopping.</p>",
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "CrawlerTargets": {
      "documentation": "<p>Specifies data stores to crawl.</p>",
      "members": {
        "CatalogTargets": {
          "documentation": "<p>Specifies Glue Data Catalog targets.</p>",
          "shape": "CatalogTargetList"
        },
        "DeltaTargets": {
          "documentation": "<p>Specifies Delta data store targets.</p>",
          "shape": "DeltaTargetList"
        },
        "DynamoDBTargets": {
          "documentation": "<p>Specifies Amazon DynamoDB targets.</p>",
          "shape": "DynamoDBTargetList"
        },
        "JdbcTargets": {
          "documentation": "<p>Specifies JDBC targets.</p>",
          "shape": "JdbcTargetList"
        },
        "MongoDBTargets": {
          "documentation": "<p>Specifies Amazon DocumentDB or MongoDB targets.</p>",
          "shape": "MongoDBTargetList"
        },
        "S3Targets": {
          "documentation": "<p>Specifies Amazon Simple Storage Service (Amazon S3) targets.</p>",
          "shape": "S3TargetList"
        }
      },
      "type": "structure"
    },
    "CrawlsFilter": {
      "documentation": "<p>A list of fields, comparators and value that you can use to filter the crawler runs for a specified crawler.</p>",
      "members": {
        "FieldName": {
          "documentation": "<p>A key used to filter the crawler runs for a specified crawler. Valid values for each of the field names are:</p> <ul> <li> <p> <code>CRAWL_ID</code>: A string representing the UUID identifier for a crawl.</p> </li> <li> <p> <code>STATE</code>: A string representing the state of the crawl.</p> </li> <li> <p> <code>START_TIME</code> and <code>END_TIME</code>: The epoch timestamp in milliseconds.</p> </li> <li> <p> <code>DPU_HOUR</code>: The number of data processing unit (DPU) hours used for the crawl.</p> </li> </ul>",
          "shape": "FieldName"
        },
        "FieldValue": {
          "documentation": "<p>The value provided for comparison on the crawl field. </p>",
          "shape": "GenericString"
        },
        "FilterOperator": {
          "documentation": "<p>A defined comparator that operates on the value. The available operators are:</p> <ul> <li> <p> <code>GT</code>: Greater than.</p> </li> <li> <p> <code>GE</code>: Greater than or equal to.</p> </li> <li> <p> <code>LT</code>: Less than.</p> </li> <li> <p> <code>LE</code>: Less than or equal to.</p> </li> <li> <p> <code>EQ</code>: Equal to.</p> </li> <li> <p> <code>NE</code>: Not equal to.</p> </li> </ul>",
          "shape": "FilterOperator"
        }
      },
      "type": "structure"
    },
    "CrawlsFilterList": {
      "member": {
        "shape": "CrawlsFilter"
      },
      "type": "list"
    },
    "CreateBlueprintRequest": {
      "members": {
        "BlueprintLocation": {
          "documentation": "<p>Specifies a path in Amazon S3 where the blueprint is published.</p>",
          "shape": "OrchestrationS3Location"
        },
        "Description": {
          "documentation": "<p>A description of the blueprint.</p>",
          "shape": "Generic512CharString"
        },
        "Name": {
          "documentation": "<p>The name of the blueprint.</p>",
          "shape": "OrchestrationNameString"
        },
        "Tags": {
          "documentation": "<p>The tags to be applied to this blueprint.</p>",
          "shape": "TagsMap"
        }
      },
      "required": [
        "Name",
        "BlueprintLocation"
      ],
      "type": "structure"
    },
    "CreateBlueprintResponse": {
      "members": {
        "Name": {
          "documentation": "<p>Returns the name of the blueprint that was registered.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "CreateClassifierRequest": {
      "members": {
        "CsvClassifier": {
          "documentation": "<p>A <code>CsvClassifier</code> object specifying the classifier to create.</p>",
          "shape": "CreateCsvClassifierRequest"
        },
        "GrokClassifier": {
          "documentation": "<p>A <code>GrokClassifier</code> object specifying the classifier to create.</p>",
          "shape": "CreateGrokClassifierRequest"
        },
        "JsonClassifier": {
          "documentation": "<p>A <code>JsonClassifier</code> object specifying the classifier to create.</p>",
          "shape": "CreateJsonClassifierRequest"
        },
        "XMLClassifier": {
          "documentation": "<p>An <code>XMLClassifier</code> object specifying the classifier to create.</p>",
          "shape": "CreateXMLClassifierRequest"
        }
      },
      "type": "structure"
    },
    "CreateClassifierResponse": {
      "members": {},
      "type": "structure"
    },
    "CreateConnectionRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog in which to create the connection. If none is provided, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "ConnectionInput": {
          "documentation": "<p>A <code>ConnectionInput</code> object defining the connection to create.</p>",
          "shape": "ConnectionInput"
        },
        "Tags": {
          "documentation": "<p>The tags you assign to the connection.</p>",
          "shape": "TagsMap"
        }
      },
      "required": [
        "ConnectionInput"
      ],
      "type": "structure"
    },
    "CreateConnectionResponse": {
      "members": {},
      "type": "structure"
    },
    "CreateCrawlerRequest": {
      "members": {
        "Classifiers": {
          "documentation": "<p>A list of custom classifiers that the user has registered. By default, all built-in classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification.</p>",
          "shape": "ClassifierNameList"
        },
        "Configuration": {
          "documentation": "<p>Crawler configuration information. This versioned JSON string allows users to specify aspects of a crawler's behavior. For more information, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html\">Configuring a Crawler</a>.</p>",
          "shape": "CrawlerConfiguration"
        },
        "CrawlerSecurityConfiguration": {
          "documentation": "<p>The name of the <code>SecurityConfiguration</code> structure to be used by this crawler.</p>",
          "shape": "CrawlerSecurityConfiguration"
        },
        "DatabaseName": {
          "documentation": "<p>The Glue database where results are written, such as: <code>arn:aws:daylight:us-east-1::database/sometable/*</code>.</p>",
          "shape": "DatabaseName"
        },
        "Description": {
          "documentation": "<p>A description of the new crawler.</p>",
          "shape": "DescriptionString"
        },
        "LakeFormationConfiguration": {
          "documentation": "<p>Specifies Lake Formation configuration settings for the crawler.</p>",
          "shape": "LakeFormationConfiguration"
        },
        "LineageConfiguration": {
          "documentation": "<p>Specifies data lineage configuration settings for the crawler.</p>",
          "shape": "LineageConfiguration"
        },
        "Name": {
          "documentation": "<p>Name of the new crawler.</p>",
          "shape": "NameString"
        },
        "RecrawlPolicy": {
          "documentation": "<p>A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.</p>",
          "shape": "RecrawlPolicy"
        },
        "Role": {
          "documentation": "<p>The IAM role or Amazon Resource Name (ARN) of an IAM role used by the new crawler to access customer resources.</p>",
          "shape": "Role"
        },
        "Schedule": {
          "documentation": "<p>A <code>cron</code> expression used to specify the schedule (see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>.</p>",
          "shape": "CronExpression"
        },
        "SchemaChangePolicy": {
          "documentation": "<p>The policy for the crawler's update and deletion behavior.</p>",
          "shape": "SchemaChangePolicy"
        },
        "TablePrefix": {
          "documentation": "<p>The table prefix used for catalog tables that are created.</p>",
          "shape": "TablePrefix"
        },
        "Tags": {
          "documentation": "<p>The tags to use with this crawler request. You may use tags to limit access to the crawler. For more information about tags in Glue, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html\">Amazon Web Services Tags in Glue</a> in the developer guide.</p>",
          "shape": "TagsMap"
        },
        "Targets": {
          "documentation": "<p>A list of collection of targets to crawl.</p>",
          "shape": "CrawlerTargets"
        }
      },
      "required": [
        "Name",
        "Role",
        "Targets"
      ],
      "type": "structure"
    },
    "CreateCrawlerResponse": {
      "members": {},
      "type": "structure"
    },
    "CreateCsvClassifierRequest": {
      "documentation": "<p>Specifies a custom CSV classifier for <code>CreateClassifier</code> to create.</p>",
      "members": {
        "AllowSingleColumn": {
          "documentation": "<p>Enables the processing of files that contain only one column.</p>",
          "shape": "NullableBoolean"
        },
        "ContainsHeader": {
          "documentation": "<p>Indicates whether the CSV file contains a header.</p>",
          "shape": "CsvHeaderOption"
        },
        "CustomDatatypeConfigured": {
          "documentation": "<p>Enables the configuration of custom datatypes.</p>",
          "shape": "NullableBoolean"
        },
        "CustomDatatypes": {
          "documentation": "<p>Creates a list of supported custom datatypes.</p>",
          "shape": "CustomDatatypes"
        },
        "Delimiter": {
          "documentation": "<p>A custom symbol to denote what separates each column entry in the row.</p>",
          "shape": "CsvColumnDelimiter"
        },
        "DisableValueTrimming": {
          "documentation": "<p>Specifies not to trim values before identifying the type of column values. The default value is true.</p>",
          "shape": "NullableBoolean"
        },
        "Header": {
          "documentation": "<p>A list of strings representing column names.</p>",
          "shape": "CsvHeader"
        },
        "Name": {
          "documentation": "<p>The name of the classifier.</p>",
          "shape": "NameString"
        },
        "QuoteSymbol": {
          "documentation": "<p>A custom symbol to denote what combines content into a single column value. Must be different from the column delimiter.</p>",
          "shape": "CsvQuoteSymbol"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "CreateCustomEntityTypeRequest": {
      "members": {
        "ContextWords": {
          "documentation": "<p>A list of context words. If none of these context words are found within the vicinity of the regular expression the data will not be detected as sensitive data.</p> <p>If no context words are passed only a regular expression is checked.</p>",
          "shape": "ContextWords"
        },
        "Name": {
          "documentation": "<p>A name for the custom pattern that allows it to be retrieved or deleted later. This name must be unique per Amazon Web Services account.</p>",
          "shape": "NameString"
        },
        "RegexString": {
          "documentation": "<p>A regular expression string that is used for detecting sensitive data in a custom pattern.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "Name",
        "RegexString"
      ],
      "type": "structure"
    },
    "CreateCustomEntityTypeResponse": {
      "members": {
        "Name": {
          "documentation": "<p>The name of the custom pattern you created.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "CreateDatabaseRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog in which to create the database. If none is provided, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseInput": {
          "documentation": "<p>The metadata for the database.</p>",
          "shape": "DatabaseInput"
        },
        "Tags": {
          "documentation": "<p>The tags you assign to the database.</p>",
          "shape": "TagsMap"
        }
      },
      "required": [
        "DatabaseInput"
      ],
      "type": "structure"
    },
    "CreateDatabaseResponse": {
      "members": {},
      "type": "structure"
    },
    "CreateDevEndpointRequest": {
      "members": {
        "Arguments": {
          "documentation": "<p>A map of arguments used to configure the <code>DevEndpoint</code>.</p>",
          "shape": "MapValue"
        },
        "EndpointName": {
          "documentation": "<p>The name to be assigned to the new <code>DevEndpoint</code>.</p>",
          "shape": "GenericString"
        },
        "ExtraJarsS3Path": {
          "documentation": "<p>The path to one or more Java <code>.jar</code> files in an S3 bucket that should be loaded in your <code>DevEndpoint</code>.</p>",
          "shape": "GenericString"
        },
        "ExtraPythonLibsS3Path": {
          "documentation": "<p>The paths to one or more Python libraries in an Amazon S3 bucket that should be loaded in your <code>DevEndpoint</code>. Multiple values must be complete paths separated by a comma.</p> <note> <p>You can only use pure Python libraries with a <code>DevEndpoint</code>. Libraries that rely on C extensions, such as the <a href=\"http://pandas.pydata.org/\">pandas</a> Python data analysis library, are not yet supported.</p> </note>",
          "shape": "GenericString"
        },
        "GlueVersion": {
          "documentation": "<p>Glue version determines the versions of Apache Spark and Python that Glue supports. The Python version indicates the version supported for running your ETL scripts on development endpoints. </p> <p>For more information about the available Glue versions and corresponding Spark and Python versions, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/add-job.html\">Glue version</a> in the developer guide.</p> <p>Development endpoints that are created without specifying a Glue version default to Glue 0.9.</p> <p>You can specify a version of Python support for development endpoints by using the <code>Arguments</code> parameter in the <code>CreateDevEndpoint</code> or <code>UpdateDevEndpoint</code> APIs. If no arguments are provided, the version defaults to Python 2.</p>",
          "shape": "GlueVersionString"
        },
        "NumberOfNodes": {
          "documentation": "<p>The number of Glue Data Processing Units (DPUs) to allocate to this <code>DevEndpoint</code>.</p>",
          "shape": "IntegerValue"
        },
        "NumberOfWorkers": {
          "documentation": "<p>The number of workers of a defined <code>workerType</code> that are allocated to the development endpoint.</p> <p>The maximum number of workers you can define are 299 for <code>G.1X</code>, and 149 for <code>G.2X</code>. </p>",
          "shape": "NullableInteger"
        },
        "PublicKey": {
          "documentation": "<p>The public key to be used by this <code>DevEndpoint</code> for authentication. This attribute is provided for backward compatibility because the recommended attribute to use is public keys.</p>",
          "shape": "GenericString"
        },
        "PublicKeys": {
          "documentation": "<p>A list of public keys to be used by the development endpoints for authentication. The use of this attribute is preferred over a single public key because the public keys allow you to have a different private key per client.</p> <note> <p>If you previously created an endpoint with a public key, you must remove that key to be able to set a list of public keys. Call the <code>UpdateDevEndpoint</code> API with the public key content in the <code>deletePublicKeys</code> attribute, and the list of new keys in the <code>addPublicKeys</code> attribute.</p> </note>",
          "shape": "PublicKeysList"
        },
        "RoleArn": {
          "documentation": "<p>The IAM role for the <code>DevEndpoint</code>.</p>",
          "shape": "RoleArn"
        },
        "SecurityConfiguration": {
          "documentation": "<p>The name of the <code>SecurityConfiguration</code> structure to be used with this <code>DevEndpoint</code>.</p>",
          "shape": "NameString"
        },
        "SecurityGroupIds": {
          "documentation": "<p>Security group IDs for the security groups to be used by the new <code>DevEndpoint</code>.</p>",
          "shape": "StringList"
        },
        "SubnetId": {
          "documentation": "<p>The subnet ID for the new <code>DevEndpoint</code> to use.</p>",
          "shape": "GenericString"
        },
        "Tags": {
          "documentation": "<p>The tags to use with this DevEndpoint. You may use tags to limit access to the DevEndpoint. For more information about tags in Glue, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html\">Amazon Web Services Tags in Glue</a> in the developer guide.</p>",
          "shape": "TagsMap"
        },
        "WorkerType": {
          "documentation": "<p>The type of predefined worker that is allocated to the development endpoint. Accepts a value of Standard, G.1X, or G.2X.</p> <ul> <li> <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p> </li> <li> <p>For the <code>G.1X</code> worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p> </li> <li> <p>For the <code>G.2X</code> worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p> </li> </ul> <p>Known issue: when a development endpoint is created with the <code>G.2X</code> <code>WorkerType</code> configuration, the Spark drivers for the development endpoint will run on 4 vCPU, 16 GB of memory, and a 64 GB disk. </p>",
          "shape": "WorkerType"
        }
      },
      "required": [
        "EndpointName",
        "RoleArn"
      ],
      "type": "structure"
    },
    "CreateDevEndpointResponse": {
      "members": {
        "Arguments": {
          "documentation": "<p>The map of arguments used to configure this <code>DevEndpoint</code>.</p> <p>Valid arguments are:</p> <ul> <li> <p> <code>\"--enable-glue-datacatalog\": \"\"</code> </p> </li> </ul> <p>You can specify a version of Python support for development endpoints by using the <code>Arguments</code> parameter in the <code>CreateDevEndpoint</code> or <code>UpdateDevEndpoint</code> APIs. If no arguments are provided, the version defaults to Python 2.</p>",
          "shape": "MapValue"
        },
        "AvailabilityZone": {
          "documentation": "<p>The AWS Availability Zone where this <code>DevEndpoint</code> is located.</p>",
          "shape": "GenericString"
        },
        "CreatedTimestamp": {
          "documentation": "<p>The point in time at which this <code>DevEndpoint</code> was created.</p>",
          "shape": "TimestampValue"
        },
        "EndpointName": {
          "documentation": "<p>The name assigned to the new <code>DevEndpoint</code>.</p>",
          "shape": "GenericString"
        },
        "ExtraJarsS3Path": {
          "documentation": "<p>Path to one or more Java <code>.jar</code> files in an S3 bucket that will be loaded in your <code>DevEndpoint</code>.</p>",
          "shape": "GenericString"
        },
        "ExtraPythonLibsS3Path": {
          "documentation": "<p>The paths to one or more Python libraries in an S3 bucket that will be loaded in your <code>DevEndpoint</code>.</p>",
          "shape": "GenericString"
        },
        "FailureReason": {
          "documentation": "<p>The reason for a current failure in this <code>DevEndpoint</code>.</p>",
          "shape": "GenericString"
        },
        "GlueVersion": {
          "documentation": "<p>Glue version determines the versions of Apache Spark and Python that Glue supports. The Python version indicates the version supported for running your ETL scripts on development endpoints. </p> <p>For more information about the available Glue versions and corresponding Spark and Python versions, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/add-job.html\">Glue version</a> in the developer guide.</p>",
          "shape": "GlueVersionString"
        },
        "NumberOfNodes": {
          "documentation": "<p>The number of Glue Data Processing Units (DPUs) allocated to this DevEndpoint.</p>",
          "shape": "IntegerValue"
        },
        "NumberOfWorkers": {
          "documentation": "<p>The number of workers of a defined <code>workerType</code> that are allocated to the development endpoint.</p>",
          "shape": "NullableInteger"
        },
        "RoleArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the role assigned to the new <code>DevEndpoint</code>.</p>",
          "shape": "RoleArn"
        },
        "SecurityConfiguration": {
          "documentation": "<p>The name of the <code>SecurityConfiguration</code> structure being used with this <code>DevEndpoint</code>.</p>",
          "shape": "NameString"
        },
        "SecurityGroupIds": {
          "documentation": "<p>The security groups assigned to the new <code>DevEndpoint</code>.</p>",
          "shape": "StringList"
        },
        "Status": {
          "documentation": "<p>The current status of the new <code>DevEndpoint</code>.</p>",
          "shape": "GenericString"
        },
        "SubnetId": {
          "documentation": "<p>The subnet ID assigned to the new <code>DevEndpoint</code>.</p>",
          "shape": "GenericString"
        },
        "VpcId": {
          "documentation": "<p>The ID of the virtual private cloud (VPC) used by this <code>DevEndpoint</code>.</p>",
          "shape": "GenericString"
        },
        "WorkerType": {
          "documentation": "<p>The type of predefined worker that is allocated to the development endpoint. May be a value of Standard, G.1X, or G.2X.</p>",
          "shape": "WorkerType"
        },
        "YarnEndpointAddress": {
          "documentation": "<p>The address of the YARN endpoint used by this <code>DevEndpoint</code>.</p>",
          "shape": "GenericString"
        },
        "ZeppelinRemoteSparkInterpreterPort": {
          "documentation": "<p>The Apache Zeppelin port for the remote Apache Spark interpreter.</p>",
          "shape": "IntegerValue"
        }
      },
      "type": "structure"
    },
    "CreateGrokClassifierRequest": {
      "documentation": "<p>Specifies a <code>grok</code> classifier for <code>CreateClassifier</code> to create.</p>",
      "members": {
        "Classification": {
          "documentation": "<p>An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, Amazon CloudWatch Logs, and so on.</p>",
          "shape": "Classification"
        },
        "CustomPatterns": {
          "documentation": "<p>Optional custom grok patterns used by this classifier.</p>",
          "shape": "CustomPatterns"
        },
        "GrokPattern": {
          "documentation": "<p>The grok pattern used by this classifier.</p>",
          "shape": "GrokPattern"
        },
        "Name": {
          "documentation": "<p>The name of the new classifier.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "Classification",
        "Name",
        "GrokPattern"
      ],
      "type": "structure"
    },
    "CreateJobRequest": {
      "members": {
        "AllocatedCapacity": {
          "deprecated": true,
          "deprecatedMessage": "This property is deprecated, use MaxCapacity instead.",
          "documentation": "<p>This parameter is deprecated. Use <code>MaxCapacity</code> instead.</p> <p>The number of Glue data processing units (DPUs) to allocate to this Job. You can allocate a minimum of 2 DPUs; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href=\"https://aws.amazon.com/glue/pricing/\">Glue pricing page</a>.</p>",
          "shape": "IntegerValue"
        },
        "CodeGenConfigurationNodes": {
          "documentation": "<p>The representation of a directed acyclic graph on which both the Glue Studio visual component and Glue Studio code generation is based.</p>",
          "shape": "CodeGenConfigurationNodes"
        },
        "Command": {
          "documentation": "<p>The <code>JobCommand</code> that runs this job.</p>",
          "shape": "JobCommand"
        },
        "Connections": {
          "documentation": "<p>The connections used for this job.</p>",
          "shape": "ConnectionsList"
        },
        "DefaultArguments": {
          "documentation": "<p>The default arguments for this job.</p> <p>You can specify arguments here that your own job-execution script consumes, as well as arguments that Glue itself consumes.</p> <p>Job arguments may be logged. Do not pass plaintext secrets as arguments. Retrieve secrets from a Glue Connection, Secrets Manager or other secret management mechanism if you intend to keep them within the Job. </p> <p>For information about how to specify and consume your own Job arguments, see the <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling Glue APIs in Python</a> topic in the developer guide.</p> <p>For information about the key-value pairs that Glue consumes to set up your job, see the <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by Glue</a> topic in the developer guide.</p>",
          "shape": "GenericMap"
        },
        "Description": {
          "documentation": "<p>Description of the job being defined.</p>",
          "shape": "DescriptionString"
        },
        "ExecutionClass": {
          "documentation": "<p>Indicates whether the job is run with a standard or flexible execution class. The standard execution-class is ideal for time-sensitive workloads that require fast job startup and dedicated resources.</p> <p>The flexible execution class is appropriate for time-insensitive jobs whose start and completion times may vary. </p> <p>Only jobs with Glue version 3.0 and above and command type <code>glueetl</code> will be allowed to set <code>ExecutionClass</code> to <code>FLEX</code>. The flexible execution class is available for Spark jobs.</p>",
          "shape": "ExecutionClass"
        },
        "ExecutionProperty": {
          "documentation": "<p>An <code>ExecutionProperty</code> specifying the maximum number of concurrent runs allowed for this job.</p>",
          "shape": "ExecutionProperty"
        },
        "GlueVersion": {
          "documentation": "<p>Glue version determines the versions of Apache Spark and Python that Glue supports. The Python version indicates the version supported for jobs of type Spark. </p> <p>For more information about the available Glue versions and corresponding Spark and Python versions, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/add-job.html\">Glue version</a> in the developer guide.</p> <p>Jobs that are created without specifying a Glue version default to Glue 0.9.</p>",
          "shape": "GlueVersionString"
        },
        "LogUri": {
          "documentation": "<p>This field is reserved for future use.</p>",
          "shape": "UriString"
        },
        "MaxCapacity": {
          "documentation": "<p>For Glue version 1.0 or earlier jobs, using the standard worker type, the number of Glue data processing units (DPUs) that can be allocated when this job runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href=\"https://aws.amazon.com/glue/pricing/\">Glue pricing page</a>.</p> <p>Do not set <code>Max Capacity</code> if using <code>WorkerType</code> and <code>NumberOfWorkers</code>.</p> <p>The value that can be allocated for <code>MaxCapacity</code> depends on whether you are running a Python shell job or an Apache Spark ETL job:</p> <ul> <li> <p>When you specify a Python shell job (<code>JobCommand.Name</code>=\"pythonshell\"), you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.</p> </li> <li> <p>When you specify an Apache Spark ETL job (<code>JobCommand.Name</code>=\"glueetl\") or Apache Spark streaming ETL job (<code>JobCommand.Name</code>=\"gluestreaming\"), you can allocate a minimum of 2 DPUs. The default is 10 DPUs. This job type cannot have a fractional DPU allocation.</p> </li> </ul> <p>For Glue version 2.0 jobs, you cannot instead specify a <code>Maximum capacity</code>. Instead, you should specify a <code>Worker type</code> and the <code>Number of workers</code>.</p>",
          "shape": "NullableDouble"
        },
        "MaxRetries": {
          "documentation": "<p>The maximum number of times to retry this job if it fails.</p>",
          "shape": "MaxRetries"
        },
        "Name": {
          "documentation": "<p>The name you assign to this job definition. It must be unique in your account.</p>",
          "shape": "NameString"
        },
        "NonOverridableArguments": {
          "documentation": "<p>Non-overridable arguments for this job, specified as name-value pairs.</p>",
          "shape": "GenericMap"
        },
        "NotificationProperty": {
          "documentation": "<p>Specifies configuration properties of a job notification.</p>",
          "shape": "NotificationProperty"
        },
        "NumberOfWorkers": {
          "documentation": "<p>The number of workers of a defined <code>workerType</code> that are allocated when a job runs.</p>",
          "shape": "NullableInteger"
        },
        "Role": {
          "documentation": "<p>The name or Amazon Resource Name (ARN) of the IAM role associated with this job.</p>",
          "shape": "RoleString"
        },
        "SecurityConfiguration": {
          "documentation": "<p>The name of the <code>SecurityConfiguration</code> structure to be used with this job.</p>",
          "shape": "NameString"
        },
        "SourceControlDetails": {
          "documentation": "<p>The details for a source control configuration for a job, allowing synchronization of job artifacts to or from a remote repository.</p>",
          "shape": "SourceControlDetails"
        },
        "Tags": {
          "documentation": "<p>The tags to use with this job. You may use tags to limit access to the job. For more information about tags in Glue, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html\">Amazon Web Services Tags in Glue</a> in the developer guide.</p>",
          "shape": "TagsMap"
        },
        "Timeout": {
          "documentation": "<p>The job timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters <code>TIMEOUT</code> status. The default is 2,880 minutes (48 hours).</p>",
          "shape": "Timeout"
        },
        "WorkerType": {
          "documentation": "<p>The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, G.2X, or G.025X.</p> <ul> <li> <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p> </li> <li> <p>For the <code>G.1X</code> worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p> </li> <li> <p>For the <code>G.2X</code> worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p> </li> <li> <p>For the <code>G.025X</code> worker type, each worker maps to 0.25 DPU (2 vCPU, 4 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for low volume streaming jobs. This worker type is only available for Glue version 3.0 streaming jobs.</p> </li> </ul>",
          "shape": "WorkerType"
        }
      },
      "required": [
        "Name",
        "Role",
        "Command"
      ],
      "type": "structure"
    },
    "CreateJobResponse": {
      "members": {
        "Name": {
          "documentation": "<p>The unique name that was provided for this job definition.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "CreateJsonClassifierRequest": {
      "documentation": "<p>Specifies a JSON classifier for <code>CreateClassifier</code> to create.</p>",
      "members": {
        "JsonPath": {
          "documentation": "<p>A <code>JsonPath</code> string defining the JSON data for the classifier to classify. Glue supports a subset of JsonPath, as described in <a href=\"https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json\">Writing JsonPath Custom Classifiers</a>.</p>",
          "shape": "JsonPath"
        },
        "Name": {
          "documentation": "<p>The name of the classifier.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "Name",
        "JsonPath"
      ],
      "type": "structure"
    },
    "CreateMLTransformRequest": {
      "members": {
        "Description": {
          "documentation": "<p>A description of the machine learning transform that is being defined. The default is an empty string.</p>",
          "shape": "DescriptionString"
        },
        "GlueVersion": {
          "documentation": "<p>This value determines which version of Glue this machine learning transform is compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue compatibility defaults to Glue 0.9. For more information, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions\">Glue Versions</a> in the developer guide.</p>",
          "shape": "GlueVersionString"
        },
        "InputRecordTables": {
          "documentation": "<p>A list of Glue table definitions used by the transform.</p>",
          "shape": "GlueTables"
        },
        "MaxCapacity": {
          "documentation": "<p>The number of Glue data processing units (DPUs) that are allocated to task runs for this transform. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href=\"https://aws.amazon.com/glue/pricing/\">Glue pricing page</a>. </p> <p> <code>MaxCapacity</code> is a mutually exclusive option with <code>NumberOfWorkers</code> and <code>WorkerType</code>.</p> <ul> <li> <p>If either <code>NumberOfWorkers</code> or <code>WorkerType</code> is set, then <code>MaxCapacity</code> cannot be set.</p> </li> <li> <p>If <code>MaxCapacity</code> is set then neither <code>NumberOfWorkers</code> or <code>WorkerType</code> can be set.</p> </li> <li> <p>If <code>WorkerType</code> is set, then <code>NumberOfWorkers</code> is required (and vice versa).</p> </li> <li> <p> <code>MaxCapacity</code> and <code>NumberOfWorkers</code> must both be at least 1.</p> </li> </ul> <p>When the <code>WorkerType</code> field is set to a value other than <code>Standard</code>, the <code>MaxCapacity</code> field is set automatically and becomes read-only.</p> <p>When the <code>WorkerType</code> field is set to a value other than <code>Standard</code>, the <code>MaxCapacity</code> field is set automatically and becomes read-only.</p>",
          "shape": "NullableDouble"
        },
        "MaxRetries": {
          "documentation": "<p>The maximum number of times to retry a task for this transform after a task run fails.</p>",
          "shape": "NullableInteger"
        },
        "Name": {
          "documentation": "<p>The unique name that you give the transform when you create it.</p>",
          "shape": "NameString"
        },
        "NumberOfWorkers": {
          "documentation": "<p>The number of workers of a defined <code>workerType</code> that are allocated when this task runs.</p> <p>If <code>WorkerType</code> is set, then <code>NumberOfWorkers</code> is required (and vice versa).</p>",
          "shape": "NullableInteger"
        },
        "Parameters": {
          "documentation": "<p>The algorithmic parameters that are specific to the transform type used. Conditionally dependent on the transform type.</p>",
          "shape": "TransformParameters"
        },
        "Role": {
          "documentation": "<p>The name or Amazon Resource Name (ARN) of the IAM role with the required permissions. The required permissions include both Glue service role permissions to Glue resources, and Amazon S3 permissions required by the transform. </p> <ul> <li> <p>This role needs Glue service role permissions to allow access to resources in Glue. See <a href=\"https://docs.aws.amazon.com/glue/latest/dg/attach-policy-iam-user.html\">Attach a Policy to IAM Users That Access Glue</a>.</p> </li> <li> <p>This role needs permission to your Amazon Simple Storage Service (Amazon S3) sources, targets, temporary directory, scripts, and any libraries used by the task run for this transform.</p> </li> </ul>",
          "shape": "RoleString"
        },
        "Tags": {
          "documentation": "<p>The tags to use with this machine learning transform. You may use tags to limit access to the machine learning transform. For more information about tags in Glue, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html\">Amazon Web Services Tags in Glue</a> in the developer guide.</p>",
          "shape": "TagsMap"
        },
        "Timeout": {
          "documentation": "<p>The timeout of the task run for this transform in minutes. This is the maximum time that a task run for this transform can consume resources before it is terminated and enters <code>TIMEOUT</code> status. The default is 2,880 minutes (48 hours).</p>",
          "shape": "Timeout"
        },
        "TransformEncryption": {
          "documentation": "<p>The encryption-at-rest settings of the transform that apply to accessing user data. Machine learning transforms can access user data encrypted in Amazon S3 using KMS.</p>",
          "shape": "TransformEncryption"
        },
        "WorkerType": {
          "documentation": "<p>The type of predefined worker that is allocated when this task runs. Accepts a value of Standard, G.1X, or G.2X.</p> <ul> <li> <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p> </li> <li> <p>For the <code>G.1X</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB disk, and 1 executor per worker.</p> </li> <li> <p>For the <code>G.2X</code> worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB disk, and 1 executor per worker.</p> </li> </ul> <p> <code>MaxCapacity</code> is a mutually exclusive option with <code>NumberOfWorkers</code> and <code>WorkerType</code>.</p> <ul> <li> <p>If either <code>NumberOfWorkers</code> or <code>WorkerType</code> is set, then <code>MaxCapacity</code> cannot be set.</p> </li> <li> <p>If <code>MaxCapacity</code> is set then neither <code>NumberOfWorkers</code> or <code>WorkerType</code> can be set.</p> </li> <li> <p>If <code>WorkerType</code> is set, then <code>NumberOfWorkers</code> is required (and vice versa).</p> </li> <li> <p> <code>MaxCapacity</code> and <code>NumberOfWorkers</code> must both be at least 1.</p> </li> </ul>",
          "shape": "WorkerType"
        }
      },
      "required": [
        "Name",
        "InputRecordTables",
        "Parameters",
        "Role"
      ],
      "type": "structure"
    },
    "CreateMLTransformResponse": {
      "members": {
        "TransformId": {
          "documentation": "<p>A unique identifier that is generated for the transform.</p>",
          "shape": "HashString"
        }
      },
      "type": "structure"
    },
    "CreatePartitionIndexRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The catalog ID where the table resides.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>Specifies the name of a database in which you want to create a partition index.</p>",
          "shape": "NameString"
        },
        "PartitionIndex": {
          "documentation": "<p>Specifies a <code>PartitionIndex</code> structure to create a partition index in an existing table.</p>",
          "shape": "PartitionIndex"
        },
        "TableName": {
          "documentation": "<p>Specifies the name of a table in which you want to create a partition index.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "PartitionIndex"
      ],
      "type": "structure"
    },
    "CreatePartitionIndexResponse": {
      "members": {},
      "type": "structure"
    },
    "CreatePartitionRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The Amazon Web Services account ID of the catalog in which the partition is to be created.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>The name of the metadata database in which the partition is to be created.</p>",
          "shape": "NameString"
        },
        "PartitionInput": {
          "documentation": "<p>A <code>PartitionInput</code> structure defining the partition to be created.</p>",
          "shape": "PartitionInput"
        },
        "TableName": {
          "documentation": "<p>The name of the metadata table in which the partition is to be created.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "PartitionInput"
      ],
      "type": "structure"
    },
    "CreatePartitionResponse": {
      "members": {},
      "type": "structure"
    },
    "CreateRegistryInput": {
      "members": {
        "Description": {
          "documentation": "<p>A description of the registry. If description is not provided, there will not be any default value for this.</p>",
          "shape": "DescriptionString"
        },
        "RegistryName": {
          "documentation": "<p>Name of the registry to be created of max length of 255, and may only contain letters, numbers, hyphen, underscore, dollar sign, or hash mark. No whitespace.</p>",
          "shape": "SchemaRegistryNameString"
        },
        "Tags": {
          "documentation": "<p>Amazon Web Services tags that contain a key value pair and may be searched by console, command line, or API.</p>",
          "shape": "TagsMap"
        }
      },
      "required": [
        "RegistryName"
      ],
      "type": "structure"
    },
    "CreateRegistryResponse": {
      "members": {
        "Description": {
          "documentation": "<p>A description of the registry.</p>",
          "shape": "DescriptionString"
        },
        "RegistryArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the newly created registry.</p>",
          "shape": "GlueResourceArn"
        },
        "RegistryName": {
          "documentation": "<p>The name of the registry.</p>",
          "shape": "SchemaRegistryNameString"
        },
        "Tags": {
          "documentation": "<p>The tags for the registry.</p>",
          "shape": "TagsMap"
        }
      },
      "type": "structure"
    },
    "CreateSchemaInput": {
      "members": {
        "Compatibility": {
          "documentation": "<p>The compatibility mode of the schema. The possible values are:</p> <ul> <li> <p> <i>NONE</i>: No compatibility mode applies. You can use this choice in development scenarios or if you do not know the compatibility mode that you want to apply to schemas. Any new version added will be accepted without undergoing a compatibility check.</p> </li> <li> <p> <i>DISABLED</i>: This compatibility choice prevents versioning for a particular schema. You can use this choice to prevent future versioning of a schema.</p> </li> <li> <p> <i>BACKWARD</i>: This compatibility choice is recommended as it allows data receivers to read both the current and one previous schema version. This means that for instance, a new schema version cannot drop data fields or change the type of these fields, so they can't be read by readers using the previous version.</p> </li> <li> <p> <i>BACKWARD_ALL</i>: This compatibility choice allows data receivers to read both the current and all previous schema versions. You can use this choice when you need to delete fields or add optional fields, and check compatibility against all previous schema versions. </p> </li> <li> <p> <i>FORWARD</i>: This compatibility choice allows data receivers to read both the current and one next schema version, but not necessarily later versions. You can use this choice when you need to add fields or delete optional fields, but only check compatibility against the last schema version.</p> </li> <li> <p> <i>FORWARD_ALL</i>: This compatibility choice allows data receivers to read written by producers of any new registered schema. You can use this choice when you need to add fields or delete optional fields, and check compatibility against all previous schema versions.</p> </li> <li> <p> <i>FULL</i>: This compatibility choice allows data receivers to read data written by producers using the previous or next version of the schema, but not necessarily earlier or later versions. You can use this choice when you need to add or remove optional fields, but only check compatibility against the last schema version.</p> </li> <li> <p> <i>FULL_ALL</i>: This compatibility choice allows data receivers to read data written by producers using all previous schema versions. You can use this choice when you need to add or remove optional fields, and check compatibility against all previous schema versions.</p> </li> </ul>",
          "shape": "Compatibility"
        },
        "DataFormat": {
          "documentation": "<p>The data format of the schema definition. Currently <code>AVRO</code>, <code>JSON</code> and <code>PROTOBUF</code> are supported.</p>",
          "shape": "DataFormat"
        },
        "Description": {
          "documentation": "<p>An optional description of the schema. If description is not provided, there will not be any automatic default value for this.</p>",
          "shape": "DescriptionString"
        },
        "RegistryId": {
          "documentation": "<p> This is a wrapper shape to contain the registry identity fields. If this is not provided, the default registry will be used. The ARN format for the same will be: <code>arn:aws:glue:us-east-2:&lt;customer id&gt;:registry/default-registry:random-5-letter-id</code>.</p>",
          "shape": "RegistryId"
        },
        "SchemaDefinition": {
          "documentation": "<p>The schema definition using the <code>DataFormat</code> setting for <code>SchemaName</code>.</p>",
          "shape": "SchemaDefinitionString"
        },
        "SchemaName": {
          "documentation": "<p>Name of the schema to be created of max length of 255, and may only contain letters, numbers, hyphen, underscore, dollar sign, or hash mark. No whitespace.</p>",
          "shape": "SchemaRegistryNameString"
        },
        "Tags": {
          "documentation": "<p>Amazon Web Services tags that contain a key value pair and may be searched by console, command line, or API. If specified, follows the Amazon Web Services tags-on-create pattern.</p>",
          "shape": "TagsMap"
        }
      },
      "required": [
        "SchemaName",
        "DataFormat"
      ],
      "type": "structure"
    },
    "CreateSchemaResponse": {
      "members": {
        "Compatibility": {
          "documentation": "<p>The schema compatibility mode.</p>",
          "shape": "Compatibility"
        },
        "DataFormat": {
          "documentation": "<p>The data format of the schema definition. Currently <code>AVRO</code>, <code>JSON</code> and <code>PROTOBUF</code> are supported.</p>",
          "shape": "DataFormat"
        },
        "Description": {
          "documentation": "<p>A description of the schema if specified when created.</p>",
          "shape": "DescriptionString"
        },
        "LatestSchemaVersion": {
          "documentation": "<p>The latest version of the schema associated with the returned schema definition.</p>",
          "shape": "VersionLongNumber"
        },
        "NextSchemaVersion": {
          "documentation": "<p>The next version of the schema associated with the returned schema definition.</p>",
          "shape": "VersionLongNumber"
        },
        "RegistryArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the registry.</p>",
          "shape": "GlueResourceArn"
        },
        "RegistryName": {
          "documentation": "<p>The name of the registry.</p>",
          "shape": "SchemaRegistryNameString"
        },
        "SchemaArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the schema.</p>",
          "shape": "GlueResourceArn"
        },
        "SchemaCheckpoint": {
          "documentation": "<p>The version number of the checkpoint (the last time the compatibility mode was changed).</p>",
          "shape": "SchemaCheckpointNumber"
        },
        "SchemaName": {
          "documentation": "<p>The name of the schema.</p>",
          "shape": "SchemaRegistryNameString"
        },
        "SchemaStatus": {
          "documentation": "<p>The status of the schema. </p>",
          "shape": "SchemaStatus"
        },
        "SchemaVersionId": {
          "documentation": "<p>The unique identifier of the first schema version.</p>",
          "shape": "SchemaVersionIdString"
        },
        "SchemaVersionStatus": {
          "documentation": "<p>The status of the first schema version created.</p>",
          "shape": "SchemaVersionStatus"
        },
        "Tags": {
          "documentation": "<p>The tags for the schema.</p>",
          "shape": "TagsMap"
        }
      },
      "type": "structure"
    },
    "CreateScriptRequest": {
      "members": {
        "DagEdges": {
          "documentation": "<p>A list of the edges in the DAG.</p>",
          "shape": "DagEdges"
        },
        "DagNodes": {
          "documentation": "<p>A list of the nodes in the DAG.</p>",
          "shape": "DagNodes"
        },
        "Language": {
          "documentation": "<p>The programming language of the resulting code from the DAG.</p>",
          "shape": "Language"
        }
      },
      "type": "structure"
    },
    "CreateScriptResponse": {
      "members": {
        "PythonScript": {
          "documentation": "<p>The Python script generated from the DAG.</p>",
          "shape": "PythonScript"
        },
        "ScalaCode": {
          "documentation": "<p>The Scala code generated from the DAG.</p>",
          "shape": "ScalaCode"
        }
      },
      "type": "structure"
    },
    "CreateSecurityConfigurationRequest": {
      "members": {
        "EncryptionConfiguration": {
          "documentation": "<p>The encryption configuration for the new security configuration.</p>",
          "shape": "EncryptionConfiguration"
        },
        "Name": {
          "documentation": "<p>The name for the new security configuration.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "Name",
        "EncryptionConfiguration"
      ],
      "type": "structure"
    },
    "CreateSecurityConfigurationResponse": {
      "members": {
        "CreatedTimestamp": {
          "documentation": "<p>The time at which the new security configuration was created.</p>",
          "shape": "TimestampValue"
        },
        "Name": {
          "documentation": "<p>The name assigned to the new security configuration.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "CreateSessionRequest": {
      "documentation": "<p>Request to create a new session.</p>",
      "members": {
        "Command": {
          "documentation": "<p>The <code>SessionCommand</code> that runs the job. </p>",
          "shape": "SessionCommand"
        },
        "Connections": {
          "documentation": "<p>The number of connections to use for the session. </p>",
          "shape": "ConnectionsList"
        },
        "DefaultArguments": {
          "documentation": "<p>A map array of key-value pairs. Max is 75 pairs. </p>",
          "shape": "OrchestrationArgumentsMap"
        },
        "Description": {
          "documentation": "<p>The description of the session. </p>",
          "shape": "DescriptionString"
        },
        "GlueVersion": {
          "documentation": "<p>The Glue version determines the versions of Apache Spark and Python that Glue supports. The GlueVersion must be greater than 2.0. </p>",
          "shape": "GlueVersionString"
        },
        "Id": {
          "documentation": "<p>The ID of the session request. </p>",
          "shape": "NameString"
        },
        "IdleTimeout": {
          "documentation": "<p>The number of seconds when idle before request times out. </p>",
          "shape": "Timeout"
        },
        "MaxCapacity": {
          "documentation": "<p>The number of Glue data processing units (DPUs) that can be allocated when the job runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB memory. </p>",
          "shape": "NullableDouble"
        },
        "NumberOfWorkers": {
          "documentation": "<p>The number of workers of a defined <code>WorkerType</code> to use for the session. </p>",
          "shape": "NullableInteger"
        },
        "RequestOrigin": {
          "documentation": "<p>The origin of the request. </p>",
          "shape": "OrchestrationNameString"
        },
        "Role": {
          "documentation": "<p>The IAM Role ARN </p>",
          "shape": "OrchestrationRoleArn"
        },
        "SecurityConfiguration": {
          "documentation": "<p>The name of the SecurityConfiguration structure to be used with the session </p>",
          "shape": "NameString"
        },
        "Tags": {
          "documentation": "<p>The map of key value pairs (tags) belonging to the session.</p>",
          "shape": "TagsMap"
        },
        "Timeout": {
          "documentation": "<p>The number of seconds before request times out. </p>",
          "shape": "Timeout"
        },
        "WorkerType": {
          "documentation": "<p>The type of predefined worker that is allocated to use for the session. Accepts a value of Standard, G.1X, G.2X, or G.025X.</p> <ul> <li> <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p> </li> <li> <p>For the <code>G.1X</code> worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p> </li> <li> <p>For the <code>G.2X</code> worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p> </li> <li> <p>For the <code>G.025X</code> worker type, each worker maps to 0.25 DPU (2 vCPU, 4 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for low volume streaming jobs. This worker type is only available for Glue version 3.0 streaming jobs.</p> </li> </ul>",
          "shape": "WorkerType"
        }
      },
      "required": [
        "Id",
        "Role",
        "Command"
      ],
      "type": "structure"
    },
    "CreateSessionResponse": {
      "members": {
        "Session": {
          "documentation": "<p>Returns the session object in the response.</p>",
          "shape": "Session"
        }
      },
      "type": "structure"
    },
    "CreateTableRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog in which to create the <code>Table</code>. If none is supplied, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>The catalog database in which to create the new table. For Hive compatibility, this name is entirely lowercase.</p>",
          "shape": "NameString"
        },
        "PartitionIndexes": {
          "documentation": "<p>A list of partition indexes, <code>PartitionIndex</code> structures, to create in the table.</p>",
          "shape": "PartitionIndexList"
        },
        "TableInput": {
          "documentation": "<p>The <code>TableInput</code> object that defines the metadata table to create in the catalog.</p>",
          "shape": "TableInput"
        },
        "TransactionId": {
          "documentation": "<p>The ID of the transaction.</p>",
          "shape": "TransactionIdString"
        }
      },
      "required": [
        "DatabaseName",
        "TableInput"
      ],
      "type": "structure"
    },
    "CreateTableResponse": {
      "members": {},
      "type": "structure"
    },
    "CreateTriggerRequest": {
      "members": {
        "Actions": {
          "documentation": "<p>The actions initiated by this trigger when it fires.</p>",
          "shape": "ActionList"
        },
        "Description": {
          "documentation": "<p>A description of the new trigger.</p>",
          "shape": "DescriptionString"
        },
        "EventBatchingCondition": {
          "documentation": "<p>Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.</p>",
          "shape": "EventBatchingCondition"
        },
        "Name": {
          "documentation": "<p>The name of the trigger.</p>",
          "shape": "NameString"
        },
        "Predicate": {
          "documentation": "<p>A predicate to specify when the new trigger should fire.</p> <p>This field is required when the trigger type is <code>CONDITIONAL</code>.</p>",
          "shape": "Predicate"
        },
        "Schedule": {
          "documentation": "<p>A <code>cron</code> expression used to specify the schedule (see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>.</p> <p>This field is required when the trigger type is SCHEDULED.</p>",
          "shape": "GenericString"
        },
        "StartOnCreation": {
          "documentation": "<p>Set to <code>true</code> to start <code>SCHEDULED</code> and <code>CONDITIONAL</code> triggers when created. True is not supported for <code>ON_DEMAND</code> triggers.</p>",
          "shape": "BooleanValue"
        },
        "Tags": {
          "documentation": "<p>The tags to use with this trigger. You may use tags to limit access to the trigger. For more information about tags in Glue, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html\">Amazon Web Services Tags in Glue</a> in the developer guide. </p>",
          "shape": "TagsMap"
        },
        "Type": {
          "documentation": "<p>The type of the new trigger.</p>",
          "shape": "TriggerType"
        },
        "WorkflowName": {
          "documentation": "<p>The name of the workflow associated with the trigger.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "Name",
        "Type",
        "Actions"
      ],
      "type": "structure"
    },
    "CreateTriggerResponse": {
      "members": {
        "Name": {
          "documentation": "<p>The name of the trigger.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "CreateUserDefinedFunctionRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog in which to create the function. If none is provided, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>The name of the catalog database in which to create the function.</p>",
          "shape": "NameString"
        },
        "FunctionInput": {
          "documentation": "<p>A <code>FunctionInput</code> object that defines the function to create in the Data Catalog.</p>",
          "shape": "UserDefinedFunctionInput"
        }
      },
      "required": [
        "DatabaseName",
        "FunctionInput"
      ],
      "type": "structure"
    },
    "CreateUserDefinedFunctionResponse": {
      "members": {},
      "type": "structure"
    },
    "CreateWorkflowRequest": {
      "members": {
        "DefaultRunProperties": {
          "documentation": "<p>A collection of properties to be used as part of each execution of the workflow.</p>",
          "shape": "WorkflowRunProperties"
        },
        "Description": {
          "documentation": "<p>A description of the workflow.</p>",
          "shape": "GenericString"
        },
        "MaxConcurrentRuns": {
          "documentation": "<p>You can use this parameter to prevent unwanted multiple updates to data, to control costs, or in some cases, to prevent exceeding the maximum number of concurrent runs of any of the component jobs. If you leave this parameter blank, there is no limit to the number of concurrent workflow runs.</p>",
          "shape": "NullableInteger"
        },
        "Name": {
          "documentation": "<p>The name to be assigned to the workflow. It should be unique within your account.</p>",
          "shape": "NameString"
        },
        "Tags": {
          "documentation": "<p>The tags to be used with this workflow.</p>",
          "shape": "TagsMap"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "CreateWorkflowResponse": {
      "members": {
        "Name": {
          "documentation": "<p>The name of the workflow which was provided as part of the request.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "CreateXMLClassifierRequest": {
      "documentation": "<p>Specifies an XML classifier for <code>CreateClassifier</code> to create.</p>",
      "members": {
        "Classification": {
          "documentation": "<p>An identifier of the data format that the classifier matches.</p>",
          "shape": "Classification"
        },
        "Name": {
          "documentation": "<p>The name of the classifier.</p>",
          "shape": "NameString"
        },
        "RowTag": {
          "documentation": "<p>The XML tag designating the element that contains each record in an XML document being parsed. This can't identify a self-closing element (closed by <code>/&gt;</code>). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, <code>&lt;row item_a=\"A\" item_b=\"B\"&gt;&lt;/row&gt;</code> is okay, but <code>&lt;row item_a=\"A\" item_b=\"B\" /&gt;</code> is not).</p>",
          "shape": "RowTag"
        }
      },
      "required": [
        "Classification",
        "Name"
      ],
      "type": "structure"
    },
    "CreatedTimestamp": {
      "type": "string"
    },
    "CronExpression": {
      "type": "string"
    },
    "CsvClassifier": {
      "documentation": "<p>A classifier for custom <code>CSV</code> content.</p>",
      "members": {
        "AllowSingleColumn": {
          "documentation": "<p>Enables the processing of files that contain only one column.</p>",
          "shape": "NullableBoolean"
        },
        "ContainsHeader": {
          "documentation": "<p>Indicates whether the CSV file contains a header.</p>",
          "shape": "CsvHeaderOption"
        },
        "CreationTime": {
          "documentation": "<p>The time that this classifier was registered.</p>",
          "shape": "Timestamp"
        },
        "CustomDatatypeConfigured": {
          "documentation": "<p>Enables the custom datatype to be configured.</p>",
          "shape": "NullableBoolean"
        },
        "CustomDatatypes": {
          "documentation": "<p>A list of custom datatypes including \"BINARY\", \"BOOLEAN\", \"DATE\", \"DECIMAL\", \"DOUBLE\", \"FLOAT\", \"INT\", \"LONG\", \"SHORT\", \"STRING\", \"TIMESTAMP\".</p>",
          "shape": "CustomDatatypes"
        },
        "Delimiter": {
          "documentation": "<p>A custom symbol to denote what separates each column entry in the row.</p>",
          "shape": "CsvColumnDelimiter"
        },
        "DisableValueTrimming": {
          "documentation": "<p>Specifies not to trim values before identifying the type of column values. The default value is <code>true</code>.</p>",
          "shape": "NullableBoolean"
        },
        "Header": {
          "documentation": "<p>A list of strings representing column names.</p>",
          "shape": "CsvHeader"
        },
        "LastUpdated": {
          "documentation": "<p>The time that this classifier was last updated.</p>",
          "shape": "Timestamp"
        },
        "Name": {
          "documentation": "<p>The name of the classifier.</p>",
          "shape": "NameString"
        },
        "QuoteSymbol": {
          "documentation": "<p>A custom symbol to denote what combines content into a single column value. It must be different from the column delimiter.</p>",
          "shape": "CsvQuoteSymbol"
        },
        "Version": {
          "documentation": "<p>The version of this classifier.</p>",
          "shape": "VersionId"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "CsvColumnDelimiter": {
      "max": 1,
      "min": 1,
      "pattern": "[^\\r\\n]",
      "type": "string"
    },
    "CsvHeader": {
      "member": {
        "shape": "NameString"
      },
      "type": "list"
    },
    "CsvHeaderOption": {
      "enum": [
        "UNKNOWN",
        "PRESENT",
        "ABSENT"
      ],
      "type": "string"
    },
    "CsvQuoteSymbol": {
      "max": 1,
      "min": 1,
      "pattern": "[^\\r\\n]",
      "type": "string"
    },
    "CustomCode": {
      "documentation": "<p>Specifies a transform that uses custom code you provide to perform the data transformation. The output is a collection of DynamicFrames.</p>",
      "members": {
        "ClassName": {
          "documentation": "<p>The name defined for the custom code node class.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "Code": {
          "documentation": "<p>The custom code that is used to perform the data transformation.</p>",
          "shape": "ExtendedString"
        },
        "Inputs": {
          "documentation": "<p>The data inputs identified by their node names.</p>",
          "shape": "ManyInputs"
        },
        "Name": {
          "documentation": "<p>The name of the transform node.</p>",
          "shape": "NodeName"
        },
        "OutputSchemas": {
          "documentation": "<p>Specifies the data schema for the custom code transform.</p>",
          "shape": "GlueSchemas"
        }
      },
      "required": [
        "Name",
        "Inputs",
        "Code",
        "ClassName"
      ],
      "type": "structure"
    },
    "CustomDatatypes": {
      "member": {
        "shape": "NameString"
      },
      "type": "list"
    },
    "CustomEntityType": {
      "documentation": "<p>An object representing a custom pattern for detecting sensitive data across the columns and rows of your structured data.</p>",
      "members": {
        "ContextWords": {
          "documentation": "<p>A list of context words. If none of these context words are found within the vicinity of the regular expression the data will not be detected as sensitive data.</p> <p>If no context words are passed only a regular expression is checked.</p>",
          "shape": "ContextWords"
        },
        "Name": {
          "documentation": "<p>A name for the custom pattern that allows it to be retrieved or deleted later. This name must be unique per Amazon Web Services account.</p>",
          "shape": "NameString"
        },
        "RegexString": {
          "documentation": "<p>A regular expression string that is used for detecting sensitive data in a custom pattern.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "Name",
        "RegexString"
      ],
      "type": "structure"
    },
    "CustomEntityTypeNames": {
      "max": 50,
      "member": {
        "shape": "NameString"
      },
      "min": 1,
      "type": "list"
    },
    "CustomEntityTypes": {
      "member": {
        "shape": "CustomEntityType"
      },
      "type": "list"
    },
    "CustomPatterns": {
      "max": 16000,
      "min": 0,
      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
      "type": "string"
    },
    "DagEdges": {
      "member": {
        "shape": "CodeGenEdge"
      },
      "type": "list"
    },
    "DagNodes": {
      "member": {
        "shape": "CodeGenNode"
      },
      "type": "list"
    },
    "DataCatalogEncryptionSettings": {
      "documentation": "<p>Contains configuration information for maintaining Data Catalog security.</p>",
      "members": {
        "ConnectionPasswordEncryption": {
          "documentation": "<p>When connection password protection is enabled, the Data Catalog uses a customer-provided key to encrypt the password as part of <code>CreateConnection</code> or <code>UpdateConnection</code> and store it in the <code>ENCRYPTED_PASSWORD</code> field in the connection properties. You can enable catalog encryption or only password encryption.</p>",
          "shape": "ConnectionPasswordEncryption"
        },
        "EncryptionAtRest": {
          "documentation": "<p>Specifies the encryption-at-rest configuration for the Data Catalog.</p>",
          "shape": "EncryptionAtRest"
        }
      },
      "type": "structure"
    },
    "DataFormat": {
      "enum": [
        "AVRO",
        "JSON",
        "PROTOBUF"
      ],
      "type": "string"
    },
    "DataLakePrincipal": {
      "documentation": "<p>The Lake Formation principal.</p>",
      "members": {
        "DataLakePrincipalIdentifier": {
          "documentation": "<p>An identifier for the Lake Formation principal.</p>",
          "shape": "DataLakePrincipalString"
        }
      },
      "type": "structure"
    },
    "DataLakePrincipalString": {
      "max": 255,
      "min": 1,
      "type": "string"
    },
    "Database": {
      "documentation": "<p>The <code>Database</code> object represents a logical grouping of tables that might reside in a Hive metastore or an RDBMS.</p>",
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog in which the database resides.</p>",
          "shape": "CatalogIdString"
        },
        "CreateTableDefaultPermissions": {
          "documentation": "<p>Creates a set of default permissions on the table for principals. </p>",
          "shape": "PrincipalPermissionsList"
        },
        "CreateTime": {
          "documentation": "<p>The time at which the metadata database was created in the catalog.</p>",
          "shape": "Timestamp"
        },
        "Description": {
          "documentation": "<p>A description of the database.</p>",
          "shape": "DescriptionString"
        },
        "LocationUri": {
          "documentation": "<p>The location of the database (for example, an HDFS path).</p>",
          "shape": "URI"
        },
        "Name": {
          "documentation": "<p>The name of the database. For Hive compatibility, this is folded to lowercase when it is stored.</p>",
          "shape": "NameString"
        },
        "Parameters": {
          "documentation": "<p>These key-value pairs define parameters and properties of the database.</p>",
          "shape": "ParametersMap"
        },
        "TargetDatabase": {
          "documentation": "<p>A <code>DatabaseIdentifier</code> structure that describes a target database for resource linking.</p>",
          "shape": "DatabaseIdentifier"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "DatabaseIdentifier": {
      "documentation": "<p>A structure that describes a target database for resource linking.</p>",
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog in which the database resides.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>The name of the catalog database.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "DatabaseInput": {
      "documentation": "<p>The structure used to create or update a database.</p>",
      "members": {
        "CreateTableDefaultPermissions": {
          "documentation": "<p>Creates a set of default permissions on the table for principals. </p>",
          "shape": "PrincipalPermissionsList"
        },
        "Description": {
          "documentation": "<p>A description of the database.</p>",
          "shape": "DescriptionString"
        },
        "LocationUri": {
          "documentation": "<p>The location of the database (for example, an HDFS path). </p>",
          "shape": "URI"
        },
        "Name": {
          "documentation": "<p>The name of the database. For Hive compatibility, this is folded to lowercase when it is stored.</p>",
          "shape": "NameString"
        },
        "Parameters": {
          "documentation": "<p>These key-value pairs define parameters and properties of the database.</p> <p>These key-value pairs define parameters and properties of the database.</p>",
          "shape": "ParametersMap"
        },
        "TargetDatabase": {
          "documentation": "<p>A <code>DatabaseIdentifier</code> structure that describes a target database for resource linking.</p>",
          "shape": "DatabaseIdentifier"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "DatabaseList": {
      "member": {
        "shape": "Database"
      },
      "type": "list"
    },
    "DatabaseName": {
      "type": "string"
    },
    "Datatype": {
      "documentation": "<p>A structure representing the datatype of the value.</p>",
      "members": {
        "Id": {
          "documentation": "<p>The datatype of the value.</p>",
          "shape": "GenericLimitedString"
        },
        "Label": {
          "documentation": "<p>A label assigned to the datatype.</p>",
          "shape": "GenericLimitedString"
        }
      },
      "required": [
        "Id",
        "Label"
      ],
      "type": "structure"
    },
    "DateColumnStatisticsData": {
      "documentation": "<p>Defines column statistics supported for timestamp data columns.</p>",
      "members": {
        "MaximumValue": {
          "documentation": "<p>The highest value in the column.</p>",
          "shape": "Timestamp"
        },
        "MinimumValue": {
          "documentation": "<p>The lowest value in the column.</p>",
          "shape": "Timestamp"
        },
        "NumberOfDistinctValues": {
          "documentation": "<p>The number of distinct values in a column.</p>",
          "shape": "NonNegativeLong"
        },
        "NumberOfNulls": {
          "documentation": "<p>The number of null values in the column.</p>",
          "shape": "NonNegativeLong"
        }
      },
      "required": [
        "NumberOfNulls",
        "NumberOfDistinctValues"
      ],
      "type": "structure"
    },
    "DecimalColumnStatisticsData": {
      "documentation": "<p>Defines column statistics supported for fixed-point number data columns.</p>",
      "members": {
        "MaximumValue": {
          "documentation": "<p>The highest value in the column.</p>",
          "shape": "DecimalNumber"
        },
        "MinimumValue": {
          "documentation": "<p>The lowest value in the column.</p>",
          "shape": "DecimalNumber"
        },
        "NumberOfDistinctValues": {
          "documentation": "<p>The number of distinct values in a column.</p>",
          "shape": "NonNegativeLong"
        },
        "NumberOfNulls": {
          "documentation": "<p>The number of null values in the column.</p>",
          "shape": "NonNegativeLong"
        }
      },
      "required": [
        "NumberOfNulls",
        "NumberOfDistinctValues"
      ],
      "type": "structure"
    },
    "DecimalNumber": {
      "documentation": "<p>Contains a numeric value in decimal format.</p>",
      "members": {
        "Scale": {
          "documentation": "<p>The scale that determines where the decimal point falls in the unscaled value.</p>",
          "shape": "Integer"
        },
        "UnscaledValue": {
          "documentation": "<p>The unscaled numeric value.</p>",
          "shape": "Blob"
        }
      },
      "required": [
        "UnscaledValue",
        "Scale"
      ],
      "type": "structure"
    },
    "DeleteBehavior": {
      "enum": [
        "LOG",
        "DELETE_FROM_DATABASE",
        "DEPRECATE_IN_DATABASE"
      ],
      "type": "string"
    },
    "DeleteBlueprintRequest": {
      "members": {
        "Name": {
          "documentation": "<p>The name of the blueprint to delete.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "DeleteBlueprintResponse": {
      "members": {
        "Name": {
          "documentation": "<p>Returns the name of the blueprint that was deleted.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "DeleteClassifierRequest": {
      "members": {
        "Name": {
          "documentation": "<p>Name of the classifier to remove.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "DeleteClassifierResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteColumnStatisticsForPartitionRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog where the partitions in question reside. If none is supplied, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "ColumnName": {
          "documentation": "<p>Name of the column.</p>",
          "shape": "NameString"
        },
        "DatabaseName": {
          "documentation": "<p>The name of the catalog database where the partitions reside.</p>",
          "shape": "NameString"
        },
        "PartitionValues": {
          "documentation": "<p>A list of partition values identifying the partition.</p>",
          "shape": "ValueStringList"
        },
        "TableName": {
          "documentation": "<p>The name of the partitions' table.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "PartitionValues",
        "ColumnName"
      ],
      "type": "structure"
    },
    "DeleteColumnStatisticsForPartitionResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteColumnStatisticsForTableRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog where the partitions in question reside. If none is supplied, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "ColumnName": {
          "documentation": "<p>The name of the column.</p>",
          "shape": "NameString"
        },
        "DatabaseName": {
          "documentation": "<p>The name of the catalog database where the partitions reside.</p>",
          "shape": "NameString"
        },
        "TableName": {
          "documentation": "<p>The name of the partitions' table.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "ColumnName"
      ],
      "type": "structure"
    },
    "DeleteColumnStatisticsForTableResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteConnectionNameList": {
      "max": 25,
      "member": {
        "shape": "NameString"
      },
      "min": 0,
      "type": "list"
    },
    "DeleteConnectionRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog in which the connection resides. If none is provided, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "ConnectionName": {
          "documentation": "<p>The name of the connection to delete.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "ConnectionName"
      ],
      "type": "structure"
    },
    "DeleteConnectionResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteCrawlerRequest": {
      "members": {
        "Name": {
          "documentation": "<p>The name of the crawler to remove.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "DeleteCrawlerResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteCustomEntityTypeRequest": {
      "members": {
        "Name": {
          "documentation": "<p>The name of the custom pattern that you want to delete.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "DeleteCustomEntityTypeResponse": {
      "members": {
        "Name": {
          "documentation": "<p>The name of the custom pattern you deleted.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "DeleteDatabaseRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog in which the database resides. If none is provided, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "Name": {
          "documentation": "<p>The name of the database to delete. For Hive compatibility, this must be all lowercase.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "DeleteDatabaseResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteDevEndpointRequest": {
      "members": {
        "EndpointName": {
          "documentation": "<p>The name of the <code>DevEndpoint</code>.</p>",
          "shape": "GenericString"
        }
      },
      "required": [
        "EndpointName"
      ],
      "type": "structure"
    },
    "DeleteDevEndpointResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteJobRequest": {
      "members": {
        "JobName": {
          "documentation": "<p>The name of the job definition to delete.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "JobName"
      ],
      "type": "structure"
    },
    "DeleteJobResponse": {
      "members": {
        "JobName": {
          "documentation": "<p>The name of the job definition that was deleted.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "DeleteMLTransformRequest": {
      "members": {
        "TransformId": {
          "documentation": "<p>The unique identifier of the transform to delete.</p>",
          "shape": "HashString"
        }
      },
      "required": [
        "TransformId"
      ],
      "type": "structure"
    },
    "DeleteMLTransformResponse": {
      "members": {
        "TransformId": {
          "documentation": "<p>The unique identifier of the transform that was deleted.</p>",
          "shape": "HashString"
        }
      },
      "type": "structure"
    },
    "DeletePartitionIndexRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The catalog ID where the table resides.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>Specifies the name of a database from which you want to delete a partition index.</p>",
          "shape": "NameString"
        },
        "IndexName": {
          "documentation": "<p>The name of the partition index to be deleted.</p>",
          "shape": "NameString"
        },
        "TableName": {
          "documentation": "<p>Specifies the name of a table from which you want to delete a partition index.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "IndexName"
      ],
      "type": "structure"
    },
    "DeletePartitionIndexResponse": {
      "members": {},
      "type": "structure"
    },
    "DeletePartitionRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog where the partition to be deleted resides. If none is provided, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>The name of the catalog database in which the table in question resides.</p>",
          "shape": "NameString"
        },
        "PartitionValues": {
          "documentation": "<p>The values that define the partition.</p>",
          "shape": "ValueStringList"
        },
        "TableName": {
          "documentation": "<p>The name of the table that contains the partition to be deleted.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "PartitionValues"
      ],
      "type": "structure"
    },
    "DeletePartitionResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteRegistryInput": {
      "members": {
        "RegistryId": {
          "documentation": "<p>This is a wrapper structure that may contain the registry name and Amazon Resource Name (ARN).</p>",
          "shape": "RegistryId"
        }
      },
      "required": [
        "RegistryId"
      ],
      "type": "structure"
    },
    "DeleteRegistryResponse": {
      "members": {
        "RegistryArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the registry being deleted.</p>",
          "shape": "GlueResourceArn"
        },
        "RegistryName": {
          "documentation": "<p>The name of the registry being deleted.</p>",
          "shape": "SchemaRegistryNameString"
        },
        "Status": {
          "documentation": "<p>The status of the registry. A successful operation will return the <code>Deleting</code> status.</p>",
          "shape": "RegistryStatus"
        }
      },
      "type": "structure"
    },
    "DeleteResourcePolicyRequest": {
      "members": {
        "PolicyHashCondition": {
          "documentation": "<p>The hash value returned when this policy was set.</p>",
          "shape": "HashString"
        },
        "ResourceArn": {
          "documentation": "<p>The ARN of the Glue resource for the resource policy to be deleted.</p>",
          "shape": "GlueResourceArn"
        }
      },
      "type": "structure"
    },
    "DeleteResourcePolicyResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteSchemaInput": {
      "members": {
        "SchemaId": {
          "documentation": "<p>This is a wrapper structure that may contain the schema name and Amazon Resource Name (ARN).</p>",
          "shape": "SchemaId"
        }
      },
      "required": [
        "SchemaId"
      ],
      "type": "structure"
    },
    "DeleteSchemaResponse": {
      "members": {
        "SchemaArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the schema being deleted.</p>",
          "shape": "GlueResourceArn"
        },
        "SchemaName": {
          "documentation": "<p>The name of the schema being deleted.</p>",
          "shape": "SchemaRegistryNameString"
        },
        "Status": {
          "documentation": "<p>The status of the schema.</p>",
          "shape": "SchemaStatus"
        }
      },
      "type": "structure"
    },
    "DeleteSchemaVersionsInput": {
      "members": {
        "SchemaId": {
          "documentation": "<p>This is a wrapper structure that may contain the schema name and Amazon Resource Name (ARN).</p>",
          "shape": "SchemaId"
        },
        "Versions": {
          "documentation": "<p>A version range may be supplied which may be of the format:</p> <ul> <li> <p>a single version number, 5</p> </li> <li> <p>a range, 5-8 : deletes versions 5, 6, 7, 8</p> </li> </ul>",
          "shape": "VersionsString"
        }
      },
      "required": [
        "SchemaId",
        "Versions"
      ],
      "type": "structure"
    },
    "DeleteSchemaVersionsResponse": {
      "members": {
        "SchemaVersionErrors": {
          "documentation": "<p>A list of <code>SchemaVersionErrorItem</code> objects, each containing an error and schema version.</p>",
          "shape": "SchemaVersionErrorList"
        }
      },
      "type": "structure"
    },
    "DeleteSecurityConfigurationRequest": {
      "members": {
        "Name": {
          "documentation": "<p>The name of the security configuration to delete.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "DeleteSecurityConfigurationResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteSessionRequest": {
      "members": {
        "Id": {
          "documentation": "<p>The ID of the session to be deleted.</p>",
          "shape": "NameString"
        },
        "RequestOrigin": {
          "documentation": "<p>The name of the origin of the delete session request.</p>",
          "shape": "OrchestrationNameString"
        }
      },
      "required": [
        "Id"
      ],
      "type": "structure"
    },
    "DeleteSessionResponse": {
      "members": {
        "Id": {
          "documentation": "<p>Returns the ID of the deleted session.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "DeleteTableRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog where the table resides. If none is provided, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>The name of the catalog database in which the table resides. For Hive compatibility, this name is entirely lowercase.</p>",
          "shape": "NameString"
        },
        "Name": {
          "documentation": "<p>The name of the table to be deleted. For Hive compatibility, this name is entirely lowercase.</p>",
          "shape": "NameString"
        },
        "TransactionId": {
          "documentation": "<p>The transaction ID at which to delete the table contents.</p>",
          "shape": "TransactionIdString"
        }
      },
      "required": [
        "DatabaseName",
        "Name"
      ],
      "type": "structure"
    },
    "DeleteTableResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteTableVersionRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog where the tables reside. If none is provided, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>The database in the catalog in which the table resides. For Hive compatibility, this name is entirely lowercase.</p>",
          "shape": "NameString"
        },
        "TableName": {
          "documentation": "<p>The name of the table. For Hive compatibility, this name is entirely lowercase.</p>",
          "shape": "NameString"
        },
        "VersionId": {
          "documentation": "<p>The ID of the table version to be deleted. A <code>VersionID</code> is a string representation of an integer. Each version is incremented by 1.</p>",
          "shape": "VersionString"
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "VersionId"
      ],
      "type": "structure"
    },
    "DeleteTableVersionResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteTriggerRequest": {
      "members": {
        "Name": {
          "documentation": "<p>The name of the trigger to delete.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "DeleteTriggerResponse": {
      "members": {
        "Name": {
          "documentation": "<p>The name of the trigger that was deleted.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "DeleteUserDefinedFunctionRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog where the function to be deleted is located. If none is supplied, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>The name of the catalog database where the function is located.</p>",
          "shape": "NameString"
        },
        "FunctionName": {
          "documentation": "<p>The name of the function definition to be deleted.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "DatabaseName",
        "FunctionName"
      ],
      "type": "structure"
    },
    "DeleteUserDefinedFunctionResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteWorkflowRequest": {
      "members": {
        "Name": {
          "documentation": "<p>Name of the workflow to be deleted.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "DeleteWorkflowResponse": {
      "members": {
        "Name": {
          "documentation": "<p>Name of the workflow specified in input.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "DeltaTarget": {
      "documentation": "<p>Specifies a Delta data store to crawl one or more Delta tables.</p>",
      "members": {
        "ConnectionName": {
          "documentation": "<p>The name of the connection to use to connect to the Delta table target.</p>",
          "shape": "ConnectionName"
        },
        "DeltaTables": {
          "documentation": "<p>A list of the Amazon S3 paths to the Delta tables.</p>",
          "shape": "PathList"
        },
        "WriteManifest": {
          "documentation": "<p>Specifies whether to write the manifest files to the Delta table path.</p>",
          "shape": "NullableBoolean"
        }
      },
      "type": "structure"
    },
    "DeltaTargetList": {
      "member": {
        "shape": "DeltaTarget"
      },
      "type": "list"
    },
    "DescriptionString": {
      "max": 2048,
      "min": 0,
      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
      "type": "string"
    },
    "DescriptionStringRemovable": {
      "max": 2048,
      "min": 0,
      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
      "type": "string"
    },
    "DevEndpoint": {
      "documentation": "<p>A development endpoint where a developer can remotely debug extract, transform, and load (ETL) scripts.</p>",
      "members": {
        "Arguments": {
          "documentation": "<p>A map of arguments used to configure the <code>DevEndpoint</code>.</p> <p>Valid arguments are:</p> <ul> <li> <p> <code>\"--enable-glue-datacatalog\": \"\"</code> </p> </li> </ul> <p>You can specify a version of Python support for development endpoints by using the <code>Arguments</code> parameter in the <code>CreateDevEndpoint</code> or <code>UpdateDevEndpoint</code> APIs. If no arguments are provided, the version defaults to Python 2.</p>",
          "shape": "MapValue"
        },
        "AvailabilityZone": {
          "documentation": "<p>The AWS Availability Zone where this <code>DevEndpoint</code> is located.</p>",
          "shape": "GenericString"
        },
        "CreatedTimestamp": {
          "documentation": "<p>The point in time at which this DevEndpoint was created.</p>",
          "shape": "TimestampValue"
        },
        "EndpointName": {
          "documentation": "<p>The name of the <code>DevEndpoint</code>.</p>",
          "shape": "GenericString"
        },
        "ExtraJarsS3Path": {
          "documentation": "<p>The path to one or more Java <code>.jar</code> files in an S3 bucket that should be loaded in your <code>DevEndpoint</code>.</p> <note> <p>You can only use pure Java/Scala libraries with a <code>DevEndpoint</code>.</p> </note>",
          "shape": "GenericString"
        },
        "ExtraPythonLibsS3Path": {
          "documentation": "<p>The paths to one or more Python libraries in an Amazon S3 bucket that should be loaded in your <code>DevEndpoint</code>. Multiple values must be complete paths separated by a comma.</p> <note> <p>You can only use pure Python libraries with a <code>DevEndpoint</code>. Libraries that rely on C extensions, such as the <a href=\"http://pandas.pydata.org/\">pandas</a> Python data analysis library, are not currently supported.</p> </note>",
          "shape": "GenericString"
        },
        "FailureReason": {
          "documentation": "<p>The reason for a current failure in this <code>DevEndpoint</code>.</p>",
          "shape": "GenericString"
        },
        "GlueVersion": {
          "documentation": "<p>Glue version determines the versions of Apache Spark and Python that Glue supports. The Python version indicates the version supported for running your ETL scripts on development endpoints. </p> <p>For more information about the available Glue versions and corresponding Spark and Python versions, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/add-job.html\">Glue version</a> in the developer guide.</p> <p>Development endpoints that are created without specifying a Glue version default to Glue 0.9.</p> <p>You can specify a version of Python support for development endpoints by using the <code>Arguments</code> parameter in the <code>CreateDevEndpoint</code> or <code>UpdateDevEndpoint</code> APIs. If no arguments are provided, the version defaults to Python 2.</p>",
          "shape": "GlueVersionString"
        },
        "LastModifiedTimestamp": {
          "documentation": "<p>The point in time at which this <code>DevEndpoint</code> was last modified.</p>",
          "shape": "TimestampValue"
        },
        "LastUpdateStatus": {
          "documentation": "<p>The status of the last update.</p>",
          "shape": "GenericString"
        },
        "NumberOfNodes": {
          "documentation": "<p>The number of Glue Data Processing Units (DPUs) allocated to this <code>DevEndpoint</code>.</p>",
          "shape": "IntegerValue"
        },
        "NumberOfWorkers": {
          "documentation": "<p>The number of workers of a defined <code>workerType</code> that are allocated to the development endpoint.</p> <p>The maximum number of workers you can define are 299 for <code>G.1X</code>, and 149 for <code>G.2X</code>. </p>",
          "shape": "NullableInteger"
        },
        "PrivateAddress": {
          "documentation": "<p>A private IP address to access the <code>DevEndpoint</code> within a VPC if the <code>DevEndpoint</code> is created within one. The <code>PrivateAddress</code> field is present only when you create the <code>DevEndpoint</code> within your VPC.</p>",
          "shape": "GenericString"
        },
        "PublicAddress": {
          "documentation": "<p>The public IP address used by this <code>DevEndpoint</code>. The <code>PublicAddress</code> field is present only when you create a non-virtual private cloud (VPC) <code>DevEndpoint</code>.</p>",
          "shape": "GenericString"
        },
        "PublicKey": {
          "documentation": "<p>The public key to be used by this <code>DevEndpoint</code> for authentication. This attribute is provided for backward compatibility because the recommended attribute to use is public keys.</p>",
          "shape": "GenericString"
        },
        "PublicKeys": {
          "documentation": "<p>A list of public keys to be used by the <code>DevEndpoints</code> for authentication. Using this attribute is preferred over a single public key because the public keys allow you to have a different private key per client.</p> <note> <p>If you previously created an endpoint with a public key, you must remove that key to be able to set a list of public keys. Call the <code>UpdateDevEndpoint</code> API operation with the public key content in the <code>deletePublicKeys</code> attribute, and the list of new keys in the <code>addPublicKeys</code> attribute.</p> </note>",
          "shape": "PublicKeysList"
        },
        "RoleArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the IAM role used in this <code>DevEndpoint</code>.</p>",
          "shape": "RoleArn"
        },
        "SecurityConfiguration": {
          "documentation": "<p>The name of the <code>SecurityConfiguration</code> structure to be used with this <code>DevEndpoint</code>.</p>",
          "shape": "NameString"
        },
        "SecurityGroupIds": {
          "documentation": "<p>A list of security group identifiers used in this <code>DevEndpoint</code>.</p>",
          "shape": "StringList"
        },
        "Status": {
          "documentation": "<p>The current status of this <code>DevEndpoint</code>.</p>",
          "shape": "GenericString"
        },
        "SubnetId": {
          "documentation": "<p>The subnet ID for this <code>DevEndpoint</code>.</p>",
          "shape": "GenericString"
        },
        "VpcId": {
          "documentation": "<p>The ID of the virtual private cloud (VPC) used by this <code>DevEndpoint</code>.</p>",
          "shape": "GenericString"
        },
        "WorkerType": {
          "documentation": "<p>The type of predefined worker that is allocated to the development endpoint. Accepts a value of Standard, G.1X, or G.2X.</p> <ul> <li> <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p> </li> <li> <p>For the <code>G.1X</code> worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p> </li> <li> <p>For the <code>G.2X</code> worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p> </li> </ul> <p>Known issue: when a development endpoint is created with the <code>G.2X</code> <code>WorkerType</code> configuration, the Spark drivers for the development endpoint will run on 4 vCPU, 16 GB of memory, and a 64 GB disk. </p>",
          "shape": "WorkerType"
        },
        "YarnEndpointAddress": {
          "documentation": "<p>The YARN endpoint address used by this <code>DevEndpoint</code>.</p>",
          "shape": "GenericString"
        },
        "ZeppelinRemoteSparkInterpreterPort": {
          "documentation": "<p>The Apache Zeppelin port for the remote Apache Spark interpreter.</p>",
          "shape": "IntegerValue"
        }
      },
      "type": "structure"
    },
    "DevEndpointCustomLibraries": {
      "documentation": "<p>Custom libraries to be loaded into a development endpoint.</p>",
      "members": {
        "ExtraJarsS3Path": {
          "documentation": "<p>The path to one or more Java <code>.jar</code> files in an S3 bucket that should be loaded in your <code>DevEndpoint</code>.</p> <note> <p>You can only use pure Java/Scala libraries with a <code>DevEndpoint</code>.</p> </note>",
          "shape": "GenericString"
        },
        "ExtraPythonLibsS3Path": {
          "documentation": "<p>The paths to one or more Python libraries in an Amazon Simple Storage Service (Amazon S3) bucket that should be loaded in your <code>DevEndpoint</code>. Multiple values must be complete paths separated by a comma.</p> <note> <p>You can only use pure Python libraries with a <code>DevEndpoint</code>. Libraries that rely on C extensions, such as the <a href=\"http://pandas.pydata.org/\">pandas</a> Python data analysis library, are not currently supported.</p> </note>",
          "shape": "GenericString"
        }
      },
      "type": "structure"
    },
    "DevEndpointList": {
      "member": {
        "shape": "DevEndpoint"
      },
      "type": "list"
    },
    "DevEndpointNameList": {
      "member": {
        "shape": "NameString"
      },
      "type": "list"
    },
    "DevEndpointNames": {
      "max": 25,
      "member": {
        "shape": "GenericString"
      },
      "min": 1,
      "type": "list"
    },
    "DirectKafkaSource": {
      "documentation": "<p>Specifies an Apache Kafka data store.</p>",
      "members": {
        "DataPreviewOptions": {
          "documentation": "<p>Specifies options related to data preview for viewing a sample of your data.</p>",
          "shape": "StreamingDataPreviewOptions"
        },
        "DetectSchema": {
          "box": true,
          "documentation": "<p>Whether to automatically determine the schema from the incoming data.</p>",
          "shape": "BoxedBoolean"
        },
        "Name": {
          "documentation": "<p>The name of the data store.</p>",
          "shape": "NodeName"
        },
        "StreamingOptions": {
          "documentation": "<p>Specifies the streaming options.</p>",
          "shape": "KafkaStreamingSourceOptions"
        },
        "WindowSize": {
          "box": true,
          "documentation": "<p>The amount of time to spend processing each micro batch.</p>",
          "shape": "BoxedPositiveInt"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "DirectKinesisSource": {
      "documentation": "<p>Specifies a direct Amazon Kinesis data source.</p>",
      "members": {
        "DataPreviewOptions": {
          "documentation": "<p>Additional options for data preview.</p>",
          "shape": "StreamingDataPreviewOptions"
        },
        "DetectSchema": {
          "box": true,
          "documentation": "<p>Whether to automatically determine the schema from the incoming data.</p>",
          "shape": "BoxedBoolean"
        },
        "Name": {
          "documentation": "<p>The name of the data source.</p>",
          "shape": "NodeName"
        },
        "StreamingOptions": {
          "documentation": "<p>Additional options for the Kinesis streaming data source.</p>",
          "shape": "KinesisStreamingSourceOptions"
        },
        "WindowSize": {
          "box": true,
          "documentation": "<p>The amount of time to spend processing each micro batch.</p>",
          "shape": "BoxedPositiveInt"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "DirectSchemaChangePolicy": {
      "documentation": "<p>A policy that specifies update behavior for the crawler.</p>",
      "members": {
        "Database": {
          "documentation": "<p>Specifies the database that the schema change policy applies to.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "EnableUpdateCatalog": {
          "documentation": "<p>Whether to use the specified update behavior when the crawler finds a changed schema.</p>",
          "shape": "BoxedBoolean"
        },
        "Table": {
          "documentation": "<p>Specifies the table in the database that the schema change policy applies to.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "UpdateBehavior": {
          "documentation": "<p>The update behavior when the crawler finds a changed schema.</p>",
          "shape": "UpdateCatalogBehavior"
        }
      },
      "type": "structure"
    },
    "Double": {
      "type": "double"
    },
    "DoubleColumnStatisticsData": {
      "documentation": "<p>Defines column statistics supported for floating-point number data columns.</p>",
      "members": {
        "MaximumValue": {
          "documentation": "<p>The highest value in the column.</p>",
          "shape": "Double"
        },
        "MinimumValue": {
          "documentation": "<p>The lowest value in the column.</p>",
          "shape": "Double"
        },
        "NumberOfDistinctValues": {
          "documentation": "<p>The number of distinct values in a column.</p>",
          "shape": "NonNegativeLong"
        },
        "NumberOfNulls": {
          "documentation": "<p>The number of null values in the column.</p>",
          "shape": "NonNegativeLong"
        }
      },
      "required": [
        "NumberOfNulls",
        "NumberOfDistinctValues"
      ],
      "type": "structure"
    },
    "DoubleValue": {
      "type": "double"
    },
    "DropDuplicates": {
      "documentation": "<p>Specifies a transform that removes rows of repeating data from a data set. </p>",
      "members": {
        "Columns": {
          "documentation": "<p>The name of the columns to be merged or removed if repeating.</p>",
          "shape": "LimitedPathList"
        },
        "Inputs": {
          "documentation": "<p>The data inputs identified by their node names.</p>",
          "shape": "OneInput"
        },
        "Name": {
          "documentation": "<p>The name of the transform node.</p>",
          "shape": "NodeName"
        }
      },
      "required": [
        "Name",
        "Inputs"
      ],
      "type": "structure"
    },
    "DropFields": {
      "documentation": "<p>Specifies a transform that chooses the data property keys that you want to drop.</p>",
      "members": {
        "Inputs": {
          "documentation": "<p>The data inputs identified by their node names.</p>",
          "shape": "OneInput"
        },
        "Name": {
          "documentation": "<p>The name of the transform node.</p>",
          "shape": "NodeName"
        },
        "Paths": {
          "documentation": "<p>A JSON path to a variable in the data structure.</p>",
          "shape": "GlueStudioPathList"
        }
      },
      "required": [
        "Name",
        "Inputs",
        "Paths"
      ],
      "type": "structure"
    },
    "DropNullFields": {
      "documentation": "<p>Specifies a transform that removes columns from the dataset if all values in the column are 'null'. By default, Glue Studio will recognize null objects, but some values such as empty strings, strings that are \"null\", -1 integers or other placeholders such as zeros, are not automatically recognized as nulls.</p>",
      "members": {
        "Inputs": {
          "documentation": "<p>The data inputs identified by their node names.</p>",
          "shape": "OneInput"
        },
        "Name": {
          "documentation": "<p>The name of the transform node.</p>",
          "shape": "NodeName"
        },
        "NullCheckBoxList": {
          "documentation": "<p>A structure that represents whether certain values are recognized as null values for removal.</p>",
          "shape": "NullCheckBoxList"
        },
        "NullTextList": {
          "documentation": "<p>A structure that specifies a list of NullValueField structures that represent a custom null value such as zero or other value being used as a null placeholder unique to the dataset.</p> <p>The <code>DropNullFields</code> transform removes custom null values only if both the value of the null placeholder and the datatype match the data.</p>",
          "shape": "NullValueFields"
        }
      },
      "required": [
        "Name",
        "Inputs"
      ],
      "type": "structure"
    },
    "DynamoDBCatalogSource": {
      "documentation": "<p>Specifies a DynamoDB data source in the Glue Data Catalog.</p>",
      "members": {
        "Database": {
          "documentation": "<p>The name of the database to read from.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "Name": {
          "documentation": "<p>The name of the data source.</p>",
          "shape": "NodeName"
        },
        "Table": {
          "documentation": "<p>The name of the table in the database to read from.</p>",
          "shape": "EnclosedInStringProperty"
        }
      },
      "required": [
        "Name",
        "Database",
        "Table"
      ],
      "type": "structure"
    },
    "DynamoDBTarget": {
      "documentation": "<p>Specifies an Amazon DynamoDB table to crawl.</p>",
      "members": {
        "Path": {
          "documentation": "<p>The name of the DynamoDB table to crawl.</p>",
          "shape": "Path"
        },
        "scanAll": {
          "documentation": "<p>Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table.</p> <p>A value of <code>true</code> means to scan all records, while a value of <code>false</code> means to sample the records. If no value is specified, the value defaults to <code>true</code>.</p>",
          "shape": "NullableBoolean"
        },
        "scanRate": {
          "documentation": "<p>The percentage of the configured read capacity units to use by the Glue crawler. Read capacity units is a term defined by DynamoDB, and is a numeric value that acts as rate limiter for the number of reads that can be performed on that table per second.</p> <p>The valid values are null or a value between 0.1 to 1.5. A null value is used when user does not provide a value, and defaults to 0.5 of the configured Read Capacity Unit (for provisioned tables), or 0.25 of the max configured Read Capacity Unit (for tables using on-demand mode).</p>",
          "shape": "NullableDouble"
        }
      },
      "type": "structure"
    },
    "DynamoDBTargetList": {
      "member": {
        "shape": "DynamoDBTarget"
      },
      "type": "list"
    },
    "Edge": {
      "documentation": "<p>An edge represents a directed connection between two Glue components that are part of the workflow the edge belongs to.</p>",
      "members": {
        "DestinationId": {
          "documentation": "<p>The unique of the node within the workflow where the edge ends.</p>",
          "shape": "NameString"
        },
        "SourceId": {
          "documentation": "<p>The unique of the node within the workflow where the edge starts.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "EdgeList": {
      "member": {
        "shape": "Edge"
      },
      "type": "list"
    },
    "EnableHybridValues": {
      "enum": [
        "TRUE",
        "FALSE"
      ],
      "type": "string"
    },
    "EnclosedInStringProperties": {
      "member": {
        "shape": "EnclosedInStringProperty"
      },
      "type": "list"
    },
    "EnclosedInStringPropertiesMinOne": {
      "member": {
        "shape": "EnclosedInStringProperty"
      },
      "type": "list"
    },
    "EnclosedInStringProperty": {
      "pattern": "([\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF]|[^\\S\\r\\n\"'])*",
      "type": "string"
    },
    "EnclosedInStringPropertyWithQuote": {
      "pattern": "([\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF]|[^\\S\\r\\n])*",
      "type": "string"
    },
    "EncryptionAtRest": {
      "documentation": "<p>Specifies the encryption-at-rest configuration for the Data Catalog.</p>",
      "members": {
        "CatalogEncryptionMode": {
          "documentation": "<p>The encryption-at-rest mode for encrypting Data Catalog data.</p>",
          "shape": "CatalogEncryptionMode"
        },
        "SseAwsKmsKeyId": {
          "documentation": "<p>The ID of the KMS key to use for encryption at rest.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "CatalogEncryptionMode"
      ],
      "type": "structure"
    },
    "EncryptionConfiguration": {
      "documentation": "<p>Specifies an encryption configuration.</p>",
      "members": {
        "CloudWatchEncryption": {
          "documentation": "<p>The encryption configuration for Amazon CloudWatch.</p>",
          "shape": "CloudWatchEncryption"
        },
        "JobBookmarksEncryption": {
          "documentation": "<p>The encryption configuration for job bookmarks.</p>",
          "shape": "JobBookmarksEncryption"
        },
        "S3Encryption": {
          "documentation": "<p>The encryption configuration for Amazon Simple Storage Service (Amazon S3) data.</p>",
          "shape": "S3EncryptionList"
        }
      },
      "type": "structure"
    },
    "EntityNotFoundException": {
      "documentation": "<p>A specified entity does not exist</p>",
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "ErrorByName": {
      "key": {
        "shape": "NameString"
      },
      "type": "map",
      "value": {
        "shape": "ErrorDetail"
      }
    },
    "ErrorCodeString": {
      "type": "string"
    },
    "ErrorDetail": {
      "documentation": "<p>Contains details about an error.</p>",
      "members": {
        "ErrorCode": {
          "documentation": "<p>The code associated with this error.</p>",
          "shape": "NameString"
        },
        "ErrorMessage": {
          "documentation": "<p>A message describing the error.</p>",
          "shape": "DescriptionString"
        }
      },
      "type": "structure"
    },
    "ErrorDetails": {
      "documentation": "<p>An object containing error details.</p>",
      "members": {
        "ErrorCode": {
          "documentation": "<p>The error code for an error.</p>",
          "shape": "ErrorCodeString"
        },
        "ErrorMessage": {
          "documentation": "<p>The error message for an error.</p>",
          "shape": "ErrorMessageString"
        }
      },
      "type": "structure"
    },
    "ErrorMessageString": {
      "type": "string"
    },
    "ErrorString": {
      "type": "string"
    },
    "EvaluationMetrics": {
      "documentation": "<p>Evaluation metrics provide an estimate of the quality of your machine learning transform.</p>",
      "members": {
        "FindMatchesMetrics": {
          "documentation": "<p>The evaluation metrics for the find matches algorithm.</p>",
          "shape": "FindMatchesMetrics"
        },
        "TransformType": {
          "documentation": "<p>The type of machine learning transform.</p>",
          "shape": "TransformType"
        }
      },
      "required": [
        "TransformType"
      ],
      "type": "structure"
    },
    "EventBatchingCondition": {
      "documentation": "<p>Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.</p>",
      "members": {
        "BatchSize": {
          "documentation": "<p>Number of events that must be received from Amazon EventBridge before EventBridge event trigger fires.</p>",
          "shape": "BatchSize"
        },
        "BatchWindow": {
          "documentation": "<p>Window of time in seconds after which EventBridge event trigger fires. Window starts when first event is received.</p>",
          "shape": "BatchWindow"
        }
      },
      "required": [
        "BatchSize"
      ],
      "type": "structure"
    },
    "EventQueueArn": {
      "type": "string"
    },
    "ExecutionClass": {
      "enum": [
        "FLEX",
        "STANDARD"
      ],
      "max": 16,
      "type": "string"
    },
    "ExecutionProperty": {
      "documentation": "<p>An execution property of a job.</p>",
      "members": {
        "MaxConcurrentRuns": {
          "documentation": "<p>The maximum number of concurrent runs allowed for the job. The default is 1. An error is returned when this threshold is reached. The maximum value you can specify is controlled by a service limit.</p>",
          "shape": "MaxConcurrentRuns"
        }
      },
      "type": "structure"
    },
    "ExecutionTime": {
      "type": "integer"
    },
    "ExistCondition": {
      "enum": [
        "MUST_EXIST",
        "NOT_EXIST",
        "NONE"
      ],
      "type": "string"
    },
    "ExportLabelsTaskRunProperties": {
      "documentation": "<p>Specifies configuration properties for an exporting labels task run.</p>",
      "members": {
        "OutputS3Path": {
          "documentation": "<p>The Amazon Simple Storage Service (Amazon S3) path where you will export the labels.</p>",
          "shape": "UriString"
        }
      },
      "type": "structure"
    },
    "ExtendedString": {
      "pattern": "[\\s\\S]*",
      "type": "string"
    },
    "FieldName": {
      "enum": [
        "CRAWL_ID",
        "STATE",
        "START_TIME",
        "END_TIME",
        "DPU_HOUR"
      ],
      "type": "string"
    },
    "FieldType": {
      "type": "string"
    },
    "FillMissingValues": {
      "documentation": "<p>Specifies a transform that locates records in the dataset that have missing values and adds a new field with a value determined by imputation. The input data set is used to train the machine learning model that determines what the missing value should be.</p>",
      "members": {
        "FilledPath": {
          "documentation": "<p>A JSON path to a variable in the data structure for the dataset that is filled.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "ImputedPath": {
          "documentation": "<p>A JSON path to a variable in the data structure for the dataset that is imputed.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "Inputs": {
          "documentation": "<p>The data inputs identified by their node names.</p>",
          "shape": "OneInput"
        },
        "Name": {
          "documentation": "<p>The name of the transform node.</p>",
          "shape": "NodeName"
        }
      },
      "required": [
        "Name",
        "Inputs",
        "ImputedPath"
      ],
      "type": "structure"
    },
    "Filter": {
      "documentation": "<p>Specifies a transform that splits a dataset into two, based on a filter condition.</p>",
      "members": {
        "Filters": {
          "documentation": "<p>Specifies a filter expression.</p>",
          "shape": "FilterExpressions"
        },
        "Inputs": {
          "documentation": "<p>The data inputs identified by their node names.</p>",
          "shape": "OneInput"
        },
        "LogicalOperator": {
          "documentation": "<p>The operator used to filter rows by comparing the key value to a specified value.</p>",
          "shape": "FilterLogicalOperator"
        },
        "Name": {
          "documentation": "<p>The name of the transform node.</p>",
          "shape": "NodeName"
        }
      },
      "required": [
        "Name",
        "Inputs",
        "LogicalOperator",
        "Filters"
      ],
      "type": "structure"
    },
    "FilterExpression": {
      "documentation": "<p>Specifies a filter expression.</p>",
      "members": {
        "Negated": {
          "documentation": "<p>Whether the expression is to be negated.</p>",
          "shape": "BoxedBoolean"
        },
        "Operation": {
          "documentation": "<p>The type of operation to perform in the expression.</p>",
          "shape": "FilterOperation"
        },
        "Values": {
          "documentation": "<p>A list of filter values.</p>",
          "shape": "FilterValues"
        }
      },
      "required": [
        "Operation",
        "Values"
      ],
      "type": "structure"
    },
    "FilterExpressions": {
      "member": {
        "shape": "FilterExpression"
      },
      "type": "list"
    },
    "FilterLogicalOperator": {
      "enum": [
        "AND",
        "OR"
      ],
      "type": "string"
    },
    "FilterOperation": {
      "enum": [
        "EQ",
        "LT",
        "GT",
        "LTE",
        "GTE",
        "REGEX",
        "ISNULL"
      ],
      "type": "string"
    },
    "FilterOperator": {
      "enum": [
        "GT",
        "GE",
        "LT",
        "LE",
        "EQ",
        "NE"
      ],
      "type": "string"
    },
    "FilterString": {
      "max": 2048,
      "min": 0,
      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
      "type": "string"
    },
    "FilterValue": {
      "documentation": "<p>Represents a single entry in the list of values for a <code>FilterExpression</code>. </p>",
      "members": {
        "Type": {
          "documentation": "<p>The type of filter value.</p>",
          "shape": "FilterValueType"
        },
        "Value": {
          "documentation": "<p>The value to be associated.</p>",
          "shape": "EnclosedInStringProperties"
        }
      },
      "required": [
        "Type",
        "Value"
      ],
      "type": "structure"
    },
    "FilterValueType": {
      "enum": [
        "COLUMNEXTRACTED",
        "CONSTANT"
      ],
      "type": "string"
    },
    "FilterValues": {
      "member": {
        "shape": "FilterValue"
      },
      "type": "list"
    },
    "FindMatchesMetrics": {
      "documentation": "<p>The evaluation metrics for the find matches algorithm. The quality of your machine learning transform is measured by getting your transform to predict some matches and comparing the results to known matches from the same dataset. The quality metrics are based on a subset of your data, so they are not precise.</p>",
      "members": {
        "AreaUnderPRCurve": {
          "documentation": "<p>The area under the precision/recall curve (AUPRC) is a single number measuring the overall quality of the transform, that is independent of the choice made for precision vs. recall. Higher values indicate that you have a more attractive precision vs. recall tradeoff.</p> <p>For more information, see <a href=\"https://en.wikipedia.org/wiki/Precision_and_recall\">Precision and recall</a> in Wikipedia.</p>",
          "shape": "GenericBoundedDouble"
        },
        "ColumnImportances": {
          "documentation": "<p>A list of <code>ColumnImportance</code> structures containing column importance metrics, sorted in order of descending importance.</p>",
          "shape": "ColumnImportanceList"
        },
        "ConfusionMatrix": {
          "documentation": "<p>The confusion matrix shows you what your transform is predicting accurately and what types of errors it is making.</p> <p>For more information, see <a href=\"https://en.wikipedia.org/wiki/Confusion_matrix\">Confusion matrix</a> in Wikipedia.</p>",
          "shape": "ConfusionMatrix"
        },
        "F1": {
          "documentation": "<p>The maximum F1 metric indicates the transform's accuracy between 0 and 1, where 1 is the best accuracy.</p> <p>For more information, see <a href=\"https://en.wikipedia.org/wiki/F1_score\">F1 score</a> in Wikipedia.</p>",
          "shape": "GenericBoundedDouble"
        },
        "Precision": {
          "documentation": "<p>The precision metric indicates when often your transform is correct when it predicts a match. Specifically, it measures how well the transform finds true positives from the total true positives possible.</p> <p>For more information, see <a href=\"https://en.wikipedia.org/wiki/Precision_and_recall\">Precision and recall</a> in Wikipedia.</p>",
          "shape": "GenericBoundedDouble"
        },
        "Recall": {
          "documentation": "<p>The recall metric indicates that for an actual match, how often your transform predicts the match. Specifically, it measures how well the transform finds true positives from the total records in the source data.</p> <p>For more information, see <a href=\"https://en.wikipedia.org/wiki/Precision_and_recall\">Precision and recall</a> in Wikipedia.</p>",
          "shape": "GenericBoundedDouble"
        }
      },
      "type": "structure"
    },
    "FindMatchesParameters": {
      "documentation": "<p>The parameters to configure the find matches transform.</p>",
      "members": {
        "AccuracyCostTradeoff": {
          "documentation": "<p>The value that is selected when tuning your transform for a balance between accuracy and cost. A value of 0.5 means that the system balances accuracy and cost concerns. A value of 1.0 means a bias purely for accuracy, which typically results in a higher cost, sometimes substantially higher. A value of 0.0 means a bias purely for cost, which results in a less accurate <code>FindMatches</code> transform, sometimes with unacceptable accuracy.</p> <p>Accuracy measures how well the transform finds true positives and true negatives. Increasing accuracy requires more machine resources and cost. But it also results in increased recall. </p> <p>Cost measures how many compute resources, and thus money, are consumed to run the transform.</p>",
          "shape": "GenericBoundedDouble"
        },
        "EnforceProvidedLabels": {
          "documentation": "<p>The value to switch on or off to force the output to match the provided labels from users. If the value is <code>True</code>, the <code>find matches</code> transform forces the output to match the provided labels. The results override the normal conflation results. If the value is <code>False</code>, the <code>find matches</code> transform does not ensure all the labels provided are respected, and the results rely on the trained model.</p> <p>Note that setting this value to true may increase the conflation execution time.</p>",
          "shape": "NullableBoolean"
        },
        "PrecisionRecallTradeoff": {
          "documentation": "<p>The value selected when tuning your transform for a balance between precision and recall. A value of 0.5 means no preference; a value of 1.0 means a bias purely for precision, and a value of 0.0 means a bias for recall. Because this is a tradeoff, choosing values close to 1.0 means very low recall, and choosing values close to 0.0 results in very low precision.</p> <p>The precision metric indicates how often your model is correct when it predicts a match. </p> <p>The recall metric indicates that for an actual match, how often your model predicts the match.</p>",
          "shape": "GenericBoundedDouble"
        },
        "PrimaryKeyColumnName": {
          "documentation": "<p>The name of a column that uniquely identifies rows in the source table. Used to help identify matching records.</p>",
          "shape": "ColumnNameString"
        }
      },
      "type": "structure"
    },
    "FindMatchesTaskRunProperties": {
      "documentation": "<p>Specifies configuration properties for a Find Matches task run.</p>",
      "members": {
        "JobId": {
          "documentation": "<p>The job ID for the Find Matches task run.</p>",
          "shape": "HashString"
        },
        "JobName": {
          "documentation": "<p>The name assigned to the job for the Find Matches task run.</p>",
          "shape": "NameString"
        },
        "JobRunId": {
          "documentation": "<p>The job run ID for the Find Matches task run.</p>",
          "shape": "HashString"
        }
      },
      "type": "structure"
    },
    "FormatString": {
      "max": 128,
      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
      "type": "string"
    },
    "Generic512CharString": {
      "max": 512,
      "min": 1,
      "type": "string"
    },
    "GenericBoundedDouble": {
      "box": true,
      "max": 1.0,
      "min": 0.0,
      "type": "double"
    },
    "GenericLimitedString": {
      "pattern": "[A-Za-z0-9_-]*",
      "type": "string"
    },
    "GenericMap": {
      "key": {
        "shape": "GenericString"
      },
      "type": "map",
      "value": {
        "shape": "GenericString"
      }
    },
    "GenericString": {
      "type": "string"
    },
    "GetBlueprintRequest": {
      "members": {
        "IncludeBlueprint": {
          "documentation": "<p>Specifies whether or not to include the blueprint in the response.</p>",
          "shape": "NullableBoolean"
        },
        "IncludeParameterSpec": {
          "documentation": "<p>Specifies whether or not to include the parameter specification.</p>",
          "shape": "NullableBoolean"
        },
        "Name": {
          "documentation": "<p>The name of the blueprint.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "GetBlueprintResponse": {
      "members": {
        "Blueprint": {
          "documentation": "<p>Returns a <code>Blueprint</code> object.</p>",
          "shape": "Blueprint"
        }
      },
      "type": "structure"
    },
    "GetBlueprintRunRequest": {
      "members": {
        "BlueprintName": {
          "documentation": "<p>The name of the blueprint.</p>",
          "shape": "OrchestrationNameString"
        },
        "RunId": {
          "documentation": "<p>The run ID for the blueprint run you want to retrieve.</p>",
          "shape": "IdString"
        }
      },
      "required": [
        "BlueprintName",
        "RunId"
      ],
      "type": "structure"
    },
    "GetBlueprintRunResponse": {
      "members": {
        "BlueprintRun": {
          "documentation": "<p>Returns a <code>BlueprintRun</code> object.</p>",
          "shape": "BlueprintRun"
        }
      },
      "type": "structure"
    },
    "GetBlueprintRunsRequest": {
      "members": {
        "BlueprintName": {
          "documentation": "<p>The name of the blueprint.</p>",
          "shape": "NameString"
        },
        "MaxResults": {
          "documentation": "<p>The maximum size of a list to return.</p>",
          "shape": "PageSize"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if this is a continuation request.</p>",
          "shape": "GenericString"
        }
      },
      "required": [
        "BlueprintName"
      ],
      "type": "structure"
    },
    "GetBlueprintRunsResponse": {
      "members": {
        "BlueprintRuns": {
          "documentation": "<p>Returns a list of <code>BlueprintRun</code> objects.</p>",
          "shape": "BlueprintRuns"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if not all blueprint runs have been returned.</p>",
          "shape": "GenericString"
        }
      },
      "type": "structure"
    },
    "GetCatalogImportStatusRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the catalog to migrate. Currently, this should be the Amazon Web Services account ID.</p>",
          "shape": "CatalogIdString"
        }
      },
      "type": "structure"
    },
    "GetCatalogImportStatusResponse": {
      "members": {
        "ImportStatus": {
          "documentation": "<p>The status of the specified catalog migration.</p>",
          "shape": "CatalogImportStatus"
        }
      },
      "type": "structure"
    },
    "GetClassifierRequest": {
      "members": {
        "Name": {
          "documentation": "<p>Name of the classifier to retrieve.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "GetClassifierResponse": {
      "members": {
        "Classifier": {
          "documentation": "<p>The requested classifier.</p>",
          "shape": "Classifier"
        }
      },
      "type": "structure"
    },
    "GetClassifiersRequest": {
      "members": {
        "MaxResults": {
          "documentation": "<p>The size of the list to return (optional).</p>",
          "shape": "PageSize"
        },
        "NextToken": {
          "documentation": "<p>An optional continuation token.</p>",
          "shape": "Token"
        }
      },
      "type": "structure"
    },
    "GetClassifiersResponse": {
      "members": {
        "Classifiers": {
          "documentation": "<p>The requested list of classifier objects.</p>",
          "shape": "ClassifierList"
        },
        "NextToken": {
          "documentation": "<p>A continuation token.</p>",
          "shape": "Token"
        }
      },
      "type": "structure"
    },
    "GetColumnNamesList": {
      "max": 100,
      "member": {
        "shape": "NameString"
      },
      "min": 0,
      "type": "list"
    },
    "GetColumnStatisticsForPartitionRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog where the partitions in question reside. If none is supplied, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "ColumnNames": {
          "documentation": "<p>A list of the column names.</p>",
          "shape": "GetColumnNamesList"
        },
        "DatabaseName": {
          "documentation": "<p>The name of the catalog database where the partitions reside.</p>",
          "shape": "NameString"
        },
        "PartitionValues": {
          "documentation": "<p>A list of partition values identifying the partition.</p>",
          "shape": "ValueStringList"
        },
        "TableName": {
          "documentation": "<p>The name of the partitions' table.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "PartitionValues",
        "ColumnNames"
      ],
      "type": "structure"
    },
    "GetColumnStatisticsForPartitionResponse": {
      "members": {
        "ColumnStatisticsList": {
          "documentation": "<p>List of ColumnStatistics that failed to be retrieved.</p>",
          "shape": "ColumnStatisticsList"
        },
        "Errors": {
          "documentation": "<p>Error occurred during retrieving column statistics data.</p>",
          "shape": "ColumnErrors"
        }
      },
      "type": "structure"
    },
    "GetColumnStatisticsForTableRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog where the partitions in question reside. If none is supplied, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "ColumnNames": {
          "documentation": "<p>A list of the column names.</p>",
          "shape": "GetColumnNamesList"
        },
        "DatabaseName": {
          "documentation": "<p>The name of the catalog database where the partitions reside.</p>",
          "shape": "NameString"
        },
        "TableName": {
          "documentation": "<p>The name of the partitions' table.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "ColumnNames"
      ],
      "type": "structure"
    },
    "GetColumnStatisticsForTableResponse": {
      "members": {
        "ColumnStatisticsList": {
          "documentation": "<p>List of ColumnStatistics that failed to be retrieved.</p>",
          "shape": "ColumnStatisticsList"
        },
        "Errors": {
          "documentation": "<p>List of ColumnStatistics that failed to be retrieved.</p>",
          "shape": "ColumnErrors"
        }
      },
      "type": "structure"
    },
    "GetConnectionRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog in which the connection resides. If none is provided, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "HidePassword": {
          "documentation": "<p>Allows you to retrieve the connection metadata without returning the password. For instance, the Glue console uses this flag to retrieve the connection, and does not display the password. Set this parameter when the caller might not have permission to use the KMS key to decrypt the password, but it does have permission to access the rest of the connection properties.</p>",
          "shape": "Boolean"
        },
        "Name": {
          "documentation": "<p>The name of the connection definition to retrieve.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "GetConnectionResponse": {
      "members": {
        "Connection": {
          "documentation": "<p>The requested connection definition.</p>",
          "shape": "Connection"
        }
      },
      "type": "structure"
    },
    "GetConnectionsFilter": {
      "documentation": "<p>Filters the connection definitions that are returned by the <code>GetConnections</code> API operation.</p>",
      "members": {
        "ConnectionType": {
          "documentation": "<p>The type of connections to return. Currently, SFTP is not supported.</p>",
          "shape": "ConnectionType"
        },
        "MatchCriteria": {
          "documentation": "<p>A criteria string that must match the criteria recorded in the connection definition for that connection definition to be returned.</p>",
          "shape": "MatchCriteria"
        }
      },
      "type": "structure"
    },
    "GetConnectionsRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog in which the connections reside. If none is provided, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "Filter": {
          "documentation": "<p>A filter that controls which connections are returned.</p>",
          "shape": "GetConnectionsFilter"
        },
        "HidePassword": {
          "documentation": "<p>Allows you to retrieve the connection metadata without returning the password. For instance, the Glue console uses this flag to retrieve the connection, and does not display the password. Set this parameter when the caller might not have permission to use the KMS key to decrypt the password, but it does have permission to access the rest of the connection properties.</p>",
          "shape": "Boolean"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of connections to return in one response.</p>",
          "shape": "PageSize"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if this is a continuation call.</p>",
          "shape": "Token"
        }
      },
      "type": "structure"
    },
    "GetConnectionsResponse": {
      "members": {
        "ConnectionList": {
          "documentation": "<p>A list of requested connection definitions.</p>",
          "shape": "ConnectionList"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if the list of connections returned does not include the last of the filtered connections.</p>",
          "shape": "Token"
        }
      },
      "type": "structure"
    },
    "GetCrawlerMetricsRequest": {
      "members": {
        "CrawlerNameList": {
          "documentation": "<p>A list of the names of crawlers about which to retrieve metrics.</p>",
          "shape": "CrawlerNameList"
        },
        "MaxResults": {
          "documentation": "<p>The maximum size of a list to return.</p>",
          "shape": "PageSize"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if this is a continuation call.</p>",
          "shape": "Token"
        }
      },
      "type": "structure"
    },
    "GetCrawlerMetricsResponse": {
      "members": {
        "CrawlerMetricsList": {
          "documentation": "<p>A list of metrics for the specified crawler.</p>",
          "shape": "CrawlerMetricsList"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if the returned list does not contain the last metric available.</p>",
          "shape": "Token"
        }
      },
      "type": "structure"
    },
    "GetCrawlerRequest": {
      "members": {
        "Name": {
          "documentation": "<p>The name of the crawler to retrieve metadata for.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "GetCrawlerResponse": {
      "members": {
        "Crawler": {
          "documentation": "<p>The metadata for the specified crawler.</p>",
          "shape": "Crawler"
        }
      },
      "type": "structure"
    },
    "GetCrawlersRequest": {
      "members": {
        "MaxResults": {
          "documentation": "<p>The number of crawlers to return on each call.</p>",
          "shape": "PageSize"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if this is a continuation request.</p>",
          "shape": "Token"
        }
      },
      "type": "structure"
    },
    "GetCrawlersResponse": {
      "members": {
        "Crawlers": {
          "documentation": "<p>A list of crawler metadata.</p>",
          "shape": "CrawlerList"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if the returned list has not reached the end of those defined in this customer account.</p>",
          "shape": "Token"
        }
      },
      "type": "structure"
    },
    "GetCustomEntityTypeRequest": {
      "members": {
        "Name": {
          "documentation": "<p>The name of the custom pattern that you want to retrieve.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "GetCustomEntityTypeResponse": {
      "members": {
        "ContextWords": {
          "documentation": "<p>A list of context words if specified when you created the custom pattern. If none of these context words are found within the vicinity of the regular expression the data will not be detected as sensitive data.</p>",
          "shape": "ContextWords"
        },
        "Name": {
          "documentation": "<p>The name of the custom pattern that you retrieved.</p>",
          "shape": "NameString"
        },
        "RegexString": {
          "documentation": "<p>A regular expression string that is used for detecting sensitive data in a custom pattern.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "GetDataCatalogEncryptionSettingsRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog to retrieve the security configuration for. If none is provided, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        }
      },
      "type": "structure"
    },
    "GetDataCatalogEncryptionSettingsResponse": {
      "members": {
        "DataCatalogEncryptionSettings": {
          "documentation": "<p>The requested security configuration.</p>",
          "shape": "DataCatalogEncryptionSettings"
        }
      },
      "type": "structure"
    },
    "GetDatabaseRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog in which the database resides. If none is provided, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "Name": {
          "documentation": "<p>The name of the database to retrieve. For Hive compatibility, this should be all lowercase.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "GetDatabaseResponse": {
      "members": {
        "Database": {
          "documentation": "<p>The definition of the specified database in the Data Catalog.</p>",
          "shape": "Database"
        }
      },
      "type": "structure"
    },
    "GetDatabasesRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog from which to retrieve <code>Databases</code>. If none is provided, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of databases to return in one response.</p>",
          "shape": "CatalogGetterPageSize"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if this is a continuation call.</p>",
          "shape": "Token"
        },
        "ResourceShareType": {
          "documentation": "<p>Allows you to specify that you want to list the databases shared with your account. The allowable values are <code>FOREIGN</code> or <code>ALL</code>. </p> <ul> <li> <p>If set to <code>FOREIGN</code>, will list the databases shared with your account. </p> </li> <li> <p>If set to <code>ALL</code>, will list the databases shared with your account, as well as the databases in yor local account. </p> </li> </ul>",
          "shape": "ResourceShareType"
        }
      },
      "type": "structure"
    },
    "GetDatabasesResponse": {
      "members": {
        "DatabaseList": {
          "documentation": "<p>A list of <code>Database</code> objects from the specified catalog.</p>",
          "shape": "DatabaseList"
        },
        "NextToken": {
          "documentation": "<p>A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.</p>",
          "shape": "Token"
        }
      },
      "required": [
        "DatabaseList"
      ],
      "type": "structure"
    },
    "GetDataflowGraphRequest": {
      "members": {
        "PythonScript": {
          "documentation": "<p>The Python script to transform.</p>",
          "shape": "PythonScript"
        }
      },
      "type": "structure"
    },
    "GetDataflowGraphResponse": {
      "members": {
        "DagEdges": {
          "documentation": "<p>A list of the edges in the resulting DAG.</p>",
          "shape": "DagEdges"
        },
        "DagNodes": {
          "documentation": "<p>A list of the nodes in the resulting DAG.</p>",
          "shape": "DagNodes"
        }
      },
      "type": "structure"
    },
    "GetDevEndpointRequest": {
      "members": {
        "EndpointName": {
          "documentation": "<p>Name of the <code>DevEndpoint</code> to retrieve information for.</p>",
          "shape": "GenericString"
        }
      },
      "required": [
        "EndpointName"
      ],
      "type": "structure"
    },
    "GetDevEndpointResponse": {
      "members": {
        "DevEndpoint": {
          "documentation": "<p>A <code>DevEndpoint</code> definition.</p>",
          "shape": "DevEndpoint"
        }
      },
      "type": "structure"
    },
    "GetDevEndpointsRequest": {
      "members": {
        "MaxResults": {
          "documentation": "<p>The maximum size of information to return.</p>",
          "shape": "PageSize"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if this is a continuation call.</p>",
          "shape": "GenericString"
        }
      },
      "type": "structure"
    },
    "GetDevEndpointsResponse": {
      "members": {
        "DevEndpoints": {
          "documentation": "<p>A list of <code>DevEndpoint</code> definitions.</p>",
          "shape": "DevEndpointList"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if not all <code>DevEndpoint</code> definitions have yet been returned.</p>",
          "shape": "GenericString"
        }
      },
      "type": "structure"
    },
    "GetJobBookmarkRequest": {
      "members": {
        "JobName": {
          "documentation": "<p>The name of the job in question.</p>",
          "shape": "JobName"
        },
        "RunId": {
          "documentation": "<p>The unique run identifier associated with this job run.</p>",
          "shape": "RunId"
        }
      },
      "required": [
        "JobName"
      ],
      "type": "structure"
    },
    "GetJobBookmarkResponse": {
      "members": {
        "JobBookmarkEntry": {
          "documentation": "<p>A structure that defines a point that a job can resume processing.</p>",
          "shape": "JobBookmarkEntry"
        }
      },
      "type": "structure"
    },
    "GetJobRequest": {
      "members": {
        "JobName": {
          "documentation": "<p>The name of the job definition to retrieve.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "JobName"
      ],
      "type": "structure"
    },
    "GetJobResponse": {
      "members": {
        "Job": {
          "documentation": "<p>The requested job definition.</p>",
          "shape": "Job"
        }
      },
      "type": "structure"
    },
    "GetJobRunRequest": {
      "members": {
        "JobName": {
          "documentation": "<p>Name of the job definition being run.</p>",
          "shape": "NameString"
        },
        "PredecessorsIncluded": {
          "documentation": "<p>True if a list of predecessor runs should be returned.</p>",
          "shape": "BooleanValue"
        },
        "RunId": {
          "documentation": "<p>The ID of the job run.</p>",
          "shape": "IdString"
        }
      },
      "required": [
        "JobName",
        "RunId"
      ],
      "type": "structure"
    },
    "GetJobRunResponse": {
      "members": {
        "JobRun": {
          "documentation": "<p>The requested job-run metadata.</p>",
          "shape": "JobRun"
        }
      },
      "type": "structure"
    },
    "GetJobRunsRequest": {
      "members": {
        "JobName": {
          "documentation": "<p>The name of the job definition for which to retrieve all job runs.</p>",
          "shape": "NameString"
        },
        "MaxResults": {
          "documentation": "<p>The maximum size of the response.</p>",
          "shape": "PageSize"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if this is a continuation call.</p>",
          "shape": "GenericString"
        }
      },
      "required": [
        "JobName"
      ],
      "type": "structure"
    },
    "GetJobRunsResponse": {
      "members": {
        "JobRuns": {
          "documentation": "<p>A list of job-run metadata objects.</p>",
          "shape": "JobRunList"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if not all requested job runs have been returned.</p>",
          "shape": "GenericString"
        }
      },
      "type": "structure"
    },
    "GetJobsRequest": {
      "members": {
        "MaxResults": {
          "documentation": "<p>The maximum size of the response.</p>",
          "shape": "PageSize"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if this is a continuation call.</p>",
          "shape": "GenericString"
        }
      },
      "type": "structure"
    },
    "GetJobsResponse": {
      "members": {
        "Jobs": {
          "documentation": "<p>A list of job definitions.</p>",
          "shape": "JobList"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if not all job definitions have yet been returned.</p>",
          "shape": "GenericString"
        }
      },
      "type": "structure"
    },
    "GetMLTaskRunRequest": {
      "members": {
        "TaskRunId": {
          "documentation": "<p>The unique identifier of the task run.</p>",
          "shape": "HashString"
        },
        "TransformId": {
          "documentation": "<p>The unique identifier of the machine learning transform.</p>",
          "shape": "HashString"
        }
      },
      "required": [
        "TransformId",
        "TaskRunId"
      ],
      "type": "structure"
    },
    "GetMLTaskRunResponse": {
      "members": {
        "CompletedOn": {
          "documentation": "<p>The date and time when this task run was completed.</p>",
          "shape": "Timestamp"
        },
        "ErrorString": {
          "documentation": "<p>The error strings that are associated with the task run.</p>",
          "shape": "GenericString"
        },
        "ExecutionTime": {
          "documentation": "<p>The amount of time (in seconds) that the task run consumed resources.</p>",
          "shape": "ExecutionTime"
        },
        "LastModifiedOn": {
          "documentation": "<p>The date and time when this task run was last modified.</p>",
          "shape": "Timestamp"
        },
        "LogGroupName": {
          "documentation": "<p>The names of the log groups that are associated with the task run.</p>",
          "shape": "GenericString"
        },
        "Properties": {
          "documentation": "<p>The list of properties that are associated with the task run.</p>",
          "shape": "TaskRunProperties"
        },
        "StartedOn": {
          "documentation": "<p>The date and time when this task run started.</p>",
          "shape": "Timestamp"
        },
        "Status": {
          "documentation": "<p>The status for this task run.</p>",
          "shape": "TaskStatusType"
        },
        "TaskRunId": {
          "documentation": "<p>The unique run identifier associated with this run.</p>",
          "shape": "HashString"
        },
        "TransformId": {
          "documentation": "<p>The unique identifier of the task run.</p>",
          "shape": "HashString"
        }
      },
      "type": "structure"
    },
    "GetMLTaskRunsRequest": {
      "members": {
        "Filter": {
          "documentation": "<p>The filter criteria, in the <code>TaskRunFilterCriteria</code> structure, for the task run.</p>",
          "shape": "TaskRunFilterCriteria"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of results to return. </p>",
          "shape": "PageSize"
        },
        "NextToken": {
          "documentation": "<p>A token for pagination of the results. The default is empty.</p>",
          "shape": "PaginationToken"
        },
        "Sort": {
          "documentation": "<p>The sorting criteria, in the <code>TaskRunSortCriteria</code> structure, for the task run.</p>",
          "shape": "TaskRunSortCriteria"
        },
        "TransformId": {
          "documentation": "<p>The unique identifier of the machine learning transform.</p>",
          "shape": "HashString"
        }
      },
      "required": [
        "TransformId"
      ],
      "type": "structure"
    },
    "GetMLTaskRunsResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>A pagination token, if more results are available.</p>",
          "shape": "PaginationToken"
        },
        "TaskRuns": {
          "documentation": "<p>A list of task runs that are associated with the transform.</p>",
          "shape": "TaskRunList"
        }
      },
      "type": "structure"
    },
    "GetMLTransformRequest": {
      "members": {
        "TransformId": {
          "documentation": "<p>The unique identifier of the transform, generated at the time that the transform was created.</p>",
          "shape": "HashString"
        }
      },
      "required": [
        "TransformId"
      ],
      "type": "structure"
    },
    "GetMLTransformResponse": {
      "members": {
        "CreatedOn": {
          "documentation": "<p>The date and time when the transform was created.</p>",
          "shape": "Timestamp"
        },
        "Description": {
          "documentation": "<p>A description of the transform.</p>",
          "shape": "DescriptionString"
        },
        "EvaluationMetrics": {
          "documentation": "<p>The latest evaluation metrics.</p>",
          "shape": "EvaluationMetrics"
        },
        "GlueVersion": {
          "documentation": "<p>This value determines which version of Glue this machine learning transform is compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue compatibility defaults to Glue 0.9. For more information, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions\">Glue Versions</a> in the developer guide.</p>",
          "shape": "GlueVersionString"
        },
        "InputRecordTables": {
          "documentation": "<p>A list of Glue table definitions used by the transform.</p>",
          "shape": "GlueTables"
        },
        "LabelCount": {
          "documentation": "<p>The number of labels available for this transform.</p>",
          "shape": "LabelCount"
        },
        "LastModifiedOn": {
          "documentation": "<p>The date and time when the transform was last modified.</p>",
          "shape": "Timestamp"
        },
        "MaxCapacity": {
          "documentation": "<p>The number of Glue data processing units (DPUs) that are allocated to task runs for this transform. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href=\"https://aws.amazon.com/glue/pricing/\">Glue pricing page</a>. </p> <p>When the <code>WorkerType</code> field is set to a value other than <code>Standard</code>, the <code>MaxCapacity</code> field is set automatically and becomes read-only.</p>",
          "shape": "NullableDouble"
        },
        "MaxRetries": {
          "documentation": "<p>The maximum number of times to retry a task for this transform after a task run fails.</p>",
          "shape": "NullableInteger"
        },
        "Name": {
          "documentation": "<p>The unique name given to the transform when it was created.</p>",
          "shape": "NameString"
        },
        "NumberOfWorkers": {
          "documentation": "<p>The number of workers of a defined <code>workerType</code> that are allocated when this task runs.</p>",
          "shape": "NullableInteger"
        },
        "Parameters": {
          "documentation": "<p>The configuration parameters that are specific to the algorithm used.</p>",
          "shape": "TransformParameters"
        },
        "Role": {
          "documentation": "<p>The name or Amazon Resource Name (ARN) of the IAM role with the required permissions.</p>",
          "shape": "RoleString"
        },
        "Schema": {
          "documentation": "<p>The <code>Map&lt;Column, Type&gt;</code> object that represents the schema that this transform accepts. Has an upper bound of 100 columns.</p>",
          "shape": "TransformSchema"
        },
        "Status": {
          "documentation": "<p>The last known status of the transform (to indicate whether it can be used or not). One of \"NOT_READY\", \"READY\", or \"DELETING\".</p>",
          "shape": "TransformStatusType"
        },
        "Timeout": {
          "documentation": "<p>The timeout for a task run for this transform in minutes. This is the maximum time that a task run for this transform can consume resources before it is terminated and enters <code>TIMEOUT</code> status. The default is 2,880 minutes (48 hours).</p>",
          "shape": "Timeout"
        },
        "TransformEncryption": {
          "documentation": "<p>The encryption-at-rest settings of the transform that apply to accessing user data. Machine learning transforms can access user data encrypted in Amazon S3 using KMS.</p>",
          "shape": "TransformEncryption"
        },
        "TransformId": {
          "documentation": "<p>The unique identifier of the transform, generated at the time that the transform was created.</p>",
          "shape": "HashString"
        },
        "WorkerType": {
          "documentation": "<p>The type of predefined worker that is allocated when this task runs. Accepts a value of Standard, G.1X, or G.2X.</p> <ul> <li> <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p> </li> <li> <p>For the <code>G.1X</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB disk, and 1 executor per worker.</p> </li> <li> <p>For the <code>G.2X</code> worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB disk, and 1 executor per worker.</p> </li> </ul>",
          "shape": "WorkerType"
        }
      },
      "type": "structure"
    },
    "GetMLTransformsRequest": {
      "members": {
        "Filter": {
          "documentation": "<p>The filter transformation criteria.</p>",
          "shape": "TransformFilterCriteria"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of results to return.</p>",
          "shape": "PageSize"
        },
        "NextToken": {
          "documentation": "<p>A paginated token to offset the results.</p>",
          "shape": "PaginationToken"
        },
        "Sort": {
          "documentation": "<p>The sorting criteria.</p>",
          "shape": "TransformSortCriteria"
        }
      },
      "type": "structure"
    },
    "GetMLTransformsResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>A pagination token, if more results are available.</p>",
          "shape": "PaginationToken"
        },
        "Transforms": {
          "documentation": "<p>A list of machine learning transforms.</p>",
          "shape": "TransformList"
        }
      },
      "required": [
        "Transforms"
      ],
      "type": "structure"
    },
    "GetMappingRequest": {
      "members": {
        "Location": {
          "documentation": "<p>Parameters for the mapping.</p>",
          "shape": "Location"
        },
        "Sinks": {
          "documentation": "<p>A list of target tables.</p>",
          "shape": "CatalogEntries"
        },
        "Source": {
          "documentation": "<p>Specifies the source table.</p>",
          "shape": "CatalogEntry"
        }
      },
      "required": [
        "Source"
      ],
      "type": "structure"
    },
    "GetMappingResponse": {
      "members": {
        "Mapping": {
          "documentation": "<p>A list of mappings to the specified targets.</p>",
          "shape": "MappingList"
        }
      },
      "required": [
        "Mapping"
      ],
      "type": "structure"
    },
    "GetPartitionIndexesRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The catalog ID where the table resides.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>Specifies the name of a database from which you want to retrieve partition indexes.</p>",
          "shape": "NameString"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, included if this is a continuation call.</p>",
          "shape": "Token"
        },
        "TableName": {
          "documentation": "<p>Specifies the name of a table for which you want to retrieve the partition indexes.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "DatabaseName",
        "TableName"
      ],
      "type": "structure"
    },
    "GetPartitionIndexesResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>A continuation token, present if the current list segment is not the last.</p>",
          "shape": "Token"
        },
        "PartitionIndexDescriptorList": {
          "documentation": "<p>A list of index descriptors.</p>",
          "shape": "PartitionIndexDescriptorList"
        }
      },
      "type": "structure"
    },
    "GetPartitionRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog where the partition in question resides. If none is provided, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>The name of the catalog database where the partition resides.</p>",
          "shape": "NameString"
        },
        "PartitionValues": {
          "documentation": "<p>The values that define the partition.</p>",
          "shape": "ValueStringList"
        },
        "TableName": {
          "documentation": "<p>The name of the partition's table.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "PartitionValues"
      ],
      "type": "structure"
    },
    "GetPartitionResponse": {
      "members": {
        "Partition": {
          "documentation": "<p>The requested information, in the form of a <code>Partition</code> object.</p>",
          "shape": "Partition"
        }
      },
      "type": "structure"
    },
    "GetPartitionsRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog where the partitions in question reside. If none is provided, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>The name of the catalog database where the partitions reside.</p>",
          "shape": "NameString"
        },
        "ExcludeColumnSchema": {
          "documentation": "<p>When true, specifies not returning the partition column schema. Useful when you are interested only in other partition attributes such as partition values or location. This approach avoids the problem of a large response by not returning duplicate data.</p>",
          "shape": "BooleanNullable"
        },
        "Expression": {
          "documentation": "<p>An expression that filters the partitions to be returned.</p> <p>The expression uses SQL syntax similar to the SQL <code>WHERE</code> filter clause. The SQL statement parser <a href=\"http://jsqlparser.sourceforge.net/home.php\">JSQLParser</a> parses the expression. </p> <p> <i>Operators</i>: The following are the operators that you can use in the <code>Expression</code> API call:</p> <dl> <dt>=</dt> <dd> <p>Checks whether the values of the two operands are equal; if yes, then the condition becomes true.</p> <p>Example: Assume 'variable a' holds 10 and 'variable b' holds 20. </p> <p>(a = b) is not true.</p> </dd> <dt>&lt; &gt;</dt> <dd> <p>Checks whether the values of two operands are equal; if the values are not equal, then the condition becomes true.</p> <p>Example: (a &lt; &gt; b) is true.</p> </dd> <dt>&gt;</dt> <dd> <p>Checks whether the value of the left operand is greater than the value of the right operand; if yes, then the condition becomes true.</p> <p>Example: (a &gt; b) is not true.</p> </dd> <dt>&lt;</dt> <dd> <p>Checks whether the value of the left operand is less than the value of the right operand; if yes, then the condition becomes true.</p> <p>Example: (a &lt; b) is true.</p> </dd> <dt>&gt;=</dt> <dd> <p>Checks whether the value of the left operand is greater than or equal to the value of the right operand; if yes, then the condition becomes true.</p> <p>Example: (a &gt;= b) is not true.</p> </dd> <dt>&lt;=</dt> <dd> <p>Checks whether the value of the left operand is less than or equal to the value of the right operand; if yes, then the condition becomes true.</p> <p>Example: (a &lt;= b) is true.</p> </dd> <dt>AND, OR, IN, BETWEEN, LIKE, NOT, IS NULL</dt> <dd> <p>Logical operators.</p> </dd> </dl> <p> <i>Supported Partition Key Types</i>: The following are the supported partition keys.</p> <ul> <li> <p> <code>string</code> </p> </li> <li> <p> <code>date</code> </p> </li> <li> <p> <code>timestamp</code> </p> </li> <li> <p> <code>int</code> </p> </li> <li> <p> <code>bigint</code> </p> </li> <li> <p> <code>long</code> </p> </li> <li> <p> <code>tinyint</code> </p> </li> <li> <p> <code>smallint</code> </p> </li> <li> <p> <code>decimal</code> </p> </li> </ul> <p>If an type is encountered that is not valid, an exception is thrown. </p> <p>The following list shows the valid operators on each type. When you define a crawler, the <code>partitionKey</code> type is created as a <code>STRING</code>, to be compatible with the catalog partitions. </p> <p> <i>Sample API Call</i>: </p>",
          "shape": "PredicateString"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of partitions to return in a single response.</p>",
          "shape": "PageSize"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if this is not the first call to retrieve these partitions.</p>",
          "shape": "Token"
        },
        "QueryAsOfTime": {
          "documentation": "<p>The time as of when to read the partition contents. If not set, the most recent transaction commit time will be used. Cannot be specified along with <code>TransactionId</code>.</p>",
          "shape": "Timestamp"
        },
        "Segment": {
          "documentation": "<p>The segment of the table's partitions to scan in this request.</p>",
          "shape": "Segment"
        },
        "TableName": {
          "documentation": "<p>The name of the partitions' table.</p>",
          "shape": "NameString"
        },
        "TransactionId": {
          "documentation": "<p>The transaction ID at which to read the partition contents.</p>",
          "shape": "TransactionIdString"
        }
      },
      "required": [
        "DatabaseName",
        "TableName"
      ],
      "type": "structure"
    },
    "GetPartitionsResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>A continuation token, if the returned list of partitions does not include the last one.</p>",
          "shape": "Token"
        },
        "Partitions": {
          "documentation": "<p>A list of requested partitions.</p>",
          "shape": "PartitionList"
        }
      },
      "type": "structure"
    },
    "GetPlanRequest": {
      "members": {
        "AdditionalPlanOptionsMap": {
          "documentation": "<p>A map to hold additional optional key-value parameters.</p> <p>Currently, these key-value pairs are supported:</p> <ul> <li> <p> <code>inferSchema</code>\u00a0 \u2014 \u00a0Specifies whether to set <code>inferSchema</code> to true or false for the default script generated by an Glue job. For example, to set <code>inferSchema</code> to true, pass the following key value pair:</p> <p> <code>--additional-plan-options-map '{\"inferSchema\":\"true\"}'</code> </p> </li> </ul>",
          "shape": "AdditionalPlanOptionsMap"
        },
        "Language": {
          "documentation": "<p>The programming language of the code to perform the mapping.</p>",
          "shape": "Language"
        },
        "Location": {
          "documentation": "<p>The parameters for the mapping.</p>",
          "shape": "Location"
        },
        "Mapping": {
          "documentation": "<p>The list of mappings from a source table to target tables.</p>",
          "shape": "MappingList"
        },
        "Sinks": {
          "documentation": "<p>The target tables.</p>",
          "shape": "CatalogEntries"
        },
        "Source": {
          "documentation": "<p>The source table.</p>",
          "shape": "CatalogEntry"
        }
      },
      "required": [
        "Mapping",
        "Source"
      ],
      "type": "structure"
    },
    "GetPlanResponse": {
      "members": {
        "PythonScript": {
          "documentation": "<p>A Python script to perform the mapping.</p>",
          "shape": "PythonScript"
        },
        "ScalaCode": {
          "documentation": "<p>The Scala code to perform the mapping.</p>",
          "shape": "ScalaCode"
        }
      },
      "type": "structure"
    },
    "GetRegistryInput": {
      "members": {
        "RegistryId": {
          "documentation": "<p>This is a wrapper structure that may contain the registry name and Amazon Resource Name (ARN).</p>",
          "shape": "RegistryId"
        }
      },
      "required": [
        "RegistryId"
      ],
      "type": "structure"
    },
    "GetRegistryResponse": {
      "members": {
        "CreatedTime": {
          "documentation": "<p>The date and time the registry was created.</p>",
          "shape": "CreatedTimestamp"
        },
        "Description": {
          "documentation": "<p>A description of the registry.</p>",
          "shape": "DescriptionString"
        },
        "RegistryArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the registry.</p>",
          "shape": "GlueResourceArn"
        },
        "RegistryName": {
          "documentation": "<p>The name of the registry.</p>",
          "shape": "SchemaRegistryNameString"
        },
        "Status": {
          "documentation": "<p>The status of the registry.</p>",
          "shape": "RegistryStatus"
        },
        "UpdatedTime": {
          "documentation": "<p>The date and time the registry was updated.</p>",
          "shape": "UpdatedTimestamp"
        }
      },
      "type": "structure"
    },
    "GetResourcePoliciesRequest": {
      "members": {
        "MaxResults": {
          "documentation": "<p>The maximum size of a list to return.</p>",
          "shape": "PageSize"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if this is a continuation request.</p>",
          "shape": "Token"
        }
      },
      "type": "structure"
    },
    "GetResourcePoliciesResponse": {
      "members": {
        "GetResourcePoliciesResponseList": {
          "documentation": "<p>A list of the individual resource policies and the account-level resource policy.</p>",
          "shape": "GetResourcePoliciesResponseList"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if the returned list does not contain the last resource policy available.</p>",
          "shape": "Token"
        }
      },
      "type": "structure"
    },
    "GetResourcePoliciesResponseList": {
      "member": {
        "shape": "GluePolicy"
      },
      "type": "list"
    },
    "GetResourcePolicyRequest": {
      "members": {
        "ResourceArn": {
          "documentation": "<p>The ARN of the Glue resource for which to retrieve the resource policy. If not supplied, the Data Catalog resource policy is returned. Use <code>GetResourcePolicies</code> to view all existing resource policies. For more information see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/glue-specifying-resource-arns.html\">Specifying Glue Resource ARNs</a>. </p>",
          "shape": "GlueResourceArn"
        }
      },
      "type": "structure"
    },
    "GetResourcePolicyResponse": {
      "members": {
        "CreateTime": {
          "documentation": "<p>The date and time at which the policy was created.</p>",
          "shape": "Timestamp"
        },
        "PolicyHash": {
          "documentation": "<p>Contains the hash value associated with this policy.</p>",
          "shape": "HashString"
        },
        "PolicyInJson": {
          "documentation": "<p>Contains the requested policy document, in JSON format.</p>",
          "shape": "PolicyJsonString"
        },
        "UpdateTime": {
          "documentation": "<p>The date and time at which the policy was last updated.</p>",
          "shape": "Timestamp"
        }
      },
      "type": "structure"
    },
    "GetSchemaByDefinitionInput": {
      "members": {
        "SchemaDefinition": {
          "documentation": "<p>The definition of the schema for which schema details are required.</p>",
          "shape": "SchemaDefinitionString"
        },
        "SchemaId": {
          "documentation": "<p>This is a wrapper structure to contain schema identity fields. The structure contains:</p> <ul> <li> <p>SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided.</p> </li> <li> <p>SchemaId$SchemaName: The name of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided.</p> </li> </ul>",
          "shape": "SchemaId"
        }
      },
      "required": [
        "SchemaId",
        "SchemaDefinition"
      ],
      "type": "structure"
    },
    "GetSchemaByDefinitionResponse": {
      "members": {
        "CreatedTime": {
          "documentation": "<p>The date and time the schema was created.</p>",
          "shape": "CreatedTimestamp"
        },
        "DataFormat": {
          "documentation": "<p>The data format of the schema definition. Currently <code>AVRO</code>, <code>JSON</code> and <code>PROTOBUF</code> are supported.</p>",
          "shape": "DataFormat"
        },
        "SchemaArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the schema.</p>",
          "shape": "GlueResourceArn"
        },
        "SchemaVersionId": {
          "documentation": "<p>The schema ID of the schema version.</p>",
          "shape": "SchemaVersionIdString"
        },
        "Status": {
          "documentation": "<p>The status of the schema version.</p>",
          "shape": "SchemaVersionStatus"
        }
      },
      "type": "structure"
    },
    "GetSchemaInput": {
      "members": {
        "SchemaId": {
          "documentation": "<p>This is a wrapper structure to contain schema identity fields. The structure contains:</p> <ul> <li> <p>SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. Either <code>SchemaArn</code> or <code>SchemaName</code> and <code>RegistryName</code> has to be provided.</p> </li> <li> <p>SchemaId$SchemaName: The name of the schema. Either <code>SchemaArn</code> or <code>SchemaName</code> and <code>RegistryName</code> has to be provided.</p> </li> </ul>",
          "shape": "SchemaId"
        }
      },
      "required": [
        "SchemaId"
      ],
      "type": "structure"
    },
    "GetSchemaResponse": {
      "members": {
        "Compatibility": {
          "documentation": "<p>The compatibility mode of the schema.</p>",
          "shape": "Compatibility"
        },
        "CreatedTime": {
          "documentation": "<p>The date and time the schema was created.</p>",
          "shape": "CreatedTimestamp"
        },
        "DataFormat": {
          "documentation": "<p>The data format of the schema definition. Currently <code>AVRO</code>, <code>JSON</code> and <code>PROTOBUF</code> are supported.</p>",
          "shape": "DataFormat"
        },
        "Description": {
          "documentation": "<p>A description of schema if specified when created</p>",
          "shape": "DescriptionString"
        },
        "LatestSchemaVersion": {
          "documentation": "<p>The latest version of the schema associated with the returned schema definition.</p>",
          "shape": "VersionLongNumber"
        },
        "NextSchemaVersion": {
          "documentation": "<p>The next version of the schema associated with the returned schema definition.</p>",
          "shape": "VersionLongNumber"
        },
        "RegistryArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the registry.</p>",
          "shape": "GlueResourceArn"
        },
        "RegistryName": {
          "documentation": "<p>The name of the registry.</p>",
          "shape": "SchemaRegistryNameString"
        },
        "SchemaArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the schema.</p>",
          "shape": "GlueResourceArn"
        },
        "SchemaCheckpoint": {
          "documentation": "<p>The version number of the checkpoint (the last time the compatibility mode was changed).</p>",
          "shape": "SchemaCheckpointNumber"
        },
        "SchemaName": {
          "documentation": "<p>The name of the schema.</p>",
          "shape": "SchemaRegistryNameString"
        },
        "SchemaStatus": {
          "documentation": "<p>The status of the schema.</p>",
          "shape": "SchemaStatus"
        },
        "UpdatedTime": {
          "documentation": "<p>The date and time the schema was updated.</p>",
          "shape": "UpdatedTimestamp"
        }
      },
      "type": "structure"
    },
    "GetSchemaVersionInput": {
      "members": {
        "SchemaId": {
          "documentation": "<p>This is a wrapper structure to contain schema identity fields. The structure contains:</p> <ul> <li> <p>SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. Either <code>SchemaArn</code> or <code>SchemaName</code> and <code>RegistryName</code> has to be provided.</p> </li> <li> <p>SchemaId$SchemaName: The name of the schema. Either <code>SchemaArn</code> or <code>SchemaName</code> and <code>RegistryName</code> has to be provided.</p> </li> </ul>",
          "shape": "SchemaId"
        },
        "SchemaVersionId": {
          "documentation": "<p>The <code>SchemaVersionId</code> of the schema version. This field is required for fetching by schema ID. Either this or the <code>SchemaId</code> wrapper has to be provided.</p>",
          "shape": "SchemaVersionIdString"
        },
        "SchemaVersionNumber": {
          "documentation": "<p>The version number of the schema.</p>",
          "shape": "SchemaVersionNumber"
        }
      },
      "type": "structure"
    },
    "GetSchemaVersionResponse": {
      "members": {
        "CreatedTime": {
          "documentation": "<p>The date and time the schema version was created.</p>",
          "shape": "CreatedTimestamp"
        },
        "DataFormat": {
          "documentation": "<p>The data format of the schema definition. Currently <code>AVRO</code>, <code>JSON</code> and <code>PROTOBUF</code> are supported.</p>",
          "shape": "DataFormat"
        },
        "SchemaArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the schema.</p>",
          "shape": "GlueResourceArn"
        },
        "SchemaDefinition": {
          "documentation": "<p>The schema definition for the schema ID.</p>",
          "shape": "SchemaDefinitionString"
        },
        "SchemaVersionId": {
          "documentation": "<p>The <code>SchemaVersionId</code> of the schema version.</p>",
          "shape": "SchemaVersionIdString"
        },
        "Status": {
          "documentation": "<p>The status of the schema version. </p>",
          "shape": "SchemaVersionStatus"
        },
        "VersionNumber": {
          "documentation": "<p>The version number of the schema.</p>",
          "shape": "VersionLongNumber"
        }
      },
      "type": "structure"
    },
    "GetSchemaVersionsDiffInput": {
      "members": {
        "FirstSchemaVersionNumber": {
          "documentation": "<p>The first of the two schema versions to be compared.</p>",
          "shape": "SchemaVersionNumber"
        },
        "SchemaDiffType": {
          "documentation": "<p>Refers to <code>SYNTAX_DIFF</code>, which is the currently supported diff type.</p>",
          "shape": "SchemaDiffType"
        },
        "SchemaId": {
          "documentation": "<p>This is a wrapper structure to contain schema identity fields. The structure contains:</p> <ul> <li> <p>SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided.</p> </li> <li> <p>SchemaId$SchemaName: The name of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided.</p> </li> </ul>",
          "shape": "SchemaId"
        },
        "SecondSchemaVersionNumber": {
          "documentation": "<p>The second of the two schema versions to be compared.</p>",
          "shape": "SchemaVersionNumber"
        }
      },
      "required": [
        "SchemaId",
        "FirstSchemaVersionNumber",
        "SecondSchemaVersionNumber",
        "SchemaDiffType"
      ],
      "type": "structure"
    },
    "GetSchemaVersionsDiffResponse": {
      "members": {
        "Diff": {
          "documentation": "<p>The difference between schemas as a string in JsonPatch format.</p>",
          "shape": "SchemaDefinitionDiff"
        }
      },
      "type": "structure"
    },
    "GetSecurityConfigurationRequest": {
      "members": {
        "Name": {
          "documentation": "<p>The name of the security configuration to retrieve.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "GetSecurityConfigurationResponse": {
      "members": {
        "SecurityConfiguration": {
          "documentation": "<p>The requested security configuration.</p>",
          "shape": "SecurityConfiguration"
        }
      },
      "type": "structure"
    },
    "GetSecurityConfigurationsRequest": {
      "members": {
        "MaxResults": {
          "documentation": "<p>The maximum number of results to return.</p>",
          "shape": "PageSize"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if this is a continuation call.</p>",
          "shape": "GenericString"
        }
      },
      "type": "structure"
    },
    "GetSecurityConfigurationsResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>A continuation token, if there are more security configurations to return.</p>",
          "shape": "GenericString"
        },
        "SecurityConfigurations": {
          "documentation": "<p>A list of security configurations.</p>",
          "shape": "SecurityConfigurationList"
        }
      },
      "type": "structure"
    },
    "GetSessionRequest": {
      "members": {
        "Id": {
          "documentation": "<p>The ID of the session. </p>",
          "shape": "NameString"
        },
        "RequestOrigin": {
          "documentation": "<p>The origin of the request. </p>",
          "shape": "OrchestrationNameString"
        }
      },
      "required": [
        "Id"
      ],
      "type": "structure"
    },
    "GetSessionResponse": {
      "members": {
        "Session": {
          "documentation": "<p>The session object is returned in the response.</p>",
          "shape": "Session"
        }
      },
      "type": "structure"
    },
    "GetStatementRequest": {
      "members": {
        "Id": {
          "documentation": "<p>The Id of the statement.</p>",
          "shape": "IntegerValue"
        },
        "RequestOrigin": {
          "documentation": "<p>The origin of the request.</p>",
          "shape": "OrchestrationNameString"
        },
        "SessionId": {
          "documentation": "<p>The Session ID of the statement.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "SessionId",
        "Id"
      ],
      "type": "structure"
    },
    "GetStatementResponse": {
      "members": {
        "Statement": {
          "documentation": "<p>Returns the statement.</p>",
          "shape": "Statement"
        }
      },
      "type": "structure"
    },
    "GetTableRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog where the table resides. If none is provided, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>The name of the database in the catalog in which the table resides. For Hive compatibility, this name is entirely lowercase.</p>",
          "shape": "NameString"
        },
        "Name": {
          "documentation": "<p>The name of the table for which to retrieve the definition. For Hive compatibility, this name is entirely lowercase.</p>",
          "shape": "NameString"
        },
        "QueryAsOfTime": {
          "documentation": "<p>The time as of when to read the table contents. If not set, the most recent transaction commit time will be used. Cannot be specified along with <code>TransactionId</code>.</p>",
          "shape": "Timestamp"
        },
        "TransactionId": {
          "documentation": "<p>The transaction ID at which to read the table contents. </p>",
          "shape": "TransactionIdString"
        }
      },
      "required": [
        "DatabaseName",
        "Name"
      ],
      "type": "structure"
    },
    "GetTableResponse": {
      "members": {
        "Table": {
          "documentation": "<p>The <code>Table</code> object that defines the specified table.</p>",
          "shape": "Table"
        }
      },
      "type": "structure"
    },
    "GetTableVersionRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog where the tables reside. If none is provided, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>The database in the catalog in which the table resides. For Hive compatibility, this name is entirely lowercase.</p>",
          "shape": "NameString"
        },
        "TableName": {
          "documentation": "<p>The name of the table. For Hive compatibility, this name is entirely lowercase.</p>",
          "shape": "NameString"
        },
        "VersionId": {
          "documentation": "<p>The ID value of the table version to be retrieved. A <code>VersionID</code> is a string representation of an integer. Each version is incremented by 1. </p>",
          "shape": "VersionString"
        }
      },
      "required": [
        "DatabaseName",
        "TableName"
      ],
      "type": "structure"
    },
    "GetTableVersionResponse": {
      "members": {
        "TableVersion": {
          "documentation": "<p>The requested table version.</p>",
          "shape": "TableVersion"
        }
      },
      "type": "structure"
    },
    "GetTableVersionsList": {
      "member": {
        "shape": "TableVersion"
      },
      "type": "list"
    },
    "GetTableVersionsRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog where the tables reside. If none is provided, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>The database in the catalog in which the table resides. For Hive compatibility, this name is entirely lowercase.</p>",
          "shape": "NameString"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of table versions to return in one response.</p>",
          "shape": "CatalogGetterPageSize"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if this is not the first call.</p>",
          "shape": "Token"
        },
        "TableName": {
          "documentation": "<p>The name of the table. For Hive compatibility, this name is entirely lowercase.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "DatabaseName",
        "TableName"
      ],
      "type": "structure"
    },
    "GetTableVersionsResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>A continuation token, if the list of available versions does not include the last one.</p>",
          "shape": "Token"
        },
        "TableVersions": {
          "documentation": "<p>A list of strings identifying available versions of the specified table.</p>",
          "shape": "GetTableVersionsList"
        }
      },
      "type": "structure"
    },
    "GetTablesRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog where the tables reside. If none is provided, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>The database in the catalog whose tables to list. For Hive compatibility, this name is entirely lowercase.</p>",
          "shape": "NameString"
        },
        "Expression": {
          "documentation": "<p>A regular expression pattern. If present, only those tables whose names match the pattern are returned.</p>",
          "shape": "FilterString"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of tables to return in a single response.</p>",
          "shape": "CatalogGetterPageSize"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, included if this is a continuation call.</p>",
          "shape": "Token"
        },
        "QueryAsOfTime": {
          "documentation": "<p>The time as of when to read the table contents. If not set, the most recent transaction commit time will be used. Cannot be specified along with <code>TransactionId</code>.</p>",
          "shape": "Timestamp"
        },
        "TransactionId": {
          "documentation": "<p>The transaction ID at which to read the table contents.</p>",
          "shape": "TransactionIdString"
        }
      },
      "required": [
        "DatabaseName"
      ],
      "type": "structure"
    },
    "GetTablesResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>A continuation token, present if the current list segment is not the last.</p>",
          "shape": "Token"
        },
        "TableList": {
          "documentation": "<p>A list of the requested <code>Table</code> objects.</p>",
          "shape": "TableList"
        }
      },
      "type": "structure"
    },
    "GetTagsRequest": {
      "members": {
        "ResourceArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the resource for which to retrieve tags.</p>",
          "shape": "GlueResourceArn"
        }
      },
      "required": [
        "ResourceArn"
      ],
      "type": "structure"
    },
    "GetTagsResponse": {
      "members": {
        "Tags": {
          "documentation": "<p>The requested tags.</p>",
          "shape": "TagsMap"
        }
      },
      "type": "structure"
    },
    "GetTriggerRequest": {
      "members": {
        "Name": {
          "documentation": "<p>The name of the trigger to retrieve.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "GetTriggerResponse": {
      "members": {
        "Trigger": {
          "documentation": "<p>The requested trigger definition.</p>",
          "shape": "Trigger"
        }
      },
      "type": "structure"
    },
    "GetTriggersRequest": {
      "members": {
        "DependentJobName": {
          "documentation": "<p>The name of the job to retrieve triggers for. The trigger that can start this job is returned, and if there is no such trigger, all triggers are returned.</p>",
          "shape": "NameString"
        },
        "MaxResults": {
          "documentation": "<p>The maximum size of the response.</p>",
          "shape": "PageSize"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if this is a continuation call.</p>",
          "shape": "GenericString"
        }
      },
      "type": "structure"
    },
    "GetTriggersResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>A continuation token, if not all the requested triggers have yet been returned.</p>",
          "shape": "GenericString"
        },
        "Triggers": {
          "documentation": "<p>A list of triggers for the specified job.</p>",
          "shape": "TriggerList"
        }
      },
      "type": "structure"
    },
    "GetUnfilteredPartitionMetadataRequest": {
      "members": {
        "AuditContext": {
          "shape": "AuditContext"
        },
        "CatalogId": {
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "shape": "NameString"
        },
        "PartitionValues": {
          "shape": "ValueStringList"
        },
        "SupportedPermissionTypes": {
          "shape": "PermissionTypeList"
        },
        "TableName": {
          "shape": "NameString"
        }
      },
      "required": [
        "CatalogId",
        "DatabaseName",
        "TableName",
        "PartitionValues",
        "SupportedPermissionTypes"
      ],
      "type": "structure"
    },
    "GetUnfilteredPartitionMetadataResponse": {
      "members": {
        "AuthorizedColumns": {
          "shape": "NameStringList"
        },
        "IsRegisteredWithLakeFormation": {
          "shape": "Boolean"
        },
        "Partition": {
          "shape": "Partition"
        }
      },
      "type": "structure"
    },
    "GetUnfilteredPartitionsMetadataRequest": {
      "members": {
        "AuditContext": {
          "shape": "AuditContext"
        },
        "CatalogId": {
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "shape": "NameString"
        },
        "Expression": {
          "shape": "PredicateString"
        },
        "MaxResults": {
          "shape": "PageSize"
        },
        "NextToken": {
          "shape": "Token"
        },
        "Segment": {
          "shape": "Segment"
        },
        "SupportedPermissionTypes": {
          "shape": "PermissionTypeList"
        },
        "TableName": {
          "shape": "NameString"
        }
      },
      "required": [
        "CatalogId",
        "DatabaseName",
        "TableName",
        "SupportedPermissionTypes"
      ],
      "type": "structure"
    },
    "GetUnfilteredPartitionsMetadataResponse": {
      "members": {
        "NextToken": {
          "shape": "Token"
        },
        "UnfilteredPartitions": {
          "shape": "UnfilteredPartitionList"
        }
      },
      "type": "structure"
    },
    "GetUnfilteredTableMetadataRequest": {
      "members": {
        "AuditContext": {
          "shape": "AuditContext"
        },
        "CatalogId": {
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "shape": "NameString"
        },
        "Name": {
          "shape": "NameString"
        },
        "SupportedPermissionTypes": {
          "shape": "PermissionTypeList"
        }
      },
      "required": [
        "CatalogId",
        "DatabaseName",
        "Name",
        "SupportedPermissionTypes"
      ],
      "type": "structure"
    },
    "GetUnfilteredTableMetadataResponse": {
      "members": {
        "AuthorizedColumns": {
          "shape": "NameStringList"
        },
        "CellFilters": {
          "shape": "ColumnRowFilterList"
        },
        "IsRegisteredWithLakeFormation": {
          "shape": "Boolean"
        },
        "Table": {
          "shape": "Table"
        }
      },
      "type": "structure"
    },
    "GetUserDefinedFunctionRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog where the function to be retrieved is located. If none is provided, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>The name of the catalog database where the function is located.</p>",
          "shape": "NameString"
        },
        "FunctionName": {
          "documentation": "<p>The name of the function.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "DatabaseName",
        "FunctionName"
      ],
      "type": "structure"
    },
    "GetUserDefinedFunctionResponse": {
      "members": {
        "UserDefinedFunction": {
          "documentation": "<p>The requested function definition.</p>",
          "shape": "UserDefinedFunction"
        }
      },
      "type": "structure"
    },
    "GetUserDefinedFunctionsRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog where the functions to be retrieved are located. If none is provided, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>The name of the catalog database where the functions are located. If none is provided, functions from all the databases across the catalog will be returned.</p>",
          "shape": "NameString"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of functions to return in one response.</p>",
          "shape": "CatalogGetterPageSize"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if this is a continuation call.</p>",
          "shape": "Token"
        },
        "Pattern": {
          "documentation": "<p>An optional function-name pattern string that filters the function definitions returned.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "Pattern"
      ],
      "type": "structure"
    },
    "GetUserDefinedFunctionsResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>A continuation token, if the list of functions returned does not include the last requested function.</p>",
          "shape": "Token"
        },
        "UserDefinedFunctions": {
          "documentation": "<p>A list of requested function definitions.</p>",
          "shape": "UserDefinedFunctionList"
        }
      },
      "type": "structure"
    },
    "GetWorkflowRequest": {
      "members": {
        "IncludeGraph": {
          "documentation": "<p>Specifies whether to include a graph when returning the workflow resource metadata.</p>",
          "shape": "NullableBoolean"
        },
        "Name": {
          "documentation": "<p>The name of the workflow to retrieve.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "GetWorkflowResponse": {
      "members": {
        "Workflow": {
          "documentation": "<p>The resource metadata for the workflow.</p>",
          "shape": "Workflow"
        }
      },
      "type": "structure"
    },
    "GetWorkflowRunPropertiesRequest": {
      "members": {
        "Name": {
          "documentation": "<p>Name of the workflow which was run.</p>",
          "shape": "NameString"
        },
        "RunId": {
          "documentation": "<p>The ID of the workflow run whose run properties should be returned.</p>",
          "shape": "IdString"
        }
      },
      "required": [
        "Name",
        "RunId"
      ],
      "type": "structure"
    },
    "GetWorkflowRunPropertiesResponse": {
      "members": {
        "RunProperties": {
          "documentation": "<p>The workflow run properties which were set during the specified run.</p>",
          "shape": "WorkflowRunProperties"
        }
      },
      "type": "structure"
    },
    "GetWorkflowRunRequest": {
      "members": {
        "IncludeGraph": {
          "documentation": "<p>Specifies whether to include the workflow graph in response or not.</p>",
          "shape": "NullableBoolean"
        },
        "Name": {
          "documentation": "<p>Name of the workflow being run.</p>",
          "shape": "NameString"
        },
        "RunId": {
          "documentation": "<p>The ID of the workflow run.</p>",
          "shape": "IdString"
        }
      },
      "required": [
        "Name",
        "RunId"
      ],
      "type": "structure"
    },
    "GetWorkflowRunResponse": {
      "members": {
        "Run": {
          "documentation": "<p>The requested workflow run metadata.</p>",
          "shape": "WorkflowRun"
        }
      },
      "type": "structure"
    },
    "GetWorkflowRunsRequest": {
      "members": {
        "IncludeGraph": {
          "documentation": "<p>Specifies whether to include the workflow graph in response or not.</p>",
          "shape": "NullableBoolean"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of workflow runs to be included in the response.</p>",
          "shape": "PageSize"
        },
        "Name": {
          "documentation": "<p>Name of the workflow whose metadata of runs should be returned.</p>",
          "shape": "NameString"
        },
        "NextToken": {
          "documentation": "<p>The maximum size of the response.</p>",
          "shape": "GenericString"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "GetWorkflowRunsResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>A continuation token, if not all requested workflow runs have been returned.</p>",
          "shape": "GenericString"
        },
        "Runs": {
          "documentation": "<p>A list of workflow run metadata objects.</p>",
          "shape": "WorkflowRuns"
        }
      },
      "type": "structure"
    },
    "GlueEncryptionException": {
      "documentation": "<p>An encryption operation failed.</p>",
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>The message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "GluePolicy": {
      "documentation": "<p>A structure for returning a resource policy.</p>",
      "members": {
        "CreateTime": {
          "documentation": "<p>The date and time at which the policy was created.</p>",
          "shape": "Timestamp"
        },
        "PolicyHash": {
          "documentation": "<p>Contains the hash value associated with this policy.</p>",
          "shape": "HashString"
        },
        "PolicyInJson": {
          "documentation": "<p>Contains the requested policy document, in JSON format.</p>",
          "shape": "PolicyJsonString"
        },
        "UpdateTime": {
          "documentation": "<p>The date and time at which the policy was last updated.</p>",
          "shape": "Timestamp"
        }
      },
      "type": "structure"
    },
    "GlueRecordType": {
      "enum": [
        "DATE",
        "STRING",
        "TIMESTAMP",
        "INT",
        "FLOAT",
        "LONG",
        "BIGDECIMAL",
        "BYTE",
        "SHORT",
        "DOUBLE"
      ],
      "type": "string"
    },
    "GlueResourceArn": {
      "max": 10240,
      "min": 1,
      "pattern": "arn:(aws|aws-us-gov|aws-cn):glue:.*",
      "type": "string"
    },
    "GlueSchema": {
      "documentation": "<p>Specifies a user-defined schema when a schema cannot be determined by AWS Glue.</p>",
      "members": {
        "Columns": {
          "documentation": "<p>Specifies the column definitions that make up a Glue schema.</p>",
          "shape": "GlueStudioSchemaColumnList"
        }
      },
      "type": "structure"
    },
    "GlueSchemas": {
      "member": {
        "shape": "GlueSchema"
      },
      "type": "list"
    },
    "GlueStudioColumnNameString": {
      "max": 1024,
      "min": 0,
      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
      "type": "string"
    },
    "GlueStudioPathList": {
      "member": {
        "shape": "EnclosedInStringProperties"
      },
      "type": "list"
    },
    "GlueStudioSchemaColumn": {
      "documentation": "<p>Specifies a single column in a Glue schema definition.</p>",
      "members": {
        "Name": {
          "documentation": "<p>The name of the column in the Glue Studio schema.</p>",
          "shape": "GlueStudioColumnNameString"
        },
        "Type": {
          "documentation": "<p>The hive type for this column in the Glue Studio schema.</p>",
          "shape": "ColumnTypeString"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "GlueStudioSchemaColumnList": {
      "member": {
        "shape": "GlueStudioSchemaColumn"
      },
      "type": "list"
    },
    "GlueTable": {
      "documentation": "<p>The database and table in the Glue Data Catalog that is used for input or output data.</p>",
      "members": {
        "CatalogId": {
          "documentation": "<p>A unique identifier for the Glue Data Catalog.</p>",
          "shape": "NameString"
        },
        "ConnectionName": {
          "documentation": "<p>The name of the connection to the Glue Data Catalog.</p>",
          "shape": "NameString"
        },
        "DatabaseName": {
          "documentation": "<p>A database name in the Glue Data Catalog.</p>",
          "shape": "NameString"
        },
        "TableName": {
          "documentation": "<p>A table name in the Glue Data Catalog.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "DatabaseName",
        "TableName"
      ],
      "type": "structure"
    },
    "GlueTables": {
      "max": 10,
      "member": {
        "shape": "GlueTable"
      },
      "min": 0,
      "type": "list"
    },
    "GlueVersionString": {
      "max": 255,
      "min": 1,
      "pattern": "^\\w+\\.\\w+$",
      "type": "string"
    },
    "GovernedCatalogSource": {
      "documentation": "<p>Specifies the data store in the governed Glue Data Catalog.</p>",
      "members": {
        "AdditionalOptions": {
          "documentation": "<p>Specifies additional connection options.</p>",
          "shape": "S3SourceAdditionalOptions"
        },
        "Database": {
          "documentation": "<p>The database to read from.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "Name": {
          "documentation": "<p>The name of the data store.</p>",
          "shape": "NodeName"
        },
        "PartitionPredicate": {
          "documentation": "<p>Partitions satisfying this predicate are deleted. Files within the retention period in these partitions are not deleted. Set to <code>\"\"</code> \u2013 empty by default.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "Table": {
          "documentation": "<p>The database table to read from.</p>",
          "shape": "EnclosedInStringProperty"
        }
      },
      "required": [
        "Name",
        "Database",
        "Table"
      ],
      "type": "structure"
    },
    "GovernedCatalogTarget": {
      "documentation": "<p>Specifies a data target that writes to Amazon S3 using the Glue Data Catalog.</p>",
      "members": {
        "Database": {
          "documentation": "<p>The name of the database to write to.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "Inputs": {
          "documentation": "<p>The nodes that are inputs to the data target.</p>",
          "shape": "OneInput"
        },
        "Name": {
          "documentation": "<p>The name of the data target.</p>",
          "shape": "NodeName"
        },
        "PartitionKeys": {
          "documentation": "<p>Specifies native partitioning using a sequence of keys.</p>",
          "shape": "GlueStudioPathList"
        },
        "SchemaChangePolicy": {
          "documentation": "<p>A policy that specifies update behavior for the governed catalog.</p>",
          "shape": "CatalogSchemaChangePolicy"
        },
        "Table": {
          "documentation": "<p>The name of the table in the database to write to.</p>",
          "shape": "EnclosedInStringProperty"
        }
      },
      "required": [
        "Name",
        "Inputs",
        "Table",
        "Database"
      ],
      "type": "structure"
    },
    "GrokClassifier": {
      "documentation": "<p>A classifier that uses <code>grok</code> patterns.</p>",
      "members": {
        "Classification": {
          "documentation": "<p>An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, and so on.</p>",
          "shape": "Classification"
        },
        "CreationTime": {
          "documentation": "<p>The time that this classifier was registered.</p>",
          "shape": "Timestamp"
        },
        "CustomPatterns": {
          "documentation": "<p>Optional custom grok patterns defined by this classifier. For more information, see custom patterns in <a href=\"https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html\">Writing Custom Classifiers</a>.</p>",
          "shape": "CustomPatterns"
        },
        "GrokPattern": {
          "documentation": "<p>The grok pattern applied to a data store by this classifier. For more information, see built-in patterns in <a href=\"https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html\">Writing Custom Classifiers</a>.</p>",
          "shape": "GrokPattern"
        },
        "LastUpdated": {
          "documentation": "<p>The time that this classifier was last updated.</p>",
          "shape": "Timestamp"
        },
        "Name": {
          "documentation": "<p>The name of the classifier.</p>",
          "shape": "NameString"
        },
        "Version": {
          "documentation": "<p>The version of this classifier.</p>",
          "shape": "VersionId"
        }
      },
      "required": [
        "Name",
        "Classification",
        "GrokPattern"
      ],
      "type": "structure"
    },
    "GrokPattern": {
      "max": 2048,
      "min": 1,
      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\t]*",
      "type": "string"
    },
    "HashString": {
      "max": 255,
      "min": 1,
      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
      "type": "string"
    },
    "IdString": {
      "max": 255,
      "min": 1,
      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
      "type": "string"
    },
    "IdempotentParameterMismatchException": {
      "documentation": "<p>The same unique identifier was associated with two different records.</p>",
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "IllegalBlueprintStateException": {
      "documentation": "<p>The blueprint is in an invalid state to perform a requested operation.</p>",
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "IllegalSessionStateException": {
      "documentation": "<p>The session is in an invalid state to perform a requested operation.</p>",
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "IllegalWorkflowStateException": {
      "documentation": "<p>The workflow is in an invalid state to perform a requested operation.</p>",
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "ImportCatalogToGlueRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the catalog to import. Currently, this should be the Amazon Web Services account ID.</p>",
          "shape": "CatalogIdString"
        }
      },
      "type": "structure"
    },
    "ImportCatalogToGlueResponse": {
      "members": {},
      "type": "structure"
    },
    "ImportLabelsTaskRunProperties": {
      "documentation": "<p>Specifies configuration properties for an importing labels task run.</p>",
      "members": {
        "InputS3Path": {
          "documentation": "<p>The Amazon Simple Storage Service (Amazon S3) path from where you will import the labels.</p>",
          "shape": "UriString"
        },
        "Replace": {
          "documentation": "<p>Indicates whether to overwrite your existing labels.</p>",
          "shape": "ReplaceBoolean"
        }
      },
      "type": "structure"
    },
    "Integer": {
      "type": "integer"
    },
    "IntegerFlag": {
      "max": 1,
      "min": 0,
      "type": "integer"
    },
    "IntegerValue": {
      "type": "integer"
    },
    "InternalServiceException": {
      "documentation": "<p>An internal service error occurred.</p>",
      "exception": true,
      "fault": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "InvalidInputException": {
      "documentation": "<p>The input provided was not valid.</p>",
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "InvalidStateException": {
      "documentation": "<p>An error that indicates your data is in an invalid state.</p>",
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "IsVersionValid": {
      "type": "boolean"
    },
    "JDBCConnectorOptions": {
      "documentation": "<p>Additional connection options for the connector.</p>",
      "members": {
        "DataTypeMapping": {
          "documentation": "<p>Custom data type mapping that builds a mapping from a JDBC data type to an Glue data type. For example, the option <code>\"dataTypeMapping\":{\"FLOAT\":\"STRING\"}</code> maps data fields of JDBC type <code>FLOAT</code> into the Java <code>String</code> type by calling the <code>ResultSet.getString()</code> method of the driver, and uses it to build the Glue record. The <code>ResultSet</code> object is implemented by each driver, so the behavior is specific to the driver you use. Refer to the documentation for your JDBC driver to understand how the driver performs the conversions.</p>",
          "shape": "JDBCDataTypeMapping"
        },
        "FilterPredicate": {
          "documentation": "<p>Extra condition clause to filter data from source. For example:</p> <p> <code>BillingCity='Mountain View'</code> </p> <p>When using a query instead of a table name, you should validate that the query works with the specified <code>filterPredicate</code>.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "JobBookmarkKeys": {
          "documentation": "<p>The name of the job bookmark keys on which to sort.</p>",
          "shape": "EnclosedInStringProperties"
        },
        "JobBookmarkKeysSortOrder": {
          "documentation": "<p>Specifies an ascending or descending sort order.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "LowerBound": {
          "documentation": "<p>The minimum value of <code>partitionColumn</code> that is used to decide partition stride.</p>",
          "shape": "BoxedNonNegativeLong"
        },
        "NumPartitions": {
          "documentation": "<p>The number of partitions. This value, along with <code>lowerBound</code> (inclusive) and <code>upperBound</code> (exclusive), form partition strides for generated <code>WHERE</code> clause expressions that are used to split the <code>partitionColumn</code>.</p>",
          "shape": "BoxedNonNegativeLong"
        },
        "PartitionColumn": {
          "documentation": "<p>The name of an integer column that is used for partitioning. This option works only when it's included with <code>lowerBound</code>, <code>upperBound</code>, and <code>numPartitions</code>. This option works the same way as in the Spark SQL JDBC reader.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "UpperBound": {
          "documentation": "<p>The maximum value of <code>partitionColumn</code> that is used to decide partition stride.</p>",
          "shape": "BoxedNonNegativeLong"
        }
      },
      "type": "structure"
    },
    "JDBCConnectorSource": {
      "documentation": "<p>Specifies a connector to a JDBC data source.</p>",
      "members": {
        "AdditionalOptions": {
          "documentation": "<p>Additional connection options for the connector.</p>",
          "shape": "JDBCConnectorOptions"
        },
        "ConnectionName": {
          "documentation": "<p>The name of the connection that is associated with the connector.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "ConnectionTable": {
          "documentation": "<p>The name of the table in the data source.</p>",
          "shape": "EnclosedInStringPropertyWithQuote"
        },
        "ConnectionType": {
          "documentation": "<p>The type of connection, such as marketplace.jdbc or custom.jdbc, designating a connection to a JDBC data store.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "ConnectorName": {
          "documentation": "<p>The name of a connector that assists with accessing the data store in Glue Studio.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "Name": {
          "documentation": "<p>The name of the data source.</p>",
          "shape": "NodeName"
        },
        "OutputSchemas": {
          "documentation": "<p>Specifies the data schema for the custom JDBC source.</p>",
          "shape": "GlueSchemas"
        },
        "Query": {
          "documentation": "<p>The table or SQL query to get the data from. You can specify either <code>ConnectionTable</code> or <code>query</code>, but not both.</p>",
          "shape": "SqlQuery"
        }
      },
      "required": [
        "Name",
        "ConnectionName",
        "ConnectorName",
        "ConnectionType"
      ],
      "type": "structure"
    },
    "JDBCConnectorTarget": {
      "documentation": "<p>Specifies a data target that writes to Amazon S3 in Apache Parquet columnar storage.</p>",
      "members": {
        "AdditionalOptions": {
          "documentation": "<p>Additional connection options for the connector.</p>",
          "shape": "AdditionalOptions"
        },
        "ConnectionName": {
          "documentation": "<p>The name of the connection that is associated with the connector.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "ConnectionTable": {
          "documentation": "<p>The name of the table in the data target.</p>",
          "shape": "EnclosedInStringPropertyWithQuote"
        },
        "ConnectionType": {
          "documentation": "<p>The type of connection, such as marketplace.jdbc or custom.jdbc, designating a connection to a JDBC data target.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "ConnectorName": {
          "documentation": "<p>The name of a connector that will be used.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "Inputs": {
          "documentation": "<p>The nodes that are inputs to the data target.</p>",
          "shape": "OneInput"
        },
        "Name": {
          "documentation": "<p>The name of the data target.</p>",
          "shape": "NodeName"
        },
        "OutputSchemas": {
          "documentation": "<p>Specifies the data schema for the JDBC target.</p>",
          "shape": "GlueSchemas"
        }
      },
      "required": [
        "Name",
        "Inputs",
        "ConnectionName",
        "ConnectionTable",
        "ConnectorName",
        "ConnectionType"
      ],
      "type": "structure"
    },
    "JDBCDataType": {
      "enum": [
        "ARRAY",
        "BIGINT",
        "BINARY",
        "BIT",
        "BLOB",
        "BOOLEAN",
        "CHAR",
        "CLOB",
        "DATALINK",
        "DATE",
        "DECIMAL",
        "DISTINCT",
        "DOUBLE",
        "FLOAT",
        "INTEGER",
        "JAVA_OBJECT",
        "LONGNVARCHAR",
        "LONGVARBINARY",
        "LONGVARCHAR",
        "NCHAR",
        "NCLOB",
        "NULL",
        "NUMERIC",
        "NVARCHAR",
        "OTHER",
        "REAL",
        "REF",
        "REF_CURSOR",
        "ROWID",
        "SMALLINT",
        "SQLXML",
        "STRUCT",
        "TIME",
        "TIME_WITH_TIMEZONE",
        "TIMESTAMP",
        "TIMESTAMP_WITH_TIMEZONE",
        "TINYINT",
        "VARBINARY",
        "VARCHAR"
      ],
      "type": "string"
    },
    "JDBCDataTypeMapping": {
      "key": {
        "shape": "JDBCDataType"
      },
      "type": "map",
      "value": {
        "shape": "GlueRecordType"
      }
    },
    "JdbcTarget": {
      "documentation": "<p>Specifies a JDBC data store to crawl.</p>",
      "members": {
        "ConnectionName": {
          "documentation": "<p>The name of the connection to use to connect to the JDBC target.</p>",
          "shape": "ConnectionName"
        },
        "Exclusions": {
          "documentation": "<p>A list of glob patterns used to exclude from the crawl. For more information, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/add-crawler.html\">Catalog Tables with a Crawler</a>.</p>",
          "shape": "PathList"
        },
        "Path": {
          "documentation": "<p>The path of the JDBC target.</p>",
          "shape": "Path"
        }
      },
      "type": "structure"
    },
    "JdbcTargetList": {
      "member": {
        "shape": "JdbcTarget"
      },
      "type": "list"
    },
    "Job": {
      "documentation": "<p>Specifies a job definition.</p>",
      "members": {
        "AllocatedCapacity": {
          "deprecated": true,
          "deprecatedMessage": "This property is deprecated, use MaxCapacity instead.",
          "documentation": "<p>This field is deprecated. Use <code>MaxCapacity</code> instead.</p> <p>The number of Glue data processing units (DPUs) allocated to runs of this job. You can allocate a minimum of 2 DPUs; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href=\"https://aws.amazon.com/glue/pricing/\">Glue pricing page</a>.</p> <p/>",
          "shape": "IntegerValue"
        },
        "CodeGenConfigurationNodes": {
          "documentation": "<p>The representation of a directed acyclic graph on which both the Glue Studio visual component and Glue Studio code generation is based.</p>",
          "shape": "CodeGenConfigurationNodes"
        },
        "Command": {
          "documentation": "<p>The <code>JobCommand</code> that runs this job.</p>",
          "shape": "JobCommand"
        },
        "Connections": {
          "documentation": "<p>The connections used for this job.</p>",
          "shape": "ConnectionsList"
        },
        "CreatedOn": {
          "documentation": "<p>The time and date that this job definition was created.</p>",
          "shape": "TimestampValue"
        },
        "DefaultArguments": {
          "documentation": "<p>The default arguments for this job, specified as name-value pairs.</p> <p>You can specify arguments here that your own job-execution script consumes, as well as arguments that Glue itself consumes.</p> <p>For information about how to specify and consume your own Job arguments, see the <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling Glue APIs in Python</a> topic in the developer guide.</p> <p>For information about the key-value pairs that Glue consumes to set up your job, see the <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by Glue</a> topic in the developer guide.</p>",
          "shape": "GenericMap"
        },
        "Description": {
          "documentation": "<p>A description of the job.</p>",
          "shape": "DescriptionString"
        },
        "ExecutionClass": {
          "documentation": "<p>Indicates whether the job is run with a standard or flexible execution class. The standard execution class is ideal for time-sensitive workloads that require fast job startup and dedicated resources.</p> <p>The flexible execution class is appropriate for time-insensitive jobs whose start and completion times may vary. </p> <p>Only jobs with Glue version 3.0 and above and command type <code>glueetl</code> will be allowed to set <code>ExecutionClass</code> to <code>FLEX</code>. The flexible execution class is available for Spark jobs.</p>",
          "shape": "ExecutionClass"
        },
        "ExecutionProperty": {
          "documentation": "<p>An <code>ExecutionProperty</code> specifying the maximum number of concurrent runs allowed for this job.</p>",
          "shape": "ExecutionProperty"
        },
        "GlueVersion": {
          "documentation": "<p>Glue version determines the versions of Apache Spark and Python that Glue supports. The Python version indicates the version supported for jobs of type Spark. </p> <p>For more information about the available Glue versions and corresponding Spark and Python versions, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/add-job.html\">Glue version</a> in the developer guide.</p> <p>Jobs that are created without specifying a Glue version default to Glue 0.9.</p>",
          "shape": "GlueVersionString"
        },
        "LastModifiedOn": {
          "documentation": "<p>The last point in time when this job definition was modified.</p>",
          "shape": "TimestampValue"
        },
        "LogUri": {
          "documentation": "<p>This field is reserved for future use.</p>",
          "shape": "UriString"
        },
        "MaxCapacity": {
          "documentation": "<p>For Glue version 1.0 or earlier jobs, using the standard worker type, the number of Glue data processing units (DPUs) that can be allocated when this job runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href=\"https://aws.amazon.com/glue/pricing/\">Glue pricing page</a>.</p> <p>Do not set <code>Max Capacity</code> if using <code>WorkerType</code> and <code>NumberOfWorkers</code>.</p> <p>The value that can be allocated for <code>MaxCapacity</code> depends on whether you are running a Python shell job, an Apache Spark ETL job, or an Apache Spark streaming ETL job:</p> <ul> <li> <p>When you specify a Python shell job (<code>JobCommand.Name</code>=\"pythonshell\"), you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.</p> </li> <li> <p>When you specify an Apache Spark ETL job (<code>JobCommand.Name</code>=\"glueetl\") or Apache Spark streaming ETL job (<code>JobCommand.Name</code>=\"gluestreaming\"), you can allocate a minimum of 2 DPUs. The default is 10 DPUs. This job type cannot have a fractional DPU allocation.</p> </li> </ul> <p>For Glue version 2.0 jobs, you cannot instead specify a <code>Maximum capacity</code>. Instead, you should specify a <code>Worker type</code> and the <code>Number of workers</code>.</p>",
          "shape": "NullableDouble"
        },
        "MaxRetries": {
          "documentation": "<p>The maximum number of times to retry this job after a JobRun fails.</p>",
          "shape": "MaxRetries"
        },
        "Name": {
          "documentation": "<p>The name you assign to this job definition.</p>",
          "shape": "NameString"
        },
        "NonOverridableArguments": {
          "documentation": "<p>Non-overridable arguments for this job, specified as name-value pairs.</p>",
          "shape": "GenericMap"
        },
        "NotificationProperty": {
          "documentation": "<p>Specifies configuration properties of a job notification.</p>",
          "shape": "NotificationProperty"
        },
        "NumberOfWorkers": {
          "documentation": "<p>The number of workers of a defined <code>workerType</code> that are allocated when a job runs.</p>",
          "shape": "NullableInteger"
        },
        "Role": {
          "documentation": "<p>The name or Amazon Resource Name (ARN) of the IAM role associated with this job.</p>",
          "shape": "RoleString"
        },
        "SecurityConfiguration": {
          "documentation": "<p>The name of the <code>SecurityConfiguration</code> structure to be used with this job.</p>",
          "shape": "NameString"
        },
        "SourceControlDetails": {
          "documentation": "<p>The details for a source control configuration for a job, allowing synchronization of job artifacts to or from a remote repository.</p>",
          "shape": "SourceControlDetails"
        },
        "Timeout": {
          "documentation": "<p>The job timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters <code>TIMEOUT</code> status. The default is 2,880 minutes (48 hours).</p>",
          "shape": "Timeout"
        },
        "WorkerType": {
          "documentation": "<p>The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, G.2X, or G.025X.</p> <ul> <li> <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p> </li> <li> <p>For the <code>G.1X</code> worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p> </li> <li> <p>For the <code>G.2X</code> worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p> </li> <li> <p>For the <code>G.025X</code> worker type, each worker maps to 0.25 DPU (2 vCPU, 4 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for low volume streaming jobs. This worker type is only available for Glue version 3.0 streaming jobs.</p> </li> </ul>",
          "shape": "WorkerType"
        }
      },
      "type": "structure"
    },
    "JobBookmarkEntry": {
      "documentation": "<p>Defines a point that a job can resume processing.</p>",
      "members": {
        "Attempt": {
          "documentation": "<p>The attempt ID number.</p>",
          "shape": "IntegerValue"
        },
        "JobBookmark": {
          "documentation": "<p>The bookmark itself.</p>",
          "shape": "JsonValue"
        },
        "JobName": {
          "documentation": "<p>The name of the job in question.</p>",
          "shape": "JobName"
        },
        "PreviousRunId": {
          "documentation": "<p>The unique run identifier associated with the previous job run.</p>",
          "shape": "RunId"
        },
        "Run": {
          "documentation": "<p>The run ID number.</p>",
          "shape": "IntegerValue"
        },
        "RunId": {
          "documentation": "<p>The run ID number.</p>",
          "shape": "RunId"
        },
        "Version": {
          "documentation": "<p>The version of the job.</p>",
          "shape": "IntegerValue"
        }
      },
      "type": "structure"
    },
    "JobBookmarksEncryption": {
      "documentation": "<p>Specifies how job bookmark data should be encrypted.</p>",
      "members": {
        "JobBookmarksEncryptionMode": {
          "documentation": "<p>The encryption mode to use for job bookmarks data.</p>",
          "shape": "JobBookmarksEncryptionMode"
        },
        "KmsKeyArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.</p>",
          "shape": "KmsKeyArn"
        }
      },
      "type": "structure"
    },
    "JobBookmarksEncryptionMode": {
      "enum": [
        "DISABLED",
        "CSE-KMS"
      ],
      "type": "string"
    },
    "JobCommand": {
      "documentation": "<p>Specifies code that runs when a job is run.</p>",
      "members": {
        "Name": {
          "documentation": "<p>The name of the job command. For an Apache Spark ETL job, this must be <code>glueetl</code>. For a Python shell job, it must be <code>pythonshell</code>. For an Apache Spark streaming ETL job, this must be <code>gluestreaming</code>.</p>",
          "shape": "GenericString"
        },
        "PythonVersion": {
          "documentation": "<p>The Python version being used to run a Python shell job. Allowed values are 2 or 3.</p>",
          "shape": "PythonVersionString"
        },
        "ScriptLocation": {
          "documentation": "<p>Specifies the Amazon Simple Storage Service (Amazon S3) path to a script that runs a job.</p>",
          "shape": "ScriptLocationString"
        }
      },
      "type": "structure"
    },
    "JobList": {
      "member": {
        "shape": "Job"
      },
      "type": "list"
    },
    "JobName": {
      "type": "string"
    },
    "JobNameList": {
      "member": {
        "shape": "NameString"
      },
      "type": "list"
    },
    "JobNodeDetails": {
      "documentation": "<p>The details of a Job node present in the workflow.</p>",
      "members": {
        "JobRuns": {
          "documentation": "<p>The information for the job runs represented by the job node.</p>",
          "shape": "JobRunList"
        }
      },
      "type": "structure"
    },
    "JobRun": {
      "documentation": "<p>Contains information about a job run.</p>",
      "members": {
        "AllocatedCapacity": {
          "deprecated": true,
          "deprecatedMessage": "This property is deprecated, use MaxCapacity instead.",
          "documentation": "<p>This field is deprecated. Use <code>MaxCapacity</code> instead.</p> <p>The number of Glue data processing units (DPUs) allocated to this JobRun. From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href=\"https://aws.amazon.com/glue/pricing/\">Glue pricing page</a>.</p>",
          "shape": "IntegerValue"
        },
        "Arguments": {
          "documentation": "<p>The job arguments associated with this run. For this job run, they replace the default arguments set in the job definition itself.</p> <p>You can specify arguments here that your own job-execution script consumes, as well as arguments that Glue itself consumes.</p> <p>For information about how to specify and consume your own job arguments, see the <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling Glue APIs in Python</a> topic in the developer guide.</p> <p>For information about the key-value pairs that Glue consumes to set up your job, see the <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by Glue</a> topic in the developer guide.</p>",
          "shape": "GenericMap"
        },
        "Attempt": {
          "documentation": "<p>The number of the attempt to run this job.</p>",
          "shape": "AttemptCount"
        },
        "CompletedOn": {
          "documentation": "<p>The date and time that this job run completed.</p>",
          "shape": "TimestampValue"
        },
        "DPUSeconds": {
          "documentation": "<p>This field populates only for Auto Scaling job runs, and represents the total time each executor ran during the lifecycle of a job run in seconds, multiplied by a DPU factor (1 for <code>G.1X</code>, 2 for <code>G.2X</code>, or 0.25 for <code>G.025X</code> workers). This value may be different than the <code>executionEngineRuntime</code> * <code>MaxCapacity</code> as in the case of Auto Scaling jobs, as the number of executors running at a given time may be less than the <code>MaxCapacity</code>. Therefore, it is possible that the value of <code>DPUSeconds</code> is less than <code>executionEngineRuntime</code> * <code>MaxCapacity</code>.</p>",
          "shape": "NullableDouble"
        },
        "ErrorMessage": {
          "documentation": "<p>An error message associated with this job run.</p>",
          "shape": "ErrorString"
        },
        "ExecutionClass": {
          "documentation": "<p>Indicates whether the job is run with a standard or flexible execution class. The standard execution-class is ideal for time-sensitive workloads that require fast job startup and dedicated resources.</p> <p>The flexible execution class is appropriate for time-insensitive jobs whose start and completion times may vary. </p> <p>Only jobs with Glue version 3.0 and above and command type <code>glueetl</code> will be allowed to set <code>ExecutionClass</code> to <code>FLEX</code>. The flexible execution class is available for Spark jobs.</p>",
          "shape": "ExecutionClass"
        },
        "ExecutionTime": {
          "documentation": "<p>The amount of time (in seconds) that the job run consumed resources.</p>",
          "shape": "ExecutionTime"
        },
        "GlueVersion": {
          "documentation": "<p>Glue version determines the versions of Apache Spark and Python that Glue supports. The Python version indicates the version supported for jobs of type Spark. </p> <p>For more information about the available Glue versions and corresponding Spark and Python versions, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/add-job.html\">Glue version</a> in the developer guide.</p> <p>Jobs that are created without specifying a Glue version default to Glue 0.9.</p>",
          "shape": "GlueVersionString"
        },
        "Id": {
          "documentation": "<p>The ID of this job run.</p>",
          "shape": "IdString"
        },
        "JobName": {
          "documentation": "<p>The name of the job definition being used in this run.</p>",
          "shape": "NameString"
        },
        "JobRunState": {
          "documentation": "<p>The current state of the job run. For more information about the statuses of jobs that have terminated abnormally, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/job-run-statuses.html\">Glue Job Run Statuses</a>.</p>",
          "shape": "JobRunState"
        },
        "LastModifiedOn": {
          "documentation": "<p>The last time that this job run was modified.</p>",
          "shape": "TimestampValue"
        },
        "LogGroupName": {
          "documentation": "<p>The name of the log group for secure logging that can be server-side encrypted in Amazon CloudWatch using KMS. This name can be <code>/aws-glue/jobs/</code>, in which case the default encryption is <code>NONE</code>. If you add a role name and <code>SecurityConfiguration</code> name (in other words, <code>/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/</code>), then that security configuration is used to encrypt the log group.</p>",
          "shape": "GenericString"
        },
        "MaxCapacity": {
          "documentation": "<p>The number of Glue data processing units (DPUs) that can be allocated when this job runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href=\"https://aws.amazon.com/glue/pricing/\">Glue pricing page</a>.</p> <p>Do not set <code>Max Capacity</code> if using <code>WorkerType</code> and <code>NumberOfWorkers</code>.</p> <p>The value that can be allocated for <code>MaxCapacity</code> depends on whether you are running a Python shell job or an Apache Spark ETL job:</p> <ul> <li> <p>When you specify a Python shell job (<code>JobCommand.Name</code>=\"pythonshell\"), you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.</p> </li> <li> <p>When you specify an Apache Spark ETL job (<code>JobCommand.Name</code>=\"glueetl\"), you can allocate a minimum of 2 DPUs. The default is 10 DPUs. This job type cannot have a fractional DPU allocation.</p> </li> </ul>",
          "shape": "NullableDouble"
        },
        "NotificationProperty": {
          "documentation": "<p>Specifies configuration properties of a job run notification.</p>",
          "shape": "NotificationProperty"
        },
        "NumberOfWorkers": {
          "documentation": "<p>The number of workers of a defined <code>workerType</code> that are allocated when a job runs.</p>",
          "shape": "NullableInteger"
        },
        "PredecessorRuns": {
          "documentation": "<p>A list of predecessors to this job run.</p>",
          "shape": "PredecessorList"
        },
        "PreviousRunId": {
          "documentation": "<p>The ID of the previous run of this job. For example, the <code>JobRunId</code> specified in the <code>StartJobRun</code> action.</p>",
          "shape": "IdString"
        },
        "SecurityConfiguration": {
          "documentation": "<p>The name of the <code>SecurityConfiguration</code> structure to be used with this job run.</p>",
          "shape": "NameString"
        },
        "StartedOn": {
          "documentation": "<p>The date and time at which this job run was started.</p>",
          "shape": "TimestampValue"
        },
        "Timeout": {
          "documentation": "<p>The <code>JobRun</code> timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters <code>TIMEOUT</code> status. This value overrides the timeout value set in the parent job.</p> <p>Streaming jobs do not have a timeout. The default for non-streaming jobs is 2,880 minutes (48 hours).</p>",
          "shape": "Timeout"
        },
        "TriggerName": {
          "documentation": "<p>The name of the trigger that started this job run.</p>",
          "shape": "NameString"
        },
        "WorkerType": {
          "documentation": "<p>The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, G.2X, or G.025X.</p> <ul> <li> <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p> </li> <li> <p>For the <code>G.1X</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB disk, and 1 executor per worker.</p> </li> <li> <p>For the <code>G.2X</code> worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB disk, and 1 executor per worker.</p> </li> <li> <p>For the <code>G.025X</code> worker type, each worker maps to 0.25 DPU (2 vCPU, 4 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for low volume streaming jobs. This worker type is only available for Glue version 3.0 streaming jobs.</p> </li> </ul>",
          "shape": "WorkerType"
        }
      },
      "type": "structure"
    },
    "JobRunList": {
      "member": {
        "shape": "JobRun"
      },
      "type": "list"
    },
    "JobRunState": {
      "enum": [
        "STARTING",
        "RUNNING",
        "STOPPING",
        "STOPPED",
        "SUCCEEDED",
        "FAILED",
        "TIMEOUT",
        "ERROR",
        "WAITING"
      ],
      "type": "string"
    },
    "JobUpdate": {
      "documentation": "<p>Specifies information used to update an existing job definition. The previous job definition is completely overwritten by this information.</p>",
      "members": {
        "AllocatedCapacity": {
          "deprecated": true,
          "deprecatedMessage": "This property is deprecated, use MaxCapacity instead.",
          "documentation": "<p>This field is deprecated. Use <code>MaxCapacity</code> instead.</p> <p>The number of Glue data processing units (DPUs) to allocate to this job. You can allocate a minimum of 2 DPUs; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href=\"https://aws.amazon.com/glue/pricing/\">Glue pricing page</a>.</p>",
          "shape": "IntegerValue"
        },
        "CodeGenConfigurationNodes": {
          "documentation": "<p>The representation of a directed acyclic graph on which both the Glue Studio visual component and Glue Studio code generation is based.</p>",
          "shape": "CodeGenConfigurationNodes"
        },
        "Command": {
          "documentation": "<p>The <code>JobCommand</code> that runs this job (required).</p>",
          "shape": "JobCommand"
        },
        "Connections": {
          "documentation": "<p>The connections used for this job.</p>",
          "shape": "ConnectionsList"
        },
        "DefaultArguments": {
          "documentation": "<p>The default arguments for this job.</p> <p>You can specify arguments here that your own job-execution script consumes, as well as arguments that Glue itself consumes.</p> <p>For information about how to specify and consume your own Job arguments, see the <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling Glue APIs in Python</a> topic in the developer guide.</p> <p>For information about the key-value pairs that Glue consumes to set up your job, see the <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by Glue</a> topic in the developer guide.</p>",
          "shape": "GenericMap"
        },
        "Description": {
          "documentation": "<p>Description of the job being defined.</p>",
          "shape": "DescriptionString"
        },
        "ExecutionClass": {
          "documentation": "<p>Indicates whether the job is run with a standard or flexible execution class. The standard execution-class is ideal for time-sensitive workloads that require fast job startup and dedicated resources.</p> <p>The flexible execution class is appropriate for time-insensitive jobs whose start and completion times may vary. </p> <p>Only jobs with Glue version 3.0 and above and command type <code>glueetl</code> will be allowed to set <code>ExecutionClass</code> to <code>FLEX</code>. The flexible execution class is available for Spark jobs.</p>",
          "shape": "ExecutionClass"
        },
        "ExecutionProperty": {
          "documentation": "<p>An <code>ExecutionProperty</code> specifying the maximum number of concurrent runs allowed for this job.</p>",
          "shape": "ExecutionProperty"
        },
        "GlueVersion": {
          "documentation": "<p>Glue version determines the versions of Apache Spark and Python that Glue supports. The Python version indicates the version supported for jobs of type Spark. </p> <p>For more information about the available Glue versions and corresponding Spark and Python versions, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/add-job.html\">Glue version</a> in the developer guide.</p>",
          "shape": "GlueVersionString"
        },
        "LogUri": {
          "documentation": "<p>This field is reserved for future use.</p>",
          "shape": "UriString"
        },
        "MaxCapacity": {
          "documentation": "<p>For Glue version 1.0 or earlier jobs, using the standard worker type, the number of Glue data processing units (DPUs) that can be allocated when this job runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href=\"https://aws.amazon.com/glue/pricing/\">Glue pricing page</a>.</p> <p>Do not set <code>Max Capacity</code> if using <code>WorkerType</code> and <code>NumberOfWorkers</code>.</p> <p>The value that can be allocated for <code>MaxCapacity</code> depends on whether you are running a Python shell job or an Apache Spark ETL job:</p> <ul> <li> <p>When you specify a Python shell job (<code>JobCommand.Name</code>=\"pythonshell\"), you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.</p> </li> <li> <p>When you specify an Apache Spark ETL job (<code>JobCommand.Name</code>=\"glueetl\") or Apache Spark streaming ETL job (<code>JobCommand.Name</code>=\"gluestreaming\"), you can allocate a minimum of 2 DPUs. The default is 10 DPUs. This job type cannot have a fractional DPU allocation.</p> </li> </ul> <p>For Glue version 2.0 jobs, you cannot instead specify a <code>Maximum capacity</code>. Instead, you should specify a <code>Worker type</code> and the <code>Number of workers</code>.</p>",
          "shape": "NullableDouble"
        },
        "MaxRetries": {
          "documentation": "<p>The maximum number of times to retry this job if it fails.</p>",
          "shape": "MaxRetries"
        },
        "NonOverridableArguments": {
          "documentation": "<p>Non-overridable arguments for this job, specified as name-value pairs.</p>",
          "shape": "GenericMap"
        },
        "NotificationProperty": {
          "documentation": "<p>Specifies the configuration properties of a job notification.</p>",
          "shape": "NotificationProperty"
        },
        "NumberOfWorkers": {
          "documentation": "<p>The number of workers of a defined <code>workerType</code> that are allocated when a job runs.</p>",
          "shape": "NullableInteger"
        },
        "Role": {
          "documentation": "<p>The name or Amazon Resource Name (ARN) of the IAM role associated with this job (required).</p>",
          "shape": "RoleString"
        },
        "SecurityConfiguration": {
          "documentation": "<p>The name of the <code>SecurityConfiguration</code> structure to be used with this job.</p>",
          "shape": "NameString"
        },
        "SourceControlDetails": {
          "documentation": "<p>The details for a source control configuration for a job, allowing synchronization of job artifacts to or from a remote repository.</p>",
          "shape": "SourceControlDetails"
        },
        "Timeout": {
          "documentation": "<p>The job timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters <code>TIMEOUT</code> status. The default is 2,880 minutes (48 hours).</p>",
          "shape": "Timeout"
        },
        "WorkerType": {
          "documentation": "<p>The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, G.2X, or G.025X.</p> <ul> <li> <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p> </li> <li> <p>For the <code>G.1X</code> worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p> </li> <li> <p>For the <code>G.2X</code> worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p> </li> <li> <p>For the <code>G.025X</code> worker type, each worker maps to 0.25 DPU (2 vCPU, 4 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for low volume streaming jobs. This worker type is only available for Glue version 3.0 streaming jobs.</p> </li> </ul>",
          "shape": "WorkerType"
        }
      },
      "type": "structure"
    },
    "Join": {
      "documentation": "<p>Specifies a transform that joins two datasets into one dataset using a comparison phrase on the specified data property keys. You can use inner, outer, left, right, left semi, and left anti joins.</p>",
      "members": {
        "Columns": {
          "documentation": "<p>A list of the two columns to be joined.</p>",
          "shape": "JoinColumns"
        },
        "Inputs": {
          "documentation": "<p>The data inputs identified by their node names.</p>",
          "shape": "TwoInputs"
        },
        "JoinType": {
          "documentation": "<p>Specifies the type of join to be performed on the datasets.</p>",
          "shape": "JoinType"
        },
        "Name": {
          "documentation": "<p>The name of the transform node.</p>",
          "shape": "NodeName"
        }
      },
      "required": [
        "Name",
        "Inputs",
        "JoinType",
        "Columns"
      ],
      "type": "structure"
    },
    "JoinColumn": {
      "documentation": "<p>Specifies a column to be joined.</p>",
      "members": {
        "From": {
          "documentation": "<p>The column to be joined.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "Keys": {
          "documentation": "<p>The key of the column to be joined.</p>",
          "shape": "GlueStudioPathList"
        }
      },
      "required": [
        "From",
        "Keys"
      ],
      "type": "structure"
    },
    "JoinColumns": {
      "max": 2,
      "member": {
        "shape": "JoinColumn"
      },
      "min": 2,
      "type": "list"
    },
    "JoinType": {
      "enum": [
        "equijoin",
        "left",
        "right",
        "outer",
        "leftsemi",
        "leftanti"
      ],
      "type": "string"
    },
    "JsonClassifier": {
      "documentation": "<p>A classifier for <code>JSON</code> content.</p>",
      "members": {
        "CreationTime": {
          "documentation": "<p>The time that this classifier was registered.</p>",
          "shape": "Timestamp"
        },
        "JsonPath": {
          "documentation": "<p>A <code>JsonPath</code> string defining the JSON data for the classifier to classify. Glue supports a subset of JsonPath, as described in <a href=\"https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json\">Writing JsonPath Custom Classifiers</a>.</p>",
          "shape": "JsonPath"
        },
        "LastUpdated": {
          "documentation": "<p>The time that this classifier was last updated.</p>",
          "shape": "Timestamp"
        },
        "Name": {
          "documentation": "<p>The name of the classifier.</p>",
          "shape": "NameString"
        },
        "Version": {
          "documentation": "<p>The version of this classifier.</p>",
          "shape": "VersionId"
        }
      },
      "required": [
        "Name",
        "JsonPath"
      ],
      "type": "structure"
    },
    "JsonPath": {
      "type": "string"
    },
    "JsonValue": {
      "type": "string"
    },
    "KafkaStreamingSourceOptions": {
      "documentation": "<p>Additional options for streaming.</p>",
      "members": {
        "Assign": {
          "documentation": "<p>The specific <code>TopicPartitions</code> to consume. You must specify at least one of <code>\"topicName\"</code>, <code>\"assign\"</code> or <code>\"subscribePattern\"</code>.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "BootstrapServers": {
          "documentation": "<p>A list of bootstrap server URLs, for example, as <code>b-1.vpc-test-2.o4q88o.c6.kafka.us-east-1.amazonaws.com:9094</code>. This option must be specified in the API call or defined in the table metadata in the Data Catalog.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "Classification": {
          "documentation": "<p>An optional classification.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "ConnectionName": {
          "documentation": "<p>The name of the connection.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "Delimiter": {
          "documentation": "<p>Specifies the delimiter character.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "EndingOffsets": {
          "documentation": "<p>The end point when a batch query is ended. Possible values are either <code>\"latest\"</code> or a JSON string that specifies an ending offset for each <code>TopicPartition</code>.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "MaxOffsetsPerTrigger": {
          "documentation": "<p>The rate limit on the maximum number of offsets that are processed per trigger interval. The specified total number of offsets is proportionally split across <code>topicPartitions</code> of different volumes. The default value is null, which means that the consumer reads all offsets until the known latest offset.</p>",
          "shape": "BoxedNonNegativeLong"
        },
        "MinPartitions": {
          "documentation": "<p>The desired minimum number of partitions to read from Kafka. The default value is null, which means that the number of spark partitions is equal to the number of Kafka partitions.</p>",
          "shape": "BoxedNonNegativeInt"
        },
        "NumRetries": {
          "documentation": "<p>The number of times to retry before failing to fetch Kafka offsets. The default value is <code>3</code>.</p>",
          "shape": "BoxedNonNegativeInt"
        },
        "PollTimeoutMs": {
          "documentation": "<p>The timeout in milliseconds to poll data from Kafka in Spark job executors. The default value is <code>512</code>.</p>",
          "shape": "BoxedNonNegativeLong"
        },
        "RetryIntervalMs": {
          "documentation": "<p>The time in milliseconds to wait before retrying to fetch Kafka offsets. The default value is <code>10</code>.</p>",
          "shape": "BoxedNonNegativeLong"
        },
        "SecurityProtocol": {
          "documentation": "<p>The protocol used to communicate with brokers. The possible values are <code>\"SSL\"</code> or <code>\"PLAINTEXT\"</code>.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "StartingOffsets": {
          "documentation": "<p>The starting position in the Kafka topic to read data from. The possible values are <code>\"earliest\"</code> or <code>\"latest\"</code>. The default value is <code>\"latest\"</code>.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "SubscribePattern": {
          "documentation": "<p>A Java regex string that identifies the topic list to subscribe to. You must specify at least one of <code>\"topicName\"</code>, <code>\"assign\"</code> or <code>\"subscribePattern\"</code>.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "TopicName": {
          "documentation": "<p>The topic name as specified in Apache Kafka. You must specify at least one of <code>\"topicName\"</code>, <code>\"assign\"</code> or <code>\"subscribePattern\"</code>.</p>",
          "shape": "EnclosedInStringProperty"
        }
      },
      "type": "structure"
    },
    "KeyList": {
      "member": {
        "shape": "NameString"
      },
      "min": 1,
      "type": "list"
    },
    "KeySchemaElement": {
      "documentation": "<p>A partition key pair consisting of a name and a type.</p>",
      "members": {
        "Name": {
          "documentation": "<p>The name of a partition key.</p>",
          "shape": "NameString"
        },
        "Type": {
          "documentation": "<p>The type of a partition key.</p>",
          "shape": "ColumnTypeString"
        }
      },
      "required": [
        "Name",
        "Type"
      ],
      "type": "structure"
    },
    "KeySchemaElementList": {
      "member": {
        "shape": "KeySchemaElement"
      },
      "min": 1,
      "type": "list"
    },
    "KeyString": {
      "max": 255,
      "min": 1,
      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
      "type": "string"
    },
    "KinesisStreamingSourceOptions": {
      "documentation": "<p>Additional options for the Amazon Kinesis streaming data source.</p>",
      "members": {
        "AddIdleTimeBetweenReads": {
          "documentation": "<p>Adds a time delay between two consecutive getRecords operations. The default value is <code>\"False\"</code>. This option is only configurable for Glue version 2.0 and above.</p>",
          "shape": "BoxedBoolean"
        },
        "AvoidEmptyBatches": {
          "documentation": "<p>Avoids creating an empty microbatch job by checking for unread data in the Kinesis data stream before the batch is started. The default value is <code>\"False\"</code>.</p>",
          "shape": "BoxedBoolean"
        },
        "Classification": {
          "documentation": "<p>An optional classification.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "Delimiter": {
          "documentation": "<p>Specifies the delimiter character.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "DescribeShardInterval": {
          "documentation": "<p>The minimum time interval between two ListShards API calls for your script to consider resharding. The default value is <code>1s</code>.</p>",
          "shape": "BoxedNonNegativeLong"
        },
        "EndpointUrl": {
          "documentation": "<p>The URL of the Kinesis endpoint.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "IdleTimeBetweenReadsInMs": {
          "documentation": "<p>The minimum time delay between two consecutive getRecords operations, specified in ms. The default value is <code>1000</code>. This option is only configurable for Glue version 2.0 and above.</p>",
          "shape": "BoxedNonNegativeLong"
        },
        "MaxFetchRecordsPerShard": {
          "documentation": "<p>The maximum number of records to fetch per shard in the Kinesis data stream. The default value is <code>100000</code>.</p>",
          "shape": "BoxedNonNegativeLong"
        },
        "MaxFetchTimeInMs": {
          "documentation": "<p>The maximum time spent in the job executor to fetch a record from the Kinesis data stream per shard, specified in milliseconds (ms). The default value is <code>1000</code>.</p>",
          "shape": "BoxedNonNegativeLong"
        },
        "MaxRecordPerRead": {
          "documentation": "<p>The maximum number of records to fetch from the Kinesis data stream in each getRecords operation. The default value is <code>10000</code>.</p>",
          "shape": "BoxedNonNegativeLong"
        },
        "MaxRetryIntervalMs": {
          "documentation": "<p>The maximum cool-off time period (specified in ms) between two retries of a Kinesis Data Streams API call. The default value is <code>10000</code>.</p>",
          "shape": "BoxedNonNegativeLong"
        },
        "NumRetries": {
          "documentation": "<p>The maximum number of retries for Kinesis Data Streams API requests. The default value is <code>3</code>.</p>",
          "shape": "BoxedNonNegativeInt"
        },
        "RetryIntervalMs": {
          "documentation": "<p>The cool-off time period (specified in ms) before retrying the Kinesis Data Streams API call. The default value is <code>1000</code>.</p>",
          "shape": "BoxedNonNegativeLong"
        },
        "RoleArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the role to assume using AWS Security Token Service (AWS STS). This role must have permissions for describe or read record operations for the Kinesis data stream. You must use this parameter when accessing a data stream in a different account. Used in conjunction with <code>\"awsSTSSessionName\"</code>.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "RoleSessionName": {
          "documentation": "<p>An identifier for the session assuming the role using AWS STS. You must use this parameter when accessing a data stream in a different account. Used in conjunction with <code>\"awsSTSRoleARN\"</code>.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "StartingPosition": {
          "documentation": "<p>The starting position in the Kinesis data stream to read data from. The possible values are <code>\"latest\"</code>, <code>\"trim_horizon\"</code>, or <code>\"earliest\"</code>. The default value is <code>\"latest\"</code>.</p>",
          "shape": "StartingPosition"
        },
        "StreamArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the Kinesis data stream.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "StreamName": {
          "documentation": "<p>The name of the Kinesis data stream.</p>",
          "shape": "EnclosedInStringProperty"
        }
      },
      "type": "structure"
    },
    "KmsKeyArn": {
      "pattern": "arn:aws:kms:.*",
      "type": "string"
    },
    "LabelCount": {
      "type": "integer"
    },
    "LabelingSetGenerationTaskRunProperties": {
      "documentation": "<p>Specifies configuration properties for a labeling set generation task run.</p>",
      "members": {
        "OutputS3Path": {
          "documentation": "<p>The Amazon Simple Storage Service (Amazon S3) path where you will generate the labeling set.</p>",
          "shape": "UriString"
        }
      },
      "type": "structure"
    },
    "LakeFormationConfiguration": {
      "documentation": "<p>Specifies Lake Formation configuration settings for the crawler.</p>",
      "members": {
        "AccountId": {
          "documentation": "<p>Required for cross account crawls. For same account crawls as the target data, this can be left as null.</p>",
          "shape": "AccountId"
        },
        "UseLakeFormationCredentials": {
          "documentation": "<p>Specifies whether to use Lake Formation credentials for the crawler instead of the IAM role credentials.</p>",
          "shape": "NullableBoolean"
        }
      },
      "type": "structure"
    },
    "Language": {
      "enum": [
        "PYTHON",
        "SCALA"
      ],
      "type": "string"
    },
    "LastActiveDefinition": {
      "documentation": "<p>When there are multiple versions of a blueprint and the latest version has some errors, this attribute indicates the last successful blueprint definition that is available with the service.</p>",
      "members": {
        "BlueprintLocation": {
          "documentation": "<p>Specifies a path in Amazon S3 where the blueprint is published by the Glue developer.</p>",
          "shape": "GenericString"
        },
        "BlueprintServiceLocation": {
          "documentation": "<p>Specifies a path in Amazon S3 where the blueprint is copied when you create or update the blueprint.</p>",
          "shape": "GenericString"
        },
        "Description": {
          "documentation": "<p>The description of the blueprint.</p>",
          "shape": "Generic512CharString"
        },
        "LastModifiedOn": {
          "documentation": "<p>The date and time the blueprint was last modified.</p>",
          "shape": "TimestampValue"
        },
        "ParameterSpec": {
          "documentation": "<p>A JSON string specifying the parameters for the blueprint.</p>",
          "shape": "BlueprintParameterSpec"
        }
      },
      "type": "structure"
    },
    "LastCrawlInfo": {
      "documentation": "<p>Status and error information about the most recent crawl.</p>",
      "members": {
        "ErrorMessage": {
          "documentation": "<p>If an error occurred, the error information about the last crawl.</p>",
          "shape": "DescriptionString"
        },
        "LogGroup": {
          "documentation": "<p>The log group for the last crawl.</p>",
          "shape": "LogGroup"
        },
        "LogStream": {
          "documentation": "<p>The log stream for the last crawl.</p>",
          "shape": "LogStream"
        },
        "MessagePrefix": {
          "documentation": "<p>The prefix for a message about this crawl.</p>",
          "shape": "MessagePrefix"
        },
        "StartTime": {
          "documentation": "<p>The time at which the crawl started.</p>",
          "shape": "Timestamp"
        },
        "Status": {
          "documentation": "<p>Status of the last crawl.</p>",
          "shape": "LastCrawlStatus"
        }
      },
      "type": "structure"
    },
    "LastCrawlStatus": {
      "enum": [
        "SUCCEEDED",
        "CANCELLED",
        "FAILED"
      ],
      "type": "string"
    },
    "LatestSchemaVersionBoolean": {
      "type": "boolean"
    },
    "LimitedPathList": {
      "member": {
        "shape": "LimitedStringList"
      },
      "type": "list"
    },
    "LimitedStringList": {
      "member": {
        "shape": "GenericLimitedString"
      },
      "type": "list"
    },
    "LineageConfiguration": {
      "documentation": "<p>Specifies data lineage configuration settings for the crawler.</p>",
      "members": {
        "CrawlerLineageSettings": {
          "documentation": "<p>Specifies whether data lineage is enabled for the crawler. Valid values are:</p> <ul> <li> <p>ENABLE: enables data lineage for the crawler</p> </li> <li> <p>DISABLE: disables data lineage for the crawler</p> </li> </ul>",
          "shape": "CrawlerLineageSettings"
        }
      },
      "type": "structure"
    },
    "ListBlueprintsRequest": {
      "members": {
        "MaxResults": {
          "documentation": "<p>The maximum size of a list to return.</p>",
          "shape": "PageSize"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if this is a continuation request.</p>",
          "shape": "GenericString"
        },
        "Tags": {
          "documentation": "<p>Filters the list by an Amazon Web Services resource tag.</p>",
          "shape": "TagsMap"
        }
      },
      "type": "structure"
    },
    "ListBlueprintsResponse": {
      "members": {
        "Blueprints": {
          "documentation": "<p>List of names of blueprints in the account.</p>",
          "shape": "BlueprintNames"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if not all blueprint names have been returned.</p>",
          "shape": "GenericString"
        }
      },
      "type": "structure"
    },
    "ListCrawlersRequest": {
      "members": {
        "MaxResults": {
          "documentation": "<p>The maximum size of a list to return.</p>",
          "shape": "PageSize"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if this is a continuation request.</p>",
          "shape": "Token"
        },
        "Tags": {
          "documentation": "<p>Specifies to return only these tagged resources.</p>",
          "shape": "TagsMap"
        }
      },
      "type": "structure"
    },
    "ListCrawlersResponse": {
      "members": {
        "CrawlerNames": {
          "documentation": "<p>The names of all crawlers in the account, or the crawlers with the specified tags.</p>",
          "shape": "CrawlerNameList"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if the returned list does not contain the last metric available.</p>",
          "shape": "Token"
        }
      },
      "type": "structure"
    },
    "ListCrawlsRequest": {
      "members": {
        "CrawlerName": {
          "documentation": "<p>The name of the crawler whose runs you want to retrieve.</p>",
          "shape": "NameString"
        },
        "Filters": {
          "documentation": "<p>Filters the crawls by the criteria you specify in a list of <code>CrawlsFilter</code> objects.</p>",
          "shape": "CrawlsFilterList"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of results to return. The default is 20, and maximum is 100.</p>",
          "shape": "PageSize"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if this is a continuation call.</p>",
          "shape": "Token"
        }
      },
      "required": [
        "CrawlerName"
      ],
      "type": "structure"
    },
    "ListCrawlsResponse": {
      "members": {
        "Crawls": {
          "documentation": "<p>A list of <code>CrawlerHistory</code> objects representing the crawl runs that meet your criteria.</p>",
          "shape": "CrawlerHistoryList"
        },
        "NextToken": {
          "documentation": "<p>A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.</p>",
          "shape": "Token"
        }
      },
      "type": "structure"
    },
    "ListCustomEntityTypesRequest": {
      "members": {
        "MaxResults": {
          "documentation": "<p>The maximum number of results to return.</p>",
          "shape": "PageSize"
        },
        "NextToken": {
          "documentation": "<p>A paginated token to offset the results.</p>",
          "shape": "PaginationToken"
        }
      },
      "type": "structure"
    },
    "ListCustomEntityTypesResponse": {
      "members": {
        "CustomEntityTypes": {
          "documentation": "<p>A list of <code>CustomEntityType</code> objects representing custom patterns.</p>",
          "shape": "CustomEntityTypes"
        },
        "NextToken": {
          "documentation": "<p>A pagination token, if more results are available.</p>",
          "shape": "PaginationToken"
        }
      },
      "type": "structure"
    },
    "ListDevEndpointsRequest": {
      "members": {
        "MaxResults": {
          "documentation": "<p>The maximum size of a list to return.</p>",
          "shape": "PageSize"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if this is a continuation request.</p>",
          "shape": "GenericString"
        },
        "Tags": {
          "documentation": "<p>Specifies to return only these tagged resources.</p>",
          "shape": "TagsMap"
        }
      },
      "type": "structure"
    },
    "ListDevEndpointsResponse": {
      "members": {
        "DevEndpointNames": {
          "documentation": "<p>The names of all the <code>DevEndpoint</code>s in the account, or the <code>DevEndpoint</code>s with the specified tags.</p>",
          "shape": "DevEndpointNameList"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if the returned list does not contain the last metric available.</p>",
          "shape": "GenericString"
        }
      },
      "type": "structure"
    },
    "ListJobsRequest": {
      "members": {
        "MaxResults": {
          "documentation": "<p>The maximum size of a list to return.</p>",
          "shape": "PageSize"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if this is a continuation request.</p>",
          "shape": "GenericString"
        },
        "Tags": {
          "documentation": "<p>Specifies to return only these tagged resources.</p>",
          "shape": "TagsMap"
        }
      },
      "type": "structure"
    },
    "ListJobsResponse": {
      "members": {
        "JobNames": {
          "documentation": "<p>The names of all jobs in the account, or the jobs with the specified tags.</p>",
          "shape": "JobNameList"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if the returned list does not contain the last metric available.</p>",
          "shape": "GenericString"
        }
      },
      "type": "structure"
    },
    "ListMLTransformsRequest": {
      "members": {
        "Filter": {
          "documentation": "<p>A <code>TransformFilterCriteria</code> used to filter the machine learning transforms.</p>",
          "shape": "TransformFilterCriteria"
        },
        "MaxResults": {
          "documentation": "<p>The maximum size of a list to return.</p>",
          "shape": "PageSize"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if this is a continuation request.</p>",
          "shape": "PaginationToken"
        },
        "Sort": {
          "documentation": "<p>A <code>TransformSortCriteria</code> used to sort the machine learning transforms.</p>",
          "shape": "TransformSortCriteria"
        },
        "Tags": {
          "documentation": "<p>Specifies to return only these tagged resources.</p>",
          "shape": "TagsMap"
        }
      },
      "type": "structure"
    },
    "ListMLTransformsResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>A continuation token, if the returned list does not contain the last metric available.</p>",
          "shape": "PaginationToken"
        },
        "TransformIds": {
          "documentation": "<p>The identifiers of all the machine learning transforms in the account, or the machine learning transforms with the specified tags.</p>",
          "shape": "TransformIdList"
        }
      },
      "required": [
        "TransformIds"
      ],
      "type": "structure"
    },
    "ListRegistriesInput": {
      "members": {
        "MaxResults": {
          "documentation": "<p>Maximum number of results required per page. If the value is not supplied, this will be defaulted to 25 per page.</p>",
          "shape": "MaxResultsNumber"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if this is a continuation call.</p>",
          "shape": "SchemaRegistryTokenString"
        }
      },
      "type": "structure"
    },
    "ListRegistriesResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.</p>",
          "shape": "SchemaRegistryTokenString"
        },
        "Registries": {
          "documentation": "<p>An array of <code>RegistryDetailedListItem</code> objects containing minimal details of each registry.</p>",
          "shape": "RegistryListDefinition"
        }
      },
      "type": "structure"
    },
    "ListSchemaVersionsInput": {
      "members": {
        "MaxResults": {
          "documentation": "<p>Maximum number of results required per page. If the value is not supplied, this will be defaulted to 25 per page.</p>",
          "shape": "MaxResultsNumber"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if this is a continuation call.</p>",
          "shape": "SchemaRegistryTokenString"
        },
        "SchemaId": {
          "documentation": "<p>This is a wrapper structure to contain schema identity fields. The structure contains:</p> <ul> <li> <p>SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. Either <code>SchemaArn</code> or <code>SchemaName</code> and <code>RegistryName</code> has to be provided.</p> </li> <li> <p>SchemaId$SchemaName: The name of the schema. Either <code>SchemaArn</code> or <code>SchemaName</code> and <code>RegistryName</code> has to be provided.</p> </li> </ul>",
          "shape": "SchemaId"
        }
      },
      "required": [
        "SchemaId"
      ],
      "type": "structure"
    },
    "ListSchemaVersionsResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.</p>",
          "shape": "SchemaRegistryTokenString"
        },
        "Schemas": {
          "documentation": "<p>An array of <code>SchemaVersionList</code> objects containing details of each schema version.</p>",
          "shape": "SchemaVersionList"
        }
      },
      "type": "structure"
    },
    "ListSchemasInput": {
      "members": {
        "MaxResults": {
          "documentation": "<p>Maximum number of results required per page. If the value is not supplied, this will be defaulted to 25 per page.</p>",
          "shape": "MaxResultsNumber"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if this is a continuation call.</p>",
          "shape": "SchemaRegistryTokenString"
        },
        "RegistryId": {
          "documentation": "<p>A wrapper structure that may contain the registry name and Amazon Resource Name (ARN).</p>",
          "shape": "RegistryId"
        }
      },
      "type": "structure"
    },
    "ListSchemasResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.</p>",
          "shape": "SchemaRegistryTokenString"
        },
        "Schemas": {
          "documentation": "<p>An array of <code>SchemaListItem</code> objects containing details of each schema.</p>",
          "shape": "SchemaListDefinition"
        }
      },
      "type": "structure"
    },
    "ListSessionsRequest": {
      "members": {
        "MaxResults": {
          "documentation": "<p>The maximum number of results. </p>",
          "shape": "PageSize"
        },
        "NextToken": {
          "documentation": "<p>The token for the next set of results, or null if there are no more result. </p>",
          "shape": "OrchestrationToken"
        },
        "RequestOrigin": {
          "documentation": "<p>The origin of the request. </p>",
          "shape": "OrchestrationNameString"
        },
        "Tags": {
          "documentation": "<p>Tags belonging to the session. </p>",
          "shape": "TagsMap"
        }
      },
      "type": "structure"
    },
    "ListSessionsResponse": {
      "members": {
        "Ids": {
          "documentation": "<p>Returns the ID of the session. </p>",
          "shape": "SessionIdList"
        },
        "NextToken": {
          "documentation": "<p>The token for the next set of results, or null if there are no more result. </p>",
          "shape": "OrchestrationToken"
        },
        "Sessions": {
          "documentation": "<p>Returns the session object. </p>",
          "shape": "SessionList"
        }
      },
      "type": "structure"
    },
    "ListStatementsRequest": {
      "members": {
        "NextToken": {
          "documentation": "<p>A continuation token, if this is a continuation call.</p>",
          "shape": "OrchestrationToken"
        },
        "RequestOrigin": {
          "documentation": "<p>The origin of the request to list statements.</p>",
          "shape": "OrchestrationNameString"
        },
        "SessionId": {
          "documentation": "<p>The Session ID of the statements.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "SessionId"
      ],
      "type": "structure"
    },
    "ListStatementsResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>A continuation token, if not all statements have yet been returned.</p>",
          "shape": "OrchestrationToken"
        },
        "Statements": {
          "documentation": "<p>Returns the list of statements.</p>",
          "shape": "StatementList"
        }
      },
      "type": "structure"
    },
    "ListTriggersRequest": {
      "members": {
        "DependentJobName": {
          "documentation": "<p> The name of the job for which to retrieve triggers. The trigger that can start this job is returned. If there is no such trigger, all triggers are returned.</p>",
          "shape": "NameString"
        },
        "MaxResults": {
          "documentation": "<p>The maximum size of a list to return.</p>",
          "shape": "PageSize"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if this is a continuation request.</p>",
          "shape": "GenericString"
        },
        "Tags": {
          "documentation": "<p>Specifies to return only these tagged resources.</p>",
          "shape": "TagsMap"
        }
      },
      "type": "structure"
    },
    "ListTriggersResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>A continuation token, if the returned list does not contain the last metric available.</p>",
          "shape": "GenericString"
        },
        "TriggerNames": {
          "documentation": "<p>The names of all triggers in the account, or the triggers with the specified tags.</p>",
          "shape": "TriggerNameList"
        }
      },
      "type": "structure"
    },
    "ListWorkflowsRequest": {
      "members": {
        "MaxResults": {
          "documentation": "<p>The maximum size of a list to return.</p>",
          "shape": "PageSize"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if this is a continuation request.</p>",
          "shape": "GenericString"
        }
      },
      "type": "structure"
    },
    "ListWorkflowsResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>A continuation token, if not all workflow names have been returned.</p>",
          "shape": "GenericString"
        },
        "Workflows": {
          "documentation": "<p>List of names of workflows in the account.</p>",
          "shape": "WorkflowNames"
        }
      },
      "type": "structure"
    },
    "Location": {
      "documentation": "<p>The location of resources.</p>",
      "members": {
        "DynamoDB": {
          "documentation": "<p>An Amazon DynamoDB table location.</p>",
          "shape": "CodeGenNodeArgs"
        },
        "Jdbc": {
          "documentation": "<p>A JDBC location.</p>",
          "shape": "CodeGenNodeArgs"
        },
        "S3": {
          "documentation": "<p>An Amazon Simple Storage Service (Amazon S3) location.</p>",
          "shape": "CodeGenNodeArgs"
        }
      },
      "type": "structure"
    },
    "LocationMap": {
      "key": {
        "shape": "ColumnValuesString"
      },
      "type": "map",
      "value": {
        "shape": "ColumnValuesString"
      }
    },
    "LocationString": {
      "max": 2056,
      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
      "type": "string"
    },
    "LocationStringList": {
      "member": {
        "shape": "LocationString"
      },
      "type": "list"
    },
    "LogGroup": {
      "max": 512,
      "min": 1,
      "pattern": "[\\.\\-_/#A-Za-z0-9]+",
      "type": "string"
    },
    "LogStream": {
      "max": 512,
      "min": 1,
      "pattern": "[^:*]*",
      "type": "string"
    },
    "Logical": {
      "enum": [
        "AND",
        "ANY"
      ],
      "type": "string"
    },
    "LogicalOperator": {
      "enum": [
        "EQUALS"
      ],
      "type": "string"
    },
    "Long": {
      "type": "long"
    },
    "LongColumnStatisticsData": {
      "documentation": "<p>Defines column statistics supported for integer data columns.</p>",
      "members": {
        "MaximumValue": {
          "documentation": "<p>The highest value in the column.</p>",
          "shape": "Long"
        },
        "MinimumValue": {
          "documentation": "<p>The lowest value in the column.</p>",
          "shape": "Long"
        },
        "NumberOfDistinctValues": {
          "documentation": "<p>The number of distinct values in a column.</p>",
          "shape": "NonNegativeLong"
        },
        "NumberOfNulls": {
          "documentation": "<p>The number of null values in the column.</p>",
          "shape": "NonNegativeLong"
        }
      },
      "required": [
        "NumberOfNulls",
        "NumberOfDistinctValues"
      ],
      "type": "structure"
    },
    "LongValue": {
      "type": "long"
    },
    "MLTransform": {
      "documentation": "<p>A structure for a machine learning transform.</p>",
      "members": {
        "CreatedOn": {
          "documentation": "<p>A timestamp. The time and date that this machine learning transform was created.</p>",
          "shape": "Timestamp"
        },
        "Description": {
          "documentation": "<p>A user-defined, long-form description text for the machine learning transform. Descriptions are not guaranteed to be unique and can be changed at any time.</p>",
          "shape": "DescriptionString"
        },
        "EvaluationMetrics": {
          "documentation": "<p>An <code>EvaluationMetrics</code> object. Evaluation metrics provide an estimate of the quality of your machine learning transform.</p>",
          "shape": "EvaluationMetrics"
        },
        "GlueVersion": {
          "documentation": "<p>This value determines which version of Glue this machine learning transform is compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue compatibility defaults to Glue 0.9. For more information, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions\">Glue Versions</a> in the developer guide.</p>",
          "shape": "GlueVersionString"
        },
        "InputRecordTables": {
          "documentation": "<p>A list of Glue table definitions used by the transform.</p>",
          "shape": "GlueTables"
        },
        "LabelCount": {
          "documentation": "<p>A count identifier for the labeling files generated by Glue for this transform. As you create a better transform, you can iteratively download, label, and upload the labeling file.</p>",
          "shape": "LabelCount"
        },
        "LastModifiedOn": {
          "documentation": "<p>A timestamp. The last point in time when this machine learning transform was modified.</p>",
          "shape": "Timestamp"
        },
        "MaxCapacity": {
          "documentation": "<p>The number of Glue data processing units (DPUs) that are allocated to task runs for this transform. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href=\"http://aws.amazon.com/glue/pricing/\">Glue pricing page</a>. </p> <p> <code>MaxCapacity</code> is a mutually exclusive option with <code>NumberOfWorkers</code> and <code>WorkerType</code>.</p> <ul> <li> <p>If either <code>NumberOfWorkers</code> or <code>WorkerType</code> is set, then <code>MaxCapacity</code> cannot be set.</p> </li> <li> <p>If <code>MaxCapacity</code> is set then neither <code>NumberOfWorkers</code> or <code>WorkerType</code> can be set.</p> </li> <li> <p>If <code>WorkerType</code> is set, then <code>NumberOfWorkers</code> is required (and vice versa).</p> </li> <li> <p> <code>MaxCapacity</code> and <code>NumberOfWorkers</code> must both be at least 1.</p> </li> </ul> <p>When the <code>WorkerType</code> field is set to a value other than <code>Standard</code>, the <code>MaxCapacity</code> field is set automatically and becomes read-only.</p>",
          "shape": "NullableDouble"
        },
        "MaxRetries": {
          "documentation": "<p>The maximum number of times to retry after an <code>MLTaskRun</code> of the machine learning transform fails.</p>",
          "shape": "NullableInteger"
        },
        "Name": {
          "documentation": "<p>A user-defined name for the machine learning transform. Names are not guaranteed unique and can be changed at any time.</p>",
          "shape": "NameString"
        },
        "NumberOfWorkers": {
          "documentation": "<p>The number of workers of a defined <code>workerType</code> that are allocated when a task of the transform runs.</p> <p>If <code>WorkerType</code> is set, then <code>NumberOfWorkers</code> is required (and vice versa).</p>",
          "shape": "NullableInteger"
        },
        "Parameters": {
          "documentation": "<p>A <code>TransformParameters</code> object. You can use parameters to tune (customize) the behavior of the machine learning transform by specifying what data it learns from and your preference on various tradeoffs (such as precious vs. recall, or accuracy vs. cost).</p>",
          "shape": "TransformParameters"
        },
        "Role": {
          "documentation": "<p>The name or Amazon Resource Name (ARN) of the IAM role with the required permissions. The required permissions include both Glue service role permissions to Glue resources, and Amazon S3 permissions required by the transform. </p> <ul> <li> <p>This role needs Glue service role permissions to allow access to resources in Glue. See <a href=\"https://docs.aws.amazon.com/glue/latest/dg/attach-policy-iam-user.html\">Attach a Policy to IAM Users That Access Glue</a>.</p> </li> <li> <p>This role needs permission to your Amazon Simple Storage Service (Amazon S3) sources, targets, temporary directory, scripts, and any libraries used by the task run for this transform.</p> </li> </ul>",
          "shape": "RoleString"
        },
        "Schema": {
          "documentation": "<p>A map of key-value pairs representing the columns and data types that this transform can run against. Has an upper bound of 100 columns.</p>",
          "shape": "TransformSchema"
        },
        "Status": {
          "documentation": "<p>The current status of the machine learning transform.</p>",
          "shape": "TransformStatusType"
        },
        "Timeout": {
          "documentation": "<p>The timeout in minutes of the machine learning transform.</p>",
          "shape": "Timeout"
        },
        "TransformEncryption": {
          "documentation": "<p>The encryption-at-rest settings of the transform that apply to accessing user data. Machine learning transforms can access user data encrypted in Amazon S3 using KMS.</p>",
          "shape": "TransformEncryption"
        },
        "TransformId": {
          "documentation": "<p>The unique transform ID that is generated for the machine learning transform. The ID is guaranteed to be unique and does not change.</p>",
          "shape": "HashString"
        },
        "WorkerType": {
          "documentation": "<p>The type of predefined worker that is allocated when a task of this transform runs. Accepts a value of Standard, G.1X, or G.2X.</p> <ul> <li> <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p> </li> <li> <p>For the <code>G.1X</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB disk, and 1 executor per worker.</p> </li> <li> <p>For the <code>G.2X</code> worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB disk, and 1 executor per worker.</p> </li> </ul> <p> <code>MaxCapacity</code> is a mutually exclusive option with <code>NumberOfWorkers</code> and <code>WorkerType</code>.</p> <ul> <li> <p>If either <code>NumberOfWorkers</code> or <code>WorkerType</code> is set, then <code>MaxCapacity</code> cannot be set.</p> </li> <li> <p>If <code>MaxCapacity</code> is set then neither <code>NumberOfWorkers</code> or <code>WorkerType</code> can be set.</p> </li> <li> <p>If <code>WorkerType</code> is set, then <code>NumberOfWorkers</code> is required (and vice versa).</p> </li> <li> <p> <code>MaxCapacity</code> and <code>NumberOfWorkers</code> must both be at least 1.</p> </li> </ul>",
          "shape": "WorkerType"
        }
      },
      "type": "structure"
    },
    "MLTransformNotReadyException": {
      "documentation": "<p>The machine learning transform is not ready to run.</p>",
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "MLUserDataEncryption": {
      "documentation": "<p>The encryption-at-rest settings of the transform that apply to accessing user data.</p>",
      "members": {
        "KmsKeyId": {
          "documentation": "<p>The ID for the customer-provided KMS key.</p>",
          "shape": "NameString"
        },
        "MlUserDataEncryptionMode": {
          "documentation": "<p>The encryption mode applied to user data. Valid values are:</p> <ul> <li> <p>DISABLED: encryption is disabled</p> </li> <li> <p>SSEKMS: use of server-side encryption with Key Management Service (SSE-KMS) for user data stored in Amazon S3.</p> </li> </ul>",
          "shape": "MLUserDataEncryptionModeString"
        }
      },
      "required": [
        "MlUserDataEncryptionMode"
      ],
      "type": "structure"
    },
    "MLUserDataEncryptionModeString": {
      "enum": [
        "DISABLED",
        "SSE-KMS"
      ],
      "type": "string"
    },
    "ManyInputs": {
      "member": {
        "shape": "NodeId"
      },
      "min": 1,
      "type": "list"
    },
    "MapValue": {
      "key": {
        "shape": "GenericString"
      },
      "max": 100,
      "min": 0,
      "type": "map",
      "value": {
        "shape": "GenericString"
      }
    },
    "Mapping": {
      "documentation": "<p>Specifies the mapping of data property keys.</p>",
      "members": {
        "Children": {
          "documentation": "<p>Only applicable to nested data structures. If you want to change the parent structure, but also one of its children, you can fill out this data strucutre. It is also <code>Mapping</code>, but its <code>FromPath</code> will be the parent's <code>FromPath</code> plus the <code>FromPath</code> from this structure.</p> <p>For the children part, suppose you have the structure:</p> <p> <code>{ \"FromPath\": \"OuterStructure\", \"ToKey\": \"OuterStructure\", \"ToType\": \"Struct\", \"Dropped\": false, \"Chidlren\": [{ \"FromPath\": \"inner\", \"ToKey\": \"inner\", \"ToType\": \"Double\", \"Dropped\": false, }] }</code> </p> <p>You can specify a <code>Mapping</code> that looks like:</p> <p> <code>{ \"FromPath\": \"OuterStructure\", \"ToKey\": \"OuterStructure\", \"ToType\": \"Struct\", \"Dropped\": false, \"Chidlren\": [{ \"FromPath\": \"inner\", \"ToKey\": \"inner\", \"ToType\": \"Double\", \"Dropped\": false, }] }</code> </p>",
          "shape": "Mappings"
        },
        "Dropped": {
          "documentation": "<p>If true, then the column is removed.</p>",
          "shape": "BoxedBoolean"
        },
        "FromPath": {
          "documentation": "<p>The table or column to be modified.</p>",
          "shape": "EnclosedInStringProperties"
        },
        "FromType": {
          "documentation": "<p>The type of the data to be modified.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "ToKey": {
          "documentation": "<p>After the apply mapping, what the name of the column should be. Can be the same as <code>FromPath</code>.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "ToType": {
          "documentation": "<p>The data type that the data is to be modified to.</p>",
          "shape": "EnclosedInStringProperty"
        }
      },
      "type": "structure"
    },
    "MappingEntry": {
      "documentation": "<p>Defines a mapping.</p>",
      "members": {
        "SourcePath": {
          "documentation": "<p>The source path.</p>",
          "shape": "SchemaPathString"
        },
        "SourceTable": {
          "documentation": "<p>The name of the source table.</p>",
          "shape": "TableName"
        },
        "SourceType": {
          "documentation": "<p>The source type.</p>",
          "shape": "FieldType"
        },
        "TargetPath": {
          "documentation": "<p>The target path.</p>",
          "shape": "SchemaPathString"
        },
        "TargetTable": {
          "documentation": "<p>The target table.</p>",
          "shape": "TableName"
        },
        "TargetType": {
          "documentation": "<p>The target type.</p>",
          "shape": "FieldType"
        }
      },
      "type": "structure"
    },
    "MappingList": {
      "member": {
        "shape": "MappingEntry"
      },
      "type": "list"
    },
    "Mappings": {
      "member": {
        "shape": "Mapping"
      },
      "type": "list"
    },
    "MaskValue": {
      "max": 256,
      "min": 0,
      "pattern": "[*A-Za-z0-9_-]*",
      "type": "string"
    },
    "MatchCriteria": {
      "max": 10,
      "member": {
        "shape": "NameString"
      },
      "min": 0,
      "type": "list"
    },
    "MaxConcurrentRuns": {
      "type": "integer"
    },
    "MaxResultsNumber": {
      "box": true,
      "max": 100,
      "min": 1,
      "type": "integer"
    },
    "MaxRetries": {
      "type": "integer"
    },
    "Merge": {
      "documentation": "<p>Specifies a transform that merges a <code>DynamicFrame</code> with a staging <code>DynamicFrame</code> based on the specified primary keys to identify records. Duplicate records (records with the same primary keys) are not de-duplicated. </p>",
      "members": {
        "Inputs": {
          "documentation": "<p>The data inputs identified by their node names.</p>",
          "shape": "TwoInputs"
        },
        "Name": {
          "documentation": "<p>The name of the transform node.</p>",
          "shape": "NodeName"
        },
        "PrimaryKeys": {
          "documentation": "<p>The list of primary key fields to match records from the source and staging dynamic frames.</p>",
          "shape": "GlueStudioPathList"
        },
        "Source": {
          "documentation": "<p>The source <code>DynamicFrame</code> that will be merged with a staging <code>DynamicFrame</code>.</p>",
          "shape": "NodeId"
        }
      },
      "required": [
        "Name",
        "Inputs",
        "Source",
        "PrimaryKeys"
      ],
      "type": "structure"
    },
    "MessagePrefix": {
      "max": 255,
      "min": 1,
      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
      "type": "string"
    },
    "MessageString": {
      "type": "string"
    },
    "MetadataInfo": {
      "documentation": "<p>A structure containing metadata information for a schema version.</p>",
      "members": {
        "CreatedTime": {
          "documentation": "<p>The time at which the entry was created.</p>",
          "shape": "CreatedTimestamp"
        },
        "MetadataValue": {
          "documentation": "<p>The metadata key\u2019s corresponding value.</p>",
          "shape": "MetadataValueString"
        },
        "OtherMetadataValueList": {
          "documentation": "<p>Other metadata belonging to the same metadata key.</p>",
          "shape": "OtherMetadataValueList"
        }
      },
      "type": "structure"
    },
    "MetadataInfoMap": {
      "key": {
        "shape": "MetadataKeyString"
      },
      "type": "map",
      "value": {
        "shape": "MetadataInfo"
      }
    },
    "MetadataKeyString": {
      "max": 128,
      "min": 1,
      "pattern": "[a-zA-Z0-9+-=._./@]+",
      "type": "string"
    },
    "MetadataKeyValuePair": {
      "documentation": "<p>A structure containing a key value pair for metadata.</p>",
      "members": {
        "MetadataKey": {
          "documentation": "<p>A metadata key.</p>",
          "shape": "MetadataKeyString"
        },
        "MetadataValue": {
          "documentation": "<p>A metadata key\u2019s corresponding value.</p>",
          "shape": "MetadataValueString"
        }
      },
      "type": "structure"
    },
    "MetadataList": {
      "member": {
        "shape": "MetadataKeyValuePair"
      },
      "type": "list"
    },
    "MetadataValueString": {
      "max": 256,
      "min": 1,
      "pattern": "[a-zA-Z0-9+-=._./@]+",
      "type": "string"
    },
    "MicrosoftSQLServerCatalogSource": {
      "documentation": "<p>Specifies a Microsoft SQL server data source in the Glue Data Catalog.</p>",
      "members": {
        "Database": {
          "documentation": "<p>The name of the database to read from.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "Name": {
          "documentation": "<p>The name of the data source.</p>",
          "shape": "NodeName"
        },
        "Table": {
          "documentation": "<p>The name of the table in the database to read from.</p>",
          "shape": "EnclosedInStringProperty"
        }
      },
      "required": [
        "Name",
        "Database",
        "Table"
      ],
      "type": "structure"
    },
    "MicrosoftSQLServerCatalogTarget": {
      "documentation": "<p>Specifies a target that uses Microsoft SQL.</p>",
      "members": {
        "Database": {
          "documentation": "<p>The name of the database to write to.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "Inputs": {
          "documentation": "<p>The nodes that are inputs to the data target.</p>",
          "shape": "OneInput"
        },
        "Name": {
          "documentation": "<p>The name of the data target.</p>",
          "shape": "NodeName"
        },
        "Table": {
          "documentation": "<p>The name of the table in the database to write to.</p>",
          "shape": "EnclosedInStringProperty"
        }
      },
      "required": [
        "Name",
        "Inputs",
        "Database",
        "Table"
      ],
      "type": "structure"
    },
    "MillisecondsCount": {
      "type": "long"
    },
    "MongoDBTarget": {
      "documentation": "<p>Specifies an Amazon DocumentDB or MongoDB data store to crawl.</p>",
      "members": {
        "ConnectionName": {
          "documentation": "<p>The name of the connection to use to connect to the Amazon DocumentDB or MongoDB target.</p>",
          "shape": "ConnectionName"
        },
        "Path": {
          "documentation": "<p>The path of the Amazon DocumentDB or MongoDB target (database/collection).</p>",
          "shape": "Path"
        },
        "ScanAll": {
          "documentation": "<p>Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table.</p> <p>A value of <code>true</code> means to scan all records, while a value of <code>false</code> means to sample the records. If no value is specified, the value defaults to <code>true</code>.</p>",
          "shape": "NullableBoolean"
        }
      },
      "type": "structure"
    },
    "MongoDBTargetList": {
      "member": {
        "shape": "MongoDBTarget"
      },
      "type": "list"
    },
    "MySQLCatalogSource": {
      "documentation": "<p>Specifies a MySQL data source in the Glue Data Catalog.</p>",
      "members": {
        "Database": {
          "documentation": "<p>The name of the database to read from.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "Name": {
          "documentation": "<p>The name of the data source.</p>",
          "shape": "NodeName"
        },
        "Table": {
          "documentation": "<p>The name of the table in the database to read from.</p>",
          "shape": "EnclosedInStringProperty"
        }
      },
      "required": [
        "Name",
        "Database",
        "Table"
      ],
      "type": "structure"
    },
    "MySQLCatalogTarget": {
      "documentation": "<p>Specifies a target that uses MySQL.</p>",
      "members": {
        "Database": {
          "documentation": "<p>The name of the database to write to.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "Inputs": {
          "documentation": "<p>The nodes that are inputs to the data target.</p>",
          "shape": "OneInput"
        },
        "Name": {
          "documentation": "<p>The name of the data target.</p>",
          "shape": "NodeName"
        },
        "Table": {
          "documentation": "<p>The name of the table in the database to write to.</p>",
          "shape": "EnclosedInStringProperty"
        }
      },
      "required": [
        "Name",
        "Inputs",
        "Database",
        "Table"
      ],
      "type": "structure"
    },
    "NameString": {
      "max": 255,
      "min": 1,
      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
      "type": "string"
    },
    "NameStringList": {
      "member": {
        "shape": "NameString"
      },
      "type": "list"
    },
    "NoScheduleException": {
      "documentation": "<p>There is no applicable schedule.</p>",
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "Node": {
      "documentation": "<p>A node represents an Glue component (trigger, crawler, or job) on a workflow graph.</p>",
      "members": {
        "CrawlerDetails": {
          "documentation": "<p>Details of the crawler when the node represents a crawler.</p>",
          "shape": "CrawlerNodeDetails"
        },
        "JobDetails": {
          "documentation": "<p>Details of the Job when the node represents a Job.</p>",
          "shape": "JobNodeDetails"
        },
        "Name": {
          "documentation": "<p>The name of the Glue component represented by the node.</p>",
          "shape": "NameString"
        },
        "TriggerDetails": {
          "documentation": "<p>Details of the Trigger when the node represents a Trigger.</p>",
          "shape": "TriggerNodeDetails"
        },
        "Type": {
          "documentation": "<p>The type of Glue component represented by the node.</p>",
          "shape": "NodeType"
        },
        "UniqueId": {
          "documentation": "<p>The unique Id assigned to the node within the workflow.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "NodeId": {
      "pattern": "[A-Za-z0-9_-]*",
      "type": "string"
    },
    "NodeIdList": {
      "member": {
        "shape": "NameString"
      },
      "type": "list"
    },
    "NodeList": {
      "member": {
        "shape": "Node"
      },
      "type": "list"
    },
    "NodeName": {
      "pattern": "([\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF]|[^\\r\\n])*",
      "type": "string"
    },
    "NodeType": {
      "enum": [
        "CRAWLER",
        "JOB",
        "TRIGGER"
      ],
      "type": "string"
    },
    "NonNegativeDouble": {
      "min": 0.0,
      "type": "double"
    },
    "NonNegativeInt": {
      "min": 0,
      "type": "integer"
    },
    "NonNegativeInteger": {
      "min": 0,
      "type": "integer"
    },
    "NonNegativeLong": {
      "min": 0,
      "type": "long"
    },
    "NotificationProperty": {
      "documentation": "<p>Specifies configuration properties of a notification.</p>",
      "members": {
        "NotifyDelayAfter": {
          "documentation": "<p>After a job run starts, the number of minutes to wait before sending a job run delay notification.</p>",
          "shape": "NotifyDelayAfter"
        }
      },
      "type": "structure"
    },
    "NotifyDelayAfter": {
      "box": true,
      "min": 1,
      "type": "integer"
    },
    "NullCheckBoxList": {
      "documentation": "<p>Represents whether certain values are recognized as null values for removal.</p>",
      "members": {
        "IsEmpty": {
          "documentation": "<p>Specifies that an empty string is considered as a null value.</p>",
          "shape": "BoxedBoolean"
        },
        "IsNegOne": {
          "documentation": "<p>Specifies that an integer value of -1 is considered as a null value.</p>",
          "shape": "BoxedBoolean"
        },
        "IsNullString": {
          "documentation": "<p>Specifies that a value spelling out the word 'null' is considered as a null value.</p>",
          "shape": "BoxedBoolean"
        }
      },
      "type": "structure"
    },
    "NullValueField": {
      "documentation": "<p>Represents a custom null value such as a zeros or other value being used as a null placeholder unique to the dataset.</p>",
      "members": {
        "Datatype": {
          "documentation": "<p>The datatype of the value.</p>",
          "shape": "Datatype"
        },
        "Value": {
          "documentation": "<p>The value of the null placeholder.</p>",
          "shape": "EnclosedInStringProperty"
        }
      },
      "required": [
        "Value",
        "Datatype"
      ],
      "type": "structure"
    },
    "NullValueFields": {
      "max": 50,
      "member": {
        "shape": "NullValueField"
      },
      "min": 0,
      "type": "list"
    },
    "NullableBoolean": {
      "box": true,
      "type": "boolean"
    },
    "NullableDouble": {
      "box": true,
      "type": "double"
    },
    "NullableInteger": {
      "box": true,
      "type": "integer"
    },
    "OneInput": {
      "max": 1,
      "member": {
        "shape": "NodeId"
      },
      "min": 1,
      "type": "list"
    },
    "OperationTimeoutException": {
      "documentation": "<p>The operation timed out.</p>",
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "OracleSQLCatalogSource": {
      "documentation": "<p>Specifies an Oracle data source in the Glue Data Catalog.</p>",
      "members": {
        "Database": {
          "documentation": "<p>The name of the database to read from.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "Name": {
          "documentation": "<p>The name of the data source.</p>",
          "shape": "NodeName"
        },
        "Table": {
          "documentation": "<p>The name of the table in the database to read from.</p>",
          "shape": "EnclosedInStringProperty"
        }
      },
      "required": [
        "Name",
        "Database",
        "Table"
      ],
      "type": "structure"
    },
    "OracleSQLCatalogTarget": {
      "documentation": "<p>Specifies a target that uses Oracle SQL.</p>",
      "members": {
        "Database": {
          "documentation": "<p>The name of the database to write to.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "Inputs": {
          "documentation": "<p>The nodes that are inputs to the data target.</p>",
          "shape": "OneInput"
        },
        "Name": {
          "documentation": "<p>The name of the data target.</p>",
          "shape": "NodeName"
        },
        "Table": {
          "documentation": "<p>The name of the table in the database to write to.</p>",
          "shape": "EnclosedInStringProperty"
        }
      },
      "required": [
        "Name",
        "Inputs",
        "Database",
        "Table"
      ],
      "type": "structure"
    },
    "OrchestrationArgumentsMap": {
      "key": {
        "shape": "OrchestrationNameString"
      },
      "max": 75,
      "min": 0,
      "type": "map",
      "value": {
        "shape": "OrchestrationArgumentsValue"
      }
    },
    "OrchestrationArgumentsValue": {
      "max": 4096,
      "min": 0,
      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
      "type": "string"
    },
    "OrchestrationIAMRoleArn": {
      "max": 1024,
      "min": 1,
      "pattern": "arn:aws[^:]*:iam::[0-9]*:role/.+",
      "type": "string"
    },
    "OrchestrationNameString": {
      "max": 128,
      "min": 1,
      "pattern": "[\\.\\-_A-Za-z0-9]+",
      "type": "string"
    },
    "OrchestrationRoleArn": {
      "max": 2048,
      "min": 20,
      "pattern": "arn:aws[^:]*:iam::[0-9]*:role/.+",
      "type": "string"
    },
    "OrchestrationS3Location": {
      "max": 8192,
      "min": 1,
      "pattern": "^s3://([^/]+)/([^/]+/)*([^/]+)$",
      "type": "string"
    },
    "OrchestrationStatementCodeString": {
      "max": 68000,
      "type": "string"
    },
    "OrchestrationStringList": {
      "member": {
        "shape": "GenericString"
      },
      "type": "list"
    },
    "OrchestrationToken": {
      "max": 400000,
      "type": "string"
    },
    "Order": {
      "documentation": "<p>Specifies the sort order of a sorted column.</p>",
      "members": {
        "Column": {
          "documentation": "<p>The name of the column.</p>",
          "shape": "NameString"
        },
        "SortOrder": {
          "documentation": "<p>Indicates that the column is sorted in ascending order (<code>== 1</code>), or in descending order (<code>==0</code>).</p>",
          "shape": "IntegerFlag"
        }
      },
      "required": [
        "Column",
        "SortOrder"
      ],
      "type": "structure"
    },
    "OrderList": {
      "member": {
        "shape": "Order"
      },
      "type": "list"
    },
    "OtherMetadataValueList": {
      "member": {
        "shape": "OtherMetadataValueListItem"
      },
      "type": "list"
    },
    "OtherMetadataValueListItem": {
      "documentation": "<p>A structure containing other metadata for a schema version belonging to the same metadata key.</p>",
      "members": {
        "CreatedTime": {
          "documentation": "<p>The time at which the entry was created.</p>",
          "shape": "CreatedTimestamp"
        },
        "MetadataValue": {
          "documentation": "<p>The metadata key\u2019s corresponding value for the other metadata belonging to the same metadata key.</p>",
          "shape": "MetadataValueString"
        }
      },
      "type": "structure"
    },
    "PIIDetection": {
      "documentation": "<p>Specifies a transform that identifies, removes or masks PII data.</p>",
      "members": {
        "EntityTypesToDetect": {
          "documentation": "<p>Indicates the types of entities the PIIDetection transform will identify as PII data. </p> <p> PII type entities include: PERSON_NAME, DATE, USA_SNN, EMAIL, USA_ITIN, USA_PASSPORT_NUMBER, PHONE_NUMBER, BANK_ACCOUNT, IP_ADDRESS, MAC_ADDRESS, USA_CPT_CODE, USA_HCPCS_CODE, USA_NATIONAL_DRUG_CODE, USA_MEDICARE_BENEFICIARY_IDENTIFIER, USA_HEALTH_INSURANCE_CLAIM_NUMBER,CREDIT_CARD,USA_NATIONAL_PROVIDER_IDENTIFIER,USA_DEA_NUMBER,USA_DRIVING_LICENSE </p>",
          "shape": "EnclosedInStringProperties"
        },
        "Inputs": {
          "documentation": "<p>The node ID inputs to the transform.</p>",
          "shape": "OneInput"
        },
        "MaskValue": {
          "documentation": "<p>Indicates the value that will replace the detected entity. </p>",
          "shape": "MaskValue"
        },
        "Name": {
          "documentation": "<p>The name of the transform node.</p>",
          "shape": "NodeName"
        },
        "OutputColumnName": {
          "documentation": "<p>Indicates the output column name that will contain any entity type detected in that row. </p>",
          "shape": "EnclosedInStringProperty"
        },
        "PiiType": {
          "documentation": "<p>Indicates the type of PIIDetection transform. </p>",
          "shape": "PiiType"
        },
        "SampleFraction": {
          "documentation": "<p>Indicates the fraction of the data to sample when scanning for PII entities. </p>",
          "shape": "BoxedDoubleFraction"
        },
        "ThresholdFraction": {
          "documentation": "<p>Indicates the fraction of the data that must be met in order for a column to be identified as PII data. </p>",
          "shape": "BoxedDoubleFraction"
        }
      },
      "required": [
        "Name",
        "Inputs",
        "PiiType",
        "EntityTypesToDetect"
      ],
      "type": "structure"
    },
    "PageSize": {
      "box": true,
      "max": 1000,
      "min": 1,
      "type": "integer"
    },
    "PaginationToken": {
      "type": "string"
    },
    "ParametersMap": {
      "key": {
        "shape": "KeyString"
      },
      "type": "map",
      "value": {
        "shape": "ParametersMapValue"
      }
    },
    "ParametersMapValue": {
      "max": 512000,
      "type": "string"
    },
    "ParquetCompressionType": {
      "enum": [
        "snappy",
        "lzo",
        "gzip",
        "uncompressed",
        "none"
      ],
      "type": "string"
    },
    "Partition": {
      "documentation": "<p>Represents a slice of table data.</p>",
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog in which the partition resides.</p>",
          "shape": "CatalogIdString"
        },
        "CreationTime": {
          "documentation": "<p>The time at which the partition was created.</p>",
          "shape": "Timestamp"
        },
        "DatabaseName": {
          "documentation": "<p>The name of the catalog database in which to create the partition.</p>",
          "shape": "NameString"
        },
        "LastAccessTime": {
          "documentation": "<p>The last time at which the partition was accessed.</p>",
          "shape": "Timestamp"
        },
        "LastAnalyzedTime": {
          "documentation": "<p>The last time at which column statistics were computed for this partition.</p>",
          "shape": "Timestamp"
        },
        "Parameters": {
          "documentation": "<p>These key-value pairs define partition parameters.</p>",
          "shape": "ParametersMap"
        },
        "StorageDescriptor": {
          "documentation": "<p>Provides information about the physical location where the partition is stored.</p>",
          "shape": "StorageDescriptor"
        },
        "TableName": {
          "documentation": "<p>The name of the database table in which to create the partition.</p>",
          "shape": "NameString"
        },
        "Values": {
          "documentation": "<p>The values of the partition.</p>",
          "shape": "ValueStringList"
        }
      },
      "type": "structure"
    },
    "PartitionError": {
      "documentation": "<p>Contains information about a partition error.</p>",
      "members": {
        "ErrorDetail": {
          "documentation": "<p>The details about the partition error.</p>",
          "shape": "ErrorDetail"
        },
        "PartitionValues": {
          "documentation": "<p>The values that define the partition.</p>",
          "shape": "ValueStringList"
        }
      },
      "type": "structure"
    },
    "PartitionErrors": {
      "member": {
        "shape": "PartitionError"
      },
      "type": "list"
    },
    "PartitionIndex": {
      "documentation": "<p>A structure for a partition index.</p>",
      "members": {
        "IndexName": {
          "documentation": "<p>The name of the partition index.</p>",
          "shape": "NameString"
        },
        "Keys": {
          "documentation": "<p>The keys for the partition index.</p>",
          "shape": "KeyList"
        }
      },
      "required": [
        "Keys",
        "IndexName"
      ],
      "type": "structure"
    },
    "PartitionIndexDescriptor": {
      "documentation": "<p>A descriptor for a partition index in a table.</p>",
      "members": {
        "BackfillErrors": {
          "documentation": "<p>A list of errors that can occur when registering partition indexes for an existing table.</p>",
          "shape": "BackfillErrors"
        },
        "IndexName": {
          "documentation": "<p>The name of the partition index.</p>",
          "shape": "NameString"
        },
        "IndexStatus": {
          "documentation": "<p>The status of the partition index. </p> <p>The possible statuses are:</p> <ul> <li> <p>CREATING: The index is being created. When an index is in a CREATING state, the index or its table cannot be deleted.</p> </li> <li> <p>ACTIVE: The index creation succeeds.</p> </li> <li> <p>FAILED: The index creation fails. </p> </li> <li> <p>DELETING: The index is deleted from the list of indexes.</p> </li> </ul>",
          "shape": "PartitionIndexStatus"
        },
        "Keys": {
          "documentation": "<p>A list of one or more keys, as <code>KeySchemaElement</code> structures, for the partition index.</p>",
          "shape": "KeySchemaElementList"
        }
      },
      "required": [
        "IndexName",
        "Keys",
        "IndexStatus"
      ],
      "type": "structure"
    },
    "PartitionIndexDescriptorList": {
      "member": {
        "shape": "PartitionIndexDescriptor"
      },
      "type": "list"
    },
    "PartitionIndexList": {
      "max": 3,
      "member": {
        "shape": "PartitionIndex"
      },
      "type": "list"
    },
    "PartitionIndexStatus": {
      "enum": [
        "CREATING",
        "ACTIVE",
        "DELETING",
        "FAILED"
      ],
      "type": "string"
    },
    "PartitionInput": {
      "documentation": "<p>The structure used to create and update a partition.</p>",
      "members": {
        "LastAccessTime": {
          "documentation": "<p>The last time at which the partition was accessed.</p>",
          "shape": "Timestamp"
        },
        "LastAnalyzedTime": {
          "documentation": "<p>The last time at which column statistics were computed for this partition.</p>",
          "shape": "Timestamp"
        },
        "Parameters": {
          "documentation": "<p>These key-value pairs define partition parameters.</p>",
          "shape": "ParametersMap"
        },
        "StorageDescriptor": {
          "documentation": "<p>Provides information about the physical location where the partition is stored.</p>",
          "shape": "StorageDescriptor"
        },
        "Values": {
          "documentation": "<p>The values of the partition. Although this parameter is not required by the SDK, you must specify this parameter for a valid input.</p> <p>The values for the keys for the new partition must be passed as an array of String objects that must be ordered in the same order as the partition keys appearing in the Amazon S3 prefix. Otherwise Glue will add the values to the wrong keys.</p>",
          "shape": "ValueStringList"
        }
      },
      "type": "structure"
    },
    "PartitionInputList": {
      "max": 100,
      "member": {
        "shape": "PartitionInput"
      },
      "min": 0,
      "type": "list"
    },
    "PartitionList": {
      "member": {
        "shape": "Partition"
      },
      "type": "list"
    },
    "PartitionValueList": {
      "documentation": "<p>Contains a list of values defining partitions.</p>",
      "members": {
        "Values": {
          "documentation": "<p>The list of values.</p>",
          "shape": "ValueStringList"
        }
      },
      "required": [
        "Values"
      ],
      "type": "structure"
    },
    "Path": {
      "type": "string"
    },
    "PathList": {
      "member": {
        "shape": "Path"
      },
      "type": "list"
    },
    "Permission": {
      "enum": [
        "ALL",
        "SELECT",
        "ALTER",
        "DROP",
        "DELETE",
        "INSERT",
        "CREATE_DATABASE",
        "CREATE_TABLE",
        "DATA_LOCATION_ACCESS"
      ],
      "type": "string"
    },
    "PermissionList": {
      "member": {
        "shape": "Permission"
      },
      "type": "list"
    },
    "PermissionType": {
      "enum": [
        "COLUMN_PERMISSION",
        "CELL_FILTER_PERMISSION"
      ],
      "type": "string"
    },
    "PermissionTypeList": {
      "max": 255,
      "member": {
        "shape": "PermissionType"
      },
      "min": 1,
      "type": "list"
    },
    "PermissionTypeMismatchException": {
      "exception": true,
      "members": {
        "Message": {
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "PhysicalConnectionRequirements": {
      "documentation": "<p>Specifies the physical requirements for a connection.</p>",
      "members": {
        "AvailabilityZone": {
          "documentation": "<p>The connection's Availability Zone. This field is redundant because the specified subnet implies the Availability Zone to be used. Currently the field must be populated, but it will be deprecated in the future.</p>",
          "shape": "NameString"
        },
        "SecurityGroupIdList": {
          "documentation": "<p>The security group ID list used by the connection.</p>",
          "shape": "SecurityGroupIdList"
        },
        "SubnetId": {
          "documentation": "<p>The subnet ID used by the connection.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "PiiType": {
      "enum": [
        "RowAudit",
        "RowMasking",
        "ColumnAudit",
        "ColumnMasking"
      ],
      "type": "string"
    },
    "PolicyJsonString": {
      "min": 2,
      "type": "string"
    },
    "PollingTime": {
      "box": true,
      "min": 10,
      "type": "long"
    },
    "PositiveLong": {
      "box": true,
      "min": 1,
      "type": "long"
    },
    "PostgreSQLCatalogSource": {
      "documentation": "<p>Specifies a PostgresSQL data source in the Glue Data Catalog.</p>",
      "members": {
        "Database": {
          "documentation": "<p>The name of the database to read from.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "Name": {
          "documentation": "<p>The name of the data source.</p>",
          "shape": "NodeName"
        },
        "Table": {
          "documentation": "<p>The name of the table in the database to read from.</p>",
          "shape": "EnclosedInStringProperty"
        }
      },
      "required": [
        "Name",
        "Database",
        "Table"
      ],
      "type": "structure"
    },
    "PostgreSQLCatalogTarget": {
      "documentation": "<p>Specifies a target that uses Postgres SQL.</p>",
      "members": {
        "Database": {
          "documentation": "<p>The name of the database to write to.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "Inputs": {
          "documentation": "<p>The nodes that are inputs to the data target.</p>",
          "shape": "OneInput"
        },
        "Name": {
          "documentation": "<p>The name of the data target.</p>",
          "shape": "NodeName"
        },
        "Table": {
          "documentation": "<p>The name of the table in the database to write to.</p>",
          "shape": "EnclosedInStringProperty"
        }
      },
      "required": [
        "Name",
        "Inputs",
        "Database",
        "Table"
      ],
      "type": "structure"
    },
    "Predecessor": {
      "documentation": "<p>A job run that was used in the predicate of a conditional trigger that triggered this job run.</p>",
      "members": {
        "JobName": {
          "documentation": "<p>The name of the job definition used by the predecessor job run.</p>",
          "shape": "NameString"
        },
        "RunId": {
          "documentation": "<p>The job-run ID of the predecessor job run.</p>",
          "shape": "IdString"
        }
      },
      "type": "structure"
    },
    "PredecessorList": {
      "member": {
        "shape": "Predecessor"
      },
      "type": "list"
    },
    "Predicate": {
      "documentation": "<p>Defines the predicate of the trigger, which determines when it fires.</p>",
      "members": {
        "Conditions": {
          "documentation": "<p>A list of the conditions that determine when the trigger will fire.</p>",
          "shape": "ConditionList"
        },
        "Logical": {
          "documentation": "<p>An optional field if only one condition is listed. If multiple conditions are listed, then this field is required.</p>",
          "shape": "Logical"
        }
      },
      "type": "structure"
    },
    "PredicateString": {
      "max": 2048,
      "min": 0,
      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
      "type": "string"
    },
    "PrincipalPermissions": {
      "documentation": "<p>Permissions granted to a principal.</p>",
      "members": {
        "Permissions": {
          "documentation": "<p>The permissions that are granted to the principal.</p>",
          "shape": "PermissionList"
        },
        "Principal": {
          "documentation": "<p>The principal who is granted permissions.</p>",
          "shape": "DataLakePrincipal"
        }
      },
      "type": "structure"
    },
    "PrincipalPermissionsList": {
      "member": {
        "shape": "PrincipalPermissions"
      },
      "type": "list"
    },
    "PrincipalType": {
      "enum": [
        "USER",
        "ROLE",
        "GROUP"
      ],
      "type": "string"
    },
    "Prob": {
      "box": true,
      "max": 1,
      "min": 0,
      "type": "double"
    },
    "PropertyPredicate": {
      "documentation": "<p>Defines a property predicate.</p>",
      "members": {
        "Comparator": {
          "documentation": "<p>The comparator used to compare this property to others.</p>",
          "shape": "Comparator"
        },
        "Key": {
          "documentation": "<p>The key of the property.</p>",
          "shape": "ValueString"
        },
        "Value": {
          "documentation": "<p>The value of the property.</p>",
          "shape": "ValueString"
        }
      },
      "type": "structure"
    },
    "PublicKeysList": {
      "max": 5,
      "member": {
        "shape": "GenericString"
      },
      "type": "list"
    },
    "PutDataCatalogEncryptionSettingsRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog to set the security configuration for. If none is provided, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "DataCatalogEncryptionSettings": {
          "documentation": "<p>The security configuration to set.</p>",
          "shape": "DataCatalogEncryptionSettings"
        }
      },
      "required": [
        "DataCatalogEncryptionSettings"
      ],
      "type": "structure"
    },
    "PutDataCatalogEncryptionSettingsResponse": {
      "members": {},
      "type": "structure"
    },
    "PutResourcePolicyRequest": {
      "members": {
        "EnableHybrid": {
          "documentation": "<p>If <code>'TRUE'</code>, indicates that you are using both methods to grant cross-account access to Data Catalog resources:</p> <ul> <li> <p>By directly updating the resource policy with <code>PutResourePolicy</code> </p> </li> <li> <p>By using the <b>Grant permissions</b> command on the Amazon Web Services Management Console.</p> </li> </ul> <p>Must be set to <code>'TRUE'</code> if you have already used the Management Console to grant cross-account access, otherwise the call fails. Default is 'FALSE'.</p>",
          "shape": "EnableHybridValues"
        },
        "PolicyExistsCondition": {
          "documentation": "<p>A value of <code>MUST_EXIST</code> is used to update a policy. A value of <code>NOT_EXIST</code> is used to create a new policy. If a value of <code>NONE</code> or a null value is used, the call does not depend on the existence of a policy.</p>",
          "shape": "ExistCondition"
        },
        "PolicyHashCondition": {
          "documentation": "<p>The hash value returned when the previous policy was set using <code>PutResourcePolicy</code>. Its purpose is to prevent concurrent modifications of a policy. Do not use this parameter if no previous policy has been set.</p>",
          "shape": "HashString"
        },
        "PolicyInJson": {
          "documentation": "<p>Contains the policy document to set, in JSON format.</p>",
          "shape": "PolicyJsonString"
        },
        "ResourceArn": {
          "documentation": "<p>Do not use. For internal use only.</p>",
          "shape": "GlueResourceArn"
        }
      },
      "required": [
        "PolicyInJson"
      ],
      "type": "structure"
    },
    "PutResourcePolicyResponse": {
      "members": {
        "PolicyHash": {
          "documentation": "<p>A hash of the policy that has just been set. This must be included in a subsequent call that overwrites or updates this policy.</p>",
          "shape": "HashString"
        }
      },
      "type": "structure"
    },
    "PutSchemaVersionMetadataInput": {
      "members": {
        "MetadataKeyValue": {
          "documentation": "<p>The metadata key's corresponding value.</p>",
          "shape": "MetadataKeyValuePair"
        },
        "SchemaId": {
          "documentation": "<p>The unique ID for the schema.</p>",
          "shape": "SchemaId"
        },
        "SchemaVersionId": {
          "documentation": "<p>The unique version ID of the schema version.</p>",
          "shape": "SchemaVersionIdString"
        },
        "SchemaVersionNumber": {
          "documentation": "<p>The version number of the schema.</p>",
          "shape": "SchemaVersionNumber"
        }
      },
      "required": [
        "MetadataKeyValue"
      ],
      "type": "structure"
    },
    "PutSchemaVersionMetadataResponse": {
      "members": {
        "LatestVersion": {
          "documentation": "<p>The latest version of the schema.</p>",
          "shape": "LatestSchemaVersionBoolean"
        },
        "MetadataKey": {
          "documentation": "<p>The metadata key.</p>",
          "shape": "MetadataKeyString"
        },
        "MetadataValue": {
          "documentation": "<p>The value of the metadata key.</p>",
          "shape": "MetadataValueString"
        },
        "RegistryName": {
          "documentation": "<p>The name for the registry.</p>",
          "shape": "SchemaRegistryNameString"
        },
        "SchemaArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) for the schema.</p>",
          "shape": "GlueResourceArn"
        },
        "SchemaName": {
          "documentation": "<p>The name for the schema.</p>",
          "shape": "SchemaRegistryNameString"
        },
        "SchemaVersionId": {
          "documentation": "<p>The unique version ID of the schema version.</p>",
          "shape": "SchemaVersionIdString"
        },
        "VersionNumber": {
          "documentation": "<p>The version number of the schema.</p>",
          "shape": "VersionLongNumber"
        }
      },
      "type": "structure"
    },
    "PutWorkflowRunPropertiesRequest": {
      "members": {
        "Name": {
          "documentation": "<p>Name of the workflow which was run.</p>",
          "shape": "NameString"
        },
        "RunId": {
          "documentation": "<p>The ID of the workflow run for which the run properties should be updated.</p>",
          "shape": "IdString"
        },
        "RunProperties": {
          "documentation": "<p>The properties to put for the specified run.</p>",
          "shape": "WorkflowRunProperties"
        }
      },
      "required": [
        "Name",
        "RunId",
        "RunProperties"
      ],
      "type": "structure"
    },
    "PutWorkflowRunPropertiesResponse": {
      "members": {},
      "type": "structure"
    },
    "PythonScript": {
      "type": "string"
    },
    "PythonVersionString": {
      "pattern": "^([2-3]|3[.]9)$",
      "type": "string"
    },
    "QuerySchemaVersionMetadataInput": {
      "members": {
        "MaxResults": {
          "documentation": "<p>Maximum number of results required per page. If the value is not supplied, this will be defaulted to 25 per page.</p>",
          "shape": "QuerySchemaVersionMetadataMaxResults"
        },
        "MetadataList": {
          "documentation": "<p>Search key-value pairs for metadata, if they are not provided all the metadata information will be fetched.</p>",
          "shape": "MetadataList"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if this is a continuation call.</p>",
          "shape": "SchemaRegistryTokenString"
        },
        "SchemaId": {
          "documentation": "<p>A wrapper structure that may contain the schema name and Amazon Resource Name (ARN).</p>",
          "shape": "SchemaId"
        },
        "SchemaVersionId": {
          "documentation": "<p>The unique version ID of the schema version.</p>",
          "shape": "SchemaVersionIdString"
        },
        "SchemaVersionNumber": {
          "documentation": "<p>The version number of the schema.</p>",
          "shape": "SchemaVersionNumber"
        }
      },
      "type": "structure"
    },
    "QuerySchemaVersionMetadataMaxResults": {
      "max": 50,
      "min": 1,
      "type": "integer"
    },
    "QuerySchemaVersionMetadataResponse": {
      "members": {
        "MetadataInfoMap": {
          "documentation": "<p>A map of a metadata key and associated values.</p>",
          "shape": "MetadataInfoMap"
        },
        "NextToken": {
          "documentation": "<p>A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.</p>",
          "shape": "SchemaRegistryTokenString"
        },
        "SchemaVersionId": {
          "documentation": "<p>The unique version ID of the schema version.</p>",
          "shape": "SchemaVersionIdString"
        }
      },
      "type": "structure"
    },
    "QuoteChar": {
      "enum": [
        "quote",
        "quillemet",
        "single_quote",
        "disabled"
      ],
      "type": "string"
    },
    "RecordsCount": {
      "box": true,
      "type": "long"
    },
    "RecrawlBehavior": {
      "enum": [
        "CRAWL_EVERYTHING",
        "CRAWL_NEW_FOLDERS_ONLY",
        "CRAWL_EVENT_MODE"
      ],
      "type": "string"
    },
    "RecrawlPolicy": {
      "documentation": "<p>When crawling an Amazon S3 data source after the first crawl is complete, specifies whether to crawl the entire dataset again or to crawl only folders that were added since the last crawler run. For more information, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/incremental-crawls.html\">Incremental Crawls in Glue</a> in the developer guide.</p>",
      "members": {
        "RecrawlBehavior": {
          "documentation": "<p>Specifies whether to crawl the entire dataset again or to crawl only folders that were added since the last crawler run.</p> <p>A value of <code>CRAWL_EVERYTHING</code> specifies crawling the entire dataset again.</p> <p>A value of <code>CRAWL_NEW_FOLDERS_ONLY</code> specifies crawling only folders that were added since the last crawler run.</p> <p>A value of <code>CRAWL_EVENT_MODE</code> specifies crawling only the changes identified by Amazon S3 events.</p>",
          "shape": "RecrawlBehavior"
        }
      },
      "type": "structure"
    },
    "RedshiftSource": {
      "documentation": "<p>Specifies an Amazon Redshift data store.</p>",
      "members": {
        "Database": {
          "documentation": "<p>The database to read from.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "Name": {
          "documentation": "<p>The name of the Amazon Redshift data store.</p>",
          "shape": "NodeName"
        },
        "RedshiftTmpDir": {
          "documentation": "<p>The Amazon S3 path where temporary data can be staged when copying out of the database.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "Table": {
          "documentation": "<p>The database table to read from.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "TmpDirIAMRole": {
          "documentation": "<p>The IAM role with permissions.</p>",
          "shape": "EnclosedInStringProperty"
        }
      },
      "required": [
        "Name",
        "Database",
        "Table"
      ],
      "type": "structure"
    },
    "RedshiftTarget": {
      "documentation": "<p>Specifies a target that uses Amazon Redshift.</p>",
      "members": {
        "Database": {
          "documentation": "<p>The name of the database to write to.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "Inputs": {
          "documentation": "<p>The nodes that are inputs to the data target.</p>",
          "shape": "OneInput"
        },
        "Name": {
          "documentation": "<p>The name of the data target.</p>",
          "shape": "NodeName"
        },
        "RedshiftTmpDir": {
          "documentation": "<p>The Amazon S3 path where temporary data can be staged when copying out of the database.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "Table": {
          "documentation": "<p>The name of the table in the database to write to.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "TmpDirIAMRole": {
          "documentation": "<p>The IAM role with permissions.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "UpsertRedshiftOptions": {
          "documentation": "<p>The set of options to configure an upsert operation when writing to a Redshift target.</p>",
          "shape": "UpsertRedshiftTargetOptions"
        }
      },
      "required": [
        "Name",
        "Inputs",
        "Database",
        "Table"
      ],
      "type": "structure"
    },
    "RegisterSchemaVersionInput": {
      "members": {
        "SchemaDefinition": {
          "documentation": "<p>The schema definition using the <code>DataFormat</code> setting for the <code>SchemaName</code>.</p>",
          "shape": "SchemaDefinitionString"
        },
        "SchemaId": {
          "documentation": "<p>This is a wrapper structure to contain schema identity fields. The structure contains:</p> <ul> <li> <p>SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. Either <code>SchemaArn</code> or <code>SchemaName</code> and <code>RegistryName</code> has to be provided.</p> </li> <li> <p>SchemaId$SchemaName: The name of the schema. Either <code>SchemaArn</code> or <code>SchemaName</code> and <code>RegistryName</code> has to be provided.</p> </li> </ul>",
          "shape": "SchemaId"
        }
      },
      "required": [
        "SchemaId",
        "SchemaDefinition"
      ],
      "type": "structure"
    },
    "RegisterSchemaVersionResponse": {
      "members": {
        "SchemaVersionId": {
          "documentation": "<p>The unique ID that represents the version of this schema.</p>",
          "shape": "SchemaVersionIdString"
        },
        "Status": {
          "documentation": "<p>The status of the schema version.</p>",
          "shape": "SchemaVersionStatus"
        },
        "VersionNumber": {
          "documentation": "<p>The version of this schema (for sync flow only, in case this is the first version).</p>",
          "shape": "VersionLongNumber"
        }
      },
      "type": "structure"
    },
    "RegistryId": {
      "documentation": "<p>A wrapper structure that may contain the registry name and Amazon Resource Name (ARN).</p>",
      "members": {
        "RegistryArn": {
          "documentation": "<p>Arn of the registry to be updated. One of <code>RegistryArn</code> or <code>RegistryName</code> has to be provided.</p>",
          "shape": "GlueResourceArn"
        },
        "RegistryName": {
          "documentation": "<p>Name of the registry. Used only for lookup. One of <code>RegistryArn</code> or <code>RegistryName</code> has to be provided. </p>",
          "shape": "SchemaRegistryNameString"
        }
      },
      "type": "structure"
    },
    "RegistryListDefinition": {
      "member": {
        "shape": "RegistryListItem"
      },
      "type": "list"
    },
    "RegistryListItem": {
      "documentation": "<p>A structure containing the details for a registry.</p>",
      "members": {
        "CreatedTime": {
          "documentation": "<p>The data the registry was created.</p>",
          "shape": "CreatedTimestamp"
        },
        "Description": {
          "documentation": "<p>A description of the registry.</p>",
          "shape": "DescriptionString"
        },
        "RegistryArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the registry.</p>",
          "shape": "GlueResourceArn"
        },
        "RegistryName": {
          "documentation": "<p>The name of the registry.</p>",
          "shape": "SchemaRegistryNameString"
        },
        "Status": {
          "documentation": "<p>The status of the registry.</p>",
          "shape": "RegistryStatus"
        },
        "UpdatedTime": {
          "documentation": "<p>The date the registry was updated.</p>",
          "shape": "UpdatedTimestamp"
        }
      },
      "type": "structure"
    },
    "RegistryStatus": {
      "enum": [
        "AVAILABLE",
        "DELETING"
      ],
      "type": "string"
    },
    "RelationalCatalogSource": {
      "documentation": "<p>Specifies a Relational database data source in the Glue Data Catalog.</p>",
      "members": {
        "Database": {
          "documentation": "<p>The name of the database to read from.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "Name": {
          "documentation": "<p>The name of the data source.</p>",
          "shape": "NodeName"
        },
        "Table": {
          "documentation": "<p>The name of the table in the database to read from.</p>",
          "shape": "EnclosedInStringProperty"
        }
      },
      "required": [
        "Name",
        "Database",
        "Table"
      ],
      "type": "structure"
    },
    "RemoveSchemaVersionMetadataInput": {
      "members": {
        "MetadataKeyValue": {
          "documentation": "<p>The value of the metadata key.</p>",
          "shape": "MetadataKeyValuePair"
        },
        "SchemaId": {
          "documentation": "<p>A wrapper structure that may contain the schema name and Amazon Resource Name (ARN).</p>",
          "shape": "SchemaId"
        },
        "SchemaVersionId": {
          "documentation": "<p>The unique version ID of the schema version.</p>",
          "shape": "SchemaVersionIdString"
        },
        "SchemaVersionNumber": {
          "documentation": "<p>The version number of the schema.</p>",
          "shape": "SchemaVersionNumber"
        }
      },
      "required": [
        "MetadataKeyValue"
      ],
      "type": "structure"
    },
    "RemoveSchemaVersionMetadataResponse": {
      "members": {
        "LatestVersion": {
          "documentation": "<p>The latest version of the schema.</p>",
          "shape": "LatestSchemaVersionBoolean"
        },
        "MetadataKey": {
          "documentation": "<p>The metadata key.</p>",
          "shape": "MetadataKeyString"
        },
        "MetadataValue": {
          "documentation": "<p>The value of the metadata key.</p>",
          "shape": "MetadataValueString"
        },
        "RegistryName": {
          "documentation": "<p>The name of the registry.</p>",
          "shape": "SchemaRegistryNameString"
        },
        "SchemaArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the schema.</p>",
          "shape": "GlueResourceArn"
        },
        "SchemaName": {
          "documentation": "<p>The name of the schema.</p>",
          "shape": "SchemaRegistryNameString"
        },
        "SchemaVersionId": {
          "documentation": "<p>The version ID for the schema version.</p>",
          "shape": "SchemaVersionIdString"
        },
        "VersionNumber": {
          "documentation": "<p>The version number of the schema.</p>",
          "shape": "VersionLongNumber"
        }
      },
      "type": "structure"
    },
    "RenameField": {
      "documentation": "<p>Specifies a transform that renames a single data property key.</p>",
      "members": {
        "Inputs": {
          "documentation": "<p>The data inputs identified by their node names.</p>",
          "shape": "OneInput"
        },
        "Name": {
          "documentation": "<p>The name of the transform node.</p>",
          "shape": "NodeName"
        },
        "SourcePath": {
          "documentation": "<p>A JSON path to a variable in the data structure for the source data.</p>",
          "shape": "EnclosedInStringProperties"
        },
        "TargetPath": {
          "documentation": "<p>A JSON path to a variable in the data structure for the target data.</p>",
          "shape": "EnclosedInStringProperties"
        }
      },
      "required": [
        "Name",
        "Inputs",
        "SourcePath",
        "TargetPath"
      ],
      "type": "structure"
    },
    "ReplaceBoolean": {
      "type": "boolean"
    },
    "ResetJobBookmarkRequest": {
      "members": {
        "JobName": {
          "documentation": "<p>The name of the job in question.</p>",
          "shape": "JobName"
        },
        "RunId": {
          "documentation": "<p>The unique run identifier associated with this job run.</p>",
          "shape": "RunId"
        }
      },
      "required": [
        "JobName"
      ],
      "type": "structure"
    },
    "ResetJobBookmarkResponse": {
      "members": {
        "JobBookmarkEntry": {
          "documentation": "<p>The reset bookmark entry.</p>",
          "shape": "JobBookmarkEntry"
        }
      },
      "type": "structure"
    },
    "ResourceNotReadyException": {
      "documentation": "<p>A resource was not ready for a transaction.</p>",
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "ResourceNumberLimitExceededException": {
      "documentation": "<p>A resource numerical limit was exceeded.</p>",
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "ResourceShareType": {
      "enum": [
        "FOREIGN",
        "ALL"
      ],
      "type": "string"
    },
    "ResourceType": {
      "enum": [
        "JAR",
        "FILE",
        "ARCHIVE"
      ],
      "type": "string"
    },
    "ResourceUri": {
      "documentation": "<p>The URIs for function resources.</p>",
      "members": {
        "ResourceType": {
          "documentation": "<p>The type of the resource.</p>",
          "shape": "ResourceType"
        },
        "Uri": {
          "documentation": "<p>The URI for accessing the resource.</p>",
          "shape": "URI"
        }
      },
      "type": "structure"
    },
    "ResourceUriList": {
      "max": 1000,
      "member": {
        "shape": "ResourceUri"
      },
      "min": 0,
      "type": "list"
    },
    "ResumeWorkflowRunRequest": {
      "members": {
        "Name": {
          "documentation": "<p>The name of the workflow to resume.</p>",
          "shape": "NameString"
        },
        "NodeIds": {
          "documentation": "<p>A list of the node IDs for the nodes you want to restart. The nodes that are to be restarted must have a run attempt in the original run.</p>",
          "shape": "NodeIdList"
        },
        "RunId": {
          "documentation": "<p>The ID of the workflow run to resume.</p>",
          "shape": "IdString"
        }
      },
      "required": [
        "Name",
        "RunId",
        "NodeIds"
      ],
      "type": "structure"
    },
    "ResumeWorkflowRunResponse": {
      "members": {
        "NodeIds": {
          "documentation": "<p>A list of the node IDs for the nodes that were actually restarted.</p>",
          "shape": "NodeIdList"
        },
        "RunId": {
          "documentation": "<p>The new ID assigned to the resumed workflow run. Each resume of a workflow run will have a new run ID.</p>",
          "shape": "IdString"
        }
      },
      "type": "structure"
    },
    "Role": {
      "type": "string"
    },
    "RoleArn": {
      "pattern": "arn:aws:iam::\\d{12}:role/.*",
      "type": "string"
    },
    "RoleString": {
      "type": "string"
    },
    "RowTag": {
      "type": "string"
    },
    "RunId": {
      "type": "string"
    },
    "RunStatementRequest": {
      "members": {
        "Code": {
          "documentation": "<p>The statement code to be run.</p>",
          "shape": "OrchestrationStatementCodeString"
        },
        "RequestOrigin": {
          "documentation": "<p>The origin of the request.</p>",
          "shape": "OrchestrationNameString"
        },
        "SessionId": {
          "documentation": "<p>The Session Id of the statement to be run.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "SessionId",
        "Code"
      ],
      "type": "structure"
    },
    "RunStatementResponse": {
      "members": {
        "Id": {
          "documentation": "<p>Returns the Id of the statement that was run.</p>",
          "shape": "IntegerValue"
        }
      },
      "type": "structure"
    },
    "S3CatalogSource": {
      "documentation": "<p>Specifies an Amazon S3 data store in the Glue Data Catalog.</p>",
      "members": {
        "AdditionalOptions": {
          "documentation": "<p>Specifies additional connection options.</p>",
          "shape": "S3SourceAdditionalOptions"
        },
        "Database": {
          "documentation": "<p>The database to read from.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "Name": {
          "documentation": "<p>The name of the data store.</p>",
          "shape": "NodeName"
        },
        "PartitionPredicate": {
          "documentation": "<p>Partitions satisfying this predicate are deleted. Files within the retention period in these partitions are not deleted. Set to <code>\"\"</code> \u2013 empty by default.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "Table": {
          "documentation": "<p>The database table to read from.</p>",
          "shape": "EnclosedInStringProperty"
        }
      },
      "required": [
        "Name",
        "Database",
        "Table"
      ],
      "type": "structure"
    },
    "S3CatalogTarget": {
      "documentation": "<p>Specifies a data target that writes to Amazon S3 using the Glue Data Catalog.</p>",
      "members": {
        "Database": {
          "documentation": "<p>The name of the database to write to.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "Inputs": {
          "documentation": "<p>The nodes that are inputs to the data target.</p>",
          "shape": "OneInput"
        },
        "Name": {
          "documentation": "<p>The name of the data target.</p>",
          "shape": "NodeName"
        },
        "PartitionKeys": {
          "documentation": "<p>Specifies native partitioning using a sequence of keys.</p>",
          "shape": "GlueStudioPathList"
        },
        "SchemaChangePolicy": {
          "documentation": "<p>A policy that specifies update behavior for the crawler.</p>",
          "shape": "CatalogSchemaChangePolicy"
        },
        "Table": {
          "documentation": "<p>The name of the table in the database to write to.</p>",
          "shape": "EnclosedInStringProperty"
        }
      },
      "required": [
        "Name",
        "Inputs",
        "Table",
        "Database"
      ],
      "type": "structure"
    },
    "S3CsvSource": {
      "documentation": "<p>Specifies a command-separated value (CSV) data store stored in Amazon S3.</p>",
      "members": {
        "AdditionalOptions": {
          "documentation": "<p>Specifies additional connection options.</p>",
          "shape": "S3DirectSourceAdditionalOptions"
        },
        "CompressionType": {
          "documentation": "<p>Specifies how the data is compressed. This is generally not necessary if the data has a standard file extension. Possible values are <code>\"gzip\"</code> and <code>\"bzip\"</code>).</p>",
          "shape": "CompressionType"
        },
        "Escaper": {
          "documentation": "<p>Specifies a character to use for escaping. This option is used only when reading CSV files. The default value is <code>none</code>. If enabled, the character which immediately follows is used as-is, except for a small set of well-known escapes (<code>\\n</code>, <code>\\r</code>, <code>\\t</code>, and <code>\\0</code>).</p>",
          "shape": "EnclosedInStringPropertyWithQuote"
        },
        "Exclusions": {
          "documentation": "<p>A string containing a JSON list of Unix-style glob patterns to exclude. For example, \"[\\\"**.pdf\\\"]\" excludes all PDF files. </p>",
          "shape": "EnclosedInStringProperties"
        },
        "GroupFiles": {
          "documentation": "<p>Grouping files is turned on by default when the input contains more than 50,000 files. To turn on grouping with fewer than 50,000 files, set this parameter to \"inPartition\". To disable grouping when there are more than 50,000 files, set this parameter to <code>\"none\"</code>.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "GroupSize": {
          "documentation": "<p>The target group size in bytes. The default is computed based on the input data size and the size of your cluster. When there are fewer than 50,000 input files, <code>\"groupFiles\"</code> must be set to <code>\"inPartition\"</code> for this to take effect.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "MaxBand": {
          "documentation": "<p>This option controls the duration in milliseconds after which the s3 listing is likely to be consistent. Files with modification timestamps falling within the last maxBand milliseconds are tracked specially when using JobBookmarks to account for Amazon S3 eventual consistency. Most users don't need to set this option. The default is 900000 milliseconds, or 15 minutes.</p>",
          "shape": "BoxedNonNegativeInt"
        },
        "MaxFilesInBand": {
          "documentation": "<p>This option specifies the maximum number of files to save from the last maxBand seconds. If this number is exceeded, extra files are skipped and only processed in the next job run.</p>",
          "shape": "BoxedNonNegativeInt"
        },
        "Multiline": {
          "documentation": "<p>A Boolean value that specifies whether a single record can span multiple lines. This can occur when a field contains a quoted new-line character. You must set this option to True if any record spans multiple lines. The default value is <code>False</code>, which allows for more aggressive file-splitting during parsing.</p>",
          "shape": "BoxedBoolean"
        },
        "Name": {
          "documentation": "<p>The name of the data store.</p>",
          "shape": "NodeName"
        },
        "OptimizePerformance": {
          "documentation": "<p>A Boolean value that specifies whether to use the advanced SIMD CSV reader along with Apache Arrow based columnar memory formats. Only available in Glue version 3.0.</p>",
          "shape": "BooleanValue"
        },
        "OutputSchemas": {
          "documentation": "<p>Specifies the data schema for the S3 CSV source.</p>",
          "shape": "GlueSchemas"
        },
        "Paths": {
          "documentation": "<p>A list of the Amazon S3 paths to read from.</p>",
          "shape": "EnclosedInStringProperties"
        },
        "QuoteChar": {
          "documentation": "<p>Specifies the character to use for quoting. The default is a double quote: <code>'\"'</code>. Set this to <code>-1</code> to turn off quoting entirely.</p>",
          "shape": "QuoteChar"
        },
        "Recurse": {
          "documentation": "<p>If set to true, recursively reads files in all subdirectories under the specified paths.</p>",
          "shape": "BoxedBoolean"
        },
        "Separator": {
          "documentation": "<p>Specifies the delimiter character. The default is a comma: \",\", but any other character can be specified.</p>",
          "shape": "Separator"
        },
        "SkipFirst": {
          "documentation": "<p>A Boolean value that specifies whether to skip the first data line. The default value is <code>False</code>.</p>",
          "shape": "BoxedBoolean"
        },
        "WithHeader": {
          "documentation": "<p>A Boolean value that specifies whether to treat the first line as a header. The default value is <code>False</code>.</p>",
          "shape": "BoxedBoolean"
        },
        "WriteHeader": {
          "documentation": "<p>A Boolean value that specifies whether to write the header to output. The default value is <code>True</code>. </p>",
          "shape": "BoxedBoolean"
        }
      },
      "required": [
        "Name",
        "Paths",
        "Separator",
        "QuoteChar"
      ],
      "type": "structure"
    },
    "S3DirectSourceAdditionalOptions": {
      "documentation": "<p>Specifies additional connection options for the Amazon S3 data store.</p>",
      "members": {
        "BoundedFiles": {
          "documentation": "<p>Sets the upper limit for the target number of files that will be processed.</p>",
          "shape": "BoxedLong"
        },
        "BoundedSize": {
          "documentation": "<p>Sets the upper limit for the target size of the dataset in bytes that will be processed.</p>",
          "shape": "BoxedLong"
        },
        "EnableSamplePath": {
          "documentation": "<p>Sets option to enable a sample path.</p>",
          "shape": "BoxedBoolean"
        },
        "SamplePath": {
          "documentation": "<p>If enabled, specifies the sample path.</p>",
          "shape": "EnclosedInStringProperty"
        }
      },
      "type": "structure"
    },
    "S3DirectTarget": {
      "documentation": "<p>Specifies a data target that writes to Amazon S3.</p>",
      "members": {
        "Compression": {
          "documentation": "<p>Specifies how the data is compressed. This is generally not necessary if the data has a standard file extension. Possible values are <code>\"gzip\"</code> and <code>\"bzip\"</code>).</p>",
          "shape": "EnclosedInStringProperty"
        },
        "Format": {
          "documentation": "<p>Specifies the data output format for the target.</p>",
          "shape": "TargetFormat"
        },
        "Inputs": {
          "documentation": "<p>The nodes that are inputs to the data target.</p>",
          "shape": "OneInput"
        },
        "Name": {
          "documentation": "<p>The name of the data target.</p>",
          "shape": "NodeName"
        },
        "PartitionKeys": {
          "documentation": "<p>Specifies native partitioning using a sequence of keys.</p>",
          "shape": "GlueStudioPathList"
        },
        "Path": {
          "documentation": "<p>A single Amazon S3 path to write to.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "SchemaChangePolicy": {
          "documentation": "<p>A policy that specifies update behavior for the crawler.</p>",
          "shape": "DirectSchemaChangePolicy"
        }
      },
      "required": [
        "Name",
        "Inputs",
        "Path",
        "Format"
      ],
      "type": "structure"
    },
    "S3Encryption": {
      "documentation": "<p>Specifies how Amazon Simple Storage Service (Amazon S3) data should be encrypted.</p>",
      "members": {
        "KmsKeyArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.</p>",
          "shape": "KmsKeyArn"
        },
        "S3EncryptionMode": {
          "documentation": "<p>The encryption mode to use for Amazon S3 data.</p>",
          "shape": "S3EncryptionMode"
        }
      },
      "type": "structure"
    },
    "S3EncryptionList": {
      "member": {
        "shape": "S3Encryption"
      },
      "type": "list"
    },
    "S3EncryptionMode": {
      "enum": [
        "DISABLED",
        "SSE-KMS",
        "SSE-S3"
      ],
      "type": "string"
    },
    "S3GlueParquetTarget": {
      "documentation": "<p>Specifies a data target that writes to Amazon S3 in Apache Parquet columnar storage.</p>",
      "members": {
        "Compression": {
          "documentation": "<p>Specifies how the data is compressed. This is generally not necessary if the data has a standard file extension. Possible values are <code>\"gzip\"</code> and <code>\"bzip\"</code>).</p>",
          "shape": "ParquetCompressionType"
        },
        "Inputs": {
          "documentation": "<p>The nodes that are inputs to the data target.</p>",
          "shape": "OneInput"
        },
        "Name": {
          "documentation": "<p>The name of the data target.</p>",
          "shape": "NodeName"
        },
        "PartitionKeys": {
          "documentation": "<p>Specifies native partitioning using a sequence of keys.</p>",
          "shape": "GlueStudioPathList"
        },
        "Path": {
          "documentation": "<p>A single Amazon S3 path to write to.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "SchemaChangePolicy": {
          "documentation": "<p>A policy that specifies update behavior for the crawler.</p>",
          "shape": "DirectSchemaChangePolicy"
        }
      },
      "required": [
        "Name",
        "Inputs",
        "Path"
      ],
      "type": "structure"
    },
    "S3JsonSource": {
      "documentation": "<p>Specifies a JSON data store stored in Amazon S3.</p>",
      "members": {
        "AdditionalOptions": {
          "documentation": "<p>Specifies additional connection options.</p>",
          "shape": "S3DirectSourceAdditionalOptions"
        },
        "CompressionType": {
          "documentation": "<p>Specifies how the data is compressed. This is generally not necessary if the data has a standard file extension. Possible values are <code>\"gzip\"</code> and <code>\"bzip\"</code>).</p>",
          "shape": "CompressionType"
        },
        "Exclusions": {
          "documentation": "<p>A string containing a JSON list of Unix-style glob patterns to exclude. For example, \"[\\\"**.pdf\\\"]\" excludes all PDF files. </p>",
          "shape": "EnclosedInStringProperties"
        },
        "GroupFiles": {
          "documentation": "<p>Grouping files is turned on by default when the input contains more than 50,000 files. To turn on grouping with fewer than 50,000 files, set this parameter to \"inPartition\". To disable grouping when there are more than 50,000 files, set this parameter to <code>\"none\"</code>.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "GroupSize": {
          "documentation": "<p>The target group size in bytes. The default is computed based on the input data size and the size of your cluster. When there are fewer than 50,000 input files, <code>\"groupFiles\"</code> must be set to <code>\"inPartition\"</code> for this to take effect.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "JsonPath": {
          "documentation": "<p>A JsonPath string defining the JSON data.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "MaxBand": {
          "documentation": "<p>This option controls the duration in milliseconds after which the s3 listing is likely to be consistent. Files with modification timestamps falling within the last maxBand milliseconds are tracked specially when using JobBookmarks to account for Amazon S3 eventual consistency. Most users don't need to set this option. The default is 900000 milliseconds, or 15 minutes.</p>",
          "shape": "BoxedNonNegativeInt"
        },
        "MaxFilesInBand": {
          "documentation": "<p>This option specifies the maximum number of files to save from the last maxBand seconds. If this number is exceeded, extra files are skipped and only processed in the next job run.</p>",
          "shape": "BoxedNonNegativeInt"
        },
        "Multiline": {
          "documentation": "<p>A Boolean value that specifies whether a single record can span multiple lines. This can occur when a field contains a quoted new-line character. You must set this option to True if any record spans multiple lines. The default value is <code>False</code>, which allows for more aggressive file-splitting during parsing.</p>",
          "shape": "BoxedBoolean"
        },
        "Name": {
          "documentation": "<p>The name of the data store.</p>",
          "shape": "NodeName"
        },
        "OutputSchemas": {
          "documentation": "<p>Specifies the data schema for the S3 JSON source.</p>",
          "shape": "GlueSchemas"
        },
        "Paths": {
          "documentation": "<p>A list of the Amazon S3 paths to read from.</p>",
          "shape": "EnclosedInStringProperties"
        },
        "Recurse": {
          "documentation": "<p>If set to true, recursively reads files in all subdirectories under the specified paths.</p>",
          "shape": "BoxedBoolean"
        }
      },
      "required": [
        "Name",
        "Paths"
      ],
      "type": "structure"
    },
    "S3ParquetSource": {
      "documentation": "<p>Specifies an Apache Parquet data store stored in Amazon S3.</p>",
      "members": {
        "AdditionalOptions": {
          "documentation": "<p>Specifies additional connection options.</p>",
          "shape": "S3DirectSourceAdditionalOptions"
        },
        "CompressionType": {
          "documentation": "<p>Specifies how the data is compressed. This is generally not necessary if the data has a standard file extension. Possible values are <code>\"gzip\"</code> and <code>\"bzip\"</code>).</p>",
          "shape": "ParquetCompressionType"
        },
        "Exclusions": {
          "documentation": "<p>A string containing a JSON list of Unix-style glob patterns to exclude. For example, \"[\\\"**.pdf\\\"]\" excludes all PDF files. </p>",
          "shape": "EnclosedInStringProperties"
        },
        "GroupFiles": {
          "documentation": "<p>Grouping files is turned on by default when the input contains more than 50,000 files. To turn on grouping with fewer than 50,000 files, set this parameter to \"inPartition\". To disable grouping when there are more than 50,000 files, set this parameter to <code>\"none\"</code>.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "GroupSize": {
          "documentation": "<p>The target group size in bytes. The default is computed based on the input data size and the size of your cluster. When there are fewer than 50,000 input files, <code>\"groupFiles\"</code> must be set to <code>\"inPartition\"</code> for this to take effect.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "MaxBand": {
          "documentation": "<p>This option controls the duration in milliseconds after which the s3 listing is likely to be consistent. Files with modification timestamps falling within the last maxBand milliseconds are tracked specially when using JobBookmarks to account for Amazon S3 eventual consistency. Most users don't need to set this option. The default is 900000 milliseconds, or 15 minutes.</p>",
          "shape": "BoxedNonNegativeInt"
        },
        "MaxFilesInBand": {
          "documentation": "<p>This option specifies the maximum number of files to save from the last maxBand seconds. If this number is exceeded, extra files are skipped and only processed in the next job run.</p>",
          "shape": "BoxedNonNegativeInt"
        },
        "Name": {
          "documentation": "<p>The name of the data store.</p>",
          "shape": "NodeName"
        },
        "OutputSchemas": {
          "documentation": "<p>Specifies the data schema for the S3 Parquet source.</p>",
          "shape": "GlueSchemas"
        },
        "Paths": {
          "documentation": "<p>A list of the Amazon S3 paths to read from.</p>",
          "shape": "EnclosedInStringProperties"
        },
        "Recurse": {
          "documentation": "<p>If set to true, recursively reads files in all subdirectories under the specified paths.</p>",
          "shape": "BoxedBoolean"
        }
      },
      "required": [
        "Name",
        "Paths"
      ],
      "type": "structure"
    },
    "S3SourceAdditionalOptions": {
      "documentation": "<p>Specifies additional connection options for the Amazon S3 data store.</p>",
      "members": {
        "BoundedFiles": {
          "documentation": "<p>Sets the upper limit for the target number of files that will be processed.</p>",
          "shape": "BoxedLong"
        },
        "BoundedSize": {
          "documentation": "<p>Sets the upper limit for the target size of the dataset in bytes that will be processed.</p>",
          "shape": "BoxedLong"
        }
      },
      "type": "structure"
    },
    "S3Target": {
      "documentation": "<p>Specifies a data store in Amazon Simple Storage Service (Amazon S3).</p>",
      "members": {
        "ConnectionName": {
          "documentation": "<p>The name of a connection which allows a job or crawler to access data in Amazon S3 within an Amazon Virtual Private Cloud environment (Amazon VPC).</p>",
          "shape": "ConnectionName"
        },
        "DlqEventQueueArn": {
          "documentation": "<p>A valid Amazon dead-letter SQS ARN. For example, <code>arn:aws:sqs:region:account:deadLetterQueue</code>.</p>",
          "shape": "EventQueueArn"
        },
        "EventQueueArn": {
          "documentation": "<p>A valid Amazon SQS ARN. For example, <code>arn:aws:sqs:region:account:sqs</code>.</p>",
          "shape": "EventQueueArn"
        },
        "Exclusions": {
          "documentation": "<p>A list of glob patterns used to exclude from the crawl. For more information, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/add-crawler.html\">Catalog Tables with a Crawler</a>.</p>",
          "shape": "PathList"
        },
        "Path": {
          "documentation": "<p>The path to the Amazon S3 target.</p>",
          "shape": "Path"
        },
        "SampleSize": {
          "documentation": "<p>Sets the number of files in each leaf folder to be crawled when crawling sample files in a dataset. If not set, all the files are crawled. A valid value is an integer between 1 and 249.</p>",
          "shape": "NullableInteger"
        }
      },
      "type": "structure"
    },
    "S3TargetList": {
      "member": {
        "shape": "S3Target"
      },
      "type": "list"
    },
    "ScalaCode": {
      "type": "string"
    },
    "Schedule": {
      "documentation": "<p>A scheduling object using a <code>cron</code> statement to schedule an event.</p>",
      "members": {
        "ScheduleExpression": {
          "documentation": "<p>A <code>cron</code> expression used to specify the schedule (see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>.</p>",
          "shape": "CronExpression"
        },
        "State": {
          "documentation": "<p>The state of the schedule.</p>",
          "shape": "ScheduleState"
        }
      },
      "type": "structure"
    },
    "ScheduleState": {
      "enum": [
        "SCHEDULED",
        "NOT_SCHEDULED",
        "TRANSITIONING"
      ],
      "type": "string"
    },
    "SchedulerNotRunningException": {
      "documentation": "<p>The specified scheduler is not running.</p>",
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "SchedulerRunningException": {
      "documentation": "<p>The specified scheduler is already running.</p>",
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "SchedulerTransitioningException": {
      "documentation": "<p>The specified scheduler is transitioning.</p>",
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "SchemaChangePolicy": {
      "documentation": "<p>A policy that specifies update and deletion behaviors for the crawler.</p>",
      "members": {
        "DeleteBehavior": {
          "documentation": "<p>The deletion behavior when the crawler finds a deleted object.</p>",
          "shape": "DeleteBehavior"
        },
        "UpdateBehavior": {
          "documentation": "<p>The update behavior when the crawler finds a changed schema.</p>",
          "shape": "UpdateBehavior"
        }
      },
      "type": "structure"
    },
    "SchemaCheckpointNumber": {
      "max": 100000,
      "min": 1,
      "type": "long"
    },
    "SchemaColumn": {
      "documentation": "<p>A key-value pair representing a column and data type that this transform can run against. The <code>Schema</code> parameter of the <code>MLTransform</code> may contain up to 100 of these structures.</p>",
      "members": {
        "DataType": {
          "documentation": "<p>The type of data in the column.</p>",
          "shape": "ColumnTypeString"
        },
        "Name": {
          "documentation": "<p>The name of the column.</p>",
          "shape": "ColumnNameString"
        }
      },
      "type": "structure"
    },
    "SchemaDefinitionDiff": {
      "max": 340000,
      "min": 1,
      "pattern": ".*\\S.*",
      "type": "string"
    },
    "SchemaDefinitionString": {
      "max": 170000,
      "min": 1,
      "pattern": ".*\\S.*",
      "type": "string"
    },
    "SchemaDiffType": {
      "enum": [
        "SYNTAX_DIFF"
      ],
      "type": "string"
    },
    "SchemaId": {
      "documentation": "<p>The unique ID of the schema in the Glue schema registry.</p>",
      "members": {
        "RegistryName": {
          "documentation": "<p>The name of the schema registry that contains the schema.</p>",
          "shape": "SchemaRegistryNameString"
        },
        "SchemaArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided.</p>",
          "shape": "GlueResourceArn"
        },
        "SchemaName": {
          "documentation": "<p>The name of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided.</p>",
          "shape": "SchemaRegistryNameString"
        }
      },
      "type": "structure"
    },
    "SchemaListDefinition": {
      "member": {
        "shape": "SchemaListItem"
      },
      "type": "list"
    },
    "SchemaListItem": {
      "documentation": "<p>An object that contains minimal details for a schema.</p>",
      "members": {
        "CreatedTime": {
          "documentation": "<p>The date and time that a schema was created.</p>",
          "shape": "CreatedTimestamp"
        },
        "Description": {
          "documentation": "<p>A description for the schema.</p>",
          "shape": "DescriptionString"
        },
        "RegistryName": {
          "documentation": "<p>the name of the registry where the schema resides.</p>",
          "shape": "SchemaRegistryNameString"
        },
        "SchemaArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) for the schema.</p>",
          "shape": "GlueResourceArn"
        },
        "SchemaName": {
          "documentation": "<p>The name of the schema.</p>",
          "shape": "SchemaRegistryNameString"
        },
        "SchemaStatus": {
          "documentation": "<p>The status of the schema.</p>",
          "shape": "SchemaStatus"
        },
        "UpdatedTime": {
          "documentation": "<p>The date and time that a schema was updated.</p>",
          "shape": "UpdatedTimestamp"
        }
      },
      "type": "structure"
    },
    "SchemaPathString": {
      "type": "string"
    },
    "SchemaReference": {
      "documentation": "<p>An object that references a schema stored in the Glue Schema Registry.</p>",
      "members": {
        "SchemaId": {
          "documentation": "<p>A structure that contains schema identity fields. Either this or the <code>SchemaVersionId</code> has to be provided.</p>",
          "shape": "SchemaId"
        },
        "SchemaVersionId": {
          "documentation": "<p>The unique ID assigned to a version of the schema. Either this or the <code>SchemaId</code> has to be provided.</p>",
          "shape": "SchemaVersionIdString"
        },
        "SchemaVersionNumber": {
          "box": true,
          "documentation": "<p>The version number of the schema.</p>",
          "shape": "VersionLongNumber"
        }
      },
      "type": "structure"
    },
    "SchemaRegistryNameString": {
      "max": 255,
      "min": 1,
      "pattern": "[a-zA-Z0-9-_$#.]+",
      "type": "string"
    },
    "SchemaRegistryTokenString": {
      "type": "string"
    },
    "SchemaStatus": {
      "enum": [
        "AVAILABLE",
        "PENDING",
        "DELETING"
      ],
      "type": "string"
    },
    "SchemaValidationError": {
      "max": 5000,
      "min": 1,
      "type": "string"
    },
    "SchemaVersionErrorItem": {
      "documentation": "<p>An object that contains the error details for an operation on a schema version.</p>",
      "members": {
        "ErrorDetails": {
          "documentation": "<p>The details of the error for the schema version.</p>",
          "shape": "ErrorDetails"
        },
        "VersionNumber": {
          "documentation": "<p>The version number of the schema.</p>",
          "shape": "VersionLongNumber"
        }
      },
      "type": "structure"
    },
    "SchemaVersionErrorList": {
      "member": {
        "shape": "SchemaVersionErrorItem"
      },
      "type": "list"
    },
    "SchemaVersionIdString": {
      "max": 36,
      "min": 36,
      "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
      "type": "string"
    },
    "SchemaVersionList": {
      "member": {
        "shape": "SchemaVersionListItem"
      },
      "type": "list"
    },
    "SchemaVersionListItem": {
      "documentation": "<p>An object containing the details about a schema version.</p>",
      "members": {
        "CreatedTime": {
          "documentation": "<p>The date and time the schema version was created.</p>",
          "shape": "CreatedTimestamp"
        },
        "SchemaArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the schema.</p>",
          "shape": "GlueResourceArn"
        },
        "SchemaVersionId": {
          "documentation": "<p>The unique identifier of the schema version.</p>",
          "shape": "SchemaVersionIdString"
        },
        "Status": {
          "documentation": "<p>The status of the schema version.</p>",
          "shape": "SchemaVersionStatus"
        },
        "VersionNumber": {
          "documentation": "<p>The version number of the schema.</p>",
          "shape": "VersionLongNumber"
        }
      },
      "type": "structure"
    },
    "SchemaVersionNumber": {
      "documentation": "<p>A structure containing the schema version information.</p>",
      "members": {
        "LatestVersion": {
          "documentation": "<p>The latest version available for the schema.</p>",
          "shape": "LatestSchemaVersionBoolean"
        },
        "VersionNumber": {
          "documentation": "<p>The version number of the schema.</p>",
          "shape": "VersionLongNumber"
        }
      },
      "type": "structure"
    },
    "SchemaVersionStatus": {
      "enum": [
        "AVAILABLE",
        "PENDING",
        "FAILURE",
        "DELETING"
      ],
      "type": "string"
    },
    "ScriptLocationString": {
      "max": 400000,
      "type": "string"
    },
    "SearchPropertyPredicates": {
      "member": {
        "shape": "PropertyPredicate"
      },
      "type": "list"
    },
    "SearchTablesRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>A unique identifier, consisting of <code> <i>account_id</i> </code>.</p>",
          "shape": "CatalogIdString"
        },
        "Filters": {
          "documentation": "<p>A list of key-value pairs, and a comparator used to filter the search results. Returns all entities matching the predicate.</p> <p>The <code>Comparator</code> member of the <code>PropertyPredicate</code> struct is used only for time fields, and can be omitted for other field types. Also, when comparing string values, such as when <code>Key=Name</code>, a fuzzy match algorithm is used. The <code>Key</code> field (for example, the value of the <code>Name</code> field) is split on certain punctuation characters, for example, -, :, #, etc. into tokens. Then each token is exact-match compared with the <code>Value</code> member of <code>PropertyPredicate</code>. For example, if <code>Key=Name</code> and <code>Value=link</code>, tables named <code>customer-link</code> and <code>xx-link-yy</code> are returned, but <code>xxlinkyy</code> is not returned.</p>",
          "shape": "SearchPropertyPredicates"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of tables to return in a single response.</p>",
          "shape": "PageSize"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, included if this is a continuation call.</p>",
          "shape": "Token"
        },
        "ResourceShareType": {
          "documentation": "<p>Allows you to specify that you want to search the tables shared with your account. The allowable values are <code>FOREIGN</code> or <code>ALL</code>. </p> <ul> <li> <p>If set to <code>FOREIGN</code>, will search the tables shared with your account. </p> </li> <li> <p>If set to <code>ALL</code>, will search the tables shared with your account, as well as the tables in yor local account. </p> </li> </ul>",
          "shape": "ResourceShareType"
        },
        "SearchText": {
          "documentation": "<p>A string used for a text search.</p> <p>Specifying a value in quotes filters based on an exact match to the value.</p>",
          "shape": "ValueString"
        },
        "SortCriteria": {
          "documentation": "<p>A list of criteria for sorting the results by a field name, in an ascending or descending order.</p>",
          "shape": "SortCriteria"
        }
      },
      "type": "structure"
    },
    "SearchTablesResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>A continuation token, present if the current list segment is not the last.</p>",
          "shape": "Token"
        },
        "TableList": {
          "documentation": "<p>A list of the requested <code>Table</code> objects. The <code>SearchTables</code> response returns only the tables that you have access to.</p>",
          "shape": "TableList"
        }
      },
      "type": "structure"
    },
    "SecurityConfiguration": {
      "documentation": "<p>Specifies a security configuration.</p>",
      "members": {
        "CreatedTimeStamp": {
          "documentation": "<p>The time at which this security configuration was created.</p>",
          "shape": "TimestampValue"
        },
        "EncryptionConfiguration": {
          "documentation": "<p>The encryption configuration associated with this security configuration.</p>",
          "shape": "EncryptionConfiguration"
        },
        "Name": {
          "documentation": "<p>The name of the security configuration.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "SecurityConfigurationList": {
      "member": {
        "shape": "SecurityConfiguration"
      },
      "type": "list"
    },
    "SecurityGroupIdList": {
      "max": 50,
      "member": {
        "shape": "NameString"
      },
      "min": 0,
      "type": "list"
    },
    "Segment": {
      "documentation": "<p>Defines a non-overlapping region of a table's partitions, allowing multiple requests to be run in parallel.</p>",
      "members": {
        "SegmentNumber": {
          "documentation": "<p>The zero-based index number of the segment. For example, if the total number of segments is 4, <code>SegmentNumber</code> values range from 0 through 3.</p>",
          "shape": "NonNegativeInteger"
        },
        "TotalSegments": {
          "documentation": "<p>The total number of segments.</p>",
          "shape": "TotalSegmentsInteger"
        }
      },
      "required": [
        "SegmentNumber",
        "TotalSegments"
      ],
      "type": "structure"
    },
    "SelectFields": {
      "documentation": "<p>Specifies a transform that chooses the data property keys that you want to keep.</p>",
      "members": {
        "Inputs": {
          "documentation": "<p>The data inputs identified by their node names.</p>",
          "shape": "OneInput"
        },
        "Name": {
          "documentation": "<p>The name of the transform node.</p>",
          "shape": "NodeName"
        },
        "Paths": {
          "documentation": "<p>A JSON path to a variable in the data structure.</p>",
          "shape": "GlueStudioPathList"
        }
      },
      "required": [
        "Name",
        "Inputs",
        "Paths"
      ],
      "type": "structure"
    },
    "SelectFromCollection": {
      "documentation": "<p>Specifies a transform that chooses one <code>DynamicFrame</code> from a collection of <code>DynamicFrames</code>. The output is the selected <code>DynamicFrame</code> </p>",
      "members": {
        "Index": {
          "documentation": "<p>The index for the DynamicFrame to be selected.</p>",
          "shape": "NonNegativeInt"
        },
        "Inputs": {
          "documentation": "<p>The data inputs identified by their node names.</p>",
          "shape": "OneInput"
        },
        "Name": {
          "documentation": "<p>The name of the transform node.</p>",
          "shape": "NodeName"
        }
      },
      "required": [
        "Name",
        "Inputs",
        "Index"
      ],
      "type": "structure"
    },
    "Separator": {
      "enum": [
        "comma",
        "ctrla",
        "pipe",
        "semicolon",
        "tab"
      ],
      "type": "string"
    },
    "SerDeInfo": {
      "documentation": "<p>Information about a serialization/deserialization program (SerDe) that serves as an extractor and loader.</p>",
      "members": {
        "Name": {
          "documentation": "<p>Name of the SerDe.</p>",
          "shape": "NameString"
        },
        "Parameters": {
          "documentation": "<p>These key-value pairs define initialization parameters for the SerDe.</p>",
          "shape": "ParametersMap"
        },
        "SerializationLibrary": {
          "documentation": "<p>Usually the class that implements the SerDe. An example is <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "Session": {
      "documentation": "<p>The period in which a remote Spark runtime environment is running.</p>",
      "members": {
        "Command": {
          "documentation": "<p>The command object.See SessionCommand.</p>",
          "shape": "SessionCommand"
        },
        "Connections": {
          "documentation": "<p>The number of connections used for the session.</p>",
          "shape": "ConnectionsList"
        },
        "CreatedOn": {
          "documentation": "<p>The time and date when the session was created.</p>",
          "shape": "TimestampValue"
        },
        "DefaultArguments": {
          "documentation": "<p>A map array of key-value pairs. Max is 75 pairs. </p>",
          "shape": "OrchestrationArgumentsMap"
        },
        "Description": {
          "documentation": "<p>The description of the session.</p>",
          "shape": "DescriptionString"
        },
        "ErrorMessage": {
          "documentation": "<p>The error message displayed during the session.</p>",
          "shape": "DescriptionString"
        },
        "GlueVersion": {
          "documentation": "<p>The Glue version determines the versions of Apache Spark and Python that Glue supports. The GlueVersion must be greater than 2.0.</p>",
          "shape": "GlueVersionString"
        },
        "Id": {
          "documentation": "<p>The ID of the session.</p>",
          "shape": "NameString"
        },
        "MaxCapacity": {
          "documentation": "<p>The number of Glue data processing units (DPUs) that can be allocated when the job runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB memory. </p>",
          "shape": "NullableDouble"
        },
        "Progress": {
          "documentation": "<p>The code execution progress of the session.</p>",
          "shape": "DoubleValue"
        },
        "Role": {
          "documentation": "<p>The name or Amazon Resource Name (ARN) of the IAM role associated with the Session.</p>",
          "shape": "OrchestrationRoleArn"
        },
        "SecurityConfiguration": {
          "documentation": "<p>The name of the SecurityConfiguration structure to be used with the session.</p>",
          "shape": "NameString"
        },
        "Status": {
          "documentation": "<p>The session status. </p>",
          "shape": "SessionStatus"
        }
      },
      "type": "structure"
    },
    "SessionCommand": {
      "documentation": "<p>The <code>SessionCommand</code> that runs the job.</p>",
      "members": {
        "Name": {
          "documentation": "<p>Specifies the name of the SessionCommand. Can be 'glueetl' or 'gluestreaming'.</p>",
          "shape": "NameString"
        },
        "PythonVersion": {
          "documentation": "<p>Specifies the Python version. The Python version indicates the version supported for jobs of type Spark.</p>",
          "shape": "PythonVersionString"
        }
      },
      "type": "structure"
    },
    "SessionIdList": {
      "member": {
        "shape": "NameString"
      },
      "type": "list"
    },
    "SessionList": {
      "member": {
        "shape": "Session"
      },
      "type": "list"
    },
    "SessionStatus": {
      "enum": [
        "PROVISIONING",
        "READY",
        "FAILED",
        "TIMEOUT",
        "STOPPING",
        "STOPPED"
      ],
      "type": "string"
    },
    "SkewedInfo": {
      "documentation": "<p>Specifies skewed values in a table. Skewed values are those that occur with very high frequency.</p>",
      "members": {
        "SkewedColumnNames": {
          "documentation": "<p>A list of names of columns that contain skewed values.</p>",
          "shape": "NameStringList"
        },
        "SkewedColumnValueLocationMaps": {
          "documentation": "<p>A mapping of skewed values to the columns that contain them.</p>",
          "shape": "LocationMap"
        },
        "SkewedColumnValues": {
          "documentation": "<p>A list of values that appear so frequently as to be considered skewed.</p>",
          "shape": "ColumnValueStringList"
        }
      },
      "type": "structure"
    },
    "Sort": {
      "enum": [
        "ASC",
        "DESC"
      ],
      "type": "string"
    },
    "SortCriteria": {
      "max": 1,
      "member": {
        "shape": "SortCriterion"
      },
      "min": 0,
      "type": "list"
    },
    "SortCriterion": {
      "documentation": "<p>Specifies a field to sort by and a sort order.</p>",
      "members": {
        "FieldName": {
          "documentation": "<p>The name of the field on which to sort.</p>",
          "shape": "ValueString"
        },
        "Sort": {
          "documentation": "<p>An ascending or descending sort.</p>",
          "shape": "Sort"
        }
      },
      "type": "structure"
    },
    "SortDirectionType": {
      "enum": [
        "DESCENDING",
        "ASCENDING"
      ],
      "type": "string"
    },
    "SourceControlAuthStrategy": {
      "enum": [
        "PERSONAL_ACCESS_TOKEN",
        "AWS_SECRETS_MANAGER"
      ],
      "type": "string"
    },
    "SourceControlDetails": {
      "documentation": "<p>The details for a source control configuration for a job, allowing synchronization of job artifacts to or from a remote repository.</p>",
      "members": {
        "AuthStrategy": {
          "documentation": "<p>The type of authentication, which can be an authentication token stored in Amazon Web Services Secrets Manager, or a personal access token.</p>",
          "shape": "SourceControlAuthStrategy"
        },
        "AuthToken": {
          "documentation": "<p>The value of an authorization token.</p>",
          "shape": "Generic512CharString"
        },
        "Branch": {
          "documentation": "<p>An optional branch in the remote repository.</p>",
          "shape": "Generic512CharString"
        },
        "Folder": {
          "documentation": "<p>An optional folder in the remote repository.</p>",
          "shape": "Generic512CharString"
        },
        "LastCommitId": {
          "documentation": "<p>The last commit ID for a commit in the remote repository.</p>",
          "shape": "Generic512CharString"
        },
        "Owner": {
          "documentation": "<p>The owner of the remote repository that contains the job artifacts.</p>",
          "shape": "Generic512CharString"
        },
        "Provider": {
          "documentation": "<p>The provider for the remote repository.</p>",
          "shape": "SourceControlProvider"
        },
        "Repository": {
          "documentation": "<p>The name of the remote repository that contains the job artifacts.</p>",
          "shape": "Generic512CharString"
        }
      },
      "type": "structure"
    },
    "SourceControlProvider": {
      "enum": [
        "GITHUB",
        "AWS_CODE_COMMIT"
      ],
      "type": "string"
    },
    "SparkConnectorSource": {
      "documentation": "<p>Specifies a connector to an Apache Spark data source.</p>",
      "members": {
        "AdditionalOptions": {
          "documentation": "<p>Additional connection options for the connector.</p>",
          "shape": "AdditionalOptions"
        },
        "ConnectionName": {
          "documentation": "<p>The name of the connection that is associated with the connector.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "ConnectionType": {
          "documentation": "<p>The type of connection, such as marketplace.spark or custom.spark, designating a connection to an Apache Spark data store.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "ConnectorName": {
          "documentation": "<p>The name of a connector that assists with accessing the data store in Glue Studio.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "Name": {
          "documentation": "<p>The name of the data source.</p>",
          "shape": "NodeName"
        },
        "OutputSchemas": {
          "documentation": "<p>Specifies data schema for the custom spark source.</p>",
          "shape": "GlueSchemas"
        }
      },
      "required": [
        "Name",
        "ConnectionName",
        "ConnectorName",
        "ConnectionType"
      ],
      "type": "structure"
    },
    "SparkConnectorTarget": {
      "documentation": "<p>Specifies a target that uses an Apache Spark connector.</p>",
      "members": {
        "AdditionalOptions": {
          "documentation": "<p>Additional connection options for the connector.</p>",
          "shape": "AdditionalOptions"
        },
        "ConnectionName": {
          "documentation": "<p>The name of a connection for an Apache Spark connector.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "ConnectionType": {
          "documentation": "<p>The type of connection, such as marketplace.spark or custom.spark, designating a connection to an Apache Spark data store.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "ConnectorName": {
          "documentation": "<p>The name of an Apache Spark connector.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "Inputs": {
          "documentation": "<p>The nodes that are inputs to the data target.</p>",
          "shape": "OneInput"
        },
        "Name": {
          "documentation": "<p>The name of the data target.</p>",
          "shape": "NodeName"
        },
        "OutputSchemas": {
          "documentation": "<p>Specifies the data schema for the custom spark target.</p>",
          "shape": "GlueSchemas"
        }
      },
      "required": [
        "Name",
        "Inputs",
        "ConnectionName",
        "ConnectorName",
        "ConnectionType"
      ],
      "type": "structure"
    },
    "SparkSQL": {
      "documentation": "<p>Specifies a transform where you enter a SQL query using Spark SQL syntax to transform the data. The output is a single <code>DynamicFrame</code>.</p>",
      "members": {
        "Inputs": {
          "documentation": "<p>The data inputs identified by their node names. You can associate a table name with each input node to use in the SQL query. The name you choose must meet the Spark SQL naming restrictions.</p>",
          "shape": "ManyInputs"
        },
        "Name": {
          "documentation": "<p>The name of the transform node.</p>",
          "shape": "NodeName"
        },
        "OutputSchemas": {
          "documentation": "<p>Specifies the data schema for the SparkSQL transform.</p>",
          "shape": "GlueSchemas"
        },
        "SqlAliases": {
          "documentation": "<p>A list of aliases. An alias allows you to specify what name to use in the SQL for a given input. For example, you have a datasource named \"MyDataSource\". If you specify <code>From</code> as MyDataSource, and <code>Alias</code> as SqlName, then in your SQL you can do:</p> <p> <code>select * from SqlName</code> </p> <p>and that gets data from MyDataSource.</p>",
          "shape": "SqlAliases"
        },
        "SqlQuery": {
          "documentation": "<p>A SQL query that must use Spark SQL syntax and return a single data set.</p>",
          "shape": "SqlQuery"
        }
      },
      "required": [
        "Name",
        "Inputs",
        "SqlQuery",
        "SqlAliases"
      ],
      "type": "structure"
    },
    "Spigot": {
      "documentation": "<p>Specifies a transform that writes samples of the data to an Amazon S3 bucket.</p>",
      "members": {
        "Inputs": {
          "documentation": "<p>The data inputs identified by their node names.</p>",
          "shape": "OneInput"
        },
        "Name": {
          "documentation": "<p>The name of the transform node.</p>",
          "shape": "NodeName"
        },
        "Path": {
          "documentation": "<p>A path in Amazon S3 where the transform will write a subset of records from the dataset to a JSON file in an Amazon S3 bucket.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "Prob": {
          "documentation": "<p>The probability (a decimal value with a maximum value of 1) of picking any given record. A value of 1 indicates that each row read from the dataset should be included in the sample output.</p>",
          "shape": "Prob"
        },
        "Topk": {
          "documentation": "<p>Specifies a number of records to write starting from the beginning of the dataset.</p>",
          "shape": "Topk"
        }
      },
      "required": [
        "Name",
        "Inputs",
        "Path"
      ],
      "type": "structure"
    },
    "SplitFields": {
      "documentation": "<p>Specifies a transform that splits data property keys into two <code>DynamicFrames</code>. The output is a collection of <code>DynamicFrames</code>: one with selected data property keys, and one with the remaining data property keys.</p>",
      "members": {
        "Inputs": {
          "documentation": "<p>The data inputs identified by their node names.</p>",
          "shape": "OneInput"
        },
        "Name": {
          "documentation": "<p>The name of the transform node.</p>",
          "shape": "NodeName"
        },
        "Paths": {
          "documentation": "<p>A JSON path to a variable in the data structure.</p>",
          "shape": "GlueStudioPathList"
        }
      },
      "required": [
        "Name",
        "Inputs",
        "Paths"
      ],
      "type": "structure"
    },
    "SqlAlias": {
      "documentation": "<p>Represents a single entry in the list of values for <code>SqlAliases</code>. </p>",
      "members": {
        "Alias": {
          "documentation": "<p>A temporary name given to a table, or a column in a table.</p>",
          "shape": "EnclosedInStringPropertyWithQuote"
        },
        "From": {
          "documentation": "<p>A table, or a column in a table.</p>",
          "shape": "NodeId"
        }
      },
      "required": [
        "From",
        "Alias"
      ],
      "type": "structure"
    },
    "SqlAliases": {
      "member": {
        "shape": "SqlAlias"
      },
      "type": "list"
    },
    "SqlQuery": {
      "pattern": "([\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\s])*",
      "type": "string"
    },
    "StartBlueprintRunRequest": {
      "members": {
        "BlueprintName": {
          "documentation": "<p>The name of the blueprint.</p>",
          "shape": "OrchestrationNameString"
        },
        "Parameters": {
          "documentation": "<p>Specifies the parameters as a <code>BlueprintParameters</code> object.</p>",
          "shape": "BlueprintParameters"
        },
        "RoleArn": {
          "documentation": "<p>Specifies the IAM role used to create the workflow.</p>",
          "shape": "OrchestrationIAMRoleArn"
        }
      },
      "required": [
        "BlueprintName",
        "RoleArn"
      ],
      "type": "structure"
    },
    "StartBlueprintRunResponse": {
      "members": {
        "RunId": {
          "documentation": "<p>The run ID for this blueprint run.</p>",
          "shape": "IdString"
        }
      },
      "type": "structure"
    },
    "StartCrawlerRequest": {
      "members": {
        "Name": {
          "documentation": "<p>Name of the crawler to start.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "StartCrawlerResponse": {
      "members": {},
      "type": "structure"
    },
    "StartCrawlerScheduleRequest": {
      "members": {
        "CrawlerName": {
          "documentation": "<p>Name of the crawler to schedule.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "CrawlerName"
      ],
      "type": "structure"
    },
    "StartCrawlerScheduleResponse": {
      "members": {},
      "type": "structure"
    },
    "StartExportLabelsTaskRunRequest": {
      "members": {
        "OutputS3Path": {
          "documentation": "<p>The Amazon S3 path where you export the labels.</p>",
          "shape": "UriString"
        },
        "TransformId": {
          "documentation": "<p>The unique identifier of the machine learning transform.</p>",
          "shape": "HashString"
        }
      },
      "required": [
        "TransformId",
        "OutputS3Path"
      ],
      "type": "structure"
    },
    "StartExportLabelsTaskRunResponse": {
      "members": {
        "TaskRunId": {
          "documentation": "<p>The unique identifier for the task run.</p>",
          "shape": "HashString"
        }
      },
      "type": "structure"
    },
    "StartImportLabelsTaskRunRequest": {
      "members": {
        "InputS3Path": {
          "documentation": "<p>The Amazon Simple Storage Service (Amazon S3) path from where you import the labels.</p>",
          "shape": "UriString"
        },
        "ReplaceAllLabels": {
          "documentation": "<p>Indicates whether to overwrite your existing labels.</p>",
          "shape": "ReplaceBoolean"
        },
        "TransformId": {
          "documentation": "<p>The unique identifier of the machine learning transform.</p>",
          "shape": "HashString"
        }
      },
      "required": [
        "TransformId",
        "InputS3Path"
      ],
      "type": "structure"
    },
    "StartImportLabelsTaskRunResponse": {
      "members": {
        "TaskRunId": {
          "documentation": "<p>The unique identifier for the task run.</p>",
          "shape": "HashString"
        }
      },
      "type": "structure"
    },
    "StartJobRunRequest": {
      "members": {
        "AllocatedCapacity": {
          "deprecated": true,
          "deprecatedMessage": "This property is deprecated, use MaxCapacity instead.",
          "documentation": "<p>This field is deprecated. Use <code>MaxCapacity</code> instead.</p> <p>The number of Glue data processing units (DPUs) to allocate to this JobRun. You can allocate a minimum of 2 DPUs; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href=\"https://aws.amazon.com/glue/pricing/\">Glue pricing page</a>.</p>",
          "shape": "IntegerValue"
        },
        "Arguments": {
          "documentation": "<p>The job arguments specifically for this run. For this job run, they replace the default arguments set in the job definition itself.</p> <p>You can specify arguments here that your own job-execution script consumes, as well as arguments that Glue itself consumes.</p> <p>Job arguments may be logged. Do not pass plaintext secrets as arguments. Retrieve secrets from a Glue Connection, Secrets Manager or other secret management mechanism if you intend to keep them within the Job. </p> <p>For information about how to specify and consume your own Job arguments, see the <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling Glue APIs in Python</a> topic in the developer guide.</p> <p>For information about the key-value pairs that Glue consumes to set up your job, see the <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by Glue</a> topic in the developer guide.</p>",
          "shape": "GenericMap"
        },
        "ExecutionClass": {
          "documentation": "<p>Indicates whether the job is run with a standard or flexible execution class. The standard execution-class is ideal for time-sensitive workloads that require fast job startup and dedicated resources.</p> <p>The flexible execution class is appropriate for time-insensitive jobs whose start and completion times may vary. </p> <p>Only jobs with Glue version 3.0 and above and command type <code>glueetl</code> will be allowed to set <code>ExecutionClass</code> to <code>FLEX</code>. The flexible execution class is available for Spark jobs.</p>",
          "shape": "ExecutionClass"
        },
        "JobName": {
          "documentation": "<p>The name of the job definition to use.</p>",
          "shape": "NameString"
        },
        "JobRunId": {
          "documentation": "<p>The ID of a previous <code>JobRun</code> to retry.</p>",
          "shape": "IdString"
        },
        "MaxCapacity": {
          "documentation": "<p>The number of Glue data processing units (DPUs) that can be allocated when this job runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href=\"https://aws.amazon.com/glue/pricing/\">Glue pricing page</a>.</p> <p>Do not set <code>Max Capacity</code> if using <code>WorkerType</code> and <code>NumberOfWorkers</code>.</p> <p>The value that can be allocated for <code>MaxCapacity</code> depends on whether you are running a Python shell job, or an Apache Spark ETL job:</p> <ul> <li> <p>When you specify a Python shell job (<code>JobCommand.Name</code>=\"pythonshell\"), you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.</p> </li> <li> <p>When you specify an Apache Spark ETL job (<code>JobCommand.Name</code>=\"glueetl\"), you can allocate a minimum of 2 DPUs. The default is 10 DPUs. This job type cannot have a fractional DPU allocation.</p> </li> </ul>",
          "shape": "NullableDouble"
        },
        "NotificationProperty": {
          "documentation": "<p>Specifies configuration properties of a job run notification.</p>",
          "shape": "NotificationProperty"
        },
        "NumberOfWorkers": {
          "documentation": "<p>The number of workers of a defined <code>workerType</code> that are allocated when a job runs.</p>",
          "shape": "NullableInteger"
        },
        "SecurityConfiguration": {
          "documentation": "<p>The name of the <code>SecurityConfiguration</code> structure to be used with this job run.</p>",
          "shape": "NameString"
        },
        "Timeout": {
          "documentation": "<p>The <code>JobRun</code> timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters <code>TIMEOUT</code> status. This value overrides the timeout value set in the parent job.</p> <p>Streaming jobs do not have a timeout. The default for non-streaming jobs is 2,880 minutes (48 hours).</p>",
          "shape": "Timeout"
        },
        "WorkerType": {
          "documentation": "<p>The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, G.2X, or G.025X.</p> <ul> <li> <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p> </li> <li> <p>For the <code>G.1X</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB disk, and 1 executor per worker.</p> </li> <li> <p>For the <code>G.2X</code> worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB disk, and 1 executor per worker.</p> </li> <li> <p>For the <code>G.025X</code> worker type, each worker maps to 0.25 DPU (2 vCPU, 4 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for low volume streaming jobs. This worker type is only available for Glue version 3.0 streaming jobs.</p> </li> </ul>",
          "shape": "WorkerType"
        }
      },
      "required": [
        "JobName"
      ],
      "type": "structure"
    },
    "StartJobRunResponse": {
      "members": {
        "JobRunId": {
          "documentation": "<p>The ID assigned to this job run.</p>",
          "shape": "IdString"
        }
      },
      "type": "structure"
    },
    "StartMLEvaluationTaskRunRequest": {
      "members": {
        "TransformId": {
          "documentation": "<p>The unique identifier of the machine learning transform.</p>",
          "shape": "HashString"
        }
      },
      "required": [
        "TransformId"
      ],
      "type": "structure"
    },
    "StartMLEvaluationTaskRunResponse": {
      "members": {
        "TaskRunId": {
          "documentation": "<p>The unique identifier associated with this run.</p>",
          "shape": "HashString"
        }
      },
      "type": "structure"
    },
    "StartMLLabelingSetGenerationTaskRunRequest": {
      "members": {
        "OutputS3Path": {
          "documentation": "<p>The Amazon Simple Storage Service (Amazon S3) path where you generate the labeling set.</p>",
          "shape": "UriString"
        },
        "TransformId": {
          "documentation": "<p>The unique identifier of the machine learning transform.</p>",
          "shape": "HashString"
        }
      },
      "required": [
        "TransformId",
        "OutputS3Path"
      ],
      "type": "structure"
    },
    "StartMLLabelingSetGenerationTaskRunResponse": {
      "members": {
        "TaskRunId": {
          "documentation": "<p>The unique run identifier that is associated with this task run.</p>",
          "shape": "HashString"
        }
      },
      "type": "structure"
    },
    "StartTriggerRequest": {
      "members": {
        "Name": {
          "documentation": "<p>The name of the trigger to start.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "StartTriggerResponse": {
      "members": {
        "Name": {
          "documentation": "<p>The name of the trigger that was started.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "StartWorkflowRunRequest": {
      "members": {
        "Name": {
          "documentation": "<p>The name of the workflow to start.</p>",
          "shape": "NameString"
        },
        "RunProperties": {
          "documentation": "<p>The workflow run properties for the new workflow run.</p>",
          "shape": "WorkflowRunProperties"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "StartWorkflowRunResponse": {
      "members": {
        "RunId": {
          "documentation": "<p>An Id for the new run.</p>",
          "shape": "IdString"
        }
      },
      "type": "structure"
    },
    "StartingEventBatchCondition": {
      "documentation": "<p>The batch condition that started the workflow run. Either the number of events in the batch size arrived, in which case the BatchSize member is non-zero, or the batch window expired, in which case the BatchWindow member is non-zero.</p>",
      "members": {
        "BatchSize": {
          "documentation": "<p>Number of events in the batch.</p>",
          "shape": "NullableInteger"
        },
        "BatchWindow": {
          "documentation": "<p>Duration of the batch window in seconds.</p>",
          "shape": "NullableInteger"
        }
      },
      "type": "structure"
    },
    "StartingPosition": {
      "enum": [
        "latest",
        "trim_horizon",
        "earliest"
      ],
      "type": "string"
    },
    "Statement": {
      "documentation": "<p>The statement or request for a particular action to occur in a session.</p>",
      "members": {
        "Code": {
          "documentation": "<p>The execution code of the statement.</p>",
          "shape": "GenericString"
        },
        "CompletedOn": {
          "documentation": "<p>The unix time and date that the job definition was completed.</p>",
          "shape": "LongValue"
        },
        "Id": {
          "documentation": "<p>The ID of the statement.</p>",
          "shape": "IntegerValue"
        },
        "Output": {
          "documentation": "<p>The output in JSON.</p>",
          "shape": "StatementOutput"
        },
        "Progress": {
          "documentation": "<p>The code execution progress.</p>",
          "shape": "DoubleValue"
        },
        "StartedOn": {
          "documentation": "<p>The unix time and date that the job definition was started.</p>",
          "shape": "LongValue"
        },
        "State": {
          "documentation": "<p>The state while request is actioned.</p>",
          "shape": "StatementState"
        }
      },
      "type": "structure"
    },
    "StatementList": {
      "member": {
        "shape": "Statement"
      },
      "type": "list"
    },
    "StatementOutput": {
      "documentation": "<p>The code execution output in JSON format.</p>",
      "members": {
        "Data": {
          "documentation": "<p>The code execution output.</p>",
          "shape": "StatementOutputData"
        },
        "ErrorName": {
          "documentation": "<p>The name of the error in the output.</p>",
          "shape": "GenericString"
        },
        "ErrorValue": {
          "documentation": "<p>The error value of the output.</p>",
          "shape": "GenericString"
        },
        "ExecutionCount": {
          "documentation": "<p>The execution count of the output.</p>",
          "shape": "IntegerValue"
        },
        "Status": {
          "documentation": "<p>The status of the code execution output.</p>",
          "shape": "StatementState"
        },
        "Traceback": {
          "documentation": "<p>The traceback of the output.</p>",
          "shape": "OrchestrationStringList"
        }
      },
      "type": "structure"
    },
    "StatementOutputData": {
      "documentation": "<p>The code execution output in JSON format.</p>",
      "members": {
        "TextPlain": {
          "documentation": "<p>The code execution output in text format.</p>",
          "shape": "GenericString"
        }
      },
      "type": "structure"
    },
    "StatementState": {
      "enum": [
        "WAITING",
        "RUNNING",
        "AVAILABLE",
        "CANCELLING",
        "CANCELLED",
        "ERROR"
      ],
      "type": "string"
    },
    "StopCrawlerRequest": {
      "members": {
        "Name": {
          "documentation": "<p>Name of the crawler to stop.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "StopCrawlerResponse": {
      "members": {},
      "type": "structure"
    },
    "StopCrawlerScheduleRequest": {
      "members": {
        "CrawlerName": {
          "documentation": "<p>Name of the crawler whose schedule state to set.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "CrawlerName"
      ],
      "type": "structure"
    },
    "StopCrawlerScheduleResponse": {
      "members": {},
      "type": "structure"
    },
    "StopSessionRequest": {
      "members": {
        "Id": {
          "documentation": "<p>The ID of the session to be stopped.</p>",
          "shape": "NameString"
        },
        "RequestOrigin": {
          "documentation": "<p>The origin of the request.</p>",
          "shape": "OrchestrationNameString"
        }
      },
      "required": [
        "Id"
      ],
      "type": "structure"
    },
    "StopSessionResponse": {
      "members": {
        "Id": {
          "documentation": "<p>Returns the Id of the stopped session.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "StopTriggerRequest": {
      "members": {
        "Name": {
          "documentation": "<p>The name of the trigger to stop.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "StopTriggerResponse": {
      "members": {
        "Name": {
          "documentation": "<p>The name of the trigger that was stopped.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "StopWorkflowRunRequest": {
      "members": {
        "Name": {
          "documentation": "<p>The name of the workflow to stop.</p>",
          "shape": "NameString"
        },
        "RunId": {
          "documentation": "<p>The ID of the workflow run to stop.</p>",
          "shape": "IdString"
        }
      },
      "required": [
        "Name",
        "RunId"
      ],
      "type": "structure"
    },
    "StopWorkflowRunResponse": {
      "members": {},
      "type": "structure"
    },
    "StorageDescriptor": {
      "documentation": "<p>Describes the physical storage of table data.</p>",
      "members": {
        "AdditionalLocations": {
          "documentation": "<p>A list of locations that point to the path where a Delta table is located.</p>",
          "shape": "LocationStringList"
        },
        "BucketColumns": {
          "documentation": "<p>A list of reducer grouping columns, clustering columns, and bucketing columns in the table.</p>",
          "shape": "NameStringList"
        },
        "Columns": {
          "documentation": "<p>A list of the <code>Columns</code> in the table.</p>",
          "shape": "ColumnList"
        },
        "Compressed": {
          "documentation": "<p> <code>True</code> if the data in the table is compressed, or <code>False</code> if not.</p>",
          "shape": "Boolean"
        },
        "InputFormat": {
          "documentation": "<p>The input format: <code>SequenceFileInputFormat</code> (binary), or <code>TextInputFormat</code>, or a custom format.</p>",
          "shape": "FormatString"
        },
        "Location": {
          "documentation": "<p>The physical location of the table. By default, this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.</p>",
          "shape": "LocationString"
        },
        "NumberOfBuckets": {
          "documentation": "<p>Must be specified if the table contains any dimension columns.</p>",
          "shape": "Integer"
        },
        "OutputFormat": {
          "documentation": "<p>The output format: <code>SequenceFileOutputFormat</code> (binary), or <code>IgnoreKeyTextOutputFormat</code>, or a custom format.</p>",
          "shape": "FormatString"
        },
        "Parameters": {
          "documentation": "<p>The user-supplied properties in key-value form.</p>",
          "shape": "ParametersMap"
        },
        "SchemaReference": {
          "documentation": "<p>An object that references a schema stored in the Glue Schema Registry.</p> <p>When creating a table, you can pass an empty list of columns for the schema, and instead use a schema reference.</p>",
          "shape": "SchemaReference"
        },
        "SerdeInfo": {
          "documentation": "<p>The serialization/deserialization (SerDe) information.</p>",
          "shape": "SerDeInfo"
        },
        "SkewedInfo": {
          "documentation": "<p>The information about values that appear frequently in a column (skewed values).</p>",
          "shape": "SkewedInfo"
        },
        "SortColumns": {
          "documentation": "<p>A list specifying the sort order of each bucket in the table.</p>",
          "shape": "OrderList"
        },
        "StoredAsSubDirectories": {
          "documentation": "<p> <code>True</code> if the table data is stored in subdirectories, or <code>False</code> if not.</p>",
          "shape": "Boolean"
        }
      },
      "type": "structure"
    },
    "StreamingDataPreviewOptions": {
      "documentation": "<p>Specifies options related to data preview for viewing a sample of your data.</p>",
      "members": {
        "PollingTime": {
          "documentation": "<p>The polling time in milliseconds.</p>",
          "shape": "PollingTime"
        },
        "RecordPollingLimit": {
          "documentation": "<p>The limit to the number of records polled.</p>",
          "shape": "PositiveLong"
        }
      },
      "type": "structure"
    },
    "StringColumnStatisticsData": {
      "documentation": "<p>Defines column statistics supported for character sequence data values.</p>",
      "members": {
        "AverageLength": {
          "documentation": "<p>The average string length in the column.</p>",
          "shape": "NonNegativeDouble"
        },
        "MaximumLength": {
          "documentation": "<p>The size of the longest string in the column.</p>",
          "shape": "NonNegativeLong"
        },
        "NumberOfDistinctValues": {
          "documentation": "<p>The number of distinct values in a column.</p>",
          "shape": "NonNegativeLong"
        },
        "NumberOfNulls": {
          "documentation": "<p>The number of null values in the column.</p>",
          "shape": "NonNegativeLong"
        }
      },
      "required": [
        "MaximumLength",
        "AverageLength",
        "NumberOfNulls",
        "NumberOfDistinctValues"
      ],
      "type": "structure"
    },
    "StringList": {
      "member": {
        "shape": "GenericString"
      },
      "type": "list"
    },
    "Table": {
      "documentation": "<p>Represents a collection of related data organized in columns and rows.</p>",
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog in which the table resides.</p>",
          "shape": "CatalogIdString"
        },
        "CreateTime": {
          "documentation": "<p>The time when the table definition was created in the Data Catalog.</p>",
          "shape": "Timestamp"
        },
        "CreatedBy": {
          "documentation": "<p>The person or entity who created the table.</p>",
          "shape": "NameString"
        },
        "DatabaseName": {
          "documentation": "<p>The name of the database where the table metadata resides. For Hive compatibility, this must be all lowercase.</p>",
          "shape": "NameString"
        },
        "Description": {
          "documentation": "<p>A description of the table.</p>",
          "shape": "DescriptionString"
        },
        "IsRegisteredWithLakeFormation": {
          "documentation": "<p>Indicates whether the table has been registered with Lake Formation.</p>",
          "shape": "Boolean"
        },
        "LastAccessTime": {
          "documentation": "<p>The last time that the table was accessed. This is usually taken from HDFS, and might not be reliable.</p>",
          "shape": "Timestamp"
        },
        "LastAnalyzedTime": {
          "documentation": "<p>The last time that column statistics were computed for this table.</p>",
          "shape": "Timestamp"
        },
        "Name": {
          "documentation": "<p>The table name. For Hive compatibility, this must be entirely lowercase.</p>",
          "shape": "NameString"
        },
        "Owner": {
          "documentation": "<p>The owner of the table.</p>",
          "shape": "NameString"
        },
        "Parameters": {
          "documentation": "<p>These key-value pairs define properties associated with the table.</p>",
          "shape": "ParametersMap"
        },
        "PartitionKeys": {
          "documentation": "<p>A list of columns by which the table is partitioned. Only primitive types are supported as partition keys.</p> <p>When you create a table used by Amazon Athena, and you do not specify any <code>partitionKeys</code>, you must at least set the value of <code>partitionKeys</code> to an empty list. For example:</p> <p> <code>\"PartitionKeys\": []</code> </p>",
          "shape": "ColumnList"
        },
        "Retention": {
          "documentation": "<p>The retention time for this table.</p>",
          "shape": "NonNegativeInteger"
        },
        "StorageDescriptor": {
          "documentation": "<p>A storage descriptor containing information about the physical storage of this table.</p>",
          "shape": "StorageDescriptor"
        },
        "TableType": {
          "documentation": "<p>The type of this table (<code>EXTERNAL_TABLE</code>, <code>VIRTUAL_VIEW</code>, etc.).</p>",
          "shape": "TableTypeString"
        },
        "TargetTable": {
          "documentation": "<p>A <code>TableIdentifier</code> structure that describes a target table for resource linking.</p>",
          "shape": "TableIdentifier"
        },
        "UpdateTime": {
          "documentation": "<p>The last time that the table was updated.</p>",
          "shape": "Timestamp"
        },
        "VersionId": {
          "documentation": "<p>The ID of the table version.</p>",
          "shape": "VersionString"
        },
        "ViewExpandedText": {
          "documentation": "<p>If the table is a view, the expanded text of the view; otherwise <code>null</code>.</p>",
          "shape": "ViewTextString"
        },
        "ViewOriginalText": {
          "documentation": "<p>If the table is a view, the original text of the view; otherwise <code>null</code>.</p>",
          "shape": "ViewTextString"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "TableError": {
      "documentation": "<p>An error record for table operations.</p>",
      "members": {
        "ErrorDetail": {
          "documentation": "<p>The details about the error.</p>",
          "shape": "ErrorDetail"
        },
        "TableName": {
          "documentation": "<p>The name of the table. For Hive compatibility, this must be entirely lowercase.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "TableErrors": {
      "member": {
        "shape": "TableError"
      },
      "type": "list"
    },
    "TableIdentifier": {
      "documentation": "<p>A structure that describes a target table for resource linking.</p>",
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog in which the table resides.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>The name of the catalog database that contains the target table.</p>",
          "shape": "NameString"
        },
        "Name": {
          "documentation": "<p>The name of the target table.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "TableInput": {
      "documentation": "<p>A structure used to define a table.</p>",
      "members": {
        "Description": {
          "documentation": "<p>A description of the table.</p>",
          "shape": "DescriptionString"
        },
        "LastAccessTime": {
          "documentation": "<p>The last time that the table was accessed.</p>",
          "shape": "Timestamp"
        },
        "LastAnalyzedTime": {
          "documentation": "<p>The last time that column statistics were computed for this table.</p>",
          "shape": "Timestamp"
        },
        "Name": {
          "documentation": "<p>The table name. For Hive compatibility, this is folded to lowercase when it is stored.</p>",
          "shape": "NameString"
        },
        "Owner": {
          "documentation": "<p>The table owner.</p>",
          "shape": "NameString"
        },
        "Parameters": {
          "documentation": "<p>These key-value pairs define properties associated with the table.</p>",
          "shape": "ParametersMap"
        },
        "PartitionKeys": {
          "documentation": "<p>A list of columns by which the table is partitioned. Only primitive types are supported as partition keys.</p> <p>When you create a table used by Amazon Athena, and you do not specify any <code>partitionKeys</code>, you must at least set the value of <code>partitionKeys</code> to an empty list. For example:</p> <p> <code>\"PartitionKeys\": []</code> </p>",
          "shape": "ColumnList"
        },
        "Retention": {
          "documentation": "<p>The retention time for this table.</p>",
          "shape": "NonNegativeInteger"
        },
        "StorageDescriptor": {
          "documentation": "<p>A storage descriptor containing information about the physical storage of this table.</p>",
          "shape": "StorageDescriptor"
        },
        "TableType": {
          "documentation": "<p>The type of this table (<code>EXTERNAL_TABLE</code>, <code>VIRTUAL_VIEW</code>, etc.).</p>",
          "shape": "TableTypeString"
        },
        "TargetTable": {
          "documentation": "<p>A <code>TableIdentifier</code> structure that describes a target table for resource linking.</p>",
          "shape": "TableIdentifier"
        },
        "ViewExpandedText": {
          "documentation": "<p>If the table is a view, the expanded text of the view; otherwise <code>null</code>.</p>",
          "shape": "ViewTextString"
        },
        "ViewOriginalText": {
          "documentation": "<p>If the table is a view, the original text of the view; otherwise <code>null</code>.</p>",
          "shape": "ViewTextString"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "TableList": {
      "member": {
        "shape": "Table"
      },
      "type": "list"
    },
    "TableName": {
      "type": "string"
    },
    "TablePrefix": {
      "max": 128,
      "min": 0,
      "type": "string"
    },
    "TableTypeString": {
      "max": 255,
      "type": "string"
    },
    "TableVersion": {
      "documentation": "<p>Specifies a version of a table.</p>",
      "members": {
        "Table": {
          "documentation": "<p>The table in question.</p>",
          "shape": "Table"
        },
        "VersionId": {
          "documentation": "<p>The ID value that identifies this table version. A <code>VersionId</code> is a string representation of an integer. Each version is incremented by 1.</p>",
          "shape": "VersionString"
        }
      },
      "type": "structure"
    },
    "TableVersionError": {
      "documentation": "<p>An error record for table-version operations.</p>",
      "members": {
        "ErrorDetail": {
          "documentation": "<p>The details about the error.</p>",
          "shape": "ErrorDetail"
        },
        "TableName": {
          "documentation": "<p>The name of the table in question.</p>",
          "shape": "NameString"
        },
        "VersionId": {
          "documentation": "<p>The ID value of the version in question. A <code>VersionID</code> is a string representation of an integer. Each version is incremented by 1.</p>",
          "shape": "VersionString"
        }
      },
      "type": "structure"
    },
    "TableVersionErrors": {
      "member": {
        "shape": "TableVersionError"
      },
      "type": "list"
    },
    "TagKey": {
      "max": 128,
      "min": 1,
      "type": "string"
    },
    "TagKeysList": {
      "max": 50,
      "member": {
        "shape": "TagKey"
      },
      "min": 0,
      "type": "list"
    },
    "TagResourceRequest": {
      "members": {
        "ResourceArn": {
          "documentation": "<p>The ARN of the Glue resource to which to add the tags. For more information about Glue resource ARNs, see the <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-common.html#aws-glue-api-regex-aws-glue-arn-id\">Glue ARN string pattern</a>.</p>",
          "shape": "GlueResourceArn"
        },
        "TagsToAdd": {
          "documentation": "<p>Tags to add to this resource.</p>",
          "shape": "TagsMap"
        }
      },
      "required": [
        "ResourceArn",
        "TagsToAdd"
      ],
      "type": "structure"
    },
    "TagResourceResponse": {
      "members": {},
      "type": "structure"
    },
    "TagValue": {
      "max": 256,
      "min": 0,
      "type": "string"
    },
    "TagsMap": {
      "key": {
        "shape": "TagKey"
      },
      "max": 50,
      "min": 0,
      "type": "map",
      "value": {
        "shape": "TagValue"
      }
    },
    "TargetFormat": {
      "enum": [
        "json",
        "csv",
        "avro",
        "orc",
        "parquet"
      ],
      "type": "string"
    },
    "TaskRun": {
      "documentation": "<p>The sampling parameters that are associated with the machine learning transform.</p>",
      "members": {
        "CompletedOn": {
          "documentation": "<p>The last point in time that the requested task run was completed.</p>",
          "shape": "Timestamp"
        },
        "ErrorString": {
          "documentation": "<p>The list of error strings associated with this task run.</p>",
          "shape": "GenericString"
        },
        "ExecutionTime": {
          "documentation": "<p>The amount of time (in seconds) that the task run consumed resources.</p>",
          "shape": "ExecutionTime"
        },
        "LastModifiedOn": {
          "documentation": "<p>The last point in time that the requested task run was updated.</p>",
          "shape": "Timestamp"
        },
        "LogGroupName": {
          "documentation": "<p>The names of the log group for secure logging, associated with this task run.</p>",
          "shape": "GenericString"
        },
        "Properties": {
          "documentation": "<p>Specifies configuration properties associated with this task run.</p>",
          "shape": "TaskRunProperties"
        },
        "StartedOn": {
          "documentation": "<p>The date and time that this task run started.</p>",
          "shape": "Timestamp"
        },
        "Status": {
          "documentation": "<p>The current status of the requested task run.</p>",
          "shape": "TaskStatusType"
        },
        "TaskRunId": {
          "documentation": "<p>The unique identifier for this task run.</p>",
          "shape": "HashString"
        },
        "TransformId": {
          "documentation": "<p>The unique identifier for the transform.</p>",
          "shape": "HashString"
        }
      },
      "type": "structure"
    },
    "TaskRunFilterCriteria": {
      "documentation": "<p>The criteria that are used to filter the task runs for the machine learning transform.</p>",
      "members": {
        "StartedAfter": {
          "documentation": "<p>Filter on task runs started after this date.</p>",
          "shape": "Timestamp"
        },
        "StartedBefore": {
          "documentation": "<p>Filter on task runs started before this date.</p>",
          "shape": "Timestamp"
        },
        "Status": {
          "documentation": "<p>The current status of the task run.</p>",
          "shape": "TaskStatusType"
        },
        "TaskRunType": {
          "documentation": "<p>The type of task run.</p>",
          "shape": "TaskType"
        }
      },
      "type": "structure"
    },
    "TaskRunList": {
      "member": {
        "shape": "TaskRun"
      },
      "type": "list"
    },
    "TaskRunProperties": {
      "documentation": "<p>The configuration properties for the task run.</p>",
      "members": {
        "ExportLabelsTaskRunProperties": {
          "documentation": "<p>The configuration properties for an exporting labels task run.</p>",
          "shape": "ExportLabelsTaskRunProperties"
        },
        "FindMatchesTaskRunProperties": {
          "documentation": "<p>The configuration properties for a find matches task run.</p>",
          "shape": "FindMatchesTaskRunProperties"
        },
        "ImportLabelsTaskRunProperties": {
          "documentation": "<p>The configuration properties for an importing labels task run.</p>",
          "shape": "ImportLabelsTaskRunProperties"
        },
        "LabelingSetGenerationTaskRunProperties": {
          "documentation": "<p>The configuration properties for a labeling set generation task run.</p>",
          "shape": "LabelingSetGenerationTaskRunProperties"
        },
        "TaskType": {
          "documentation": "<p>The type of task run.</p>",
          "shape": "TaskType"
        }
      },
      "type": "structure"
    },
    "TaskRunSortColumnType": {
      "enum": [
        "TASK_RUN_TYPE",
        "STATUS",
        "STARTED"
      ],
      "type": "string"
    },
    "TaskRunSortCriteria": {
      "documentation": "<p>The sorting criteria that are used to sort the list of task runs for the machine learning transform.</p>",
      "members": {
        "Column": {
          "documentation": "<p>The column to be used to sort the list of task runs for the machine learning transform.</p>",
          "shape": "TaskRunSortColumnType"
        },
        "SortDirection": {
          "documentation": "<p>The sort direction to be used to sort the list of task runs for the machine learning transform.</p>",
          "shape": "SortDirectionType"
        }
      },
      "required": [
        "Column",
        "SortDirection"
      ],
      "type": "structure"
    },
    "TaskStatusType": {
      "enum": [
        "STARTING",
        "RUNNING",
        "STOPPING",
        "STOPPED",
        "SUCCEEDED",
        "FAILED",
        "TIMEOUT"
      ],
      "type": "string"
    },
    "TaskType": {
      "enum": [
        "EVALUATION",
        "LABELING_SET_GENERATION",
        "IMPORT_LABELS",
        "EXPORT_LABELS",
        "FIND_MATCHES"
      ],
      "type": "string"
    },
    "Timeout": {
      "box": true,
      "min": 1,
      "type": "integer"
    },
    "Timestamp": {
      "type": "timestamp"
    },
    "TimestampValue": {
      "type": "timestamp"
    },
    "Token": {
      "type": "string"
    },
    "Topk": {
      "box": true,
      "max": 100,
      "min": 0,
      "type": "integer"
    },
    "TotalSegmentsInteger": {
      "max": 10,
      "min": 1,
      "type": "integer"
    },
    "TransactionIdString": {
      "max": 255,
      "min": 1,
      "pattern": "[\\p{L}\\p{N}\\p{P}]*",
      "type": "string"
    },
    "TransformEncryption": {
      "documentation": "<p>The encryption-at-rest settings of the transform that apply to accessing user data. Machine learning transforms can access user data encrypted in Amazon S3 using KMS.</p> <p>Additionally, imported labels and trained transforms can now be encrypted using a customer provided KMS key.</p>",
      "members": {
        "MlUserDataEncryption": {
          "documentation": "<p>An <code>MLUserDataEncryption</code> object containing the encryption mode and customer-provided KMS key ID.</p>",
          "shape": "MLUserDataEncryption"
        },
        "TaskRunSecurityConfigurationName": {
          "documentation": "<p>The name of the security configuration.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "TransformFilterCriteria": {
      "documentation": "<p>The criteria used to filter the machine learning transforms.</p>",
      "members": {
        "CreatedAfter": {
          "documentation": "<p>The time and date after which the transforms were created.</p>",
          "shape": "Timestamp"
        },
        "CreatedBefore": {
          "documentation": "<p>The time and date before which the transforms were created.</p>",
          "shape": "Timestamp"
        },
        "GlueVersion": {
          "documentation": "<p>This value determines which version of Glue this machine learning transform is compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue compatibility defaults to Glue 0.9. For more information, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions\">Glue Versions</a> in the developer guide.</p>",
          "shape": "GlueVersionString"
        },
        "LastModifiedAfter": {
          "documentation": "<p>Filter on transforms last modified after this date.</p>",
          "shape": "Timestamp"
        },
        "LastModifiedBefore": {
          "documentation": "<p>Filter on transforms last modified before this date.</p>",
          "shape": "Timestamp"
        },
        "Name": {
          "documentation": "<p>A unique transform name that is used to filter the machine learning transforms.</p>",
          "shape": "NameString"
        },
        "Schema": {
          "documentation": "<p>Filters on datasets with a specific schema. The <code>Map&lt;Column, Type&gt;</code> object is an array of key-value pairs representing the schema this transform accepts, where <code>Column</code> is the name of a column, and <code>Type</code> is the type of the data such as an integer or string. Has an upper bound of 100 columns.</p>",
          "shape": "TransformSchema"
        },
        "Status": {
          "documentation": "<p>Filters the list of machine learning transforms by the last known status of the transforms (to indicate whether a transform can be used or not). One of \"NOT_READY\", \"READY\", or \"DELETING\".</p>",
          "shape": "TransformStatusType"
        },
        "TransformType": {
          "documentation": "<p>The type of machine learning transform that is used to filter the machine learning transforms.</p>",
          "shape": "TransformType"
        }
      },
      "type": "structure"
    },
    "TransformIdList": {
      "member": {
        "shape": "HashString"
      },
      "type": "list"
    },
    "TransformList": {
      "member": {
        "shape": "MLTransform"
      },
      "type": "list"
    },
    "TransformParameters": {
      "documentation": "<p>The algorithm-specific parameters that are associated with the machine learning transform.</p>",
      "members": {
        "FindMatchesParameters": {
          "documentation": "<p>The parameters for the find matches algorithm.</p>",
          "shape": "FindMatchesParameters"
        },
        "TransformType": {
          "documentation": "<p>The type of machine learning transform.</p> <p>For information about the types of machine learning transforms, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/add-job-machine-learning-transform.html\">Creating Machine Learning Transforms</a>.</p>",
          "shape": "TransformType"
        }
      },
      "required": [
        "TransformType"
      ],
      "type": "structure"
    },
    "TransformSchema": {
      "max": 100,
      "member": {
        "shape": "SchemaColumn"
      },
      "type": "list"
    },
    "TransformSortColumnType": {
      "enum": [
        "NAME",
        "TRANSFORM_TYPE",
        "STATUS",
        "CREATED",
        "LAST_MODIFIED"
      ],
      "type": "string"
    },
    "TransformSortCriteria": {
      "documentation": "<p>The sorting criteria that are associated with the machine learning transform.</p>",
      "members": {
        "Column": {
          "documentation": "<p>The column to be used in the sorting criteria that are associated with the machine learning transform.</p>",
          "shape": "TransformSortColumnType"
        },
        "SortDirection": {
          "documentation": "<p>The sort direction to be used in the sorting criteria that are associated with the machine learning transform.</p>",
          "shape": "SortDirectionType"
        }
      },
      "required": [
        "Column",
        "SortDirection"
      ],
      "type": "structure"
    },
    "TransformStatusType": {
      "enum": [
        "NOT_READY",
        "READY",
        "DELETING"
      ],
      "type": "string"
    },
    "TransformType": {
      "enum": [
        "FIND_MATCHES"
      ],
      "type": "string"
    },
    "Trigger": {
      "documentation": "<p>Information about a specific trigger.</p>",
      "members": {
        "Actions": {
          "documentation": "<p>The actions initiated by this trigger.</p>",
          "shape": "ActionList"
        },
        "Description": {
          "documentation": "<p>A description of this trigger.</p>",
          "shape": "DescriptionString"
        },
        "EventBatchingCondition": {
          "documentation": "<p>Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.</p>",
          "shape": "EventBatchingCondition"
        },
        "Id": {
          "documentation": "<p>Reserved for future use.</p>",
          "shape": "IdString"
        },
        "Name": {
          "documentation": "<p>The name of the trigger.</p>",
          "shape": "NameString"
        },
        "Predicate": {
          "documentation": "<p>The predicate of this trigger, which defines when it will fire.</p>",
          "shape": "Predicate"
        },
        "Schedule": {
          "documentation": "<p>A <code>cron</code> expression used to specify the schedule (see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>.</p>",
          "shape": "GenericString"
        },
        "State": {
          "documentation": "<p>The current state of the trigger.</p>",
          "shape": "TriggerState"
        },
        "Type": {
          "documentation": "<p>The type of trigger that this is.</p>",
          "shape": "TriggerType"
        },
        "WorkflowName": {
          "documentation": "<p>The name of the workflow associated with the trigger.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "TriggerList": {
      "member": {
        "shape": "Trigger"
      },
      "type": "list"
    },
    "TriggerNameList": {
      "member": {
        "shape": "NameString"
      },
      "type": "list"
    },
    "TriggerNodeDetails": {
      "documentation": "<p>The details of a Trigger node present in the workflow.</p>",
      "members": {
        "Trigger": {
          "documentation": "<p>The information of the trigger represented by the trigger node.</p>",
          "shape": "Trigger"
        }
      },
      "type": "structure"
    },
    "TriggerState": {
      "enum": [
        "CREATING",
        "CREATED",
        "ACTIVATING",
        "ACTIVATED",
        "DEACTIVATING",
        "DEACTIVATED",
        "DELETING",
        "UPDATING"
      ],
      "type": "string"
    },
    "TriggerType": {
      "enum": [
        "SCHEDULED",
        "CONDITIONAL",
        "ON_DEMAND",
        "EVENT"
      ],
      "type": "string"
    },
    "TriggerUpdate": {
      "documentation": "<p>A structure used to provide information used to update a trigger. This object updates the previous trigger definition by overwriting it completely.</p>",
      "members": {
        "Actions": {
          "documentation": "<p>The actions initiated by this trigger.</p>",
          "shape": "ActionList"
        },
        "Description": {
          "documentation": "<p>A description of this trigger.</p>",
          "shape": "DescriptionString"
        },
        "EventBatchingCondition": {
          "documentation": "<p>Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.</p>",
          "shape": "EventBatchingCondition"
        },
        "Name": {
          "documentation": "<p>Reserved for future use.</p>",
          "shape": "NameString"
        },
        "Predicate": {
          "documentation": "<p>The predicate of this trigger, which defines when it will fire.</p>",
          "shape": "Predicate"
        },
        "Schedule": {
          "documentation": "<p>A <code>cron</code> expression used to specify the schedule (see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>.</p>",
          "shape": "GenericString"
        }
      },
      "type": "structure"
    },
    "TwoInputs": {
      "max": 2,
      "member": {
        "shape": "NodeId"
      },
      "min": 2,
      "type": "list"
    },
    "TypeString": {
      "max": 20000,
      "min": 0,
      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
      "type": "string"
    },
    "URI": {
      "max": 1024,
      "min": 1,
      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
      "type": "string"
    },
    "UnfilteredPartition": {
      "members": {
        "AuthorizedColumns": {
          "shape": "NameStringList"
        },
        "IsRegisteredWithLakeFormation": {
          "shape": "Boolean"
        },
        "Partition": {
          "shape": "Partition"
        }
      },
      "type": "structure"
    },
    "UnfilteredPartitionList": {
      "member": {
        "shape": "UnfilteredPartition"
      },
      "type": "list"
    },
    "Union": {
      "documentation": "<p>Specifies a transform that combines the rows from two or more datasets into a single result.</p>",
      "members": {
        "Inputs": {
          "documentation": "<p>The node ID inputs to the transform.</p>",
          "shape": "TwoInputs"
        },
        "Name": {
          "documentation": "<p>The name of the transform node.</p>",
          "shape": "NodeName"
        },
        "UnionType": {
          "documentation": "<p>Indicates the type of Union transform. </p> <p>Specify <code>ALL</code> to join all rows from data sources to the resulting DynamicFrame. The resulting union does not remove duplicate rows.</p> <p>Specify <code>DISTINCT</code> to remove duplicate rows in the resulting DynamicFrame.</p>",
          "shape": "UnionType"
        }
      },
      "required": [
        "Name",
        "Inputs",
        "UnionType"
      ],
      "type": "structure"
    },
    "UnionType": {
      "enum": [
        "ALL",
        "DISTINCT"
      ],
      "type": "string"
    },
    "UntagResourceRequest": {
      "members": {
        "ResourceArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the resource from which to remove the tags.</p>",
          "shape": "GlueResourceArn"
        },
        "TagsToRemove": {
          "documentation": "<p>Tags to remove from this resource.</p>",
          "shape": "TagKeysList"
        }
      },
      "required": [
        "ResourceArn",
        "TagsToRemove"
      ],
      "type": "structure"
    },
    "UntagResourceResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateBehavior": {
      "enum": [
        "LOG",
        "UPDATE_IN_DATABASE"
      ],
      "type": "string"
    },
    "UpdateBlueprintRequest": {
      "members": {
        "BlueprintLocation": {
          "documentation": "<p>Specifies a path in Amazon S3 where the blueprint is published.</p>",
          "shape": "OrchestrationS3Location"
        },
        "Description": {
          "documentation": "<p>A description of the blueprint.</p>",
          "shape": "Generic512CharString"
        },
        "Name": {
          "documentation": "<p>The name of the blueprint.</p>",
          "shape": "OrchestrationNameString"
        }
      },
      "required": [
        "Name",
        "BlueprintLocation"
      ],
      "type": "structure"
    },
    "UpdateBlueprintResponse": {
      "members": {
        "Name": {
          "documentation": "<p>Returns the name of the blueprint that was updated.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "UpdateCatalogBehavior": {
      "enum": [
        "UPDATE_IN_DATABASE",
        "LOG"
      ],
      "type": "string"
    },
    "UpdateClassifierRequest": {
      "members": {
        "CsvClassifier": {
          "documentation": "<p>A <code>CsvClassifier</code> object with updated fields.</p>",
          "shape": "UpdateCsvClassifierRequest"
        },
        "GrokClassifier": {
          "documentation": "<p>A <code>GrokClassifier</code> object with updated fields.</p>",
          "shape": "UpdateGrokClassifierRequest"
        },
        "JsonClassifier": {
          "documentation": "<p>A <code>JsonClassifier</code> object with updated fields.</p>",
          "shape": "UpdateJsonClassifierRequest"
        },
        "XMLClassifier": {
          "documentation": "<p>An <code>XMLClassifier</code> object with updated fields.</p>",
          "shape": "UpdateXMLClassifierRequest"
        }
      },
      "type": "structure"
    },
    "UpdateClassifierResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateColumnStatisticsForPartitionRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog where the partitions in question reside. If none is supplied, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "ColumnStatisticsList": {
          "documentation": "<p>A list of the column statistics.</p>",
          "shape": "UpdateColumnStatisticsList"
        },
        "DatabaseName": {
          "documentation": "<p>The name of the catalog database where the partitions reside.</p>",
          "shape": "NameString"
        },
        "PartitionValues": {
          "documentation": "<p>A list of partition values identifying the partition.</p>",
          "shape": "ValueStringList"
        },
        "TableName": {
          "documentation": "<p>The name of the partitions' table.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "PartitionValues",
        "ColumnStatisticsList"
      ],
      "type": "structure"
    },
    "UpdateColumnStatisticsForPartitionResponse": {
      "members": {
        "Errors": {
          "documentation": "<p>Error occurred during updating column statistics data.</p>",
          "shape": "ColumnStatisticsErrors"
        }
      },
      "type": "structure"
    },
    "UpdateColumnStatisticsForTableRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog where the partitions in question reside. If none is supplied, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "ColumnStatisticsList": {
          "documentation": "<p>A list of the column statistics.</p>",
          "shape": "UpdateColumnStatisticsList"
        },
        "DatabaseName": {
          "documentation": "<p>The name of the catalog database where the partitions reside.</p>",
          "shape": "NameString"
        },
        "TableName": {
          "documentation": "<p>The name of the partitions' table.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "ColumnStatisticsList"
      ],
      "type": "structure"
    },
    "UpdateColumnStatisticsForTableResponse": {
      "members": {
        "Errors": {
          "documentation": "<p>List of ColumnStatisticsErrors.</p>",
          "shape": "ColumnStatisticsErrors"
        }
      },
      "type": "structure"
    },
    "UpdateColumnStatisticsList": {
      "max": 25,
      "member": {
        "shape": "ColumnStatistics"
      },
      "min": 0,
      "type": "list"
    },
    "UpdateConnectionRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog in which the connection resides. If none is provided, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "ConnectionInput": {
          "documentation": "<p>A <code>ConnectionInput</code> object that redefines the connection in question.</p>",
          "shape": "ConnectionInput"
        },
        "Name": {
          "documentation": "<p>The name of the connection definition to update.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "Name",
        "ConnectionInput"
      ],
      "type": "structure"
    },
    "UpdateConnectionResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateCrawlerRequest": {
      "members": {
        "Classifiers": {
          "documentation": "<p>A list of custom classifiers that the user has registered. By default, all built-in classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification.</p>",
          "shape": "ClassifierNameList"
        },
        "Configuration": {
          "documentation": "<p>Crawler configuration information. This versioned JSON string allows users to specify aspects of a crawler's behavior. For more information, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html\">Configuring a Crawler</a>.</p>",
          "shape": "CrawlerConfiguration"
        },
        "CrawlerSecurityConfiguration": {
          "documentation": "<p>The name of the <code>SecurityConfiguration</code> structure to be used by this crawler.</p>",
          "shape": "CrawlerSecurityConfiguration"
        },
        "DatabaseName": {
          "documentation": "<p>The Glue database where results are stored, such as: <code>arn:aws:daylight:us-east-1::database/sometable/*</code>.</p>",
          "shape": "DatabaseName"
        },
        "Description": {
          "documentation": "<p>A description of the new crawler.</p>",
          "shape": "DescriptionStringRemovable"
        },
        "LakeFormationConfiguration": {
          "documentation": "<p>Specifies Lake Formation configuration settings for the crawler.</p>",
          "shape": "LakeFormationConfiguration"
        },
        "LineageConfiguration": {
          "documentation": "<p>Specifies data lineage configuration settings for the crawler.</p>",
          "shape": "LineageConfiguration"
        },
        "Name": {
          "documentation": "<p>Name of the new crawler.</p>",
          "shape": "NameString"
        },
        "RecrawlPolicy": {
          "documentation": "<p>A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.</p>",
          "shape": "RecrawlPolicy"
        },
        "Role": {
          "documentation": "<p>The IAM role or Amazon Resource Name (ARN) of an IAM role that is used by the new crawler to access customer resources.</p>",
          "shape": "Role"
        },
        "Schedule": {
          "documentation": "<p>A <code>cron</code> expression used to specify the schedule (see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>.</p>",
          "shape": "CronExpression"
        },
        "SchemaChangePolicy": {
          "documentation": "<p>The policy for the crawler's update and deletion behavior.</p>",
          "shape": "SchemaChangePolicy"
        },
        "TablePrefix": {
          "documentation": "<p>The table prefix used for catalog tables that are created.</p>",
          "shape": "TablePrefix"
        },
        "Targets": {
          "documentation": "<p>A list of targets to crawl.</p>",
          "shape": "CrawlerTargets"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "UpdateCrawlerResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateCrawlerScheduleRequest": {
      "members": {
        "CrawlerName": {
          "documentation": "<p>The name of the crawler whose schedule to update.</p>",
          "shape": "NameString"
        },
        "Schedule": {
          "documentation": "<p>The updated <code>cron</code> expression used to specify the schedule (see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>.</p>",
          "shape": "CronExpression"
        }
      },
      "required": [
        "CrawlerName"
      ],
      "type": "structure"
    },
    "UpdateCrawlerScheduleResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateCsvClassifierRequest": {
      "documentation": "<p>Specifies a custom CSV classifier to be updated.</p>",
      "members": {
        "AllowSingleColumn": {
          "documentation": "<p>Enables the processing of files that contain only one column.</p>",
          "shape": "NullableBoolean"
        },
        "ContainsHeader": {
          "documentation": "<p>Indicates whether the CSV file contains a header.</p>",
          "shape": "CsvHeaderOption"
        },
        "CustomDatatypeConfigured": {
          "documentation": "<p>Specifies the configuration of custom datatypes.</p>",
          "shape": "NullableBoolean"
        },
        "CustomDatatypes": {
          "documentation": "<p>Specifies a list of supported custom datatypes.</p>",
          "shape": "CustomDatatypes"
        },
        "Delimiter": {
          "documentation": "<p>A custom symbol to denote what separates each column entry in the row.</p>",
          "shape": "CsvColumnDelimiter"
        },
        "DisableValueTrimming": {
          "documentation": "<p>Specifies not to trim values before identifying the type of column values. The default value is true.</p>",
          "shape": "NullableBoolean"
        },
        "Header": {
          "documentation": "<p>A list of strings representing column names.</p>",
          "shape": "CsvHeader"
        },
        "Name": {
          "documentation": "<p>The name of the classifier.</p>",
          "shape": "NameString"
        },
        "QuoteSymbol": {
          "documentation": "<p>A custom symbol to denote what combines content into a single column value. It must be different from the column delimiter.</p>",
          "shape": "CsvQuoteSymbol"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "UpdateDatabaseRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog in which the metadata database resides. If none is provided, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseInput": {
          "documentation": "<p>A <code>DatabaseInput</code> object specifying the new definition of the metadata database in the catalog.</p>",
          "shape": "DatabaseInput"
        },
        "Name": {
          "documentation": "<p>The name of the database to update in the catalog. For Hive compatibility, this is folded to lowercase.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "Name",
        "DatabaseInput"
      ],
      "type": "structure"
    },
    "UpdateDatabaseResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateDevEndpointRequest": {
      "members": {
        "AddArguments": {
          "documentation": "<p>The map of arguments to add the map of arguments used to configure the <code>DevEndpoint</code>.</p> <p>Valid arguments are:</p> <ul> <li> <p> <code>\"--enable-glue-datacatalog\": \"\"</code> </p> </li> </ul> <p>You can specify a version of Python support for development endpoints by using the <code>Arguments</code> parameter in the <code>CreateDevEndpoint</code> or <code>UpdateDevEndpoint</code> APIs. If no arguments are provided, the version defaults to Python 2.</p>",
          "shape": "MapValue"
        },
        "AddPublicKeys": {
          "documentation": "<p>The list of public keys for the <code>DevEndpoint</code> to use.</p>",
          "shape": "PublicKeysList"
        },
        "CustomLibraries": {
          "documentation": "<p>Custom Python or Java libraries to be loaded in the <code>DevEndpoint</code>.</p>",
          "shape": "DevEndpointCustomLibraries"
        },
        "DeleteArguments": {
          "documentation": "<p>The list of argument keys to be deleted from the map of arguments used to configure the <code>DevEndpoint</code>.</p>",
          "shape": "StringList"
        },
        "DeletePublicKeys": {
          "documentation": "<p>The list of public keys to be deleted from the <code>DevEndpoint</code>.</p>",
          "shape": "PublicKeysList"
        },
        "EndpointName": {
          "documentation": "<p>The name of the <code>DevEndpoint</code> to be updated.</p>",
          "shape": "GenericString"
        },
        "PublicKey": {
          "documentation": "<p>The public key for the <code>DevEndpoint</code> to use.</p>",
          "shape": "GenericString"
        },
        "UpdateEtlLibraries": {
          "documentation": "<p> <code>True</code> if the list of custom libraries to be loaded in the development endpoint needs to be updated, or <code>False</code> if otherwise.</p>",
          "shape": "BooleanValue"
        }
      },
      "required": [
        "EndpointName"
      ],
      "type": "structure"
    },
    "UpdateDevEndpointResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateGrokClassifierRequest": {
      "documentation": "<p>Specifies a grok classifier to update when passed to <code>UpdateClassifier</code>.</p>",
      "members": {
        "Classification": {
          "documentation": "<p>An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, Amazon CloudWatch Logs, and so on.</p>",
          "shape": "Classification"
        },
        "CustomPatterns": {
          "documentation": "<p>Optional custom grok patterns used by this classifier.</p>",
          "shape": "CustomPatterns"
        },
        "GrokPattern": {
          "documentation": "<p>The grok pattern used by this classifier.</p>",
          "shape": "GrokPattern"
        },
        "Name": {
          "documentation": "<p>The name of the <code>GrokClassifier</code>.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "UpdateJobFromSourceControlRequest": {
      "members": {
        "AuthStrategy": {
          "documentation": "<p>The type of authentication, which can be an authentication token stored in Amazon Web Services Secrets Manager, or a personal access token.</p>",
          "shape": "SourceControlAuthStrategy"
        },
        "AuthToken": {
          "documentation": "<p>The value of the authorization token.</p>",
          "shape": "AuthTokenString"
        },
        "BranchName": {
          "documentation": "<p>An optional branch in the remote repository.</p>",
          "shape": "NameString"
        },
        "CommitId": {
          "documentation": "<p>A commit ID for a commit in the remote repository.</p>",
          "shape": "CommitIdString"
        },
        "Folder": {
          "documentation": "<p>An optional folder in the remote repository.</p>",
          "shape": "NameString"
        },
        "JobName": {
          "documentation": "<p>The name of the Glue job to be synchronized to or from the remote repository.</p>",
          "shape": "NameString"
        },
        "Provider": {
          "documentation": "<p>The provider for the remote repository.</p>",
          "shape": "SourceControlProvider"
        },
        "RepositoryName": {
          "documentation": "<p>The name of the remote repository that contains the job artifacts.</p>",
          "shape": "NameString"
        },
        "RepositoryOwner": {
          "documentation": "<p>The owner of the remote repository that contains the job artifacts.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "UpdateJobFromSourceControlResponse": {
      "members": {
        "JobName": {
          "documentation": "<p>The name of the Glue job.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "UpdateJobRequest": {
      "members": {
        "JobName": {
          "documentation": "<p>The name of the job definition to update.</p>",
          "shape": "NameString"
        },
        "JobUpdate": {
          "documentation": "<p>Specifies the values with which to update the job definition. Unspecified configuration is removed or reset to default values.</p>",
          "shape": "JobUpdate"
        }
      },
      "required": [
        "JobName",
        "JobUpdate"
      ],
      "type": "structure"
    },
    "UpdateJobResponse": {
      "members": {
        "JobName": {
          "documentation": "<p>Returns the name of the updated job definition.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "UpdateJsonClassifierRequest": {
      "documentation": "<p>Specifies a JSON classifier to be updated.</p>",
      "members": {
        "JsonPath": {
          "documentation": "<p>A <code>JsonPath</code> string defining the JSON data for the classifier to classify. Glue supports a subset of JsonPath, as described in <a href=\"https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json\">Writing JsonPath Custom Classifiers</a>.</p>",
          "shape": "JsonPath"
        },
        "Name": {
          "documentation": "<p>The name of the classifier.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "UpdateMLTransformRequest": {
      "members": {
        "Description": {
          "documentation": "<p>A description of the transform. The default is an empty string.</p>",
          "shape": "DescriptionString"
        },
        "GlueVersion": {
          "documentation": "<p>This value determines which version of Glue this machine learning transform is compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue compatibility defaults to Glue 0.9. For more information, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions\">Glue Versions</a> in the developer guide.</p>",
          "shape": "GlueVersionString"
        },
        "MaxCapacity": {
          "documentation": "<p>The number of Glue data processing units (DPUs) that are allocated to task runs for this transform. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href=\"https://aws.amazon.com/glue/pricing/\">Glue pricing page</a>. </p> <p>When the <code>WorkerType</code> field is set to a value other than <code>Standard</code>, the <code>MaxCapacity</code> field is set automatically and becomes read-only.</p>",
          "shape": "NullableDouble"
        },
        "MaxRetries": {
          "documentation": "<p>The maximum number of times to retry a task for this transform after a task run fails.</p>",
          "shape": "NullableInteger"
        },
        "Name": {
          "documentation": "<p>The unique name that you gave the transform when you created it.</p>",
          "shape": "NameString"
        },
        "NumberOfWorkers": {
          "documentation": "<p>The number of workers of a defined <code>workerType</code> that are allocated when this task runs.</p>",
          "shape": "NullableInteger"
        },
        "Parameters": {
          "documentation": "<p>The configuration parameters that are specific to the transform type (algorithm) used. Conditionally dependent on the transform type.</p>",
          "shape": "TransformParameters"
        },
        "Role": {
          "documentation": "<p>The name or Amazon Resource Name (ARN) of the IAM role with the required permissions.</p>",
          "shape": "RoleString"
        },
        "Timeout": {
          "documentation": "<p>The timeout for a task run for this transform in minutes. This is the maximum time that a task run for this transform can consume resources before it is terminated and enters <code>TIMEOUT</code> status. The default is 2,880 minutes (48 hours).</p>",
          "shape": "Timeout"
        },
        "TransformId": {
          "documentation": "<p>A unique identifier that was generated when the transform was created.</p>",
          "shape": "HashString"
        },
        "WorkerType": {
          "documentation": "<p>The type of predefined worker that is allocated when this task runs. Accepts a value of Standard, G.1X, or G.2X.</p> <ul> <li> <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p> </li> <li> <p>For the <code>G.1X</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB disk, and 1 executor per worker.</p> </li> <li> <p>For the <code>G.2X</code> worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB disk, and 1 executor per worker.</p> </li> </ul>",
          "shape": "WorkerType"
        }
      },
      "required": [
        "TransformId"
      ],
      "type": "structure"
    },
    "UpdateMLTransformResponse": {
      "members": {
        "TransformId": {
          "documentation": "<p>The unique identifier for the transform that was updated.</p>",
          "shape": "HashString"
        }
      },
      "type": "structure"
    },
    "UpdatePartitionRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog where the partition to be updated resides. If none is provided, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>The name of the catalog database in which the table in question resides.</p>",
          "shape": "NameString"
        },
        "PartitionInput": {
          "documentation": "<p>The new partition object to update the partition to.</p> <p>The <code>Values</code> property can't be changed. If you want to change the partition key values for a partition, delete and recreate the partition.</p>",
          "shape": "PartitionInput"
        },
        "PartitionValueList": {
          "documentation": "<p>List of partition key values that define the partition to update.</p>",
          "shape": "BoundedPartitionValueList"
        },
        "TableName": {
          "documentation": "<p>The name of the table in which the partition to be updated is located.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "PartitionValueList",
        "PartitionInput"
      ],
      "type": "structure"
    },
    "UpdatePartitionResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateRegistryInput": {
      "members": {
        "Description": {
          "documentation": "<p>A description of the registry. If description is not provided, this field will not be updated.</p>",
          "shape": "DescriptionString"
        },
        "RegistryId": {
          "documentation": "<p>This is a wrapper structure that may contain the registry name and Amazon Resource Name (ARN).</p>",
          "shape": "RegistryId"
        }
      },
      "required": [
        "RegistryId",
        "Description"
      ],
      "type": "structure"
    },
    "UpdateRegistryResponse": {
      "members": {
        "RegistryArn": {
          "documentation": "<p>The Amazon Resource name (ARN) of the updated registry.</p>",
          "shape": "GlueResourceArn"
        },
        "RegistryName": {
          "documentation": "<p>The name of the updated registry.</p>",
          "shape": "SchemaRegistryNameString"
        }
      },
      "type": "structure"
    },
    "UpdateSchemaInput": {
      "members": {
        "Compatibility": {
          "documentation": "<p>The new compatibility setting for the schema.</p>",
          "shape": "Compatibility"
        },
        "Description": {
          "documentation": "<p>The new description for the schema.</p>",
          "shape": "DescriptionString"
        },
        "SchemaId": {
          "documentation": "<p>This is a wrapper structure to contain schema identity fields. The structure contains:</p> <ul> <li> <p>SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided.</p> </li> <li> <p>SchemaId$SchemaName: The name of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided.</p> </li> </ul>",
          "shape": "SchemaId"
        },
        "SchemaVersionNumber": {
          "documentation": "<p>Version number required for check pointing. One of <code>VersionNumber</code> or <code>Compatibility</code> has to be provided.</p>",
          "shape": "SchemaVersionNumber"
        }
      },
      "required": [
        "SchemaId"
      ],
      "type": "structure"
    },
    "UpdateSchemaResponse": {
      "members": {
        "RegistryName": {
          "documentation": "<p>The name of the registry that contains the schema.</p>",
          "shape": "SchemaRegistryNameString"
        },
        "SchemaArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the schema.</p>",
          "shape": "GlueResourceArn"
        },
        "SchemaName": {
          "documentation": "<p>The name of the schema.</p>",
          "shape": "SchemaRegistryNameString"
        }
      },
      "type": "structure"
    },
    "UpdateSourceControlFromJobRequest": {
      "members": {
        "AuthStrategy": {
          "documentation": "<p>The type of authentication, which can be an authentication token stored in Amazon Web Services Secrets Manager, or a personal access token.</p>",
          "shape": "SourceControlAuthStrategy"
        },
        "AuthToken": {
          "documentation": "<p>The value of the authorization token.</p>",
          "shape": "AuthTokenString"
        },
        "BranchName": {
          "documentation": "<p>An optional branch in the remote repository.</p>",
          "shape": "NameString"
        },
        "CommitId": {
          "documentation": "<p>A commit ID for a commit in the remote repository.</p>",
          "shape": "CommitIdString"
        },
        "Folder": {
          "documentation": "<p>An optional folder in the remote repository.</p>",
          "shape": "NameString"
        },
        "JobName": {
          "documentation": "<p>The name of the Glue job to be synchronized to or from the remote repository.</p>",
          "shape": "NameString"
        },
        "Provider": {
          "documentation": "<p>The provider for the remote repository.</p>",
          "shape": "SourceControlProvider"
        },
        "RepositoryName": {
          "documentation": "<p>The name of the remote repository that contains the job artifacts.</p>",
          "shape": "NameString"
        },
        "RepositoryOwner": {
          "documentation": "<p>The owner of the remote repository that contains the job artifacts.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "UpdateSourceControlFromJobResponse": {
      "members": {
        "JobName": {
          "documentation": "<p>The name of the Glue job.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "UpdateTableRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog where the table resides. If none is provided, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>The name of the catalog database in which the table resides. For Hive compatibility, this name is entirely lowercase.</p>",
          "shape": "NameString"
        },
        "SkipArchive": {
          "documentation": "<p>By default, <code>UpdateTable</code> always creates an archived version of the table before updating it. However, if <code>skipArchive</code> is set to true, <code>UpdateTable</code> does not create the archived version.</p>",
          "shape": "BooleanNullable"
        },
        "TableInput": {
          "documentation": "<p>An updated <code>TableInput</code> object to define the metadata table in the catalog.</p>",
          "shape": "TableInput"
        },
        "TransactionId": {
          "documentation": "<p>The transaction ID at which to update the table contents. </p>",
          "shape": "TransactionIdString"
        },
        "VersionId": {
          "documentation": "<p>The version ID at which to update the table contents. </p>",
          "shape": "VersionString"
        }
      },
      "required": [
        "DatabaseName",
        "TableInput"
      ],
      "type": "structure"
    },
    "UpdateTableResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateTriggerRequest": {
      "members": {
        "Name": {
          "documentation": "<p>The name of the trigger to update.</p>",
          "shape": "NameString"
        },
        "TriggerUpdate": {
          "documentation": "<p>The new values with which to update the trigger.</p>",
          "shape": "TriggerUpdate"
        }
      },
      "required": [
        "Name",
        "TriggerUpdate"
      ],
      "type": "structure"
    },
    "UpdateTriggerResponse": {
      "members": {
        "Trigger": {
          "documentation": "<p>The resulting trigger definition.</p>",
          "shape": "Trigger"
        }
      },
      "type": "structure"
    },
    "UpdateUserDefinedFunctionRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog where the function to be updated is located. If none is provided, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>The name of the catalog database where the function to be updated is located.</p>",
          "shape": "NameString"
        },
        "FunctionInput": {
          "documentation": "<p>A <code>FunctionInput</code> object that redefines the function in the Data Catalog.</p>",
          "shape": "UserDefinedFunctionInput"
        },
        "FunctionName": {
          "documentation": "<p>The name of the function.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "DatabaseName",
        "FunctionName",
        "FunctionInput"
      ],
      "type": "structure"
    },
    "UpdateUserDefinedFunctionResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateWorkflowRequest": {
      "members": {
        "DefaultRunProperties": {
          "documentation": "<p>A collection of properties to be used as part of each execution of the workflow.</p>",
          "shape": "WorkflowRunProperties"
        },
        "Description": {
          "documentation": "<p>The description of the workflow.</p>",
          "shape": "GenericString"
        },
        "MaxConcurrentRuns": {
          "documentation": "<p>You can use this parameter to prevent unwanted multiple updates to data, to control costs, or in some cases, to prevent exceeding the maximum number of concurrent runs of any of the component jobs. If you leave this parameter blank, there is no limit to the number of concurrent workflow runs.</p>",
          "shape": "NullableInteger"
        },
        "Name": {
          "documentation": "<p>Name of the workflow to be updated.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "UpdateWorkflowResponse": {
      "members": {
        "Name": {
          "documentation": "<p>The name of the workflow which was specified in input.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "UpdateXMLClassifierRequest": {
      "documentation": "<p>Specifies an XML classifier to be updated.</p>",
      "members": {
        "Classification": {
          "documentation": "<p>An identifier of the data format that the classifier matches.</p>",
          "shape": "Classification"
        },
        "Name": {
          "documentation": "<p>The name of the classifier.</p>",
          "shape": "NameString"
        },
        "RowTag": {
          "documentation": "<p>The XML tag designating the element that contains each record in an XML document being parsed. This cannot identify a self-closing element (closed by <code>/&gt;</code>). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, <code>&lt;row item_a=\"A\" item_b=\"B\"&gt;&lt;/row&gt;</code> is okay, but <code>&lt;row item_a=\"A\" item_b=\"B\" /&gt;</code> is not).</p>",
          "shape": "RowTag"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "UpdatedTimestamp": {
      "type": "string"
    },
    "UpsertRedshiftTargetOptions": {
      "documentation": "<p>The options to configure an upsert operation when writing to a Redshift target .</p>",
      "members": {
        "ConnectionName": {
          "documentation": "<p>The name of the connection to use to write to Redshift.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "TableLocation": {
          "documentation": "<p>The physical location of the Redshift table.</p>",
          "shape": "EnclosedInStringProperty"
        },
        "UpsertKeys": {
          "documentation": "<p>The keys used to determine whether to perform an update or insert.</p>",
          "shape": "EnclosedInStringPropertiesMinOne"
        }
      },
      "type": "structure"
    },
    "UriString": {
      "type": "string"
    },
    "UserDefinedFunction": {
      "documentation": "<p>Represents the equivalent of a Hive user-defined function (<code>UDF</code>) definition.</p>",
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog in which the function resides.</p>",
          "shape": "CatalogIdString"
        },
        "ClassName": {
          "documentation": "<p>The Java class that contains the function code.</p>",
          "shape": "NameString"
        },
        "CreateTime": {
          "documentation": "<p>The time at which the function was created.</p>",
          "shape": "Timestamp"
        },
        "DatabaseName": {
          "documentation": "<p>The name of the catalog database that contains the function.</p>",
          "shape": "NameString"
        },
        "FunctionName": {
          "documentation": "<p>The name of the function.</p>",
          "shape": "NameString"
        },
        "OwnerName": {
          "documentation": "<p>The owner of the function.</p>",
          "shape": "NameString"
        },
        "OwnerType": {
          "documentation": "<p>The owner type.</p>",
          "shape": "PrincipalType"
        },
        "ResourceUris": {
          "documentation": "<p>The resource URIs for the function.</p>",
          "shape": "ResourceUriList"
        }
      },
      "type": "structure"
    },
    "UserDefinedFunctionInput": {
      "documentation": "<p>A structure used to create or update a user-defined function.</p>",
      "members": {
        "ClassName": {
          "documentation": "<p>The Java class that contains the function code.</p>",
          "shape": "NameString"
        },
        "FunctionName": {
          "documentation": "<p>The name of the function.</p>",
          "shape": "NameString"
        },
        "OwnerName": {
          "documentation": "<p>The owner of the function.</p>",
          "shape": "NameString"
        },
        "OwnerType": {
          "documentation": "<p>The owner type.</p>",
          "shape": "PrincipalType"
        },
        "ResourceUris": {
          "documentation": "<p>The resource URIs for the function.</p>",
          "shape": "ResourceUriList"
        }
      },
      "type": "structure"
    },
    "UserDefinedFunctionList": {
      "member": {
        "shape": "UserDefinedFunction"
      },
      "type": "list"
    },
    "ValidationException": {
      "documentation": "<p>A value could not be validated.</p>",
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "ValueString": {
      "max": 1024,
      "type": "string"
    },
    "ValueStringList": {
      "member": {
        "shape": "ValueString"
      },
      "type": "list"
    },
    "VersionId": {
      "type": "long"
    },
    "VersionLongNumber": {
      "max": 100000,
      "min": 1,
      "type": "long"
    },
    "VersionMismatchException": {
      "documentation": "<p>There was a version conflict.</p>",
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "VersionString": {
      "max": 255,
      "min": 1,
      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
      "type": "string"
    },
    "VersionsString": {
      "max": 100000,
      "min": 1,
      "pattern": "[1-9][0-9]*|[1-9][0-9]*-[1-9][0-9]*",
      "type": "string"
    },
    "ViewTextString": {
      "max": 409600,
      "type": "string"
    },
    "WorkerType": {
      "enum": [
        "Standard",
        "G.1X",
        "G.2X",
        "G.025X"
      ],
      "type": "string"
    },
    "Workflow": {
      "documentation": "<p>A workflow is a collection of multiple dependent Glue jobs and crawlers that are run to complete a complex ETL task. A workflow manages the execution and monitoring of all its jobs and crawlers.</p>",
      "members": {
        "BlueprintDetails": {
          "documentation": "<p>This structure indicates the details of the blueprint that this particular workflow is created from.</p>",
          "shape": "BlueprintDetails"
        },
        "CreatedOn": {
          "documentation": "<p>The date and time when the workflow was created.</p>",
          "shape": "TimestampValue"
        },
        "DefaultRunProperties": {
          "documentation": "<p>A collection of properties to be used as part of each execution of the workflow. The run properties are made available to each job in the workflow. A job can modify the properties for the next jobs in the flow.</p>",
          "shape": "WorkflowRunProperties"
        },
        "Description": {
          "documentation": "<p>A description of the workflow.</p>",
          "shape": "GenericString"
        },
        "Graph": {
          "documentation": "<p>The graph representing all the Glue components that belong to the workflow as nodes and directed connections between them as edges.</p>",
          "shape": "WorkflowGraph"
        },
        "LastModifiedOn": {
          "documentation": "<p>The date and time when the workflow was last modified.</p>",
          "shape": "TimestampValue"
        },
        "LastRun": {
          "documentation": "<p>The information about the last execution of the workflow.</p>",
          "shape": "WorkflowRun"
        },
        "MaxConcurrentRuns": {
          "documentation": "<p>You can use this parameter to prevent unwanted multiple updates to data, to control costs, or in some cases, to prevent exceeding the maximum number of concurrent runs of any of the component jobs. If you leave this parameter blank, there is no limit to the number of concurrent workflow runs.</p>",
          "shape": "NullableInteger"
        },
        "Name": {
          "documentation": "<p>The name of the workflow.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "WorkflowGraph": {
      "documentation": "<p>A workflow graph represents the complete workflow containing all the Glue components present in the workflow and all the directed connections between them.</p>",
      "members": {
        "Edges": {
          "documentation": "<p>A list of all the directed connections between the nodes belonging to the workflow.</p>",
          "shape": "EdgeList"
        },
        "Nodes": {
          "documentation": "<p>A list of the the Glue components belong to the workflow represented as nodes.</p>",
          "shape": "NodeList"
        }
      },
      "type": "structure"
    },
    "WorkflowNames": {
      "max": 25,
      "member": {
        "shape": "NameString"
      },
      "min": 1,
      "type": "list"
    },
    "WorkflowRun": {
      "documentation": "<p>A workflow run is an execution of a workflow providing all the runtime information.</p>",
      "members": {
        "CompletedOn": {
          "documentation": "<p>The date and time when the workflow run completed.</p>",
          "shape": "TimestampValue"
        },
        "ErrorMessage": {
          "documentation": "<p>This error message describes any error that may have occurred in starting the workflow run. Currently the only error message is \"Concurrent runs exceeded for workflow: <code>foo</code>.\"</p>",
          "shape": "ErrorString"
        },
        "Graph": {
          "documentation": "<p>The graph representing all the Glue components that belong to the workflow as nodes and directed connections between them as edges.</p>",
          "shape": "WorkflowGraph"
        },
        "Name": {
          "documentation": "<p>Name of the workflow that was run.</p>",
          "shape": "NameString"
        },
        "PreviousRunId": {
          "documentation": "<p>The ID of the previous workflow run.</p>",
          "shape": "IdString"
        },
        "StartedOn": {
          "documentation": "<p>The date and time when the workflow run was started.</p>",
          "shape": "TimestampValue"
        },
        "StartingEventBatchCondition": {
          "documentation": "<p>The batch condition that started the workflow run.</p>",
          "shape": "StartingEventBatchCondition"
        },
        "Statistics": {
          "documentation": "<p>The statistics of the run.</p>",
          "shape": "WorkflowRunStatistics"
        },
        "Status": {
          "documentation": "<p>The status of the workflow run.</p>",
          "shape": "WorkflowRunStatus"
        },
        "WorkflowRunId": {
          "documentation": "<p>The ID of this workflow run.</p>",
          "shape": "IdString"
        },
        "WorkflowRunProperties": {
          "documentation": "<p>The workflow run properties which were set during the run.</p>",
          "shape": "WorkflowRunProperties"
        }
      },
      "type": "structure"
    },
    "WorkflowRunProperties": {
      "key": {
        "shape": "IdString"
      },
      "type": "map",
      "value": {
        "shape": "GenericString"
      }
    },
    "WorkflowRunStatistics": {
      "documentation": "<p>Workflow run statistics provides statistics about the workflow run.</p>",
      "members": {
        "ErroredActions": {
          "documentation": "<p>Indicates the count of job runs in the ERROR state in the workflow run.</p>",
          "shape": "IntegerValue"
        },
        "FailedActions": {
          "documentation": "<p>Total number of Actions that have failed.</p>",
          "shape": "IntegerValue"
        },
        "RunningActions": {
          "documentation": "<p>Total number Actions in running state.</p>",
          "shape": "IntegerValue"
        },
        "StoppedActions": {
          "documentation": "<p>Total number of Actions that have stopped.</p>",
          "shape": "IntegerValue"
        },
        "SucceededActions": {
          "documentation": "<p>Total number of Actions that have succeeded.</p>",
          "shape": "IntegerValue"
        },
        "TimeoutActions": {
          "documentation": "<p>Total number of Actions that timed out.</p>",
          "shape": "IntegerValue"
        },
        "TotalActions": {
          "documentation": "<p>Total number of Actions in the workflow run.</p>",
          "shape": "IntegerValue"
        },
        "WaitingActions": {
          "documentation": "<p>Indicates the count of job runs in WAITING state in the workflow run.</p>",
          "shape": "IntegerValue"
        }
      },
      "type": "structure"
    },
    "WorkflowRunStatus": {
      "enum": [
        "RUNNING",
        "COMPLETED",
        "STOPPING",
        "STOPPED",
        "ERROR"
      ],
      "type": "string"
    },
    "WorkflowRuns": {
      "max": 1000,
      "member": {
        "shape": "WorkflowRun"
      },
      "min": 1,
      "type": "list"
    },
    "Workflows": {
      "max": 25,
      "member": {
        "shape": "Workflow"
      },
      "min": 1,
      "type": "list"
    },
    "XMLClassifier": {
      "documentation": "<p>A classifier for <code>XML</code> content.</p>",
      "members": {
        "Classification": {
          "documentation": "<p>An identifier of the data format that the classifier matches.</p>",
          "shape": "Classification"
        },
        "CreationTime": {
          "documentation": "<p>The time that this classifier was registered.</p>",
          "shape": "Timestamp"
        },
        "LastUpdated": {
          "documentation": "<p>The time that this classifier was last updated.</p>",
          "shape": "Timestamp"
        },
        "Name": {
          "documentation": "<p>The name of the classifier.</p>",
          "shape": "NameString"
        },
        "RowTag": {
          "documentation": "<p>The XML tag designating the element that contains each record in an XML document being parsed. This can't identify a self-closing element (closed by <code>/&gt;</code>). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, <code>&lt;row item_a=\"A\" item_b=\"B\"&gt;&lt;/row&gt;</code> is okay, but <code>&lt;row item_a=\"A\" item_b=\"B\" /&gt;</code> is not).</p>",
          "shape": "RowTag"
        },
        "Version": {
          "documentation": "<p>The version of this classifier.</p>",
          "shape": "VersionId"
        }
      },
      "required": [
        "Name",
        "Classification"
      ],
      "type": "structure"
    }
  },
  "version": "2.0"
}
