{
  "documentation": "The frontend service for Cryo Storage.",
  "metadata": {
    "apiVersion": "2018-04-10",
    "endpointPrefix": "backupstorage",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "AWS Backup Storage",
    "serviceId": "BackupStorage",
    "signatureVersion": "v4",
    "signingName": "backup-storage",
    "uid": "backupstorage-2018-04-10"
  },
  "operations": {
    "DeleteObject": {
      "documentation": "Delete Object from the incremental base Backup.",
      "errors": [
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ServiceInternalException"
        },
        {
          "shape": "RetryableException"
        },
        {
          "shape": "IllegalArgumentException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/backup-jobs/{jobId}/object/{objectName}"
      },
      "input": {
        "shape": "DeleteObjectInput"
      },
      "name": "DeleteObject"
    },
    "GetChunk": {
      "documentation": "Gets the specified object's chunk.",
      "errors": [
        {
          "shape": "IllegalArgumentException"
        },
        {
          "shape": "RetryableException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ServiceInternalException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "KMSInvalidKeyUsageException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/restore-jobs/{jobId}/chunk/{chunkToken}"
      },
      "input": {
        "shape": "GetChunkInput"
      },
      "name": "GetChunk",
      "output": {
        "shape": "GetChunkOutput"
      }
    },
    "GetObjectMetadata": {
      "documentation": "Get metadata associated with an Object.",
      "errors": [
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ServiceInternalException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "RetryableException"
        },
        {
          "shape": "IllegalArgumentException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "KMSInvalidKeyUsageException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/restore-jobs/{jobId}/object/{objectToken}/metadata"
      },
      "input": {
        "shape": "GetObjectMetadataInput"
      },
      "name": "GetObjectMetadata",
      "output": {
        "shape": "GetObjectMetadataOutput"
      }
    },
    "ListChunks": {
      "documentation": "List chunks in a given Object",
      "errors": [
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ServiceInternalException"
        },
        {
          "shape": "RetryableException"
        },
        {
          "shape": "IllegalArgumentException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/restore-jobs/{jobId}/chunks/{objectToken}/list"
      },
      "input": {
        "shape": "ListChunksInput"
      },
      "name": "ListChunks",
      "output": {
        "shape": "ListChunksOutput"
      }
    },
    "ListObjects": {
      "documentation": "List all Objects in a given Backup.",
      "errors": [
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ServiceInternalException"
        },
        {
          "shape": "RetryableException"
        },
        {
          "shape": "IllegalArgumentException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "KMSInvalidKeyUsageException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/restore-jobs/{jobId}/objects/list"
      },
      "input": {
        "shape": "ListObjectsInput"
      },
      "name": "ListObjects",
      "output": {
        "shape": "ListObjectsOutput"
      }
    },
    "NotifyObjectComplete": {
      "authtype": "v4-unsigned-body",
      "documentation": "Complete upload",
      "errors": [
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ServiceInternalException"
        },
        {
          "shape": "NotReadableInputStreamException"
        },
        {
          "shape": "RetryableException"
        },
        {
          "shape": "IllegalArgumentException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "KMSInvalidKeyUsageException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/backup-jobs/{jobId}/object/{uploadId}/complete"
      },
      "input": {
        "shape": "NotifyObjectCompleteInput"
      },
      "name": "NotifyObjectComplete",
      "output": {
        "shape": "NotifyObjectCompleteOutput"
      }
    },
    "PutChunk": {
      "authtype": "v4-unsigned-body",
      "documentation": "Upload chunk.",
      "errors": [
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ServiceInternalException"
        },
        {
          "shape": "NotReadableInputStreamException"
        },
        {
          "shape": "RetryableException"
        },
        {
          "shape": "IllegalArgumentException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "KMSInvalidKeyUsageException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/backup-jobs/{jobId}/chunk/{uploadId}/{chunkIndex}"
      },
      "input": {
        "shape": "PutChunkInput"
      },
      "name": "PutChunk",
      "output": {
        "shape": "PutChunkOutput"
      }
    },
    "PutObject": {
      "authtype": "v4-unsigned-body",
      "documentation": "Upload object that can store object metadata String and data blob in single API call using inline chunk field.",
      "errors": [
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ServiceInternalException"
        },
        {
          "shape": "NotReadableInputStreamException"
        },
        {
          "shape": "RetryableException"
        },
        {
          "shape": "IllegalArgumentException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "KMSInvalidKeyUsageException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/backup-jobs/{jobId}/object/{objectName}/put-object"
      },
      "input": {
        "shape": "PutObjectInput"
      },
      "name": "PutObject",
      "output": {
        "shape": "PutObjectOutput"
      }
    },
    "StartObject": {
      "documentation": "Start upload containing one or many chunks.",
      "errors": [
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ServiceInternalException"
        },
        {
          "shape": "RetryableException"
        },
        {
          "shape": "IllegalArgumentException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "DataAlreadyExistsException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/backup-jobs/{jobId}/object/{objectName}"
      },
      "input": {
        "shape": "StartObjectInput"
      },
      "name": "StartObject",
      "output": {
        "shape": "StartObjectOutput"
      }
    }
  },
  "shapes": {
    "AccessDeniedException": {
      "error": {
        "httpStatusCode": 403
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "ServiceErrorMessage"
        }
      },
      "synthetic": true,
      "type": "structure"
    },
    "BackupObject": {
      "documentation": "Object",
      "members": {
        "ChunksCount": {
          "documentation": "Number of chunks in object",
          "shape": "OptionalLong"
        },
        "MetadataString": {
          "documentation": "Metadata string associated with the Object",
          "shape": "string"
        },
        "Name": {
          "documentation": "Object name",
          "shape": "string"
        },
        "ObjectChecksum": {
          "documentation": "Object checksum",
          "shape": "string"
        },
        "ObjectChecksumAlgorithm": {
          "documentation": "Checksum algorithm",
          "shape": "SummaryChecksumAlgorithm"
        },
        "ObjectToken": {
          "documentation": "Object token",
          "shape": "string"
        }
      },
      "required": [
        "Name",
        "ObjectChecksum",
        "ObjectChecksumAlgorithm",
        "ObjectToken"
      ],
      "type": "structure"
    },
    "Chunk": {
      "documentation": "Chunk",
      "members": {
        "Checksum": {
          "documentation": "Chunk checksum",
          "shape": "string"
        },
        "ChecksumAlgorithm": {
          "documentation": "Checksum algorithm",
          "shape": "DataChecksumAlgorithm"
        },
        "ChunkToken": {
          "documentation": "Chunk token",
          "shape": "string"
        },
        "Index": {
          "documentation": "Chunk index",
          "shape": "long"
        },
        "Length": {
          "documentation": "Chunk length",
          "shape": "long"
        }
      },
      "required": [
        "Index",
        "Length",
        "Checksum",
        "ChecksumAlgorithm",
        "ChunkToken"
      ],
      "type": "structure"
    },
    "ChunkList": {
      "member": {
        "shape": "Chunk"
      },
      "type": "list"
    },
    "DataAlreadyExistsException": {
      "documentation": "Non-retryable exception. Attempted to create already existing object or chunk. This message contains a checksum of already presented data.",
      "error": {
        "httpStatusCode": 400
      },
      "exception": true,
      "members": {
        "Checksum": {
          "documentation": "Data checksum used",
          "shape": "string"
        },
        "ChecksumAlgorithm": {
          "documentation": "Checksum algorithm used",
          "shape": "string"
        },
        "Message": {
          "shape": "string"
        }
      },
      "type": "structure"
    },
    "DataChecksumAlgorithm": {
      "enum": [
        "SHA256"
      ],
      "type": "string"
    },
    "DeleteObjectInput": {
      "members": {
        "BackupJobId": {
          "documentation": "Backup job Id for the in-progress backup.",
          "location": "uri",
          "locationName": "jobId",
          "shape": "string"
        },
        "ObjectName": {
          "documentation": "The name of the Object.",
          "location": "uri",
          "locationName": "objectName",
          "shape": "string"
        }
      },
      "required": [
        "BackupJobId",
        "ObjectName"
      ],
      "type": "structure"
    },
    "GetChunkInput": {
      "members": {
        "ChunkToken": {
          "documentation": "Chunk token",
          "location": "uri",
          "locationName": "chunkToken",
          "shape": "string"
        },
        "StorageJobId": {
          "documentation": "Storage job id",
          "location": "uri",
          "locationName": "jobId",
          "shape": "string"
        }
      },
      "required": [
        "StorageJobId",
        "ChunkToken"
      ],
      "type": "structure"
    },
    "GetChunkOutput": {
      "members": {
        "Checksum": {
          "documentation": "Data checksum",
          "location": "header",
          "locationName": "x-amz-checksum",
          "shape": "string"
        },
        "ChecksumAlgorithm": {
          "documentation": "Checksum algorithm",
          "location": "header",
          "locationName": "x-amz-checksum-algorithm",
          "shape": "DataChecksumAlgorithm"
        },
        "Data": {
          "documentation": "Chunk data",
          "shape": "PayloadBlob"
        },
        "Length": {
          "documentation": "Data length",
          "location": "header",
          "locationName": "x-amz-data-length",
          "shape": "long"
        }
      },
      "payload": "Data",
      "required": [
        "Data",
        "Length",
        "Checksum",
        "ChecksumAlgorithm"
      ],
      "type": "structure"
    },
    "GetObjectMetadataInput": {
      "members": {
        "ObjectToken": {
          "documentation": "Object token.",
          "location": "uri",
          "locationName": "objectToken",
          "shape": "string"
        },
        "StorageJobId": {
          "documentation": "Backup job id for the in-progress backup.",
          "location": "uri",
          "locationName": "jobId",
          "shape": "string"
        }
      },
      "required": [
        "StorageJobId",
        "ObjectToken"
      ],
      "type": "structure"
    },
    "GetObjectMetadataOutput": {
      "members": {
        "MetadataBlob": {
          "documentation": "Metadata blob.",
          "shape": "PayloadBlob"
        },
        "MetadataBlobChecksum": {
          "documentation": "MetadataBlob checksum.",
          "location": "header",
          "locationName": "x-amz-checksum",
          "shape": "string"
        },
        "MetadataBlobChecksumAlgorithm": {
          "documentation": "Checksum algorithm.",
          "location": "header",
          "locationName": "x-amz-checksum-algorithm",
          "shape": "DataChecksumAlgorithm"
        },
        "MetadataBlobLength": {
          "documentation": "The size of MetadataBlob.",
          "location": "header",
          "locationName": "x-amz-data-length",
          "shape": "long"
        },
        "MetadataString": {
          "documentation": "Metadata string.",
          "location": "header",
          "locationName": "x-amz-metadata-string",
          "shape": "string"
        }
      },
      "payload": "MetadataBlob",
      "type": "structure"
    },
    "IllegalArgumentException": {
      "documentation": "Non-retryable exception, indicates client error (wrong argument passed to API). See exception message for details.",
      "error": {
        "httpStatusCode": 400
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "string"
        }
      },
      "type": "structure"
    },
    "KMSInvalidKeyUsageException": {
      "documentation": "Non-retryable exception. Indicates the KMS key usage is incorrect. See exception message for details.",
      "error": {
        "httpStatusCode": 400
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "string"
        }
      },
      "type": "structure"
    },
    "ListChunksInput": {
      "members": {
        "MaxResults": {
          "documentation": "Maximum number of chunks",
          "location": "querystring",
          "locationName": "max-results",
          "shape": "MaxResults"
        },
        "NextToken": {
          "documentation": "Pagination token",
          "location": "querystring",
          "locationName": "next-token",
          "shape": "string"
        },
        "ObjectToken": {
          "documentation": "Object token",
          "location": "uri",
          "locationName": "objectToken",
          "shape": "string"
        },
        "StorageJobId": {
          "documentation": "Storage job id",
          "location": "uri",
          "locationName": "jobId",
          "shape": "string"
        }
      },
      "required": [
        "StorageJobId",
        "ObjectToken"
      ],
      "type": "structure"
    },
    "ListChunksOutput": {
      "members": {
        "ChunkList": {
          "documentation": "List of chunks",
          "shape": "ChunkList"
        },
        "NextToken": {
          "documentation": "Pagination token",
          "shape": "string"
        }
      },
      "required": [
        "ChunkList"
      ],
      "type": "structure"
    },
    "ListObjectsInput": {
      "members": {
        "CreatedAfter": {
          "documentation": "(Optional) Created after filter",
          "location": "querystring",
          "locationName": "created-after",
          "shape": "timestamp"
        },
        "CreatedBefore": {
          "documentation": "(Optional) Created before filter",
          "location": "querystring",
          "locationName": "created-before",
          "shape": "timestamp"
        },
        "MaxResults": {
          "documentation": "Maximum objects count",
          "location": "querystring",
          "locationName": "max-results",
          "shape": "MaxResults"
        },
        "NextToken": {
          "documentation": "Pagination token",
          "location": "querystring",
          "locationName": "next-token",
          "shape": "string"
        },
        "StartingObjectName": {
          "documentation": "Optional, specifies the starting Object name to list from. Ignored if NextToken is not NULL",
          "location": "querystring",
          "locationName": "starting-object-name",
          "shape": "string"
        },
        "StartingObjectPrefix": {
          "documentation": "Optional, specifies the starting Object prefix to list from. Ignored if NextToken is not NULL",
          "location": "querystring",
          "locationName": "starting-object-prefix",
          "shape": "string"
        },
        "StorageJobId": {
          "documentation": "Storage job id",
          "location": "uri",
          "locationName": "jobId",
          "shape": "string"
        }
      },
      "required": [
        "StorageJobId"
      ],
      "type": "structure"
    },
    "ListObjectsOutput": {
      "members": {
        "NextToken": {
          "documentation": "Pagination token",
          "shape": "string"
        },
        "ObjectList": {
          "documentation": "Object list",
          "shape": "ObjectList"
        }
      },
      "required": [
        "ObjectList"
      ],
      "type": "structure"
    },
    "MaxResults": {
      "max": 100,
      "min": 1,
      "type": "integer"
    },
    "MetadataString": {
      "pattern": "^.{1,256}$",
      "type": "string"
    },
    "NotReadableInputStreamException": {
      "documentation": "Retryalble exception. Indicated issues while reading an input stream due to the networking issues or connection drop on the client side.",
      "error": {
        "httpStatusCode": 400
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "string"
        }
      },
      "type": "structure"
    },
    "NotifyObjectCompleteInput": {
      "members": {
        "BackupJobId": {
          "documentation": "Backup job Id for the in-progress backup",
          "location": "uri",
          "locationName": "jobId",
          "shape": "string"
        },
        "MetadataBlob": {
          "documentation": "Optional metadata associated with an Object. Maximum length is 4MB.",
          "shape": "PayloadBlob"
        },
        "MetadataBlobChecksum": {
          "documentation": "Checksum of MetadataBlob.",
          "location": "querystring",
          "locationName": "metadata-checksum",
          "shape": "string"
        },
        "MetadataBlobChecksumAlgorithm": {
          "documentation": "Checksum algorithm.",
          "location": "querystring",
          "locationName": "metadata-checksum-algorithm",
          "shape": "DataChecksumAlgorithm"
        },
        "MetadataBlobLength": {
          "documentation": "The size of MetadataBlob.",
          "location": "querystring",
          "locationName": "metadata-blob-length",
          "shape": "long"
        },
        "MetadataString": {
          "documentation": "Optional metadata associated with an Object. Maximum string length is 256 bytes.",
          "location": "querystring",
          "locationName": "metadata-string",
          "shape": "MetadataString"
        },
        "ObjectChecksum": {
          "documentation": "Object checksum",
          "location": "querystring",
          "locationName": "checksum",
          "shape": "string"
        },
        "ObjectChecksumAlgorithm": {
          "documentation": "Checksum algorithm",
          "location": "querystring",
          "locationName": "checksum-algorithm",
          "shape": "SummaryChecksumAlgorithm"
        },
        "UploadId": {
          "documentation": "Upload Id for the in-progress upload",
          "location": "uri",
          "locationName": "uploadId",
          "shape": "string"
        }
      },
      "payload": "MetadataBlob",
      "required": [
        "BackupJobId",
        "UploadId",
        "ObjectChecksum",
        "ObjectChecksumAlgorithm"
      ],
      "type": "structure"
    },
    "NotifyObjectCompleteOutput": {
      "members": {
        "ObjectChecksum": {
          "documentation": "Object checksum",
          "shape": "string"
        },
        "ObjectChecksumAlgorithm": {
          "documentation": "Checksum algorithm",
          "shape": "SummaryChecksumAlgorithm"
        }
      },
      "required": [
        "ObjectChecksum",
        "ObjectChecksumAlgorithm"
      ],
      "type": "structure"
    },
    "ObjectList": {
      "member": {
        "shape": "BackupObject"
      },
      "type": "list"
    },
    "OptionalLong": {
      "type": "long"
    },
    "PayloadBlob": {
      "streaming": true,
      "type": "blob"
    },
    "PutChunkInput": {
      "members": {
        "BackupJobId": {
          "documentation": "Backup job Id for the in-progress backup.",
          "location": "uri",
          "locationName": "jobId",
          "shape": "string"
        },
        "Checksum": {
          "documentation": "Data checksum",
          "location": "querystring",
          "locationName": "checksum",
          "shape": "string"
        },
        "ChecksumAlgorithm": {
          "documentation": "Checksum algorithm",
          "location": "querystring",
          "locationName": "checksum-algorithm",
          "shape": "DataChecksumAlgorithm"
        },
        "ChunkIndex": {
          "documentation": "Describes this chunk's position relative to the other chunks",
          "location": "uri",
          "locationName": "chunkIndex",
          "shape": "long"
        },
        "Data": {
          "documentation": "Data to be uploaded",
          "shape": "PayloadBlob"
        },
        "Length": {
          "documentation": "Data length",
          "location": "querystring",
          "locationName": "length",
          "shape": "long"
        },
        "UploadId": {
          "documentation": "Upload Id for the in-progress upload.",
          "location": "uri",
          "locationName": "uploadId",
          "shape": "string"
        }
      },
      "payload": "Data",
      "required": [
        "BackupJobId",
        "UploadId",
        "ChunkIndex",
        "Data",
        "Length",
        "Checksum",
        "ChecksumAlgorithm"
      ],
      "type": "structure"
    },
    "PutChunkOutput": {
      "members": {
        "ChunkChecksum": {
          "documentation": "Chunk checksum",
          "shape": "string"
        },
        "ChunkChecksumAlgorithm": {
          "documentation": "Checksum algorithm",
          "shape": "DataChecksumAlgorithm"
        }
      },
      "required": [
        "ChunkChecksum",
        "ChunkChecksumAlgorithm"
      ],
      "type": "structure"
    },
    "PutObjectInput": {
      "members": {
        "BackupJobId": {
          "documentation": "Backup job Id for the in-progress backup.",
          "location": "uri",
          "locationName": "jobId",
          "shape": "string"
        },
        "InlineChunk": {
          "documentation": "Inline chunk data to be uploaded.",
          "shape": "PayloadBlob"
        },
        "InlineChunkChecksum": {
          "documentation": "Inline chunk checksum",
          "location": "querystring",
          "locationName": "checksum",
          "shape": "string"
        },
        "InlineChunkChecksumAlgorithm": {
          "documentation": "Inline chunk checksum algorithm",
          "location": "querystring",
          "locationName": "checksum-algorithm",
          "shape": "string"
        },
        "InlineChunkLength": {
          "documentation": "Length of the inline chunk data.",
          "location": "querystring",
          "locationName": "length",
          "shape": "long"
        },
        "MetadataString": {
          "documentation": "Store user defined metadata like backup checksum, disk ids, restore metadata etc.",
          "location": "querystring",
          "locationName": "metadata-string",
          "shape": "string"
        },
        "ObjectChecksum": {
          "documentation": "object checksum",
          "location": "querystring",
          "locationName": "object-checksum",
          "shape": "string"
        },
        "ObjectChecksumAlgorithm": {
          "documentation": "object checksum algorithm",
          "location": "querystring",
          "locationName": "object-checksum-algorithm",
          "shape": "SummaryChecksumAlgorithm"
        },
        "ObjectName": {
          "documentation": "The name of the Object to be uploaded.",
          "location": "uri",
          "locationName": "objectName",
          "shape": "string"
        },
        "ThrowOnDuplicate": {
          "documentation": "Throw an exception if Object name is already exist.",
          "location": "querystring",
          "locationName": "throwOnDuplicate",
          "shape": "boolean"
        }
      },
      "payload": "InlineChunk",
      "required": [
        "BackupJobId",
        "ObjectName"
      ],
      "type": "structure"
    },
    "PutObjectOutput": {
      "members": {
        "InlineChunkChecksum": {
          "documentation": "Inline chunk checksum",
          "shape": "string"
        },
        "InlineChunkChecksumAlgorithm": {
          "documentation": "Inline chunk checksum algorithm",
          "shape": "DataChecksumAlgorithm"
        },
        "ObjectChecksum": {
          "documentation": "object checksum",
          "shape": "string"
        },
        "ObjectChecksumAlgorithm": {
          "documentation": "object checksum algorithm",
          "shape": "SummaryChecksumAlgorithm"
        }
      },
      "required": [
        "InlineChunkChecksum",
        "InlineChunkChecksumAlgorithm",
        "ObjectChecksum",
        "ObjectChecksumAlgorithm"
      ],
      "type": "structure"
    },
    "ResourceNotFoundException": {
      "documentation": "Non-retryable exception. Attempted to make an operation on non-existing or expired resource.",
      "error": {
        "httpStatusCode": 404
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "string"
        }
      },
      "type": "structure"
    },
    "RetryableException": {
      "documentation": "Retryable exception. In general indicates internal failure that can be fixed by retry.",
      "error": {
        "httpStatusCode": 500
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "string"
        }
      },
      "type": "structure"
    },
    "ServiceErrorMessage": {
      "type": "string"
    },
    "ServiceInternalException": {
      "documentation": "Deprecated. To be removed from the model.",
      "error": {
        "httpStatusCode": 500
      },
      "exception": true,
      "fault": true,
      "members": {
        "Message": {
          "shape": "string"
        }
      },
      "type": "structure"
    },
    "ServiceUnavailableException": {
      "documentation": "Retryable exception, indicates internal server error.",
      "error": {
        "httpStatusCode": 503
      },
      "exception": true,
      "fault": true,
      "members": {
        "Message": {
          "shape": "string"
        }
      },
      "type": "structure"
    },
    "StartObjectInput": {
      "members": {
        "BackupJobId": {
          "documentation": "Backup job Id for the in-progress backup",
          "location": "uri",
          "locationName": "jobId",
          "shape": "string"
        },
        "ObjectName": {
          "documentation": "Name for the object.",
          "location": "uri",
          "locationName": "objectName",
          "shape": "string"
        },
        "ThrowOnDuplicate": {
          "documentation": "Throw an exception if Object name is already exist.",
          "shape": "boolean"
        }
      },
      "required": [
        "BackupJobId",
        "ObjectName"
      ],
      "type": "structure"
    },
    "StartObjectOutput": {
      "members": {
        "UploadId": {
          "documentation": "Upload Id for a given upload.",
          "shape": "string"
        }
      },
      "required": [
        "UploadId"
      ],
      "type": "structure"
    },
    "SummaryChecksumAlgorithm": {
      "enum": [
        "SUMMARY"
      ],
      "type": "string"
    },
    "ThrottlingException": {
      "documentation": "Increased rate over throttling limits. Can be retried with exponential backoff.",
      "error": {
        "httpStatusCode": 429
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "string"
        }
      },
      "type": "structure"
    },
    "boolean": {
      "type": "boolean"
    },
    "long": {
      "type": "long"
    },
    "string": {
      "type": "string"
    },
    "timestamp": {
      "type": "timestamp"
    }
  },
  "version": "2.0"
}
