{
  "documentation": "<p>MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redis\u2019 flexible and friendly data structures, APIs, and commands.</p>",
  "metadata": {
    "apiVersion": "2021-01-01",
    "endpointPrefix": "memory-db",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "Amazon MemoryDB",
    "serviceFullName": "Amazon MemoryDB",
    "serviceId": "MemoryDB",
    "signatureVersion": "v4",
    "signingName": "memorydb",
    "targetPrefix": "AmazonMemoryDB",
    "uid": "memorydb-2021-01-01"
  },
  "operations": {
    "BatchUpdateCluster": {
      "documentation": "<p>Apply the service update to a list of clusters supplied. For more information on service updates and applying them, see <a href=\"https://docs.aws.amazon.com/MemoryDB/latest/devguide/managing-updates.html#applying-updates\">Applying the service updates</a>.</p>",
      "errors": [
        {
          "shape": "ServiceUpdateNotFoundFault"
        },
        {
          "shape": "InvalidParameterValueException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "BatchUpdateClusterRequest"
      },
      "name": "BatchUpdateCluster",
      "output": {
        "shape": "BatchUpdateClusterResponse"
      }
    },
    "CopySnapshot": {
      "documentation": "<p>Makes a copy of an existing snapshot.</p>",
      "errors": [
        {
          "shape": "SnapshotAlreadyExistsFault"
        },
        {
          "shape": "SnapshotNotFoundFault"
        },
        {
          "shape": "SnapshotQuotaExceededFault"
        },
        {
          "shape": "InvalidSnapshotStateFault"
        },
        {
          "shape": "ServiceLinkedRoleNotFoundFault"
        },
        {
          "shape": "InvalidParameterValueException"
        },
        {
          "shape": "InvalidParameterCombinationException"
        },
        {
          "shape": "TagQuotaPerResourceExceeded"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "CopySnapshotRequest"
      },
      "name": "CopySnapshot",
      "output": {
        "shape": "CopySnapshotResponse"
      }
    },
    "CreateACL": {
      "documentation": "<p>Creates an Access Control List. For more information, see <a href=\"https://docs.aws.amazon.com/MemoryDB/latest/devguide/clusters.acls.html\">Authenticating users with Access Contol Lists (ACLs)</a>.</p>",
      "errors": [
        {
          "shape": "UserNotFoundFault"
        },
        {
          "shape": "DuplicateUserNameFault"
        },
        {
          "shape": "ACLAlreadyExistsFault"
        },
        {
          "shape": "DefaultUserRequired"
        },
        {
          "shape": "ACLQuotaExceededFault"
        },
        {
          "shape": "InvalidParameterValueException"
        },
        {
          "shape": "TagQuotaPerResourceExceeded"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "CreateACLRequest"
      },
      "name": "CreateACL",
      "output": {
        "shape": "CreateACLResponse"
      }
    },
    "CreateCluster": {
      "documentation": "<p>Creates a cluster. All nodes in the cluster run the same protocol-compliant engine software.</p>",
      "errors": [
        {
          "shape": "ClusterAlreadyExistsFault"
        },
        {
          "shape": "SubnetGroupNotFoundFault"
        },
        {
          "shape": "ClusterQuotaForCustomerExceededFault"
        },
        {
          "shape": "NodeQuotaForClusterExceededFault"
        },
        {
          "shape": "NodeQuotaForCustomerExceededFault"
        },
        {
          "shape": "ParameterGroupNotFoundFault"
        },
        {
          "shape": "InsufficientClusterCapacityFault"
        },
        {
          "shape": "InvalidVPCNetworkStateFault"
        },
        {
          "shape": "ServiceLinkedRoleNotFoundFault"
        },
        {
          "shape": "ShardsPerClusterQuotaExceededFault"
        },
        {
          "shape": "InvalidParameterValueException"
        },
        {
          "shape": "InvalidParameterCombinationException"
        },
        {
          "shape": "InvalidCredentialsException"
        },
        {
          "shape": "TagQuotaPerResourceExceeded"
        },
        {
          "shape": "ACLNotFoundFault"
        },
        {
          "shape": "InvalidACLStateFault"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "CreateClusterRequest"
      },
      "name": "CreateCluster",
      "output": {
        "shape": "CreateClusterResponse"
      }
    },
    "CreateParameterGroup": {
      "documentation": "<p>Creates a new MemoryDB parameter group. A parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster. For more information, see <a href=\"https://docs.aws.amazon.com/MemoryDB/latest/devguide/parametergroups.html\">Configuring engine parameters using parameter groups</a>. </p>",
      "errors": [
        {
          "shape": "ParameterGroupQuotaExceededFault"
        },
        {
          "shape": "ParameterGroupAlreadyExistsFault"
        },
        {
          "shape": "InvalidParameterGroupStateFault"
        },
        {
          "shape": "ServiceLinkedRoleNotFoundFault"
        },
        {
          "shape": "TagQuotaPerResourceExceeded"
        },
        {
          "shape": "InvalidParameterValueException"
        },
        {
          "shape": "InvalidParameterCombinationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "CreateParameterGroupRequest"
      },
      "name": "CreateParameterGroup",
      "output": {
        "shape": "CreateParameterGroupResponse"
      }
    },
    "CreateSnapshot": {
      "documentation": "<p>Creates a copy of an entire cluster at a specific moment in time.</p>",
      "errors": [
        {
          "shape": "SnapshotAlreadyExistsFault"
        },
        {
          "shape": "ClusterNotFoundFault"
        },
        {
          "shape": "InvalidClusterStateFault"
        },
        {
          "shape": "SnapshotQuotaExceededFault"
        },
        {
          "shape": "ServiceLinkedRoleNotFoundFault"
        },
        {
          "shape": "InvalidParameterCombinationException"
        },
        {
          "shape": "InvalidParameterValueException"
        },
        {
          "shape": "TagQuotaPerResourceExceeded"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "CreateSnapshotRequest"
      },
      "name": "CreateSnapshot",
      "output": {
        "shape": "CreateSnapshotResponse"
      }
    },
    "CreateSubnetGroup": {
      "documentation": "<p>Creates a subnet group. A subnet group is a collection of subnets (typically private) that you can designate for your clusters running in an Amazon Virtual Private Cloud (VPC) environment. When you create a cluster in an Amazon VPC, you must specify a subnet group. MemoryDB uses that subnet group to choose a subnet and IP addresses within that subnet to associate with your nodes. For more information, see <a href=\"https://docs.aws.amazon.com/MemoryDB/latest/devguide/subnetgroups.html\">Subnets and subnet groups</a>.</p>",
      "errors": [
        {
          "shape": "SubnetGroupAlreadyExistsFault"
        },
        {
          "shape": "SubnetGroupQuotaExceededFault"
        },
        {
          "shape": "SubnetQuotaExceededFault"
        },
        {
          "shape": "InvalidSubnet"
        },
        {
          "shape": "ServiceLinkedRoleNotFoundFault"
        },
        {
          "shape": "SubnetNotAllowedFault"
        },
        {
          "shape": "TagQuotaPerResourceExceeded"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "CreateSubnetGroupRequest"
      },
      "name": "CreateSubnetGroup",
      "output": {
        "shape": "CreateSubnetGroupResponse"
      }
    },
    "CreateUser": {
      "documentation": "<p>Creates a MemoryDB user. For more information, see <a href=\"https://docs.aws.amazon.com/MemoryDB/latest/devguide/clusters.acls.html\">Authenticating users with Access Contol Lists (ACLs)</a>.</p>",
      "errors": [
        {
          "shape": "UserAlreadyExistsFault"
        },
        {
          "shape": "UserQuotaExceededFault"
        },
        {
          "shape": "DuplicateUserNameFault"
        },
        {
          "shape": "InvalidParameterValueException"
        },
        {
          "shape": "InvalidParameterCombinationException"
        },
        {
          "shape": "TagQuotaPerResourceExceeded"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "CreateUserRequest"
      },
      "name": "CreateUser",
      "output": {
        "shape": "CreateUserResponse"
      }
    },
    "DeleteACL": {
      "documentation": "<p>Deletes an Access Control List. The ACL must first be disassociated from the cluster before it can be deleted. For more information, see <a href=\"https://docs.aws.amazon.com/MemoryDB/latest/devguide/clusters.acls.html\">Authenticating users with Access Contol Lists (ACLs)</a>.</p>",
      "errors": [
        {
          "shape": "ACLNotFoundFault"
        },
        {
          "shape": "InvalidACLStateFault"
        },
        {
          "shape": "InvalidParameterValueException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DeleteACLRequest"
      },
      "name": "DeleteACL",
      "output": {
        "shape": "DeleteACLResponse"
      }
    },
    "DeleteCluster": {
      "documentation": "<p>Deletes a cluster. It also deletes all associated nodes and node endpoints</p>",
      "errors": [
        {
          "shape": "ClusterNotFoundFault"
        },
        {
          "shape": "InvalidClusterStateFault"
        },
        {
          "shape": "SnapshotAlreadyExistsFault"
        },
        {
          "shape": "ServiceLinkedRoleNotFoundFault"
        },
        {
          "shape": "InvalidParameterValueException"
        },
        {
          "shape": "InvalidParameterCombinationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DeleteClusterRequest"
      },
      "name": "DeleteCluster",
      "output": {
        "shape": "DeleteClusterResponse"
      }
    },
    "DeleteParameterGroup": {
      "documentation": "<p>Deletes the specified parameter group. You cannot delete a parameter group if it is associated with any clusters. You cannot delete the default parameter groups in your account.</p>",
      "errors": [
        {
          "shape": "InvalidParameterGroupStateFault"
        },
        {
          "shape": "ParameterGroupNotFoundFault"
        },
        {
          "shape": "ServiceLinkedRoleNotFoundFault"
        },
        {
          "shape": "InvalidParameterValueException"
        },
        {
          "shape": "InvalidParameterCombinationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DeleteParameterGroupRequest"
      },
      "name": "DeleteParameterGroup",
      "output": {
        "shape": "DeleteParameterGroupResponse"
      }
    },
    "DeleteSnapshot": {
      "documentation": "<p>Deletes an existing snapshot. When you receive a successful response from this operation, MemoryDB immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p>",
      "errors": [
        {
          "shape": "SnapshotNotFoundFault"
        },
        {
          "shape": "InvalidSnapshotStateFault"
        },
        {
          "shape": "ServiceLinkedRoleNotFoundFault"
        },
        {
          "shape": "InvalidParameterValueException"
        },
        {
          "shape": "InvalidParameterCombinationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DeleteSnapshotRequest"
      },
      "name": "DeleteSnapshot",
      "output": {
        "shape": "DeleteSnapshotResponse"
      }
    },
    "DeleteSubnetGroup": {
      "documentation": "<p>Deletes a subnet group. You cannot delete a default subnet group or one that is associated with any clusters.</p>",
      "errors": [
        {
          "shape": "SubnetGroupInUseFault"
        },
        {
          "shape": "SubnetGroupNotFoundFault"
        },
        {
          "shape": "ServiceLinkedRoleNotFoundFault"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DeleteSubnetGroupRequest"
      },
      "name": "DeleteSubnetGroup",
      "output": {
        "shape": "DeleteSubnetGroupResponse"
      }
    },
    "DeleteUser": {
      "documentation": "<p>Deletes a user. The user will be removed from all ACLs and in turn removed from all clusters.</p>",
      "errors": [
        {
          "shape": "InvalidUserStateFault"
        },
        {
          "shape": "UserNotFoundFault"
        },
        {
          "shape": "InvalidParameterValueException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DeleteUserRequest"
      },
      "name": "DeleteUser",
      "output": {
        "shape": "DeleteUserResponse"
      }
    },
    "DescribeACLs": {
      "documentation": "<p>Returns a list of ACLs</p>",
      "errors": [
        {
          "shape": "ACLNotFoundFault"
        },
        {
          "shape": "InvalidParameterCombinationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DescribeACLsRequest"
      },
      "name": "DescribeACLs",
      "output": {
        "shape": "DescribeACLsResponse"
      }
    },
    "DescribeClusters": {
      "documentation": "<p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cluster if a cluster name is supplied.</p>",
      "errors": [
        {
          "shape": "ClusterNotFoundFault"
        },
        {
          "shape": "ServiceLinkedRoleNotFoundFault"
        },
        {
          "shape": "InvalidParameterValueException"
        },
        {
          "shape": "InvalidParameterCombinationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DescribeClustersRequest"
      },
      "name": "DescribeClusters",
      "output": {
        "shape": "DescribeClustersResponse"
      }
    },
    "DescribeEngineVersions": {
      "documentation": "<p>Returns a list of the available Redis engine versions.</p>",
      "errors": [
        {
          "shape": "ServiceLinkedRoleNotFoundFault"
        },
        {
          "shape": "InvalidParameterValueException"
        },
        {
          "shape": "InvalidParameterCombinationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DescribeEngineVersionsRequest"
      },
      "name": "DescribeEngineVersions",
      "output": {
        "shape": "DescribeEngineVersionsResponse"
      }
    },
    "DescribeEvents": {
      "documentation": "<p>Returns events related to clusters, security groups, and parameter groups. You can obtain events specific to a particular cluster, security group, or parameter group by providing the name as a parameter. By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>",
      "errors": [
        {
          "shape": "ServiceLinkedRoleNotFoundFault"
        },
        {
          "shape": "InvalidParameterValueException"
        },
        {
          "shape": "InvalidParameterCombinationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DescribeEventsRequest"
      },
      "name": "DescribeEvents",
      "output": {
        "shape": "DescribeEventsResponse"
      }
    },
    "DescribeParameterGroups": {
      "documentation": "<p>Returns a list of parameter group descriptions. If a parameter group name is specified, the list contains only the descriptions for that group.</p>",
      "errors": [
        {
          "shape": "ParameterGroupNotFoundFault"
        },
        {
          "shape": "ServiceLinkedRoleNotFoundFault"
        },
        {
          "shape": "InvalidParameterValueException"
        },
        {
          "shape": "InvalidParameterCombinationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DescribeParameterGroupsRequest"
      },
      "name": "DescribeParameterGroups",
      "output": {
        "shape": "DescribeParameterGroupsResponse"
      }
    },
    "DescribeParameters": {
      "documentation": "<p>Returns the detailed parameter list for a particular parameter group.</p>",
      "errors": [
        {
          "shape": "ParameterGroupNotFoundFault"
        },
        {
          "shape": "ServiceLinkedRoleNotFoundFault"
        },
        {
          "shape": "InvalidParameterValueException"
        },
        {
          "shape": "InvalidParameterCombinationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DescribeParametersRequest"
      },
      "name": "DescribeParameters",
      "output": {
        "shape": "DescribeParametersResponse"
      }
    },
    "DescribeServiceUpdates": {
      "documentation": "<p>Returns details of the service updates</p>",
      "errors": [
        {
          "shape": "InvalidParameterValueException"
        },
        {
          "shape": "InvalidParameterCombinationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DescribeServiceUpdatesRequest"
      },
      "name": "DescribeServiceUpdates",
      "output": {
        "shape": "DescribeServiceUpdatesResponse"
      }
    },
    "DescribeSnapshots": {
      "documentation": "<p>Returns information about cluster snapshots. By default, DescribeSnapshots lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cluster.</p>",
      "errors": [
        {
          "shape": "SnapshotNotFoundFault"
        },
        {
          "shape": "ServiceLinkedRoleNotFoundFault"
        },
        {
          "shape": "InvalidParameterValueException"
        },
        {
          "shape": "InvalidParameterCombinationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DescribeSnapshotsRequest"
      },
      "name": "DescribeSnapshots",
      "output": {
        "shape": "DescribeSnapshotsResponse"
      }
    },
    "DescribeSubnetGroups": {
      "documentation": "<p>Returns a list of subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group.</p>",
      "errors": [
        {
          "shape": "SubnetGroupNotFoundFault"
        },
        {
          "shape": "ServiceLinkedRoleNotFoundFault"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DescribeSubnetGroupsRequest"
      },
      "name": "DescribeSubnetGroups",
      "output": {
        "shape": "DescribeSubnetGroupsResponse"
      }
    },
    "DescribeUsers": {
      "documentation": "<p>Returns a list of users.</p>",
      "errors": [
        {
          "shape": "UserNotFoundFault"
        },
        {
          "shape": "InvalidParameterCombinationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "DescribeUsersRequest"
      },
      "name": "DescribeUsers",
      "output": {
        "shape": "DescribeUsersResponse"
      }
    },
    "FailoverShard": {
      "documentation": "<p>Used to failover a shard</p>",
      "errors": [
        {
          "shape": "APICallRateForCustomerExceededFault"
        },
        {
          "shape": "InvalidClusterStateFault"
        },
        {
          "shape": "ShardNotFoundFault"
        },
        {
          "shape": "ClusterNotFoundFault"
        },
        {
          "shape": "TestFailoverNotAvailableFault"
        },
        {
          "shape": "InvalidKMSKeyFault"
        },
        {
          "shape": "InvalidParameterValueException"
        },
        {
          "shape": "InvalidParameterCombinationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "FailoverShardRequest"
      },
      "name": "FailoverShard",
      "output": {
        "shape": "FailoverShardResponse"
      }
    },
    "ListAllowedNodeTypeUpdates": {
      "documentation": "<p>Lists all available node types that you can scale to from your cluster's current node type. When you use the UpdateCluster operation to scale your cluster, the value of the NodeType parameter must be one of the node types returned by this operation.</p>",
      "errors": [
        {
          "shape": "ClusterNotFoundFault"
        },
        {
          "shape": "ServiceLinkedRoleNotFoundFault"
        },
        {
          "shape": "InvalidParameterCombinationException"
        },
        {
          "shape": "InvalidParameterValueException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "ListAllowedNodeTypeUpdatesRequest"
      },
      "name": "ListAllowedNodeTypeUpdates",
      "output": {
        "shape": "ListAllowedNodeTypeUpdatesResponse"
      }
    },
    "ListTags": {
      "documentation": "<p>Lists all tags currently on a named resource. A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track your MemoryDB resources. For more information, see <a href=\"https://docs.aws.amazon.com/MemoryDB/latest/devguide/Tagging-Resources.html\">Tagging your MemoryDB resources</a> </p>",
      "errors": [
        {
          "shape": "ClusterNotFoundFault"
        },
        {
          "shape": "InvalidClusterStateFault"
        },
        {
          "shape": "ParameterGroupNotFoundFault"
        },
        {
          "shape": "SubnetGroupNotFoundFault"
        },
        {
          "shape": "SnapshotNotFoundFault"
        },
        {
          "shape": "InvalidARNFault"
        },
        {
          "shape": "ServiceLinkedRoleNotFoundFault"
        },
        {
          "shape": "UserNotFoundFault"
        },
        {
          "shape": "ACLNotFoundFault"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "ListTagsRequest"
      },
      "name": "ListTags",
      "output": {
        "shape": "ListTagsResponse"
      }
    },
    "ResetParameterGroup": {
      "documentation": "<p>Modifies the parameters of a parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire parameter group, specify the AllParameters and ParameterGroupName parameters.</p>",
      "errors": [
        {
          "shape": "InvalidParameterGroupStateFault"
        },
        {
          "shape": "ParameterGroupNotFoundFault"
        },
        {
          "shape": "ServiceLinkedRoleNotFoundFault"
        },
        {
          "shape": "InvalidParameterValueException"
        },
        {
          "shape": "InvalidParameterCombinationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "ResetParameterGroupRequest"
      },
      "name": "ResetParameterGroup",
      "output": {
        "shape": "ResetParameterGroupResponse"
      }
    },
    "TagResource": {
      "documentation": "<p>A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your MemoryDB resources. When you add or remove tags on clusters, those actions will be replicated to all nodes in the cluster. For more information, see <a href=\"https://docs.aws.amazon.com/MemoryDB/latest/devguide/iam.resourcelevelpermissions.html\">Resource-level permissions</a>.</p> <p>For example, you can use cost-allocation tags to your MemoryDB resources, Amazon generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href=\"https://docs.aws.amazon.com/MemoryDB/latest/devguide/tagging.html\">Using Cost Allocation Tags</a>.</p>",
      "errors": [
        {
          "shape": "ClusterNotFoundFault"
        },
        {
          "shape": "ParameterGroupNotFoundFault"
        },
        {
          "shape": "SubnetGroupNotFoundFault"
        },
        {
          "shape": "InvalidClusterStateFault"
        },
        {
          "shape": "SnapshotNotFoundFault"
        },
        {
          "shape": "UserNotFoundFault"
        },
        {
          "shape": "ACLNotFoundFault"
        },
        {
          "shape": "TagQuotaPerResourceExceeded"
        },
        {
          "shape": "InvalidARNFault"
        },
        {
          "shape": "ServiceLinkedRoleNotFoundFault"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "TagResourceRequest"
      },
      "name": "TagResource",
      "output": {
        "shape": "TagResourceResponse"
      }
    },
    "UntagResource": {
      "documentation": "<p>Use this operation to remove tags on a resource</p>",
      "errors": [
        {
          "shape": "ClusterNotFoundFault"
        },
        {
          "shape": "InvalidClusterStateFault"
        },
        {
          "shape": "ParameterGroupNotFoundFault"
        },
        {
          "shape": "SubnetGroupNotFoundFault"
        },
        {
          "shape": "SnapshotNotFoundFault"
        },
        {
          "shape": "InvalidARNFault"
        },
        {
          "shape": "TagNotFoundFault"
        },
        {
          "shape": "ServiceLinkedRoleNotFoundFault"
        },
        {
          "shape": "UserNotFoundFault"
        },
        {
          "shape": "ACLNotFoundFault"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "UntagResourceRequest"
      },
      "name": "UntagResource",
      "output": {
        "shape": "UntagResourceResponse"
      }
    },
    "UpdateACL": {
      "documentation": "<p>Changes the list of users that belong to the Access Control List.</p>",
      "errors": [
        {
          "shape": "ACLNotFoundFault"
        },
        {
          "shape": "UserNotFoundFault"
        },
        {
          "shape": "DuplicateUserNameFault"
        },
        {
          "shape": "DefaultUserRequired"
        },
        {
          "shape": "InvalidACLStateFault"
        },
        {
          "shape": "InvalidParameterValueException"
        },
        {
          "shape": "InvalidParameterCombinationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "UpdateACLRequest"
      },
      "name": "UpdateACL",
      "output": {
        "shape": "UpdateACLResponse"
      }
    },
    "UpdateCluster": {
      "documentation": "<p>Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration settings by specifying the settings and the new values.</p>",
      "errors": [
        {
          "shape": "ClusterNotFoundFault"
        },
        {
          "shape": "InvalidClusterStateFault"
        },
        {
          "shape": "InvalidNodeStateFault"
        },
        {
          "shape": "ParameterGroupNotFoundFault"
        },
        {
          "shape": "InvalidVPCNetworkStateFault"
        },
        {
          "shape": "ServiceLinkedRoleNotFoundFault"
        },
        {
          "shape": "InvalidKMSKeyFault"
        },
        {
          "shape": "NodeQuotaForClusterExceededFault"
        },
        {
          "shape": "ClusterQuotaForCustomerExceededFault"
        },
        {
          "shape": "ShardsPerClusterQuotaExceededFault"
        },
        {
          "shape": "NodeQuotaForCustomerExceededFault"
        },
        {
          "shape": "NoOperationFault"
        },
        {
          "shape": "InvalidACLStateFault"
        },
        {
          "shape": "ACLNotFoundFault"
        },
        {
          "shape": "InvalidParameterValueException"
        },
        {
          "shape": "InvalidParameterCombinationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "UpdateClusterRequest"
      },
      "name": "UpdateCluster",
      "output": {
        "shape": "UpdateClusterResponse"
      }
    },
    "UpdateParameterGroup": {
      "documentation": "<p>Updates the parameters of a parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.</p>",
      "errors": [
        {
          "shape": "ParameterGroupNotFoundFault"
        },
        {
          "shape": "InvalidParameterGroupStateFault"
        },
        {
          "shape": "ServiceLinkedRoleNotFoundFault"
        },
        {
          "shape": "InvalidParameterValueException"
        },
        {
          "shape": "InvalidParameterCombinationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "UpdateParameterGroupRequest"
      },
      "name": "UpdateParameterGroup",
      "output": {
        "shape": "UpdateParameterGroupResponse"
      }
    },
    "UpdateSubnetGroup": {
      "documentation": "<p>Updates a subnet group. For more information, see <a href=\"https://docs.aws.amazon.com/MemoryDB/latest/devguide/ubnetGroups.Modifying.html\">Updating a subnet group</a> </p>",
      "errors": [
        {
          "shape": "SubnetGroupNotFoundFault"
        },
        {
          "shape": "SubnetQuotaExceededFault"
        },
        {
          "shape": "SubnetInUse"
        },
        {
          "shape": "InvalidSubnet"
        },
        {
          "shape": "ServiceLinkedRoleNotFoundFault"
        },
        {
          "shape": "SubnetNotAllowedFault"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "UpdateSubnetGroupRequest"
      },
      "name": "UpdateSubnetGroup",
      "output": {
        "shape": "UpdateSubnetGroupResponse"
      }
    },
    "UpdateUser": {
      "documentation": "<p>Changes user password(s) and/or access string.</p>",
      "errors": [
        {
          "shape": "UserNotFoundFault"
        },
        {
          "shape": "InvalidUserStateFault"
        },
        {
          "shape": "InvalidParameterValueException"
        },
        {
          "shape": "InvalidParameterCombinationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "UpdateUserRequest"
      },
      "name": "UpdateUser",
      "output": {
        "shape": "UpdateUserResponse"
      }
    }
  },
  "shapes": {
    "ACL": {
      "documentation": "<p>An Access Control List. You can authenticate users with Access Contol Lists. ACLs enable you to control cluster access by grouping users. These Access control lists are designed as a way to organize access to clusters.</p>",
      "members": {
        "ARN": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the ACL</p>",
          "shape": "String"
        },
        "Clusters": {
          "documentation": "<p>A list of clusters associated with the ACL.</p>",
          "shape": "ACLClusterNameList"
        },
        "MinimumEngineVersion": {
          "documentation": "<p>The minimum engine version supported for the ACL</p>",
          "shape": "String"
        },
        "Name": {
          "documentation": "<p>The name of the Access Control List</p>",
          "shape": "String"
        },
        "PendingChanges": {
          "documentation": "<p>A list of updates being applied to the ACL.</p>",
          "shape": "ACLPendingChanges"
        },
        "Status": {
          "documentation": "<p>Indicates ACL status. Can be \"creating\", \"active\", \"modifying\", \"deleting\".</p>",
          "shape": "String"
        },
        "UserNames": {
          "documentation": "<p>The list of user names that belong to the ACL.</p>",
          "shape": "UserNameList"
        }
      },
      "type": "structure"
    },
    "ACLAlreadyExistsFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "ACLClusterNameList": {
      "member": {
        "shape": "String"
      },
      "type": "list"
    },
    "ACLList": {
      "member": {
        "shape": "ACL"
      },
      "type": "list"
    },
    "ACLName": {
      "min": 1,
      "pattern": "[a-zA-Z][a-zA-Z0-9\\-]*",
      "type": "string"
    },
    "ACLNameList": {
      "member": {
        "shape": "ACLName"
      },
      "type": "list"
    },
    "ACLNotFoundFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "ACLPendingChanges": {
      "documentation": "<p>Returns the updates being applied to the ACL.</p>",
      "members": {
        "UserNamesToAdd": {
          "documentation": "<p>A list of users being added to the ACL</p>",
          "shape": "UserNameList"
        },
        "UserNamesToRemove": {
          "documentation": "<p>A list of user names being removed from the ACL</p>",
          "shape": "UserNameList"
        }
      },
      "type": "structure"
    },
    "ACLQuotaExceededFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "ACLsUpdateStatus": {
      "documentation": "<p>The status of the ACL update</p>",
      "members": {
        "ACLToApply": {
          "documentation": "<p>A list of ACLs pending to be applied.</p>",
          "shape": "ACLName"
        }
      },
      "type": "structure"
    },
    "APICallRateForCustomerExceededFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "AZStatus": {
      "enum": [
        "singleaz",
        "multiaz"
      ],
      "type": "string"
    },
    "AccessString": {
      "pattern": ".*\\S.*",
      "type": "string"
    },
    "Authentication": {
      "documentation": "<p>Denotes the user's authentication properties, such as whether it requires a password to authenticate. Used in output responses.</p>",
      "members": {
        "PasswordCount": {
          "documentation": "<p>The number of passwords belonging to the user. The maximum is two.</p>",
          "shape": "IntegerOptional"
        },
        "Type": {
          "documentation": "<p>Indicates whether the user requires a password to authenticate.</p>",
          "shape": "AuthenticationType"
        }
      },
      "type": "structure"
    },
    "AuthenticationMode": {
      "documentation": "<p>Denotes the user's authentication properties, such as whether it requires a password to authenticate. Used in output responses.</p>",
      "members": {
        "Passwords": {
          "documentation": "<p>The password(s) used for authentication</p>",
          "shape": "PasswordListInput"
        },
        "Type": {
          "documentation": "<p>Indicates whether the user requires a password to authenticate. All newly-created users require a password.</p>",
          "shape": "InputAuthenticationType"
        }
      },
      "type": "structure"
    },
    "AuthenticationType": {
      "enum": [
        "password",
        "no-password"
      ],
      "type": "string"
    },
    "AvailabilityZone": {
      "documentation": "<p>Indicates if the cluster has a Multi-AZ configuration (multiaz) or not (singleaz).</p>",
      "members": {
        "Name": {
          "documentation": "<p>The name of the Availability Zone.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "AwsQueryErrorMessage": {
      "type": "string"
    },
    "BatchUpdateClusterRequest": {
      "members": {
        "ClusterNames": {
          "documentation": "<p>The cluster names to apply the updates.</p>",
          "shape": "ClusterNameList"
        },
        "ServiceUpdate": {
          "documentation": "<p>The unique ID of the service update</p>",
          "shape": "ServiceUpdateRequest"
        }
      },
      "required": [
        "ClusterNames"
      ],
      "type": "structure"
    },
    "BatchUpdateClusterResponse": {
      "members": {
        "ProcessedClusters": {
          "documentation": "<p>The list of clusters that have been updated.</p>",
          "shape": "ClusterList"
        },
        "UnprocessedClusters": {
          "documentation": "<p>The list of clusters where updates have not been applied.</p>",
          "shape": "UnprocessedClusterList"
        }
      },
      "type": "structure"
    },
    "Boolean": {
      "type": "boolean"
    },
    "BooleanOptional": {
      "type": "boolean"
    },
    "Cluster": {
      "documentation": "<p>Contains all of the attributes of a specific cluster.</p>",
      "members": {
        "ACLName": {
          "documentation": "<p>The name of the Access Control List associated with this cluster.</p>",
          "shape": "ACLName"
        },
        "ARN": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the cluster.</p>",
          "shape": "String"
        },
        "AutoMinorVersionUpgrade": {
          "documentation": "<p>When set to true, the cluster will automatically receive minor engine version upgrades after launch.</p>",
          "shape": "BooleanOptional"
        },
        "AvailabilityMode": {
          "documentation": "<p>Indicates if the cluster has a Multi-AZ configuration (multiaz) or not (singleaz).</p>",
          "shape": "AZStatus"
        },
        "ClusterEndpoint": {
          "documentation": "<p>The cluster's configuration endpoint</p>",
          "shape": "Endpoint"
        },
        "Description": {
          "documentation": "<p>A description of the cluster</p>",
          "shape": "String"
        },
        "EnginePatchVersion": {
          "documentation": "<p>The Redis engine patch version used by the cluster</p>",
          "shape": "String"
        },
        "EngineVersion": {
          "documentation": "<p>The Redis engine version used by the cluster</p>",
          "shape": "String"
        },
        "KmsKeyId": {
          "documentation": "<p>The ID of the KMS key used to encrypt the cluster</p>",
          "shape": "String"
        },
        "MaintenanceWindow": {
          "documentation": "<p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. </p>",
          "shape": "String"
        },
        "Name": {
          "documentation": "<p>The user-supplied name of the cluster. This identifier is a unique key that identifies a cluster.</p>",
          "shape": "String"
        },
        "NodeType": {
          "documentation": "<p>The cluster's node type</p>",
          "shape": "String"
        },
        "NumberOfShards": {
          "documentation": "<p>The number of shards in the cluster</p>",
          "shape": "IntegerOptional"
        },
        "ParameterGroupName": {
          "documentation": "<p>The name of the parameter group used by the cluster</p>",
          "shape": "String"
        },
        "ParameterGroupStatus": {
          "documentation": "<p>The status of the parameter group used by the cluster, for example 'active' or 'applying'.</p>",
          "shape": "String"
        },
        "PendingUpdates": {
          "documentation": "<p>A group of settings that are currently being applied.</p>",
          "shape": "ClusterPendingUpdates"
        },
        "SecurityGroups": {
          "documentation": "<p>A list of security groups used by the cluster</p>",
          "shape": "SecurityGroupMembershipList"
        },
        "Shards": {
          "documentation": "<p>A list of shards that are members of the cluster.</p>",
          "shape": "ShardList"
        },
        "SnapshotRetentionLimit": {
          "documentation": "<p>The number of days for which MemoryDB retains automatic snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p>",
          "shape": "IntegerOptional"
        },
        "SnapshotWindow": {
          "documentation": "<p>The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of your shard. Example: 05:00-09:00 If you do not specify this parameter, MemoryDB automatically chooses an appropriate time range.</p>",
          "shape": "String"
        },
        "SnsTopicArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the SNS notification topic</p>",
          "shape": "String"
        },
        "SnsTopicStatus": {
          "documentation": "<p>The SNS topic must be in Active status to receive notifications</p>",
          "shape": "String"
        },
        "Status": {
          "documentation": "<p>The status of the cluster. For example, Available, Updating, Creating.</p>",
          "shape": "String"
        },
        "SubnetGroupName": {
          "documentation": "<p>The name of the subnet group used by the cluster</p>",
          "shape": "String"
        },
        "TLSEnabled": {
          "documentation": "<p>A flag to indicate if In-transit encryption is enabled</p>",
          "shape": "BooleanOptional"
        }
      },
      "type": "structure"
    },
    "ClusterAlreadyExistsFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "ClusterConfiguration": {
      "documentation": "<p>A list of cluster configuration options. </p>",
      "members": {
        "Description": {
          "documentation": "<p>The description of the cluster configuration</p>",
          "shape": "String"
        },
        "EngineVersion": {
          "documentation": "<p>The Redis engine version used by the cluster</p>",
          "shape": "String"
        },
        "MaintenanceWindow": {
          "documentation": "<p>The specified maintenance window for the cluster</p>",
          "shape": "String"
        },
        "Name": {
          "documentation": "<p>The name of the cluster</p>",
          "shape": "String"
        },
        "NodeType": {
          "documentation": "<p>The node type used for the cluster</p>",
          "shape": "String"
        },
        "NumShards": {
          "documentation": "<p>The number of shards in the cluster</p>",
          "shape": "IntegerOptional"
        },
        "ParameterGroupName": {
          "documentation": "<p>The name of parameter group used by the cluster</p>",
          "shape": "String"
        },
        "Port": {
          "documentation": "<p>The port used by the cluster</p>",
          "shape": "IntegerOptional"
        },
        "Shards": {
          "documentation": "<p>The list of shards in the cluster</p>",
          "shape": "ShardDetails"
        },
        "SnapshotRetentionLimit": {
          "documentation": "<p>The snapshot retention limit set by the cluster</p>",
          "shape": "IntegerOptional"
        },
        "SnapshotWindow": {
          "documentation": "<p>The snapshot window set by the cluster</p>",
          "shape": "String"
        },
        "SubnetGroupName": {
          "documentation": "<p>The name of the subnet group used by the cluster</p>",
          "shape": "String"
        },
        "TopicArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the SNS notification topic for the cluster</p>",
          "shape": "String"
        },
        "VpcId": {
          "documentation": "<p>The ID of the VPC the cluster belongs to</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ClusterList": {
      "member": {
        "shape": "Cluster"
      },
      "type": "list"
    },
    "ClusterNameList": {
      "max": 20,
      "member": {
        "shape": "String"
      },
      "type": "list"
    },
    "ClusterNotFoundFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "ClusterPendingUpdates": {
      "documentation": "<p>A list of updates being applied to the cluster</p>",
      "members": {
        "ACLs": {
          "documentation": "<p>A list of ACLs associated with the cluster that are being updated</p>",
          "shape": "ACLsUpdateStatus"
        },
        "Resharding": {
          "documentation": "<p>The status of an online resharding operation.</p>",
          "shape": "ReshardingStatus"
        },
        "ServiceUpdates": {
          "documentation": "<p>A list of service updates being applied to the cluster</p>",
          "shape": "PendingModifiedServiceUpdateList"
        }
      },
      "type": "structure"
    },
    "ClusterQuotaForCustomerExceededFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "CopySnapshotRequest": {
      "members": {
        "KmsKeyId": {
          "documentation": "<p>The ID of the KMS key used to encrypt the target snapshot.</p>",
          "shape": "KmsKeyId"
        },
        "SourceSnapshotName": {
          "documentation": "<p>The name of an existing snapshot from which to make a copy.</p>",
          "shape": "String"
        },
        "Tags": {
          "documentation": "<p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>",
          "shape": "TagList"
        },
        "TargetBucket": {
          "documentation": "<p>The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access. When using this parameter to export a snapshot, be sure MemoryDB has the needed permissions to this S3 bucket. For more information, see <a href=\"https://docs.aws.amazon.com/MemoryDB/latest/devguide/snapshots-exporting.html\">Step 2: Grant MemoryDB Access to Your Amazon S3 Bucket</a>. </p>",
          "shape": "TargetBucket"
        },
        "TargetSnapshotName": {
          "documentation": "<p>A name for the snapshot copy. MemoryDB does not permit overwriting a snapshot, therefore this name must be unique within its context - MemoryDB or an Amazon S3 bucket if exporting.</p>",
          "shape": "String"
        }
      },
      "required": [
        "SourceSnapshotName",
        "TargetSnapshotName"
      ],
      "type": "structure"
    },
    "CopySnapshotResponse": {
      "members": {
        "Snapshot": {
          "documentation": "<p>Represents a copy of an entire cluster as of the time when the snapshot was taken.</p>",
          "shape": "Snapshot"
        }
      },
      "type": "structure"
    },
    "CreateACLRequest": {
      "members": {
        "ACLName": {
          "documentation": "<p>The name of the Access Control List.</p>",
          "shape": "String"
        },
        "Tags": {
          "documentation": "<p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>",
          "shape": "TagList"
        },
        "UserNames": {
          "documentation": "<p>The list of users that belong to the Access Control List.</p>",
          "shape": "UserNameListInput"
        }
      },
      "required": [
        "ACLName"
      ],
      "type": "structure"
    },
    "CreateACLResponse": {
      "members": {
        "ACL": {
          "documentation": "<p>The newly-created Access Control List.</p>",
          "shape": "ACL"
        }
      },
      "type": "structure"
    },
    "CreateClusterRequest": {
      "members": {
        "ACLName": {
          "documentation": "<p>The name of the Access Control List to associate with the cluster.</p>",
          "shape": "ACLName"
        },
        "AutoMinorVersionUpgrade": {
          "documentation": "<p>When set to true, the cluster will automatically receive minor engine version upgrades after launch.</p>",
          "shape": "BooleanOptional"
        },
        "ClusterName": {
          "documentation": "<p>The name of the cluster. This value must be unique as it also serves as the cluster identifier.</p>",
          "shape": "String"
        },
        "Description": {
          "documentation": "<p>An optional description of the cluster.</p>",
          "shape": "String"
        },
        "EngineVersion": {
          "documentation": "<p>The version number of the Redis engine to be used for the cluster.</p>",
          "shape": "String"
        },
        "KmsKeyId": {
          "documentation": "<p>The ID of the KMS key used to encrypt the cluster.</p>",
          "shape": "String"
        },
        "MaintenanceWindow": {
          "documentation": "<p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format <code>ddd:hh24:mi-ddd:hh24:mi</code> (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p>",
          "shape": "String"
        },
        "NodeType": {
          "documentation": "<p>The compute and memory capacity of the nodes in the cluster.</p>",
          "shape": "String"
        },
        "NumReplicasPerShard": {
          "documentation": "<p>The number of replicas to apply to each shard. The default value is 1. The maximum is 5. </p>",
          "shape": "IntegerOptional"
        },
        "NumShards": {
          "documentation": "<p>The number of shards the cluster will contain. The default value is 1. </p>",
          "shape": "IntegerOptional"
        },
        "ParameterGroupName": {
          "documentation": "<p>The name of the parameter group associated with the cluster.</p>",
          "shape": "String"
        },
        "Port": {
          "documentation": "<p>The port number on which each of the nodes accepts connections.</p>",
          "shape": "IntegerOptional"
        },
        "SecurityGroupIds": {
          "documentation": "<p>A list of security group names to associate with this cluster.</p>",
          "shape": "SecurityGroupIdsList"
        },
        "SnapshotArns": {
          "documentation": "<p>A list of Amazon Resource Names (ARN) that uniquely identify the RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new cluster. The Amazon S3 object name in the ARN cannot contain any commas.</p>",
          "shape": "SnapshotArnsList"
        },
        "SnapshotName": {
          "documentation": "<p>The name of a snapshot from which to restore data into the new cluster. The snapshot status changes to restoring while the new cluster is being created.</p>",
          "shape": "String"
        },
        "SnapshotRetentionLimit": {
          "documentation": "<p>The number of days for which MemoryDB retains automatic snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p>",
          "shape": "IntegerOptional"
        },
        "SnapshotWindow": {
          "documentation": "<p>The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of your shard.</p> <p> Example: 05:00-09:00</p> <p> If you do not specify this parameter, MemoryDB automatically chooses an appropriate time range.</p>",
          "shape": "String"
        },
        "SnsTopicArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p>",
          "shape": "String"
        },
        "SubnetGroupName": {
          "documentation": "<p>The name of the subnet group to be used for the cluster.</p>",
          "shape": "String"
        },
        "TLSEnabled": {
          "documentation": "<p>A flag to enable in-transit encryption on the cluster.</p>",
          "shape": "BooleanOptional"
        },
        "Tags": {
          "documentation": "<p>A list of tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=myKey, Value=myKeyValue. You can include multiple tags as shown following: Key=myKey, Value=myKeyValue Key=mySecondKey, Value=mySecondKeyValue.</p>",
          "shape": "TagList"
        }
      },
      "required": [
        "ClusterName",
        "NodeType",
        "ACLName"
      ],
      "type": "structure"
    },
    "CreateClusterResponse": {
      "members": {
        "Cluster": {
          "documentation": "<p>The newly-created cluster.</p>",
          "shape": "Cluster"
        }
      },
      "type": "structure"
    },
    "CreateParameterGroupRequest": {
      "members": {
        "Description": {
          "documentation": "<p>An optional description of the parameter group.</p>",
          "shape": "String"
        },
        "Family": {
          "documentation": "<p>The name of the parameter group family that the parameter group can be used with.</p>",
          "shape": "String"
        },
        "ParameterGroupName": {
          "documentation": "<p>The name of the parameter group.</p>",
          "shape": "String"
        },
        "Tags": {
          "documentation": "<p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>",
          "shape": "TagList"
        }
      },
      "required": [
        "ParameterGroupName",
        "Family"
      ],
      "type": "structure"
    },
    "CreateParameterGroupResponse": {
      "members": {
        "ParameterGroup": {
          "documentation": "<p>The newly-created parameter group.</p>",
          "shape": "ParameterGroup"
        }
      },
      "type": "structure"
    },
    "CreateSnapshotRequest": {
      "members": {
        "ClusterName": {
          "documentation": "<p>The snapshot is created from this cluster.</p>",
          "shape": "String"
        },
        "KmsKeyId": {
          "documentation": "<p>The ID of the KMS key used to encrypt the snapshot.</p>",
          "shape": "String"
        },
        "SnapshotName": {
          "documentation": "<p>A name for the snapshot being created.</p>",
          "shape": "String"
        },
        "Tags": {
          "documentation": "<p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>",
          "shape": "TagList"
        }
      },
      "required": [
        "ClusterName",
        "SnapshotName"
      ],
      "type": "structure"
    },
    "CreateSnapshotResponse": {
      "members": {
        "Snapshot": {
          "documentation": "<p>The newly-created snapshot.</p>",
          "shape": "Snapshot"
        }
      },
      "type": "structure"
    },
    "CreateSubnetGroupRequest": {
      "members": {
        "Description": {
          "documentation": "<p>A description for the subnet group.</p>",
          "shape": "String"
        },
        "SubnetGroupName": {
          "documentation": "<p>The name of the subnet group.</p>",
          "shape": "String"
        },
        "SubnetIds": {
          "documentation": "<p>A list of VPC subnet IDs for the subnet group.</p>",
          "shape": "SubnetIdentifierList"
        },
        "Tags": {
          "documentation": "<p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>",
          "shape": "TagList"
        }
      },
      "required": [
        "SubnetGroupName",
        "SubnetIds"
      ],
      "type": "structure"
    },
    "CreateSubnetGroupResponse": {
      "members": {
        "SubnetGroup": {
          "documentation": "<p>The newly-created subnet group</p>",
          "shape": "SubnetGroup"
        }
      },
      "type": "structure"
    },
    "CreateUserRequest": {
      "members": {
        "AccessString": {
          "documentation": "<p>Access permissions string used for this user.</p>",
          "shape": "AccessString"
        },
        "AuthenticationMode": {
          "documentation": "<p>Denotes the user's authentication properties, such as whether it requires a password to authenticate.</p>",
          "shape": "AuthenticationMode"
        },
        "Tags": {
          "documentation": "<p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>",
          "shape": "TagList"
        },
        "UserName": {
          "documentation": "<p>The name of the user. This value must be unique as it also serves as the user identifier.</p>",
          "shape": "UserName"
        }
      },
      "required": [
        "UserName",
        "AuthenticationMode",
        "AccessString"
      ],
      "type": "structure"
    },
    "CreateUserResponse": {
      "members": {
        "User": {
          "documentation": "<p>The newly-created user.</p>",
          "shape": "User"
        }
      },
      "type": "structure"
    },
    "DefaultUserRequired": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "DeleteACLRequest": {
      "members": {
        "ACLName": {
          "documentation": "<p>The name of the Access Control List to delete</p>",
          "shape": "String"
        }
      },
      "required": [
        "ACLName"
      ],
      "type": "structure"
    },
    "DeleteACLResponse": {
      "members": {
        "ACL": {
          "documentation": "<p>The Access Control List object that has been deleted.</p>",
          "shape": "ACL"
        }
      },
      "type": "structure"
    },
    "DeleteClusterRequest": {
      "members": {
        "ClusterName": {
          "documentation": "<p>The name of the cluster to be deleted</p>",
          "shape": "String"
        },
        "FinalSnapshotName": {
          "documentation": "<p>The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. MemoryDB creates the snapshot, and then deletes the cluster immediately afterward.</p>",
          "shape": "String"
        }
      },
      "required": [
        "ClusterName"
      ],
      "type": "structure"
    },
    "DeleteClusterResponse": {
      "members": {
        "Cluster": {
          "documentation": "<p>The cluster object that has been deleted</p>",
          "shape": "Cluster"
        }
      },
      "type": "structure"
    },
    "DeleteParameterGroupRequest": {
      "members": {
        "ParameterGroupName": {
          "documentation": "<p>The name of the parameter group to delete.</p>",
          "shape": "String"
        }
      },
      "required": [
        "ParameterGroupName"
      ],
      "type": "structure"
    },
    "DeleteParameterGroupResponse": {
      "members": {
        "ParameterGroup": {
          "documentation": "<p>The parameter group that has been deleted.</p>",
          "shape": "ParameterGroup"
        }
      },
      "type": "structure"
    },
    "DeleteSnapshotRequest": {
      "members": {
        "SnapshotName": {
          "documentation": "<p>The name of the snapshot to delete</p>",
          "shape": "String"
        }
      },
      "required": [
        "SnapshotName"
      ],
      "type": "structure"
    },
    "DeleteSnapshotResponse": {
      "members": {
        "Snapshot": {
          "documentation": "<p>The snapshot object that has been deleted.</p>",
          "shape": "Snapshot"
        }
      },
      "type": "structure"
    },
    "DeleteSubnetGroupRequest": {
      "members": {
        "SubnetGroupName": {
          "documentation": "<p>The name of the subnet group to delete</p>",
          "shape": "String"
        }
      },
      "required": [
        "SubnetGroupName"
      ],
      "type": "structure"
    },
    "DeleteSubnetGroupResponse": {
      "members": {
        "SubnetGroup": {
          "documentation": "<p>The subnet group object that has been deleted.</p>",
          "shape": "SubnetGroup"
        }
      },
      "type": "structure"
    },
    "DeleteUserRequest": {
      "members": {
        "UserName": {
          "documentation": "<p>The name of the user to delete</p>",
          "shape": "UserName"
        }
      },
      "required": [
        "UserName"
      ],
      "type": "structure"
    },
    "DeleteUserResponse": {
      "members": {
        "User": {
          "documentation": "<p>The user object that has been deleted.</p>",
          "shape": "User"
        }
      },
      "type": "structure"
    },
    "DescribeACLsRequest": {
      "members": {
        "ACLName": {
          "documentation": "<p>The name of the ACL</p>",
          "shape": "String"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of records to include in the response. If more records exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.</p>",
          "shape": "IntegerOptional"
        },
        "NextToken": {
          "documentation": "<p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "DescribeACLsResponse": {
      "members": {
        "ACLs": {
          "documentation": "<p>The list of ACLs</p>",
          "shape": "ACLList"
        },
        "NextToken": {
          "documentation": "<p>If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "DescribeClustersRequest": {
      "members": {
        "ClusterName": {
          "documentation": "<p>The name of the cluster</p>",
          "shape": "String"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of records to include in the response. If more records exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.</p>",
          "shape": "IntegerOptional"
        },
        "NextToken": {
          "documentation": "<p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>",
          "shape": "String"
        },
        "ShowShardDetails": {
          "documentation": "<p>An optional flag that can be included in the request to retrieve information about the individual shard(s).</p>",
          "shape": "BooleanOptional"
        }
      },
      "type": "structure"
    },
    "DescribeClustersResponse": {
      "members": {
        "Clusters": {
          "documentation": "<p>A list of clusters</p>",
          "shape": "ClusterList"
        },
        "NextToken": {
          "documentation": "<p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "DescribeEngineVersionsRequest": {
      "members": {
        "DefaultOnly": {
          "documentation": "<p>If true, specifies that only the default version of the specified engine or engine and major version combination is to be returned.</p>",
          "shape": "Boolean"
        },
        "EngineVersion": {
          "documentation": "<p>The Redis engine version</p>",
          "shape": "String"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of records to include in the response. If more records exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.</p>",
          "shape": "IntegerOptional"
        },
        "NextToken": {
          "documentation": "<p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>",
          "shape": "String"
        },
        "ParameterGroupFamily": {
          "documentation": "<p>The name of a specific parameter group family to return details for.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "DescribeEngineVersionsResponse": {
      "members": {
        "EngineVersions": {
          "documentation": "<p>A list of engine version details. Each element in the list contains detailed information about one engine version.</p>",
          "shape": "EngineVersionInfoList"
        },
        "NextToken": {
          "documentation": "<p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "DescribeEventsRequest": {
      "members": {
        "Duration": {
          "documentation": "<p>The number of minutes worth of events to retrieve.</p>",
          "shape": "IntegerOptional"
        },
        "EndTime": {
          "documentation": "<p>The end of the time interval for which to retrieve events, specified in ISO 8601 format. Example: 2017-03-30T07:03:49.555Z</p>",
          "shape": "TStamp"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of records to include in the response. If more records exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.</p>",
          "shape": "IntegerOptional"
        },
        "NextToken": {
          "documentation": "<p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>",
          "shape": "String"
        },
        "SourceName": {
          "documentation": "<p>The identifier of the event source for which events are returned. If not specified, all sources are included in the response.</p>",
          "shape": "String"
        },
        "SourceType": {
          "documentation": "<p>The event source to retrieve events for. If no value is specified, all events are returned.</p>",
          "shape": "SourceType"
        },
        "StartTime": {
          "documentation": "<p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format. Example: 2017-03-30T07:03:49.555Z</p>",
          "shape": "TStamp"
        }
      },
      "type": "structure"
    },
    "DescribeEventsResponse": {
      "members": {
        "Events": {
          "documentation": "<p>A list of events. Each element in the list contains detailed information about one event.</p>",
          "shape": "EventList"
        },
        "NextToken": {
          "documentation": "<p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "DescribeParameterGroupsRequest": {
      "members": {
        "MaxResults": {
          "documentation": "<p>The maximum number of records to include in the response. If more records exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.</p>",
          "shape": "IntegerOptional"
        },
        "NextToken": {
          "documentation": "<p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>",
          "shape": "String"
        },
        "ParameterGroupName": {
          "documentation": "<p>The name of a specific parameter group to return details for.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "DescribeParameterGroupsResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>",
          "shape": "String"
        },
        "ParameterGroups": {
          "documentation": "<p>A list of parameter groups. Each element in the list contains detailed information about one parameter group.</p>",
          "shape": "ParameterGroupList"
        }
      },
      "type": "structure"
    },
    "DescribeParametersRequest": {
      "members": {
        "MaxResults": {
          "documentation": "<p>The maximum number of records to include in the response. If more records exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.</p>",
          "shape": "IntegerOptional"
        },
        "NextToken": {
          "documentation": "<p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>",
          "shape": "String"
        },
        "ParameterGroupName": {
          "documentation": "<p>he name of a specific parameter group to return details for.</p>",
          "shape": "String"
        }
      },
      "required": [
        "ParameterGroupName"
      ],
      "type": "structure"
    },
    "DescribeParametersResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>",
          "shape": "String"
        },
        "Parameters": {
          "documentation": "<p>A list of parameters specific to a particular parameter group. Each element in the list contains detailed information about one parameter.</p>",
          "shape": "ParametersList"
        }
      },
      "type": "structure"
    },
    "DescribeServiceUpdatesRequest": {
      "members": {
        "ClusterNames": {
          "documentation": "<p>The list of cluster names to identify service updates to apply</p>",
          "shape": "ClusterNameList"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of records to include in the response. If more records exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.</p>",
          "shape": "IntegerOptional"
        },
        "NextToken": {
          "documentation": "<p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>",
          "shape": "String"
        },
        "ServiceUpdateName": {
          "documentation": "<p>The unique ID of the service update to describe.</p>",
          "shape": "String"
        },
        "Status": {
          "documentation": "<p>The status(es) of the service updates to filter on</p>",
          "shape": "ServiceUpdateStatusList"
        }
      },
      "type": "structure"
    },
    "DescribeServiceUpdatesResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>",
          "shape": "String"
        },
        "ServiceUpdates": {
          "documentation": "<p>A list of service updates</p>",
          "shape": "ServiceUpdateList"
        }
      },
      "type": "structure"
    },
    "DescribeSnapshotsRequest": {
      "members": {
        "ClusterName": {
          "documentation": "<p>A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.</p>",
          "shape": "String"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of records to include in the response. If more records exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.</p>",
          "shape": "IntegerOptional"
        },
        "NextToken": {
          "documentation": "<p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>",
          "shape": "String"
        },
        "ShowDetail": {
          "documentation": "<p>A Boolean value which if true, the shard configuration is included in the snapshot description.</p>",
          "shape": "BooleanOptional"
        },
        "SnapshotName": {
          "documentation": "<p>A user-supplied name of the snapshot. If this parameter is specified, only this named snapshot is described.</p>",
          "shape": "String"
        },
        "Source": {
          "documentation": "<p>If set to system, the output shows snapshots that were automatically created by MemoryDB. If set to user the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "DescribeSnapshotsResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>",
          "shape": "String"
        },
        "Snapshots": {
          "documentation": "<p>A list of snapshots. Each item in the list contains detailed information about one snapshot.</p>",
          "shape": "SnapshotList"
        }
      },
      "type": "structure"
    },
    "DescribeSubnetGroupsRequest": {
      "members": {
        "MaxResults": {
          "documentation": "<p>The maximum number of records to include in the response. If more records exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.</p>",
          "shape": "IntegerOptional"
        },
        "NextToken": {
          "documentation": "<p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>",
          "shape": "String"
        },
        "SubnetGroupName": {
          "documentation": "<p>The name of the subnet group to return details for.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "DescribeSubnetGroupsResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>",
          "shape": "String"
        },
        "SubnetGroups": {
          "documentation": "<p>A list of subnet groups. Each element in the list contains detailed information about one group.</p>",
          "shape": "SubnetGroupList"
        }
      },
      "type": "structure"
    },
    "DescribeUsersRequest": {
      "members": {
        "Filters": {
          "documentation": "<p>Filter to determine the list of users to return.</p>",
          "shape": "FilterList"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of records to include in the response. If more records exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.</p>",
          "shape": "IntegerOptional"
        },
        "NextToken": {
          "documentation": "<p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>",
          "shape": "String"
        },
        "UserName": {
          "documentation": "<p>The name of the user</p>",
          "shape": "UserName"
        }
      },
      "type": "structure"
    },
    "DescribeUsersResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>",
          "shape": "String"
        },
        "Users": {
          "documentation": "<p>A list of users.</p>",
          "shape": "UserList"
        }
      },
      "type": "structure"
    },
    "Double": {
      "type": "double"
    },
    "DuplicateUserNameFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "Endpoint": {
      "documentation": "<p>Represents the information required for client programs to connect to the cluster and its nodes.</p>",
      "members": {
        "Address": {
          "documentation": "<p>The DNS hostname of the node.</p>",
          "shape": "String"
        },
        "Port": {
          "documentation": "<p>The port number that the engine is listening on.</p>",
          "shape": "Integer"
        }
      },
      "type": "structure"
    },
    "EngineVersionInfo": {
      "documentation": "<p>Provides details of the Redis engine version</p>",
      "members": {
        "EnginePatchVersion": {
          "documentation": "<p>The patched engine version</p>",
          "shape": "String"
        },
        "EngineVersion": {
          "documentation": "<p>The engine version</p>",
          "shape": "String"
        },
        "ParameterGroupFamily": {
          "documentation": "<p>Specifies the name of the parameter group family to which the engine default parameters apply.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "EngineVersionInfoList": {
      "member": {
        "shape": "EngineVersionInfo"
      },
      "type": "list"
    },
    "Event": {
      "documentation": "<p>Represents a single occurrence of something interesting within the system. Some examples of events are creating a cluster or adding or removing a node.</p>",
      "members": {
        "Date": {
          "documentation": "<p>The date and time when the event occurred.</p>",
          "shape": "TStamp"
        },
        "Message": {
          "documentation": "<p>The text of the event.</p>",
          "shape": "String"
        },
        "SourceName": {
          "documentation": "<p>The name for the source of the event. For example, if the event occurred at the cluster level, the identifier would be the name of the cluster.</p>",
          "shape": "String"
        },
        "SourceType": {
          "documentation": "<p>Specifies the origin of this event - a cluster, a parameter group, a security group, etc.</p>",
          "shape": "SourceType"
        }
      },
      "type": "structure"
    },
    "EventList": {
      "member": {
        "shape": "Event"
      },
      "type": "list"
    },
    "FailoverShardRequest": {
      "members": {
        "ClusterName": {
          "documentation": "<p>The cluster being failed over</p>",
          "shape": "String"
        },
        "ShardName": {
          "documentation": "<p>The name of the shard</p>",
          "shape": "String"
        }
      },
      "required": [
        "ClusterName",
        "ShardName"
      ],
      "type": "structure"
    },
    "FailoverShardResponse": {
      "members": {
        "Cluster": {
          "documentation": "<p>The cluster being failed over</p>",
          "shape": "Cluster"
        }
      },
      "type": "structure"
    },
    "Filter": {
      "documentation": "<p>Used to streamline results of a search based on the property being filtered.</p>",
      "members": {
        "Name": {
          "documentation": "<p>The property being filtered. For example, UserName.</p>",
          "shape": "FilterName"
        },
        "Values": {
          "documentation": "<p>The property values to filter on. For example, \"user-123\".</p>",
          "shape": "FilterValueList"
        }
      },
      "required": [
        "Name",
        "Values"
      ],
      "type": "structure"
    },
    "FilterList": {
      "member": {
        "shape": "Filter"
      },
      "type": "list"
    },
    "FilterName": {
      "pattern": ".*\\S.*",
      "type": "string"
    },
    "FilterValue": {
      "pattern": ".*\\S.*",
      "type": "string"
    },
    "FilterValueList": {
      "member": {
        "shape": "FilterValue"
      },
      "min": 1,
      "type": "list"
    },
    "InputAuthenticationType": {
      "enum": [
        "password"
      ],
      "type": "string"
    },
    "InsufficientClusterCapacityFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "Integer": {
      "type": "integer"
    },
    "IntegerOptional": {
      "type": "integer"
    },
    "InvalidACLStateFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "InvalidARNFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "InvalidClusterStateFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "InvalidCredentialsException": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "InvalidKMSKeyFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "InvalidNodeStateFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "InvalidParameterCombinationException": {
      "documentation": "<p/>",
      "exception": true,
      "members": {
        "message": {
          "shape": "AwsQueryErrorMessage"
        }
      },
      "synthetic": true,
      "type": "structure"
    },
    "InvalidParameterGroupStateFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "InvalidParameterValueException": {
      "documentation": "<p/>",
      "exception": true,
      "members": {
        "message": {
          "shape": "AwsQueryErrorMessage"
        }
      },
      "synthetic": true,
      "type": "structure"
    },
    "InvalidSnapshotStateFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "InvalidSubnet": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "InvalidUserStateFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "InvalidVPCNetworkStateFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "KeyList": {
      "member": {
        "shape": "String"
      },
      "type": "list"
    },
    "KmsKeyId": {
      "max": 2048,
      "type": "string"
    },
    "ListAllowedNodeTypeUpdatesRequest": {
      "members": {
        "ClusterName": {
          "documentation": "<p>The name of the cluster you want to scale. MemoryDB uses the cluster name to identify the current node type being used by this cluster, and from that to create a list of node types you can scale up to.</p>",
          "shape": "String"
        }
      },
      "required": [
        "ClusterName"
      ],
      "type": "structure"
    },
    "ListAllowedNodeTypeUpdatesResponse": {
      "members": {
        "ScaleDownNodeTypes": {
          "documentation": "<p>A list node types which you can use to scale down your cluster.</p>",
          "shape": "NodeTypeList"
        },
        "ScaleUpNodeTypes": {
          "documentation": "<p>A list node types which you can use to scale up your cluster.</p>",
          "shape": "NodeTypeList"
        }
      },
      "type": "structure"
    },
    "ListTagsRequest": {
      "members": {
        "ResourceArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags</p>",
          "shape": "String"
        }
      },
      "required": [
        "ResourceArn"
      ],
      "type": "structure"
    },
    "ListTagsResponse": {
      "members": {
        "TagList": {
          "documentation": "<p>A list of tags as key-value pairs.</p>",
          "shape": "TagList"
        }
      },
      "type": "structure"
    },
    "NoOperationFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "Node": {
      "documentation": "<p>Represents an individual node within a cluster. Each node runs its own instance of the cluster's protocol-compliant caching software.</p>",
      "members": {
        "AvailabilityZone": {
          "documentation": "<p>The Availability Zone in which the node resides</p>",
          "shape": "String"
        },
        "CreateTime": {
          "documentation": "<p>The date and time when the node was created.</p>",
          "shape": "TStamp"
        },
        "Endpoint": {
          "documentation": "<p>The hostname for connecting to this node.</p>",
          "shape": "Endpoint"
        },
        "Name": {
          "documentation": "<p>The node identifier. A node name is a numeric identifier (0001, 0002, etc.). The combination of cluster name, shard name and node name uniquely identifies every node used in a customer's Amazon account.</p>",
          "shape": "String"
        },
        "Status": {
          "documentation": "<p>The status of the service update on the node</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "NodeList": {
      "member": {
        "shape": "Node"
      },
      "type": "list"
    },
    "NodeQuotaForClusterExceededFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "NodeQuotaForCustomerExceededFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "NodeTypeList": {
      "member": {
        "shape": "String"
      },
      "type": "list"
    },
    "Parameter": {
      "documentation": "<p>Describes an individual setting that controls some aspect of MemoryDB behavior.</p>",
      "members": {
        "AllowedValues": {
          "documentation": "<p>The valid range of values for the parameter.</p>",
          "shape": "String"
        },
        "DataType": {
          "documentation": "<p>The parameter's data type</p>",
          "shape": "String"
        },
        "Description": {
          "documentation": "<p>A description of the parameter</p>",
          "shape": "String"
        },
        "MinimumEngineVersion": {
          "documentation": "<p>The earliest engine version to which the parameter can apply.</p>",
          "shape": "String"
        },
        "Name": {
          "documentation": "<p>The name of the parameter</p>",
          "shape": "String"
        },
        "Value": {
          "documentation": "<p>The value of the parameter</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ParameterGroup": {
      "documentation": "<p>Represents the output of a CreateParameterGroup operation. A parameter group represents a combination of specific values for the parameters that are passed to the engine software during startup.</p>",
      "members": {
        "ARN": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the parameter group</p>",
          "shape": "String"
        },
        "Description": {
          "documentation": "<p>A description of the parameter group</p>",
          "shape": "String"
        },
        "Family": {
          "documentation": "<p>The name of the parameter group family that this parameter group is compatible with.</p>",
          "shape": "String"
        },
        "Name": {
          "documentation": "<p>The name of the parameter group</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ParameterGroupAlreadyExistsFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "ParameterGroupList": {
      "member": {
        "shape": "ParameterGroup"
      },
      "type": "list"
    },
    "ParameterGroupNotFoundFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "ParameterGroupQuotaExceededFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "ParameterNameList": {
      "member": {
        "shape": "String"
      },
      "type": "list"
    },
    "ParameterNameValue": {
      "documentation": "<p>Describes a name-value pair that is used to update the value of a parameter.</p>",
      "members": {
        "ParameterName": {
          "documentation": "<p>The name of the parameter</p>",
          "shape": "String"
        },
        "ParameterValue": {
          "documentation": "<p>The value of the parameter</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ParameterNameValueList": {
      "member": {
        "shape": "ParameterNameValue"
      },
      "type": "list"
    },
    "ParametersList": {
      "member": {
        "shape": "Parameter"
      },
      "type": "list"
    },
    "PasswordListInput": {
      "member": {
        "shape": "String"
      },
      "min": 1,
      "type": "list"
    },
    "PendingModifiedServiceUpdate": {
      "documentation": "<p>Update action that has yet to be processed for the corresponding apply/stop request</p>",
      "members": {
        "ServiceUpdateName": {
          "documentation": "<p>The unique ID of the service update</p>",
          "shape": "String"
        },
        "Status": {
          "documentation": "<p>The status of the service update</p>",
          "shape": "ServiceUpdateStatus"
        }
      },
      "type": "structure"
    },
    "PendingModifiedServiceUpdateList": {
      "member": {
        "shape": "PendingModifiedServiceUpdate"
      },
      "type": "list"
    },
    "ReplicaConfigurationRequest": {
      "documentation": "<p>A request to configure the number of replicas in a shard</p>",
      "members": {
        "ReplicaCount": {
          "documentation": "<p>The number of replicas to scale up or down to</p>",
          "shape": "Integer"
        }
      },
      "type": "structure"
    },
    "ResetParameterGroupRequest": {
      "members": {
        "AllParameters": {
          "documentation": "<p>If true, all parameters in the parameter group are reset to their default values. If false, only the parameters listed by ParameterNames are reset to their default values.</p>",
          "shape": "Boolean"
        },
        "ParameterGroupName": {
          "documentation": "<p>The name of the parameter group to reset.</p>",
          "shape": "String"
        },
        "ParameterNames": {
          "documentation": "<p>An array of parameter names to reset to their default values. If AllParameters is true, do not use ParameterNames. If AllParameters is false, you must specify the name of at least one parameter to reset.</p>",
          "shape": "ParameterNameList"
        }
      },
      "required": [
        "ParameterGroupName"
      ],
      "type": "structure"
    },
    "ResetParameterGroupResponse": {
      "members": {
        "ParameterGroup": {
          "documentation": "<p>The parameter group being reset.</p>",
          "shape": "ParameterGroup"
        }
      },
      "type": "structure"
    },
    "ReshardingStatus": {
      "documentation": "<p>The status of the online resharding</p>",
      "members": {
        "SlotMigration": {
          "documentation": "<p>The status of the online resharding slot migration</p>",
          "shape": "SlotMigration"
        }
      },
      "type": "structure"
    },
    "SecurityGroupIdsList": {
      "member": {
        "shape": "String"
      },
      "type": "list"
    },
    "SecurityGroupMembership": {
      "documentation": "<p>Represents a single security group and its status.</p>",
      "members": {
        "SecurityGroupId": {
          "documentation": "<p>The identifier of the security group.</p>",
          "shape": "String"
        },
        "Status": {
          "documentation": "<p>The status of the security group membership. The status changes whenever a security group is modified, or when the security groups assigned to a cluster are modified.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "SecurityGroupMembershipList": {
      "member": {
        "shape": "SecurityGroupMembership"
      },
      "type": "list"
    },
    "ServiceLinkedRoleNotFoundFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "ServiceUpdate": {
      "documentation": "<p>An update that you can apply to your MemoryDB clusters.</p>",
      "members": {
        "AutoUpdateStartDate": {
          "documentation": "<p>The date at which the service update will be automatically applied</p>",
          "shape": "TStamp"
        },
        "ClusterName": {
          "documentation": "<p>The name of the cluster to which the service update applies</p>",
          "shape": "String"
        },
        "Description": {
          "documentation": "<p>Provides details of the service update</p>",
          "shape": "String"
        },
        "NodesUpdated": {
          "documentation": "<p>A list of nodes updated by the service update</p>",
          "shape": "String"
        },
        "ReleaseDate": {
          "documentation": "<p>The date when the service update is initially available</p>",
          "shape": "TStamp"
        },
        "ServiceUpdateName": {
          "documentation": "<p>The unique ID of the service update</p>",
          "shape": "String"
        },
        "Status": {
          "documentation": "<p>The status of the service update</p>",
          "shape": "ServiceUpdateStatus"
        },
        "Type": {
          "documentation": "<p>Reflects the nature of the service update</p>",
          "shape": "ServiceUpdateType"
        }
      },
      "type": "structure"
    },
    "ServiceUpdateList": {
      "member": {
        "shape": "ServiceUpdate"
      },
      "type": "list"
    },
    "ServiceUpdateNotFoundFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "ServiceUpdateRequest": {
      "documentation": "<p>A request to apply a service update</p>",
      "members": {
        "ServiceUpdateNameToApply": {
          "documentation": "<p>The unique ID of the service update</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ServiceUpdateStatus": {
      "enum": [
        "available",
        "in-progress",
        "complete",
        "scheduled"
      ],
      "type": "string"
    },
    "ServiceUpdateStatusList": {
      "max": 4,
      "member": {
        "shape": "ServiceUpdateStatus"
      },
      "type": "list"
    },
    "ServiceUpdateType": {
      "enum": [
        "security-update"
      ],
      "type": "string"
    },
    "Shard": {
      "documentation": "<p>Represents a collection of nodes in a cluster. One node in the node group is the read/write primary node. All the other nodes are read-only Replica nodes.</p>",
      "members": {
        "Name": {
          "documentation": "<p>The name of the shard</p>",
          "shape": "String"
        },
        "Nodes": {
          "documentation": "<p>A list containing information about individual nodes within the shard</p>",
          "shape": "NodeList"
        },
        "NumberOfNodes": {
          "documentation": "<p>The number of nodes in the shard</p>",
          "shape": "IntegerOptional"
        },
        "Slots": {
          "documentation": "<p>The keyspace for this shard.</p>",
          "shape": "String"
        },
        "Status": {
          "documentation": "<p>The current state of this replication group - creating, available, modifying, deleting.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ShardConfiguration": {
      "documentation": "<p>Shard configuration options. Each shard configuration has the following: Slots and ReplicaCount.</p>",
      "members": {
        "ReplicaCount": {
          "documentation": "<p>The number of read replica nodes in this shard.</p>",
          "shape": "IntegerOptional"
        },
        "Slots": {
          "documentation": "<p>A string that specifies the keyspace for a particular node group. Keyspaces range from 0 to 16,383. The string is in the format startkey-endkey.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ShardConfigurationRequest": {
      "documentation": "<p>A request to configure the sharding properties of a cluster</p>",
      "members": {
        "ShardCount": {
          "documentation": "<p>The number of shards in the cluster</p>",
          "shape": "Integer"
        }
      },
      "type": "structure"
    },
    "ShardDetail": {
      "documentation": "<p>Provides details of a shard in a snapshot</p>",
      "members": {
        "Configuration": {
          "documentation": "<p>The configuration details of the shard</p>",
          "shape": "ShardConfiguration"
        },
        "Name": {
          "documentation": "<p>The name of the shard</p>",
          "shape": "String"
        },
        "Size": {
          "documentation": "<p>The size of the shard's snapshot</p>",
          "shape": "String"
        },
        "SnapshotCreationTime": {
          "documentation": "<p>The date and time that the shard's snapshot was created</p>",
          "shape": "TStamp"
        }
      },
      "type": "structure"
    },
    "ShardDetails": {
      "member": {
        "shape": "ShardDetail"
      },
      "type": "list"
    },
    "ShardList": {
      "member": {
        "shape": "Shard"
      },
      "type": "list"
    },
    "ShardNotFoundFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "ShardsPerClusterQuotaExceededFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "SlotMigration": {
      "documentation": "<p>Represents the progress of an online resharding operation.</p>",
      "members": {
        "ProgressPercentage": {
          "documentation": "<p>The percentage of the slot migration that is complete.</p>",
          "shape": "Double"
        }
      },
      "type": "structure"
    },
    "Snapshot": {
      "documentation": "<p>Represents a copy of an entire cluster as of the time when the snapshot was taken.</p>",
      "members": {
        "ARN": {
          "documentation": "<p>The ARN (Amazon Resource Name) of the snapshot.</p>",
          "shape": "String"
        },
        "ClusterConfiguration": {
          "documentation": "<p>The configuration of the cluster from which the snapshot was taken</p>",
          "shape": "ClusterConfiguration"
        },
        "KmsKeyId": {
          "documentation": "<p>The ID of the KMS key used to encrypt the snapshot.</p>",
          "shape": "String"
        },
        "Name": {
          "documentation": "<p>The name of the snapshot</p>",
          "shape": "String"
        },
        "Source": {
          "documentation": "<p>Indicates whether the snapshot is from an automatic backup (automated) or was created manually (manual).</p>",
          "shape": "String"
        },
        "Status": {
          "documentation": "<p>The status of the snapshot. Valid values: creating | available | restoring | copying | deleting.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "SnapshotAlreadyExistsFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "SnapshotArnsList": {
      "member": {
        "shape": "String"
      },
      "type": "list"
    },
    "SnapshotList": {
      "member": {
        "shape": "Snapshot"
      },
      "type": "list"
    },
    "SnapshotNotFoundFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "SnapshotQuotaExceededFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "SourceType": {
      "enum": [
        "node",
        "parameter-group",
        "subnet-group",
        "cluster",
        "user",
        "acl"
      ],
      "type": "string"
    },
    "String": {
      "type": "string"
    },
    "Subnet": {
      "documentation": "<p>Represents the subnet associated with a cluster. This parameter refers to subnets defined in Amazon Virtual Private Cloud (Amazon VPC) and used with MemoryDB.</p>",
      "members": {
        "AvailabilityZone": {
          "documentation": "<p>The Availability Zone where the subnet resides</p>",
          "shape": "AvailabilityZone"
        },
        "Identifier": {
          "documentation": "<p>The unique identifier for the subnet.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "SubnetGroup": {
      "documentation": "<p>Represents the output of one of the following operations:</p> <ul> <li> <p>CreateSubnetGroup</p> </li> <li> <p>UpdateSubnetGroup</p> </li> </ul> <p>A subnet group is a collection of subnets (typically private) that you can designate for your clusters running in an Amazon Virtual Private Cloud (VPC) environment.</p>",
      "members": {
        "ARN": {
          "documentation": "<p>The ARN (Amazon Resource Name) of the subnet group.</p>",
          "shape": "String"
        },
        "Description": {
          "documentation": "<p>A description of the subnet group</p>",
          "shape": "String"
        },
        "Name": {
          "documentation": "<p>The name of the subnet group</p>",
          "shape": "String"
        },
        "Subnets": {
          "documentation": "<p>A list of subnets associated with the subnet group.</p>",
          "shape": "SubnetList"
        },
        "VpcId": {
          "documentation": "<p>The Amazon Virtual Private Cloud identifier (VPC ID) of the subnet group.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "SubnetGroupAlreadyExistsFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "SubnetGroupInUseFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "SubnetGroupList": {
      "member": {
        "shape": "SubnetGroup"
      },
      "type": "list"
    },
    "SubnetGroupNotFoundFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "SubnetGroupQuotaExceededFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "SubnetIdentifierList": {
      "member": {
        "shape": "String"
      },
      "type": "list"
    },
    "SubnetInUse": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "SubnetList": {
      "member": {
        "shape": "Subnet"
      },
      "type": "list"
    },
    "SubnetNotAllowedFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "SubnetQuotaExceededFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "TStamp": {
      "type": "timestamp"
    },
    "Tag": {
      "documentation": "<p>A tag that can be added to an MemoryDB resource. Tags are composed of a Key/Value pair. You can use tags to categorize and track all your MemoryDB resources. When you add or remove tags on clusters, those actions will be replicated to all nodes in the cluster. A tag with a null Value is permitted. For more information, see <a href=\"https://docs.aws.amazon.com/MemoryDB/latest/devguide/tagging-resources.html\">Tagging your MemoryDB resources</a> </p>",
      "members": {
        "Key": {
          "documentation": "<p>The key for the tag. May not be null.</p>",
          "shape": "String"
        },
        "Value": {
          "documentation": "<p>The tag's value. May be null.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "TagList": {
      "max": 200,
      "member": {
        "shape": "Tag"
      },
      "type": "list"
    },
    "TagNotFoundFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "TagQuotaPerResourceExceeded": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "TagResourceRequest": {
      "members": {
        "ResourceArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added</p>",
          "shape": "String"
        },
        "Tags": {
          "documentation": "<p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>",
          "shape": "TagList"
        }
      },
      "required": [
        "ResourceArn",
        "Tags"
      ],
      "type": "structure"
    },
    "TagResourceResponse": {
      "members": {
        "TagList": {
          "documentation": "<p>A list of tags as key-value pairs.</p>",
          "shape": "TagList"
        }
      },
      "type": "structure"
    },
    "TargetBucket": {
      "max": 255,
      "pattern": "^[A-Za-z0-9._-]+$",
      "type": "string"
    },
    "TestFailoverNotAvailableFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "UnprocessedCluster": {
      "documentation": "<p>A cluster whose updates have failed</p>",
      "members": {
        "ClusterName": {
          "documentation": "<p>The name of the cluster</p>",
          "shape": "String"
        },
        "ErrorMessage": {
          "documentation": "<p>The error message associated with the update failure</p>",
          "shape": "String"
        },
        "ErrorType": {
          "documentation": "<p>The error type associated with the update failure</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "UnprocessedClusterList": {
      "member": {
        "shape": "UnprocessedCluster"
      },
      "type": "list"
    },
    "UntagResourceRequest": {
      "members": {
        "ResourceArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the resource to which the tags are to be removed</p>",
          "shape": "String"
        },
        "TagKeys": {
          "documentation": "<p>The list of keys of the tags that are to be removed</p>",
          "shape": "KeyList"
        }
      },
      "required": [
        "ResourceArn",
        "TagKeys"
      ],
      "type": "structure"
    },
    "UntagResourceResponse": {
      "members": {
        "TagList": {
          "documentation": "<p>The list of tags removed</p>",
          "shape": "TagList"
        }
      },
      "type": "structure"
    },
    "UpdateACLRequest": {
      "members": {
        "ACLName": {
          "documentation": "<p>The name of the Access Control List</p>",
          "shape": "String"
        },
        "UserNamesToAdd": {
          "documentation": "<p>The list of users to add to the Access Control List</p>",
          "shape": "UserNameListInput"
        },
        "UserNamesToRemove": {
          "documentation": "<p>The list of users to remove from the Access Control List</p>",
          "shape": "UserNameListInput"
        }
      },
      "required": [
        "ACLName"
      ],
      "type": "structure"
    },
    "UpdateACLResponse": {
      "members": {
        "ACL": {
          "documentation": "<p>The updated Access Control List</p>",
          "shape": "ACL"
        }
      },
      "type": "structure"
    },
    "UpdateClusterRequest": {
      "members": {
        "ACLName": {
          "documentation": "<p>The Access Control List that is associated with the cluster</p>",
          "shape": "ACLName"
        },
        "ClusterName": {
          "documentation": "<p>The name of the cluster to update</p>",
          "shape": "String"
        },
        "Description": {
          "documentation": "<p>The description of the cluster to update</p>",
          "shape": "String"
        },
        "EngineVersion": {
          "documentation": "<p>The upgraded version of the engine to be run on the nodes. You can upgrade to a newer engine version, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version.</p>",
          "shape": "String"
        },
        "MaintenanceWindow": {
          "documentation": "<p>The maintenance window to update</p>",
          "shape": "String"
        },
        "NodeType": {
          "documentation": "<p>A valid node type that you want to scale this cluster up or down to.</p>",
          "shape": "String"
        },
        "ParameterGroupName": {
          "documentation": "<p>The name of the parameter group to update</p>",
          "shape": "String"
        },
        "ReplicaConfiguration": {
          "documentation": "<p>The number of replicas that will reside in each shard</p>",
          "shape": "ReplicaConfigurationRequest"
        },
        "SecurityGroupIds": {
          "documentation": "<p>The SecurityGroupIds to update</p>",
          "shape": "SecurityGroupIdsList"
        },
        "ShardConfiguration": {
          "documentation": "<p>The number of shards in the cluster</p>",
          "shape": "ShardConfigurationRequest"
        },
        "SnapshotRetentionLimit": {
          "documentation": "<p>The number of days for which MemoryDB retains automatic cluster snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p>",
          "shape": "IntegerOptional"
        },
        "SnapshotWindow": {
          "documentation": "<p>The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of your cluster.</p>",
          "shape": "String"
        },
        "SnsTopicArn": {
          "documentation": "<p>The SNS topic ARN to update</p>",
          "shape": "String"
        },
        "SnsTopicStatus": {
          "documentation": "<p>The status of the Amazon SNS notification topic. Notifications are sent only if the status is active.</p>",
          "shape": "String"
        }
      },
      "required": [
        "ClusterName"
      ],
      "type": "structure"
    },
    "UpdateClusterResponse": {
      "members": {
        "Cluster": {
          "documentation": "<p>The updated cluster</p>",
          "shape": "Cluster"
        }
      },
      "type": "structure"
    },
    "UpdateParameterGroupRequest": {
      "members": {
        "ParameterGroupName": {
          "documentation": "<p>The name of the parameter group to update.</p>",
          "shape": "String"
        },
        "ParameterNameValues": {
          "documentation": "<p>An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be updated per request.</p>",
          "shape": "ParameterNameValueList"
        }
      },
      "required": [
        "ParameterGroupName",
        "ParameterNameValues"
      ],
      "type": "structure"
    },
    "UpdateParameterGroupResponse": {
      "members": {
        "ParameterGroup": {
          "documentation": "<p>The updated parameter group</p>",
          "shape": "ParameterGroup"
        }
      },
      "type": "structure"
    },
    "UpdateSubnetGroupRequest": {
      "members": {
        "Description": {
          "documentation": "<p>A description of the subnet group</p>",
          "shape": "String"
        },
        "SubnetGroupName": {
          "documentation": "<p>The name of the subnet group</p>",
          "shape": "String"
        },
        "SubnetIds": {
          "documentation": "<p>The EC2 subnet IDs for the subnet group.</p>",
          "shape": "SubnetIdentifierList"
        }
      },
      "required": [
        "SubnetGroupName"
      ],
      "type": "structure"
    },
    "UpdateSubnetGroupResponse": {
      "members": {
        "SubnetGroup": {
          "documentation": "<p>The updated subnet group</p>",
          "shape": "SubnetGroup"
        }
      },
      "type": "structure"
    },
    "UpdateUserRequest": {
      "members": {
        "AccessString": {
          "documentation": "<p>Access permissions string used for this user.</p>",
          "shape": "AccessString"
        },
        "AuthenticationMode": {
          "documentation": "<p>Denotes the user's authentication properties, such as whether it requires a password to authenticate.</p>",
          "shape": "AuthenticationMode"
        },
        "UserName": {
          "documentation": "<p>The name of the user</p>",
          "shape": "UserName"
        }
      },
      "required": [
        "UserName"
      ],
      "type": "structure"
    },
    "UpdateUserResponse": {
      "members": {
        "User": {
          "documentation": "<p>The updated user</p>",
          "shape": "User"
        }
      },
      "type": "structure"
    },
    "User": {
      "documentation": "<p>You create users and assign them specific permissions by using an access string. You assign the users to Access Control Lists aligned with a specific role (administrators, human resources) that are then deployed to one or more MemoryDB clusters.</p>",
      "members": {
        "ACLNames": {
          "documentation": "<p>The names of the Access Control Lists to which the user belongs</p>",
          "shape": "ACLNameList"
        },
        "ARN": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the user. </p>",
          "shape": "String"
        },
        "AccessString": {
          "documentation": "<p>Access permissions string used for this user.</p>",
          "shape": "String"
        },
        "Authentication": {
          "documentation": "<p>Denotes whether the user requires a password to authenticate.</p>",
          "shape": "Authentication"
        },
        "MinimumEngineVersion": {
          "documentation": "<p>The minimum engine version supported for the user</p>",
          "shape": "String"
        },
        "Name": {
          "documentation": "<p>The name of the user</p>",
          "shape": "String"
        },
        "Status": {
          "documentation": "<p>Indicates the user status. Can be \"active\", \"modifying\" or \"deleting\".</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "UserAlreadyExistsFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "UserList": {
      "member": {
        "shape": "User"
      },
      "type": "list"
    },
    "UserName": {
      "min": 1,
      "pattern": "[a-zA-Z][a-zA-Z0-9\\-]*",
      "type": "string"
    },
    "UserNameList": {
      "member": {
        "shape": "UserName"
      },
      "type": "list"
    },
    "UserNameListInput": {
      "member": {
        "shape": "UserName"
      },
      "min": 1,
      "type": "list"
    },
    "UserNotFoundFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "UserQuotaExceededFault": {
      "documentation": "<p/>",
      "exception": true,
      "members": {},
      "type": "structure"
    }
  },
  "version": "2.0"
}
