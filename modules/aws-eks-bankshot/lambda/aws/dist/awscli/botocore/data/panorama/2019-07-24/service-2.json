{
  "documentation": "<p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>",
  "metadata": {
    "apiVersion": "2019-07-24",
    "endpointPrefix": "panorama",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "Panorama",
    "serviceFullName": "AWS Panorama",
    "serviceId": "Panorama",
    "signatureVersion": "v4",
    "signingName": "panorama",
    "uid": "panorama-2019-07-24"
  },
  "operations": {
    "CreateApplicationInstance": {
      "documentation": "<p>Creates an application instance and deploys it to a device.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/application-instances",
        "responseCode": 200
      },
      "input": {
        "shape": "CreateApplicationInstanceRequest"
      },
      "name": "CreateApplicationInstance",
      "output": {
        "shape": "CreateApplicationInstanceResponse"
      }
    },
    "CreateJobForDevices": {
      "documentation": "<p>Creates a job to run on one or more devices. A job can update a device's software or reboot it.</p>",
      "errors": [
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/jobs",
        "responseCode": 200
      },
      "input": {
        "shape": "CreateJobForDevicesRequest"
      },
      "name": "CreateJobForDevices",
      "output": {
        "shape": "CreateJobForDevicesResponse"
      }
    },
    "CreateNodeFromTemplateJob": {
      "documentation": "<p>Creates a camera stream node.</p>",
      "errors": [
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/packages/template-job",
        "responseCode": 200
      },
      "input": {
        "shape": "CreateNodeFromTemplateJobRequest"
      },
      "name": "CreateNodeFromTemplateJob",
      "output": {
        "shape": "CreateNodeFromTemplateJobResponse"
      }
    },
    "CreatePackage": {
      "documentation": "<p>Creates a package and storage location in an Amazon S3 access point.</p>",
      "errors": [
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/packages",
        "responseCode": 200
      },
      "input": {
        "shape": "CreatePackageRequest"
      },
      "name": "CreatePackage",
      "output": {
        "shape": "CreatePackageResponse"
      }
    },
    "CreatePackageImportJob": {
      "documentation": "<p>Imports a node package.</p>",
      "errors": [
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/packages/import-jobs",
        "responseCode": 200
      },
      "input": {
        "shape": "CreatePackageImportJobRequest"
      },
      "name": "CreatePackageImportJob",
      "output": {
        "shape": "CreatePackageImportJobResponse"
      }
    },
    "DeleteDevice": {
      "documentation": "<p>Deletes a device.</p>",
      "errors": [
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/devices/{DeviceId}",
        "responseCode": 200
      },
      "input": {
        "shape": "DeleteDeviceRequest"
      },
      "name": "DeleteDevice",
      "output": {
        "shape": "DeleteDeviceResponse"
      }
    },
    "DeletePackage": {
      "documentation": "<p>Deletes a package.</p> <note> <p>To delete a package, you need permission to call <code>s3:DeleteObject</code> in addition to permissions for the AWS Panorama API.</p> </note>",
      "errors": [
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/packages/{PackageId}",
        "responseCode": 200
      },
      "input": {
        "shape": "DeletePackageRequest"
      },
      "name": "DeletePackage",
      "output": {
        "shape": "DeletePackageResponse"
      }
    },
    "DeregisterPackageVersion": {
      "documentation": "<p>Deregisters a package version.</p>",
      "errors": [
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/packages/{PackageId}/versions/{PackageVersion}/patch/{PatchVersion}",
        "responseCode": 200
      },
      "input": {
        "shape": "DeregisterPackageVersionRequest"
      },
      "name": "DeregisterPackageVersion",
      "output": {
        "shape": "DeregisterPackageVersionResponse"
      }
    },
    "DescribeApplicationInstance": {
      "documentation": "<p>Returns information about an application instance on a device.</p>",
      "errors": [
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/application-instances/{ApplicationInstanceId}",
        "responseCode": 200
      },
      "input": {
        "shape": "DescribeApplicationInstanceRequest"
      },
      "name": "DescribeApplicationInstance",
      "output": {
        "shape": "DescribeApplicationInstanceResponse"
      }
    },
    "DescribeApplicationInstanceDetails": {
      "documentation": "<p>Returns information about an application instance's configuration manifest.</p>",
      "errors": [
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/application-instances/{ApplicationInstanceId}/details",
        "responseCode": 200
      },
      "input": {
        "shape": "DescribeApplicationInstanceDetailsRequest"
      },
      "name": "DescribeApplicationInstanceDetails",
      "output": {
        "shape": "DescribeApplicationInstanceDetailsResponse"
      }
    },
    "DescribeDevice": {
      "documentation": "<p>Returns information about a device.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/devices/{DeviceId}",
        "responseCode": 200
      },
      "input": {
        "shape": "DescribeDeviceRequest"
      },
      "name": "DescribeDevice",
      "output": {
        "shape": "DescribeDeviceResponse"
      }
    },
    "DescribeDeviceJob": {
      "documentation": "<p>Returns information about a device job.</p>",
      "errors": [
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/jobs/{JobId}",
        "responseCode": 200
      },
      "input": {
        "shape": "DescribeDeviceJobRequest"
      },
      "name": "DescribeDeviceJob",
      "output": {
        "shape": "DescribeDeviceJobResponse"
      }
    },
    "DescribeNode": {
      "documentation": "<p>Returns information about a node.</p>",
      "errors": [
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/nodes/{NodeId}",
        "responseCode": 200
      },
      "input": {
        "shape": "DescribeNodeRequest"
      },
      "name": "DescribeNode",
      "output": {
        "shape": "DescribeNodeResponse"
      }
    },
    "DescribeNodeFromTemplateJob": {
      "documentation": "<p>Returns information about a job to create a camera stream node.</p>",
      "errors": [
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/packages/template-job/{JobId}",
        "responseCode": 200
      },
      "input": {
        "shape": "DescribeNodeFromTemplateJobRequest"
      },
      "name": "DescribeNodeFromTemplateJob",
      "output": {
        "shape": "DescribeNodeFromTemplateJobResponse"
      }
    },
    "DescribePackage": {
      "documentation": "<p>Returns information about a package.</p>",
      "errors": [
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/packages/metadata/{PackageId}",
        "responseCode": 200
      },
      "input": {
        "shape": "DescribePackageRequest"
      },
      "name": "DescribePackage",
      "output": {
        "shape": "DescribePackageResponse"
      }
    },
    "DescribePackageImportJob": {
      "documentation": "<p>Returns information about a package import job.</p>",
      "errors": [
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/packages/import-jobs/{JobId}",
        "responseCode": 200
      },
      "input": {
        "shape": "DescribePackageImportJobRequest"
      },
      "name": "DescribePackageImportJob",
      "output": {
        "shape": "DescribePackageImportJobResponse"
      }
    },
    "DescribePackageVersion": {
      "documentation": "<p>Returns information about a package version.</p>",
      "errors": [
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/packages/metadata/{PackageId}/versions/{PackageVersion}",
        "responseCode": 200
      },
      "input": {
        "shape": "DescribePackageVersionRequest"
      },
      "name": "DescribePackageVersion",
      "output": {
        "shape": "DescribePackageVersionResponse"
      }
    },
    "ListApplicationInstanceDependencies": {
      "documentation": "<p>Returns a list of application instance dependencies.</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/application-instances/{ApplicationInstanceId}/package-dependencies",
        "responseCode": 200
      },
      "input": {
        "shape": "ListApplicationInstanceDependenciesRequest"
      },
      "name": "ListApplicationInstanceDependencies",
      "output": {
        "shape": "ListApplicationInstanceDependenciesResponse"
      }
    },
    "ListApplicationInstanceNodeInstances": {
      "documentation": "<p>Returns a list of application node instances.</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/application-instances/{ApplicationInstanceId}/node-instances",
        "responseCode": 200
      },
      "input": {
        "shape": "ListApplicationInstanceNodeInstancesRequest"
      },
      "name": "ListApplicationInstanceNodeInstances",
      "output": {
        "shape": "ListApplicationInstanceNodeInstancesResponse"
      }
    },
    "ListApplicationInstances": {
      "documentation": "<p>Returns a list of application instances.</p>",
      "errors": [
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/application-instances",
        "responseCode": 200
      },
      "input": {
        "shape": "ListApplicationInstancesRequest"
      },
      "name": "ListApplicationInstances",
      "output": {
        "shape": "ListApplicationInstancesResponse"
      }
    },
    "ListDevices": {
      "documentation": "<p>Returns a list of devices.</p>",
      "errors": [
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/devices",
        "responseCode": 200
      },
      "input": {
        "shape": "ListDevicesRequest"
      },
      "name": "ListDevices",
      "output": {
        "shape": "ListDevicesResponse"
      }
    },
    "ListDevicesJobs": {
      "documentation": "<p>Returns a list of jobs.</p>",
      "errors": [
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/jobs",
        "responseCode": 200
      },
      "input": {
        "shape": "ListDevicesJobsRequest"
      },
      "name": "ListDevicesJobs",
      "output": {
        "shape": "ListDevicesJobsResponse"
      }
    },
    "ListNodeFromTemplateJobs": {
      "documentation": "<p>Returns a list of camera stream node jobs.</p>",
      "errors": [
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/packages/template-job",
        "responseCode": 200
      },
      "input": {
        "shape": "ListNodeFromTemplateJobsRequest"
      },
      "name": "ListNodeFromTemplateJobs",
      "output": {
        "shape": "ListNodeFromTemplateJobsResponse"
      }
    },
    "ListNodes": {
      "documentation": "<p>Returns a list of nodes.</p>",
      "errors": [
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/nodes",
        "responseCode": 200
      },
      "input": {
        "shape": "ListNodesRequest"
      },
      "name": "ListNodes",
      "output": {
        "shape": "ListNodesResponse"
      }
    },
    "ListPackageImportJobs": {
      "documentation": "<p>Returns a list of package import jobs.</p>",
      "errors": [
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/packages/import-jobs",
        "responseCode": 200
      },
      "input": {
        "shape": "ListPackageImportJobsRequest"
      },
      "name": "ListPackageImportJobs",
      "output": {
        "shape": "ListPackageImportJobsResponse"
      }
    },
    "ListPackages": {
      "documentation": "<p>Returns a list of packages.</p>",
      "errors": [
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/packages",
        "responseCode": 200
      },
      "input": {
        "shape": "ListPackagesRequest"
      },
      "name": "ListPackages",
      "output": {
        "shape": "ListPackagesResponse"
      }
    },
    "ListTagsForResource": {
      "documentation": "<p>Returns a list of tags for a resource.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/tags/{ResourceArn}",
        "responseCode": 200
      },
      "input": {
        "shape": "ListTagsForResourceRequest"
      },
      "name": "ListTagsForResource",
      "output": {
        "shape": "ListTagsForResourceResponse"
      }
    },
    "ProvisionDevice": {
      "documentation": "<p>Creates a device and returns a configuration archive. The configuration archive is a ZIP file that contains a provisioning certificate that is valid for 5 minutes. Name the configuration archive <code>certificates-omni_<i>device-name</i>.zip</code> and transfer it to the device within 5 minutes. Use the included USB storage device and connect it to the USB 3.0 port next to the HDMI output.</p>",
      "errors": [
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/devices",
        "responseCode": 200
      },
      "input": {
        "shape": "ProvisionDeviceRequest"
      },
      "name": "ProvisionDevice",
      "output": {
        "shape": "ProvisionDeviceResponse"
      }
    },
    "RegisterPackageVersion": {
      "documentation": "<p>Registers a package version.</p>",
      "errors": [
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/packages/{PackageId}/versions/{PackageVersion}/patch/{PatchVersion}",
        "responseCode": 200
      },
      "input": {
        "shape": "RegisterPackageVersionRequest"
      },
      "name": "RegisterPackageVersion",
      "output": {
        "shape": "RegisterPackageVersionResponse"
      }
    },
    "RemoveApplicationInstance": {
      "documentation": "<p>Removes an application instance.</p>",
      "errors": [
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/application-instances/{ApplicationInstanceId}",
        "responseCode": 200
      },
      "input": {
        "shape": "RemoveApplicationInstanceRequest"
      },
      "name": "RemoveApplicationInstance",
      "output": {
        "shape": "RemoveApplicationInstanceResponse"
      }
    },
    "SignalApplicationInstanceNodeInstances": {
      "documentation": "<p>Signal camera nodes to stop or resume.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/application-instances/{ApplicationInstanceId}/node-signals",
        "responseCode": 200
      },
      "input": {
        "shape": "SignalApplicationInstanceNodeInstancesRequest"
      },
      "name": "SignalApplicationInstanceNodeInstances",
      "output": {
        "shape": "SignalApplicationInstanceNodeInstancesResponse"
      }
    },
    "TagResource": {
      "documentation": "<p>Tags a resource.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/tags/{ResourceArn}",
        "responseCode": 200
      },
      "input": {
        "shape": "TagResourceRequest"
      },
      "name": "TagResource",
      "output": {
        "shape": "TagResourceResponse"
      }
    },
    "UntagResource": {
      "documentation": "<p>Removes tags from a resource.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/tags/{ResourceArn}",
        "responseCode": 200
      },
      "input": {
        "shape": "UntagResourceRequest"
      },
      "name": "UntagResource",
      "output": {
        "shape": "UntagResourceResponse"
      }
    },
    "UpdateDeviceMetadata": {
      "documentation": "<p>Updates a device's metadata.</p>",
      "errors": [
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/devices/{DeviceId}",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateDeviceMetadataRequest"
      },
      "name": "UpdateDeviceMetadata",
      "output": {
        "shape": "UpdateDeviceMetadataResponse"
      }
    }
  },
  "shapes": {
    "AccessDeniedException": {
      "documentation": "<p>The requestor does not have permission to access the target action or resource.</p>",
      "error": {
        "httpStatusCode": 403,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "String"
        }
      },
      "required": [
        "Message"
      ],
      "type": "structure"
    },
    "AlternateSoftwareMetadata": {
      "documentation": "<p>Details about a beta appliance software update.</p>",
      "members": {
        "Version": {
          "documentation": "<p>The appliance software version.</p>",
          "shape": "Version"
        }
      },
      "type": "structure"
    },
    "AlternateSoftwares": {
      "member": {
        "shape": "AlternateSoftwareMetadata"
      },
      "type": "list"
    },
    "ApplicationInstance": {
      "documentation": "<p>An application instance on a device.</p>",
      "members": {
        "ApplicationInstanceId": {
          "documentation": "<p>The application instance's ID.</p>",
          "shape": "ApplicationInstanceId"
        },
        "Arn": {
          "documentation": "<p>The application instance's ARN.</p>",
          "shape": "ApplicationInstanceArn"
        },
        "CreatedTime": {
          "documentation": "<p>When the application instance was created.</p>",
          "shape": "TimeStamp"
        },
        "DefaultRuntimeContextDevice": {
          "documentation": "<p>The device's ID.</p>",
          "shape": "DefaultRuntimeContextDevice"
        },
        "DefaultRuntimeContextDeviceName": {
          "documentation": "<p>The device's name.</p>",
          "shape": "DeviceName"
        },
        "Description": {
          "documentation": "<p>The application instance's description.</p>",
          "shape": "Description"
        },
        "HealthStatus": {
          "documentation": "<p>The application instance's health status.</p>",
          "shape": "ApplicationInstanceHealthStatus"
        },
        "Name": {
          "documentation": "<p>The application instance's name.</p>",
          "shape": "ApplicationInstanceName"
        },
        "RuntimeContextStates": {
          "documentation": "<p>The application's state.</p>",
          "shape": "ReportedRuntimeContextStates"
        },
        "Status": {
          "documentation": "<p>The application instance's status.</p>",
          "shape": "ApplicationInstanceStatus"
        },
        "StatusDescription": {
          "documentation": "<p>The application instance's status description.</p>",
          "shape": "ApplicationInstanceStatusDescription"
        },
        "Tags": {
          "documentation": "<p>The application instance's tags.</p>",
          "shape": "TagMap"
        }
      },
      "type": "structure"
    },
    "ApplicationInstanceArn": {
      "max": 255,
      "min": 1,
      "type": "string"
    },
    "ApplicationInstanceHealthStatus": {
      "enum": [
        "RUNNING",
        "ERROR",
        "NOT_AVAILABLE"
      ],
      "type": "string"
    },
    "ApplicationInstanceId": {
      "max": 255,
      "min": 1,
      "pattern": "^[a-zA-Z0-9\\-\\_]+$",
      "type": "string"
    },
    "ApplicationInstanceName": {
      "max": 255,
      "min": 1,
      "pattern": "^[a-zA-Z0-9\\-\\_]+$",
      "type": "string"
    },
    "ApplicationInstanceStatus": {
      "enum": [
        "DEPLOYMENT_PENDING",
        "DEPLOYMENT_REQUESTED",
        "DEPLOYMENT_IN_PROGRESS",
        "DEPLOYMENT_ERROR",
        "DEPLOYMENT_SUCCEEDED",
        "REMOVAL_PENDING",
        "REMOVAL_REQUESTED",
        "REMOVAL_IN_PROGRESS",
        "REMOVAL_FAILED",
        "REMOVAL_SUCCEEDED",
        "DEPLOYMENT_FAILED"
      ],
      "type": "string"
    },
    "ApplicationInstanceStatusDescription": {
      "max": 255,
      "min": 1,
      "type": "string"
    },
    "ApplicationInstances": {
      "member": {
        "shape": "ApplicationInstance"
      },
      "type": "list"
    },
    "Boolean": {
      "type": "boolean"
    },
    "Bucket": {
      "type": "string"
    },
    "BucketName": {
      "max": 255,
      "min": 1,
      "pattern": "^.+$",
      "type": "string"
    },
    "Certificates": {
      "type": "blob"
    },
    "ClientToken": {
      "max": 64,
      "min": 1,
      "pattern": "^[a-zA-Z0-9\\-\\_]+$",
      "type": "string"
    },
    "ConflictException": {
      "documentation": "<p>The target resource is in use.</p>",
      "error": {
        "httpStatusCode": 409,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "ErrorArguments": {
          "documentation": "<p>A list of attributes that led to the exception and their values.</p>",
          "shape": "ConflictExceptionErrorArgumentList"
        },
        "ErrorId": {
          "documentation": "<p>A unique ID for the error.</p>",
          "shape": "String"
        },
        "Message": {
          "shape": "String"
        },
        "ResourceId": {
          "documentation": "<p>The resource's ID.</p>",
          "shape": "String"
        },
        "ResourceType": {
          "documentation": "<p>The resource's type.</p>",
          "shape": "String"
        }
      },
      "required": [
        "Message",
        "ResourceId",
        "ResourceType"
      ],
      "type": "structure"
    },
    "ConflictExceptionErrorArgument": {
      "documentation": "<p>A conflict exception error argument.</p>",
      "members": {
        "Name": {
          "documentation": "<p>The error argument's name.</p>",
          "shape": "String"
        },
        "Value": {
          "documentation": "<p>The error argument's value.</p>",
          "shape": "String"
        }
      },
      "required": [
        "Name",
        "Value"
      ],
      "type": "structure"
    },
    "ConflictExceptionErrorArgumentList": {
      "member": {
        "shape": "ConflictExceptionErrorArgument"
      },
      "type": "list"
    },
    "ConnectionType": {
      "enum": [
        "STATIC_IP",
        "DHCP"
      ],
      "type": "string"
    },
    "CreateApplicationInstanceRequest": {
      "members": {
        "ApplicationInstanceIdToReplace": {
          "documentation": "<p>The ID of an application instance to replace with the new instance.</p>",
          "shape": "ApplicationInstanceId"
        },
        "DefaultRuntimeContextDevice": {
          "documentation": "<p>A device's ID.</p>",
          "shape": "DefaultRuntimeContextDevice"
        },
        "Description": {
          "documentation": "<p>A description for the application instance.</p>",
          "shape": "Description"
        },
        "ManifestOverridesPayload": {
          "documentation": "<p>Setting overrides for the application manifest.</p>",
          "shape": "ManifestOverridesPayload"
        },
        "ManifestPayload": {
          "documentation": "<p>The application's manifest document.</p>",
          "shape": "ManifestPayload"
        },
        "Name": {
          "documentation": "<p>A name for the application instance.</p>",
          "shape": "ApplicationInstanceName"
        },
        "RuntimeRoleArn": {
          "documentation": "<p>The ARN of a runtime role for the application instance.</p>",
          "shape": "RuntimeRoleArn"
        },
        "Tags": {
          "documentation": "<p>Tags for the application instance.</p>",
          "shape": "TagMap"
        }
      },
      "required": [
        "DefaultRuntimeContextDevice",
        "ManifestPayload"
      ],
      "type": "structure"
    },
    "CreateApplicationInstanceResponse": {
      "members": {
        "ApplicationInstanceId": {
          "documentation": "<p>The application instance's ID.</p>",
          "shape": "ApplicationInstanceId"
        }
      },
      "required": [
        "ApplicationInstanceId"
      ],
      "type": "structure"
    },
    "CreateJobForDevicesRequest": {
      "members": {
        "DeviceIds": {
          "documentation": "<p>IDs of target devices.</p>",
          "shape": "DeviceIdList"
        },
        "DeviceJobConfig": {
          "documentation": "<p>Configuration settings for a software update job.</p>",
          "shape": "DeviceJobConfig"
        },
        "JobType": {
          "documentation": "<p>The type of job to run.</p>",
          "shape": "JobType"
        }
      },
      "required": [
        "DeviceIds",
        "JobType"
      ],
      "type": "structure"
    },
    "CreateJobForDevicesResponse": {
      "members": {
        "Jobs": {
          "documentation": "<p>A list of jobs.</p>",
          "shape": "JobList"
        }
      },
      "required": [
        "Jobs"
      ],
      "type": "structure"
    },
    "CreateNodeFromTemplateJobRequest": {
      "members": {
        "JobTags": {
          "documentation": "<p>Tags for the job.</p>",
          "shape": "JobTagsList"
        },
        "NodeDescription": {
          "documentation": "<p>A description for the node.</p>",
          "shape": "Description"
        },
        "NodeName": {
          "documentation": "<p>A name for the node.</p>",
          "shape": "NodeName"
        },
        "OutputPackageName": {
          "documentation": "<p>An output package name for the node.</p>",
          "shape": "NodePackageName"
        },
        "OutputPackageVersion": {
          "documentation": "<p>An output package version for the node.</p>",
          "shape": "NodePackageVersion"
        },
        "TemplateParameters": {
          "documentation": "<p>Template parameters for the node.</p>",
          "shape": "TemplateParametersMap"
        },
        "TemplateType": {
          "documentation": "<p>The type of node.</p>",
          "shape": "TemplateType"
        }
      },
      "required": [
        "NodeName",
        "OutputPackageName",
        "OutputPackageVersion",
        "TemplateParameters",
        "TemplateType"
      ],
      "type": "structure"
    },
    "CreateNodeFromTemplateJobResponse": {
      "members": {
        "JobId": {
          "documentation": "<p>The job's ID.</p>",
          "shape": "JobId"
        }
      },
      "required": [
        "JobId"
      ],
      "type": "structure"
    },
    "CreatePackageImportJobRequest": {
      "members": {
        "ClientToken": {
          "documentation": "<p>A client token for the package import job.</p>",
          "shape": "ClientToken"
        },
        "InputConfig": {
          "documentation": "<p>An input config for the package import job.</p>",
          "shape": "PackageImportJobInputConfig"
        },
        "JobTags": {
          "documentation": "<p>Tags for the package import job.</p>",
          "shape": "JobTagsList"
        },
        "JobType": {
          "documentation": "<p>A job type for the package import job.</p>",
          "shape": "PackageImportJobType"
        },
        "OutputConfig": {
          "documentation": "<p>An output config for the package import job.</p>",
          "shape": "PackageImportJobOutputConfig"
        }
      },
      "required": [
        "ClientToken",
        "InputConfig",
        "JobType",
        "OutputConfig"
      ],
      "type": "structure"
    },
    "CreatePackageImportJobResponse": {
      "members": {
        "JobId": {
          "documentation": "<p>The job's ID.</p>",
          "shape": "JobId"
        }
      },
      "required": [
        "JobId"
      ],
      "type": "structure"
    },
    "CreatePackageRequest": {
      "members": {
        "PackageName": {
          "documentation": "<p>A name for the package.</p>",
          "shape": "NodePackageName"
        },
        "Tags": {
          "documentation": "<p>Tags for the package.</p>",
          "shape": "TagMap"
        }
      },
      "required": [
        "PackageName"
      ],
      "type": "structure"
    },
    "CreatePackageResponse": {
      "members": {
        "Arn": {
          "documentation": "<p>The package's ARN.</p>",
          "shape": "NodePackageArn"
        },
        "PackageId": {
          "documentation": "<p>The package's ID.</p>",
          "shape": "NodePackageId"
        },
        "StorageLocation": {
          "documentation": "<p>The package's storage location.</p>",
          "shape": "StorageLocation"
        }
      },
      "required": [
        "StorageLocation"
      ],
      "type": "structure"
    },
    "CreatedTime": {
      "type": "timestamp"
    },
    "CurrentSoftware": {
      "max": 255,
      "min": 1,
      "type": "string"
    },
    "DefaultGateway": {
      "max": 255,
      "min": 1,
      "pattern": "^.+$",
      "type": "string"
    },
    "DefaultRuntimeContextDevice": {
      "max": 255,
      "min": 1,
      "pattern": "^[a-zA-Z0-9\\-\\_]+$",
      "type": "string"
    },
    "DeleteDeviceRequest": {
      "members": {
        "DeviceId": {
          "documentation": "<p>The device's ID.</p>",
          "location": "uri",
          "locationName": "DeviceId",
          "shape": "DeviceId"
        }
      },
      "required": [
        "DeviceId"
      ],
      "type": "structure"
    },
    "DeleteDeviceResponse": {
      "members": {
        "DeviceId": {
          "documentation": "<p>The device's ID.</p>",
          "shape": "DeviceId"
        }
      },
      "type": "structure"
    },
    "DeletePackageRequest": {
      "members": {
        "ForceDelete": {
          "documentation": "<p>Delete the package even if it has artifacts stored in its access point. Deletes the package's artifacts from Amazon S3.</p>",
          "location": "querystring",
          "locationName": "ForceDelete",
          "shape": "Boolean"
        },
        "PackageId": {
          "documentation": "<p>The package's ID.</p>",
          "location": "uri",
          "locationName": "PackageId",
          "shape": "NodePackageId"
        }
      },
      "required": [
        "PackageId"
      ],
      "type": "structure"
    },
    "DeletePackageResponse": {
      "members": {},
      "type": "structure"
    },
    "DeregisterPackageVersionRequest": {
      "members": {
        "OwnerAccount": {
          "documentation": "<p>An owner account.</p>",
          "location": "querystring",
          "locationName": "OwnerAccount",
          "shape": "PackageOwnerAccount"
        },
        "PackageId": {
          "documentation": "<p>A package ID.</p>",
          "location": "uri",
          "locationName": "PackageId",
          "shape": "NodePackageId"
        },
        "PackageVersion": {
          "documentation": "<p>A package version.</p>",
          "location": "uri",
          "locationName": "PackageVersion",
          "shape": "NodePackageVersion"
        },
        "PatchVersion": {
          "documentation": "<p>A patch version.</p>",
          "location": "uri",
          "locationName": "PatchVersion",
          "shape": "NodePackagePatchVersion"
        },
        "UpdatedLatestPatchVersion": {
          "documentation": "<p>If the version was marked latest, the new version to maker as latest.</p>",
          "location": "querystring",
          "locationName": "UpdatedLatestPatchVersion",
          "shape": "NodePackagePatchVersion"
        }
      },
      "required": [
        "PackageId",
        "PackageVersion",
        "PatchVersion"
      ],
      "type": "structure"
    },
    "DeregisterPackageVersionResponse": {
      "members": {},
      "type": "structure"
    },
    "DescribeApplicationInstanceDetailsRequest": {
      "members": {
        "ApplicationInstanceId": {
          "documentation": "<p>The application instance's ID.</p>",
          "location": "uri",
          "locationName": "ApplicationInstanceId",
          "shape": "ApplicationInstanceId"
        }
      },
      "required": [
        "ApplicationInstanceId"
      ],
      "type": "structure"
    },
    "DescribeApplicationInstanceDetailsResponse": {
      "members": {
        "ApplicationInstanceId": {
          "documentation": "<p>The application instance's ID.</p>",
          "shape": "ApplicationInstanceId"
        },
        "ApplicationInstanceIdToReplace": {
          "documentation": "<p>The ID of the application instance that this instance replaced.</p>",
          "shape": "ApplicationInstanceId"
        },
        "CreatedTime": {
          "documentation": "<p>When the application instance was created.</p>",
          "shape": "TimeStamp"
        },
        "DefaultRuntimeContextDevice": {
          "documentation": "<p>The application instance's default runtime context device.</p>",
          "shape": "DefaultRuntimeContextDevice"
        },
        "Description": {
          "documentation": "<p>The application instance's description.</p>",
          "shape": "Description"
        },
        "ManifestOverridesPayload": {
          "documentation": "<p>Parameter overrides for the configuration manifest.</p>",
          "shape": "ManifestOverridesPayload"
        },
        "ManifestPayload": {
          "documentation": "<p>The application instance's configuration manifest.</p>",
          "shape": "ManifestPayload"
        },
        "Name": {
          "documentation": "<p>The application instance's name.</p>",
          "shape": "ApplicationInstanceName"
        }
      },
      "type": "structure"
    },
    "DescribeApplicationInstanceRequest": {
      "members": {
        "ApplicationInstanceId": {
          "documentation": "<p>The application instance's ID.</p>",
          "location": "uri",
          "locationName": "ApplicationInstanceId",
          "shape": "ApplicationInstanceId"
        }
      },
      "required": [
        "ApplicationInstanceId"
      ],
      "type": "structure"
    },
    "DescribeApplicationInstanceResponse": {
      "members": {
        "ApplicationInstanceId": {
          "documentation": "<p>The application instance's ID.</p>",
          "shape": "ApplicationInstanceId"
        },
        "ApplicationInstanceIdToReplace": {
          "documentation": "<p>The ID of the application instance that this instance replaced.</p>",
          "shape": "ApplicationInstanceId"
        },
        "Arn": {
          "documentation": "<p>The application instance's ARN.</p>",
          "shape": "ApplicationInstanceArn"
        },
        "CreatedTime": {
          "documentation": "<p>When the application instance was created.</p>",
          "shape": "TimeStamp"
        },
        "DefaultRuntimeContextDevice": {
          "documentation": "<p>The device's ID.</p>",
          "shape": "DefaultRuntimeContextDevice"
        },
        "DefaultRuntimeContextDeviceName": {
          "documentation": "<p>The device's bane.</p>",
          "shape": "DeviceName"
        },
        "Description": {
          "documentation": "<p>The application instance's description.</p>",
          "shape": "Description"
        },
        "HealthStatus": {
          "documentation": "<p>The application instance's health status.</p>",
          "shape": "ApplicationInstanceHealthStatus"
        },
        "LastUpdatedTime": {
          "documentation": "<p>The application instance was updated.</p>",
          "shape": "TimeStamp"
        },
        "Name": {
          "documentation": "<p>The application instance's name.</p>",
          "shape": "ApplicationInstanceName"
        },
        "RuntimeContextStates": {
          "documentation": "<p>The application instance's state.</p>",
          "shape": "ReportedRuntimeContextStates"
        },
        "RuntimeRoleArn": {
          "documentation": "<p>The application instance's runtime role ARN.</p>",
          "shape": "RuntimeRoleArn"
        },
        "Status": {
          "documentation": "<p>The application instance's status.</p>",
          "shape": "ApplicationInstanceStatus"
        },
        "StatusDescription": {
          "documentation": "<p>The application instance's status description.</p>",
          "shape": "ApplicationInstanceStatusDescription"
        },
        "Tags": {
          "documentation": "<p>The application instance's tags.</p>",
          "shape": "TagMap"
        }
      },
      "type": "structure"
    },
    "DescribeDeviceJobRequest": {
      "members": {
        "JobId": {
          "documentation": "<p>The job's ID.</p>",
          "location": "uri",
          "locationName": "JobId",
          "shape": "JobId"
        }
      },
      "required": [
        "JobId"
      ],
      "type": "structure"
    },
    "DescribeDeviceJobResponse": {
      "members": {
        "CreatedTime": {
          "documentation": "<p>When the job was created.</p>",
          "shape": "UpdateCreatedTime"
        },
        "DeviceArn": {
          "documentation": "<p>The device's ARN.</p>",
          "shape": "DeviceArn"
        },
        "DeviceId": {
          "documentation": "<p>The device's ID.</p>",
          "shape": "DeviceId"
        },
        "DeviceName": {
          "documentation": "<p>The device's name.</p>",
          "shape": "DeviceName"
        },
        "DeviceType": {
          "documentation": "<p>The device's type.</p>",
          "shape": "DeviceType"
        },
        "ImageVersion": {
          "documentation": "<p>For an OTA job, the target version of the device software.</p>",
          "shape": "ImageVersion"
        },
        "JobId": {
          "documentation": "<p>The job's ID.</p>",
          "shape": "JobId"
        },
        "JobType": {
          "documentation": "<p>The job's type.</p>",
          "shape": "JobType"
        },
        "Status": {
          "documentation": "<p>The job's status.</p>",
          "shape": "UpdateProgress"
        }
      },
      "type": "structure"
    },
    "DescribeDeviceRequest": {
      "members": {
        "DeviceId": {
          "documentation": "<p>The device's ID.</p>",
          "location": "uri",
          "locationName": "DeviceId",
          "shape": "DeviceId"
        }
      },
      "required": [
        "DeviceId"
      ],
      "type": "structure"
    },
    "DescribeDeviceResponse": {
      "members": {
        "AlternateSoftwares": {
          "documentation": "<p>Beta software releases available for the device.</p>",
          "shape": "AlternateSoftwares"
        },
        "Arn": {
          "documentation": "<p>The device's ARN.</p>",
          "shape": "DeviceArn"
        },
        "Brand": {
          "documentation": "<p>The device's maker.</p>",
          "shape": "DeviceBrand"
        },
        "CreatedTime": {
          "documentation": "<p>When the device was created.</p>",
          "shape": "CreatedTime"
        },
        "CurrentNetworkingStatus": {
          "documentation": "<p>The device's networking status.</p>",
          "shape": "NetworkStatus"
        },
        "CurrentSoftware": {
          "documentation": "<p>The device's current software version.</p>",
          "shape": "CurrentSoftware"
        },
        "Description": {
          "documentation": "<p>The device's description.</p>",
          "shape": "Description"
        },
        "DeviceAggregatedStatus": {
          "documentation": "<p>A device's aggregated status. Including the device's connection status, provisioning status, and lease status.</p>",
          "shape": "DeviceAggregatedStatus"
        },
        "DeviceConnectionStatus": {
          "documentation": "<p>The device's connection status.</p>",
          "shape": "DeviceConnectionStatus"
        },
        "DeviceId": {
          "documentation": "<p>The device's ID.</p>",
          "shape": "DeviceId"
        },
        "LatestAlternateSoftware": {
          "documentation": "<p>The most recent beta software release.</p>",
          "shape": "LatestAlternateSoftware"
        },
        "LatestDeviceJob": {
          "documentation": "<p>A device's latest job. Includes the target image version, and the job status.</p>",
          "shape": "LatestDeviceJob"
        },
        "LatestSoftware": {
          "documentation": "<p>The latest software version available for the device.</p>",
          "shape": "LatestSoftware"
        },
        "LeaseExpirationTime": {
          "documentation": "<p>The device's lease expiration time.</p>",
          "shape": "LeaseExpirationTime"
        },
        "Name": {
          "documentation": "<p>The device's name.</p>",
          "shape": "DeviceName"
        },
        "NetworkingConfiguration": {
          "documentation": "<p>The device's networking configuration.</p>",
          "shape": "NetworkPayload"
        },
        "ProvisioningStatus": {
          "documentation": "<p>The device's provisioning status.</p>",
          "shape": "DeviceStatus"
        },
        "SerialNumber": {
          "documentation": "<p>The device's serial number.</p>",
          "shape": "DeviceSerialNumber"
        },
        "Tags": {
          "documentation": "<p>The device's tags.</p>",
          "shape": "TagMap"
        },
        "Type": {
          "documentation": "<p>The device's type.</p>",
          "shape": "DeviceType"
        }
      },
      "type": "structure"
    },
    "DescribeNodeFromTemplateJobRequest": {
      "members": {
        "JobId": {
          "documentation": "<p>The job's ID.</p>",
          "location": "uri",
          "locationName": "JobId",
          "shape": "JobId"
        }
      },
      "required": [
        "JobId"
      ],
      "type": "structure"
    },
    "DescribeNodeFromTemplateJobResponse": {
      "members": {
        "CreatedTime": {
          "documentation": "<p>When the job was created.</p>",
          "shape": "CreatedTime"
        },
        "JobId": {
          "documentation": "<p>The job's ID.</p>",
          "shape": "JobId"
        },
        "JobTags": {
          "documentation": "<p>The job's tags.</p>",
          "shape": "JobTagsList"
        },
        "LastUpdatedTime": {
          "documentation": "<p>When the job was updated.</p>",
          "shape": "LastUpdatedTime"
        },
        "NodeDescription": {
          "documentation": "<p>The node's description.</p>",
          "shape": "Description"
        },
        "NodeName": {
          "documentation": "<p>The node's name.</p>",
          "shape": "NodeName"
        },
        "OutputPackageName": {
          "documentation": "<p>The job's output package name.</p>",
          "shape": "NodePackageName"
        },
        "OutputPackageVersion": {
          "documentation": "<p>The job's output package version.</p>",
          "shape": "NodePackageVersion"
        },
        "Status": {
          "documentation": "<p>The job's status.</p>",
          "shape": "NodeFromTemplateJobStatus"
        },
        "StatusMessage": {
          "documentation": "<p>The job's status message.</p>",
          "shape": "NodeFromTemplateJobStatusMessage"
        },
        "TemplateParameters": {
          "documentation": "<p>The job's template parameters.</p>",
          "shape": "TemplateParametersMap"
        },
        "TemplateType": {
          "documentation": "<p>The job's template type.</p>",
          "shape": "TemplateType"
        }
      },
      "required": [
        "CreatedTime",
        "JobId",
        "LastUpdatedTime",
        "NodeName",
        "OutputPackageName",
        "OutputPackageVersion",
        "Status",
        "StatusMessage",
        "TemplateParameters",
        "TemplateType"
      ],
      "type": "structure"
    },
    "DescribeNodeRequest": {
      "members": {
        "NodeId": {
          "documentation": "<p>The node's ID.</p>",
          "location": "uri",
          "locationName": "NodeId",
          "shape": "NodeId"
        },
        "OwnerAccount": {
          "documentation": "<p>The account ID of the node's owner.</p>",
          "location": "querystring",
          "locationName": "OwnerAccount",
          "shape": "PackageOwnerAccount"
        }
      },
      "required": [
        "NodeId"
      ],
      "type": "structure"
    },
    "DescribeNodeResponse": {
      "members": {
        "AssetName": {
          "documentation": "<p>The node's asset name.</p>",
          "shape": "NodeAssetName"
        },
        "Category": {
          "documentation": "<p>The node's category.</p>",
          "shape": "NodeCategory"
        },
        "CreatedTime": {
          "documentation": "<p>When the node was created.</p>",
          "shape": "TimeStamp"
        },
        "Description": {
          "documentation": "<p>The node's description.</p>",
          "shape": "Description"
        },
        "LastUpdatedTime": {
          "documentation": "<p>When the node was updated.</p>",
          "shape": "TimeStamp"
        },
        "Name": {
          "documentation": "<p>The node's name.</p>",
          "shape": "NodeName"
        },
        "NodeId": {
          "documentation": "<p>The node's ID.</p>",
          "shape": "NodeId"
        },
        "NodeInterface": {
          "documentation": "<p>The node's interface.</p>",
          "shape": "NodeInterface"
        },
        "OwnerAccount": {
          "documentation": "<p>The account ID of the node's owner.</p>",
          "shape": "PackageOwnerAccount"
        },
        "PackageArn": {
          "documentation": "<p>The node's ARN.</p>",
          "shape": "NodePackageArn"
        },
        "PackageId": {
          "documentation": "<p>The node's package ID.</p>",
          "shape": "NodePackageId"
        },
        "PackageName": {
          "documentation": "<p>The node's package name.</p>",
          "shape": "NodePackageName"
        },
        "PackageVersion": {
          "documentation": "<p>The node's package version.</p>",
          "shape": "NodePackageVersion"
        },
        "PatchVersion": {
          "documentation": "<p>The node's patch version.</p>",
          "shape": "NodePackagePatchVersion"
        }
      },
      "required": [
        "Category",
        "CreatedTime",
        "Description",
        "LastUpdatedTime",
        "Name",
        "NodeId",
        "NodeInterface",
        "OwnerAccount",
        "PackageId",
        "PackageName",
        "PackageVersion",
        "PatchVersion"
      ],
      "type": "structure"
    },
    "DescribePackageImportJobRequest": {
      "members": {
        "JobId": {
          "documentation": "<p>The job's ID.</p>",
          "location": "uri",
          "locationName": "JobId",
          "shape": "JobId"
        }
      },
      "required": [
        "JobId"
      ],
      "type": "structure"
    },
    "DescribePackageImportJobResponse": {
      "members": {
        "ClientToken": {
          "documentation": "<p>The job's client token.</p>",
          "shape": "ClientToken"
        },
        "CreatedTime": {
          "documentation": "<p>When the job was created.</p>",
          "shape": "CreatedTime"
        },
        "InputConfig": {
          "documentation": "<p>The job's input config.</p>",
          "shape": "PackageImportJobInputConfig"
        },
        "JobId": {
          "documentation": "<p>The job's ID.</p>",
          "shape": "JobId"
        },
        "JobTags": {
          "documentation": "<p>The job's tags.</p>",
          "shape": "JobTagsList"
        },
        "JobType": {
          "documentation": "<p>The job's type.</p>",
          "shape": "PackageImportJobType"
        },
        "LastUpdatedTime": {
          "documentation": "<p>When the job was updated.</p>",
          "shape": "LastUpdatedTime"
        },
        "Output": {
          "documentation": "<p>The job's output.</p>",
          "shape": "PackageImportJobOutput"
        },
        "OutputConfig": {
          "documentation": "<p>The job's output config.</p>",
          "shape": "PackageImportJobOutputConfig"
        },
        "Status": {
          "documentation": "<p>The job's status.</p>",
          "shape": "PackageImportJobStatus"
        },
        "StatusMessage": {
          "documentation": "<p>The job's status message.</p>",
          "shape": "PackageImportJobStatusMessage"
        }
      },
      "required": [
        "CreatedTime",
        "InputConfig",
        "JobId",
        "JobType",
        "LastUpdatedTime",
        "Output",
        "OutputConfig",
        "Status",
        "StatusMessage"
      ],
      "type": "structure"
    },
    "DescribePackageRequest": {
      "members": {
        "PackageId": {
          "documentation": "<p>The package's ID.</p>",
          "location": "uri",
          "locationName": "PackageId",
          "shape": "NodePackageId"
        }
      },
      "required": [
        "PackageId"
      ],
      "type": "structure"
    },
    "DescribePackageResponse": {
      "members": {
        "Arn": {
          "documentation": "<p>The package's ARN.</p>",
          "shape": "NodePackageArn"
        },
        "CreatedTime": {
          "documentation": "<p>When the package was created.</p>",
          "shape": "TimeStamp"
        },
        "PackageId": {
          "documentation": "<p>The package's ID.</p>",
          "shape": "NodePackageId"
        },
        "PackageName": {
          "documentation": "<p>The package's name.</p>",
          "shape": "NodePackageName"
        },
        "ReadAccessPrincipalArns": {
          "documentation": "<p>ARNs of accounts that have read access to the package.</p>",
          "shape": "PrincipalArnsList"
        },
        "StorageLocation": {
          "documentation": "<p>The package's storage location.</p>",
          "shape": "StorageLocation"
        },
        "Tags": {
          "documentation": "<p>The package's tags.</p>",
          "shape": "TagMap"
        },
        "WriteAccessPrincipalArns": {
          "documentation": "<p>ARNs of accounts that have write access to the package.</p>",
          "shape": "PrincipalArnsList"
        }
      },
      "required": [
        "Arn",
        "CreatedTime",
        "PackageId",
        "PackageName",
        "StorageLocation",
        "Tags"
      ],
      "type": "structure"
    },
    "DescribePackageVersionRequest": {
      "members": {
        "OwnerAccount": {
          "documentation": "<p>The version's owner account.</p>",
          "location": "querystring",
          "locationName": "OwnerAccount",
          "shape": "PackageOwnerAccount"
        },
        "PackageId": {
          "documentation": "<p>The version's ID.</p>",
          "location": "uri",
          "locationName": "PackageId",
          "shape": "NodePackageId"
        },
        "PackageVersion": {
          "documentation": "<p>The version's version.</p>",
          "location": "uri",
          "locationName": "PackageVersion",
          "shape": "NodePackageVersion"
        },
        "PatchVersion": {
          "documentation": "<p>The version's patch version.</p>",
          "location": "querystring",
          "locationName": "PatchVersion",
          "shape": "NodePackagePatchVersion"
        }
      },
      "required": [
        "PackageId",
        "PackageVersion"
      ],
      "type": "structure"
    },
    "DescribePackageVersionResponse": {
      "members": {
        "IsLatestPatch": {
          "documentation": "<p>Whether the version is the latest available.</p>",
          "shape": "Boolean"
        },
        "OwnerAccount": {
          "documentation": "<p>The account ID of the version's owner.</p>",
          "shape": "PackageOwnerAccount"
        },
        "PackageArn": {
          "documentation": "<p>The ARN of the package.</p>",
          "shape": "NodePackageArn"
        },
        "PackageId": {
          "documentation": "<p>The version's ID.</p>",
          "shape": "NodePackageId"
        },
        "PackageName": {
          "documentation": "<p>The version's name.</p>",
          "shape": "NodePackageName"
        },
        "PackageVersion": {
          "documentation": "<p>The version's version.</p>",
          "shape": "NodePackageVersion"
        },
        "PatchVersion": {
          "documentation": "<p>The version's patch version.</p>",
          "shape": "NodePackagePatchVersion"
        },
        "RegisteredTime": {
          "documentation": "<p>The version's registered time.</p>",
          "shape": "TimeStamp"
        },
        "Status": {
          "documentation": "<p>The version's status.</p>",
          "shape": "PackageVersionStatus"
        },
        "StatusDescription": {
          "documentation": "<p>The version's status description.</p>",
          "shape": "PackageVersionStatusDescription"
        }
      },
      "required": [
        "IsLatestPatch",
        "PackageId",
        "PackageName",
        "PackageVersion",
        "PatchVersion",
        "Status"
      ],
      "type": "structure"
    },
    "Description": {
      "max": 255,
      "min": 0,
      "pattern": "^.*$",
      "type": "string"
    },
    "DesiredState": {
      "enum": [
        "RUNNING",
        "STOPPED",
        "REMOVED"
      ],
      "type": "string"
    },
    "Device": {
      "documentation": "<p>A device.</p>",
      "members": {
        "Brand": {
          "documentation": "<p>The device's maker.</p>",
          "shape": "DeviceBrand"
        },
        "CreatedTime": {
          "documentation": "<p>When the device was created.</p>",
          "shape": "CreatedTime"
        },
        "CurrentSoftware": {
          "documentation": "<p>A device's current software.</p>",
          "shape": "CurrentSoftware"
        },
        "Description": {
          "documentation": "<p>A description for the device.</p>",
          "shape": "Description"
        },
        "DeviceAggregatedStatus": {
          "documentation": "<p>A device's aggregated status. Including the device's connection status, provisioning status, and lease status.</p>",
          "shape": "DeviceAggregatedStatus"
        },
        "DeviceId": {
          "documentation": "<p>The device's ID.</p>",
          "shape": "DeviceId"
        },
        "LastUpdatedTime": {
          "documentation": "<p>When the device was updated.</p>",
          "shape": "LastUpdatedTime"
        },
        "LatestDeviceJob": {
          "documentation": "<p>A device's latest job. Includes the target image version, and the update job status.</p>",
          "shape": "LatestDeviceJob"
        },
        "LeaseExpirationTime": {
          "documentation": "<p>The device's lease expiration time.</p>",
          "shape": "LeaseExpirationTime"
        },
        "Name": {
          "documentation": "<p>The device's name.</p>",
          "shape": "DeviceName"
        },
        "ProvisioningStatus": {
          "documentation": "<p>The device's provisioning status.</p>",
          "shape": "DeviceStatus"
        },
        "Tags": {
          "documentation": "<p>The device's tags.</p>",
          "shape": "TagMap"
        },
        "Type": {
          "documentation": "<p>The device's type.</p>",
          "shape": "DeviceType"
        }
      },
      "type": "structure"
    },
    "DeviceAggregatedStatus": {
      "enum": [
        "ERROR",
        "AWAITING_PROVISIONING",
        "PENDING",
        "FAILED",
        "DELETING",
        "ONLINE",
        "OFFLINE",
        "LEASE_EXPIRED",
        "UPDATE_NEEDED",
        "REBOOTING"
      ],
      "type": "string"
    },
    "DeviceArn": {
      "max": 255,
      "min": 1,
      "type": "string"
    },
    "DeviceBrand": {
      "enum": [
        "AWS_PANORAMA",
        "LENOVO"
      ],
      "type": "string"
    },
    "DeviceConnectionStatus": {
      "enum": [
        "ONLINE",
        "OFFLINE",
        "AWAITING_CREDENTIALS",
        "NOT_AVAILABLE",
        "ERROR"
      ],
      "type": "string"
    },
    "DeviceId": {
      "max": 255,
      "min": 1,
      "pattern": "^[a-zA-Z0-9\\-\\_]+$",
      "type": "string"
    },
    "DeviceIdList": {
      "max": 1,
      "member": {
        "shape": "DeviceId"
      },
      "min": 1,
      "type": "list"
    },
    "DeviceJob": {
      "documentation": "<p>A job that runs on a device.</p>",
      "members": {
        "CreatedTime": {
          "documentation": "<p>When the job was created.</p>",
          "shape": "CreatedTime"
        },
        "DeviceId": {
          "documentation": "<p>The ID of the target device.</p>",
          "shape": "DeviceId"
        },
        "DeviceName": {
          "documentation": "<p>The name of the target device</p>",
          "shape": "DeviceName"
        },
        "JobId": {
          "documentation": "<p>The job's ID.</p>",
          "shape": "JobId"
        },
        "JobType": {
          "documentation": "<p>The job's type.</p>",
          "shape": "JobType"
        }
      },
      "type": "structure"
    },
    "DeviceJobConfig": {
      "documentation": "<p>A job's configuration.</p>",
      "members": {
        "OTAJobConfig": {
          "documentation": "<p>A configuration for an over-the-air (OTA) upgrade. Required for OTA jobs.</p>",
          "shape": "OTAJobConfig"
        }
      },
      "type": "structure"
    },
    "DeviceJobList": {
      "member": {
        "shape": "DeviceJob"
      },
      "type": "list"
    },
    "DeviceList": {
      "member": {
        "shape": "Device"
      },
      "type": "list"
    },
    "DeviceName": {
      "max": 255,
      "min": 1,
      "pattern": "^[a-zA-Z0-9\\-\\_]+$",
      "type": "string"
    },
    "DeviceReportedStatus": {
      "enum": [
        "STOPPING",
        "STOPPED",
        "STOP_ERROR",
        "REMOVAL_FAILED",
        "REMOVAL_IN_PROGRESS",
        "STARTING",
        "RUNNING",
        "INSTALL_ERROR",
        "LAUNCHED",
        "LAUNCH_ERROR",
        "INSTALL_IN_PROGRESS"
      ],
      "type": "string"
    },
    "DeviceSerialNumber": {
      "pattern": "^[0-9]{1,20}$",
      "type": "string"
    },
    "DeviceStatus": {
      "enum": [
        "AWAITING_PROVISIONING",
        "PENDING",
        "SUCCEEDED",
        "FAILED",
        "ERROR",
        "DELETING"
      ],
      "type": "string"
    },
    "DeviceType": {
      "enum": [
        "PANORAMA_APPLIANCE_DEVELOPER_KIT",
        "PANORAMA_APPLIANCE"
      ],
      "type": "string"
    },
    "Dns": {
      "max": 255,
      "min": 1,
      "pattern": "^.+$",
      "type": "string"
    },
    "DnsList": {
      "member": {
        "shape": "Dns"
      },
      "type": "list"
    },
    "EthernetPayload": {
      "documentation": "<p>A device's network configuration.</p>",
      "members": {
        "ConnectionType": {
          "documentation": "<p>How the device gets an IP address.</p>",
          "shape": "ConnectionType"
        },
        "StaticIpConnectionInfo": {
          "documentation": "<p>Network configuration for a static IP connection.</p>",
          "shape": "StaticIpConnectionInfo"
        }
      },
      "required": [
        "ConnectionType"
      ],
      "type": "structure"
    },
    "EthernetStatus": {
      "documentation": "<p>A device's Ethernet status.</p>",
      "members": {
        "ConnectionStatus": {
          "documentation": "<p>The device's connection status.</p>",
          "shape": "NetworkConnectionStatus"
        },
        "HwAddress": {
          "documentation": "<p>The device's physical address.</p>",
          "shape": "HwAddress"
        },
        "IpAddress": {
          "documentation": "<p>The device's IP address.</p>",
          "shape": "IpAddress"
        }
      },
      "type": "structure"
    },
    "HwAddress": {
      "max": 255,
      "min": 1,
      "type": "string"
    },
    "ImageVersion": {
      "max": 255,
      "min": 1,
      "pattern": "^.+$",
      "type": "string"
    },
    "InputPortList": {
      "member": {
        "shape": "NodeInputPort"
      },
      "type": "list"
    },
    "InternalServerException": {
      "documentation": "<p>An internal error occurred.</p>",
      "error": {
        "httpStatusCode": 500
      },
      "exception": true,
      "fault": true,
      "members": {
        "Message": {
          "shape": "String"
        },
        "RetryAfterSeconds": {
          "documentation": "<p>The number of seconds a client should wait before retrying the call.</p>",
          "location": "header",
          "locationName": "Retry-After",
          "shape": "RetryAfterSeconds"
        }
      },
      "required": [
        "Message"
      ],
      "type": "structure"
    },
    "IotThingName": {
      "max": 255,
      "min": 1,
      "type": "string"
    },
    "IpAddress": {
      "max": 255,
      "min": 1,
      "pattern": "^((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d))(:(6553[0-5]|655[0-2]\\d|65[0-4]\\d{2}|6[0-4]\\d{3}|[1-5]\\d{4}|[1-9]\\d{0,3}))?$",
      "type": "string"
    },
    "IpAddressOrServerName": {
      "max": 255,
      "min": 1,
      "pattern": "(^([a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,}$)|(^((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d))(:(6553[0-5]|655[0-2]\\d|65[0-4]\\d{2}|6[0-4]\\d{3}|[1-5]\\d{4}|[1-9]\\d{0,3}))?$)",
      "type": "string"
    },
    "Job": {
      "documentation": "<p>A job for a device.</p>",
      "members": {
        "DeviceId": {
          "documentation": "<p>The target device's ID.</p>",
          "shape": "DeviceId"
        },
        "JobId": {
          "documentation": "<p>The job's ID.</p>",
          "shape": "JobId"
        }
      },
      "type": "structure"
    },
    "JobId": {
      "max": 255,
      "min": 1,
      "pattern": "^[a-zA-Z0-9\\-\\_]+$",
      "type": "string"
    },
    "JobList": {
      "member": {
        "shape": "Job"
      },
      "type": "list"
    },
    "JobResourceTags": {
      "documentation": "<p>Tags for a job.</p>",
      "members": {
        "ResourceType": {
          "documentation": "<p>The job's type.</p>",
          "shape": "JobResourceType"
        },
        "Tags": {
          "documentation": "<p>The job's tags.</p>",
          "shape": "TagMap"
        }
      },
      "required": [
        "ResourceType",
        "Tags"
      ],
      "type": "structure"
    },
    "JobResourceType": {
      "enum": [
        "PACKAGE"
      ],
      "type": "string"
    },
    "JobTagsList": {
      "member": {
        "shape": "JobResourceTags"
      },
      "type": "list"
    },
    "JobType": {
      "enum": [
        "OTA",
        "REBOOT"
      ],
      "type": "string"
    },
    "LastUpdatedTime": {
      "type": "timestamp"
    },
    "LatestAlternateSoftware": {
      "max": 255,
      "min": 1,
      "type": "string"
    },
    "LatestDeviceJob": {
      "documentation": "<p>Returns information about the latest device job.</p>",
      "members": {
        "ImageVersion": {
          "documentation": "<p>The target version of the device software.</p>",
          "shape": "ImageVersion"
        },
        "JobType": {
          "documentation": "<p>The job's type.</p>",
          "shape": "JobType"
        },
        "Status": {
          "documentation": "<p>Status of the latest device job.</p>",
          "shape": "UpdateProgress"
        }
      },
      "type": "structure"
    },
    "LatestSoftware": {
      "max": 255,
      "min": 1,
      "type": "string"
    },
    "LeaseExpirationTime": {
      "type": "timestamp"
    },
    "ListApplicationInstanceDependenciesRequest": {
      "members": {
        "ApplicationInstanceId": {
          "documentation": "<p>The application instance's ID.</p>",
          "location": "uri",
          "locationName": "ApplicationInstanceId",
          "shape": "ApplicationInstanceId"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of application instance dependencies to return in one page of results.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxSize25"
        },
        "NextToken": {
          "documentation": "<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        }
      },
      "required": [
        "ApplicationInstanceId"
      ],
      "type": "structure"
    },
    "ListApplicationInstanceDependenciesResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>A pagination token that's included if more results are available.</p>",
          "shape": "NextToken"
        },
        "PackageObjects": {
          "documentation": "<p>A list of package objects.</p>",
          "shape": "PackageObjects"
        }
      },
      "type": "structure"
    },
    "ListApplicationInstanceNodeInstancesRequest": {
      "members": {
        "ApplicationInstanceId": {
          "documentation": "<p>The node instances' application instance ID.</p>",
          "location": "uri",
          "locationName": "ApplicationInstanceId",
          "shape": "ApplicationInstanceId"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of node instances to return in one page of results.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxSize25"
        },
        "NextToken": {
          "documentation": "<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        }
      },
      "required": [
        "ApplicationInstanceId"
      ],
      "type": "structure"
    },
    "ListApplicationInstanceNodeInstancesResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>A pagination token that's included if more results are available.</p>",
          "shape": "NextToken"
        },
        "NodeInstances": {
          "documentation": "<p>A list of node instances.</p>",
          "shape": "NodeInstances"
        }
      },
      "type": "structure"
    },
    "ListApplicationInstancesRequest": {
      "members": {
        "DeviceId": {
          "documentation": "<p>The application instances' device ID.</p>",
          "location": "querystring",
          "locationName": "deviceId",
          "shape": "DeviceId"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of application instances to return in one page of results.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxSize25"
        },
        "NextToken": {
          "documentation": "<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        },
        "StatusFilter": {
          "documentation": "<p>Only include instances with a specific status.</p>",
          "location": "querystring",
          "locationName": "statusFilter",
          "shape": "StatusFilter"
        }
      },
      "type": "structure"
    },
    "ListApplicationInstancesResponse": {
      "members": {
        "ApplicationInstances": {
          "documentation": "<p>A list of application instances.</p>",
          "shape": "ApplicationInstances"
        },
        "NextToken": {
          "documentation": "<p>A pagination token that's included if more results are available.</p>",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListDevicesJobsRequest": {
      "members": {
        "DeviceId": {
          "documentation": "<p>Filter results by the job's target device ID.</p>",
          "location": "querystring",
          "locationName": "DeviceId",
          "shape": "DeviceId"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of device jobs to return in one page of results.</p>",
          "location": "querystring",
          "locationName": "MaxResults",
          "shape": "MaxSize25"
        },
        "NextToken": {
          "documentation": "<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location": "querystring",
          "locationName": "NextToken",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListDevicesJobsResponse": {
      "members": {
        "DeviceJobs": {
          "documentation": "<p>A list of jobs.</p>",
          "shape": "DeviceJobList"
        },
        "NextToken": {
          "documentation": "<p>A pagination token that's included if more results are available.</p>",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListDevicesRequest": {
      "members": {
        "DeviceAggregatedStatusFilter": {
          "documentation": "<p>Filter based on a device's status.</p>",
          "location": "querystring",
          "locationName": "DeviceAggregatedStatusFilter",
          "shape": "DeviceAggregatedStatus"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of devices to return in one page of results.</p>",
          "location": "querystring",
          "locationName": "MaxResults",
          "shape": "MaxSize25"
        },
        "NameFilter": {
          "documentation": "<p>Filter based on device's name. Prefixes supported.</p>",
          "location": "querystring",
          "locationName": "NameFilter",
          "shape": "NameFilter"
        },
        "NextToken": {
          "documentation": "<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location": "querystring",
          "locationName": "NextToken",
          "shape": "NextToken"
        },
        "SortBy": {
          "documentation": "<p>The target column to be sorted on. Default column sort is CREATED_TIME.</p>",
          "location": "querystring",
          "locationName": "SortBy",
          "shape": "ListDevicesSortBy"
        },
        "SortOrder": {
          "documentation": "<p>The sorting order for the returned list. SortOrder is DESCENDING by default based on CREATED_TIME. Otherwise, SortOrder is ASCENDING.</p>",
          "location": "querystring",
          "locationName": "SortOrder",
          "shape": "SortOrder"
        }
      },
      "type": "structure"
    },
    "ListDevicesResponse": {
      "members": {
        "Devices": {
          "documentation": "<p>A list of devices.</p>",
          "shape": "DeviceList"
        },
        "NextToken": {
          "documentation": "<p>A pagination token that's included if more results are available.</p>",
          "shape": "NextToken"
        }
      },
      "required": [
        "Devices"
      ],
      "type": "structure"
    },
    "ListDevicesSortBy": {
      "enum": [
        "DEVICE_ID",
        "CREATED_TIME",
        "NAME",
        "DEVICE_AGGREGATED_STATUS"
      ],
      "type": "string"
    },
    "ListNodeFromTemplateJobsRequest": {
      "members": {
        "MaxResults": {
          "documentation": "<p>The maximum number of node from template jobs to return in one page of results.</p>",
          "location": "querystring",
          "locationName": "MaxResults",
          "shape": "MaxSize25"
        },
        "NextToken": {
          "documentation": "<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location": "querystring",
          "locationName": "NextToken",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListNodeFromTemplateJobsResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>A pagination token that's included if more results are available.</p>",
          "shape": "NextToken"
        },
        "NodeFromTemplateJobs": {
          "documentation": "<p>A list of jobs.</p>",
          "shape": "NodeFromTemplateJobList"
        }
      },
      "required": [
        "NodeFromTemplateJobs"
      ],
      "type": "structure"
    },
    "ListNodesRequest": {
      "members": {
        "Category": {
          "documentation": "<p>Search for nodes by category.</p>",
          "location": "querystring",
          "locationName": "category",
          "shape": "NodeCategory"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of nodes to return in one page of results.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxSize25"
        },
        "NextToken": {
          "documentation": "<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "Token"
        },
        "OwnerAccount": {
          "documentation": "<p>Search for nodes by the account ID of the nodes' owner.</p>",
          "location": "querystring",
          "locationName": "ownerAccount",
          "shape": "PackageOwnerAccount"
        },
        "PackageName": {
          "documentation": "<p>Search for nodes by name.</p>",
          "location": "querystring",
          "locationName": "packageName",
          "shape": "NodePackageName"
        },
        "PackageVersion": {
          "documentation": "<p>Search for nodes by version.</p>",
          "location": "querystring",
          "locationName": "packageVersion",
          "shape": "NodePackageVersion"
        },
        "PatchVersion": {
          "documentation": "<p>Search for nodes by patch version.</p>",
          "location": "querystring",
          "locationName": "patchVersion",
          "shape": "NodePackagePatchVersion"
        }
      },
      "type": "structure"
    },
    "ListNodesResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>A pagination token that's included if more results are available.</p>",
          "shape": "Token"
        },
        "Nodes": {
          "documentation": "<p>A list of nodes.</p>",
          "shape": "NodesList"
        }
      },
      "type": "structure"
    },
    "ListPackageImportJobsRequest": {
      "members": {
        "MaxResults": {
          "documentation": "<p>The maximum number of package import jobs to return in one page of results.</p>",
          "location": "querystring",
          "locationName": "MaxResults",
          "shape": "MaxSize25"
        },
        "NextToken": {
          "documentation": "<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location": "querystring",
          "locationName": "NextToken",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListPackageImportJobsResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>A pagination token that's included if more results are available.</p>",
          "shape": "NextToken"
        },
        "PackageImportJobs": {
          "documentation": "<p>A list of package import jobs.</p>",
          "shape": "PackageImportJobList"
        }
      },
      "required": [
        "PackageImportJobs"
      ],
      "type": "structure"
    },
    "ListPackagesRequest": {
      "members": {
        "MaxResults": {
          "documentation": "<p>The maximum number of packages to return in one page of results.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxSize25"
        },
        "NextToken": {
          "documentation": "<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "Token"
        }
      },
      "type": "structure"
    },
    "ListPackagesResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>A pagination token that's included if more results are available.</p>",
          "shape": "NextToken"
        },
        "Packages": {
          "documentation": "<p>A list of packages.</p>",
          "shape": "PackageList"
        }
      },
      "type": "structure"
    },
    "ListTagsForResourceRequest": {
      "members": {
        "ResourceArn": {
          "documentation": "<p>The resource's ARN.</p>",
          "location": "uri",
          "locationName": "ResourceArn",
          "shape": "ResourceArn"
        }
      },
      "required": [
        "ResourceArn"
      ],
      "type": "structure"
    },
    "ListTagsForResourceResponse": {
      "members": {
        "Tags": {
          "documentation": "<p>A list of tags.</p>",
          "shape": "TagMap"
        }
      },
      "type": "structure"
    },
    "ManifestOverridesPayload": {
      "documentation": "<p>Parameter overrides for an application instance. This is a JSON document that has a single key (<code>PayloadData</code>) where the value is an escaped string representation of the overrides document.</p>",
      "members": {
        "PayloadData": {
          "documentation": "<p>The overrides document.</p>",
          "shape": "ManifestOverridesPayloadData"
        }
      },
      "type": "structure",
      "union": true
    },
    "ManifestOverridesPayloadData": {
      "max": 51200,
      "min": 0,
      "pattern": "^.*$",
      "type": "string"
    },
    "ManifestPayload": {
      "documentation": "<p>A application verion's manifest file. This is a JSON document that has a single key (<code>PayloadData</code>) where the value is an escaped string representation of the application manifest (<code>graph.json</code>). This file is located in the <code>graphs</code> folder in your application source.</p>",
      "members": {
        "PayloadData": {
          "documentation": "<p>The application manifest.</p>",
          "shape": "ManifestPayloadData"
        }
      },
      "type": "structure",
      "union": true
    },
    "ManifestPayloadData": {
      "max": 51200,
      "min": 1,
      "pattern": "^.+$",
      "type": "string"
    },
    "MarkLatestPatch": {
      "type": "boolean"
    },
    "Mask": {
      "max": 255,
      "min": 1,
      "pattern": "^.+$",
      "type": "string"
    },
    "MaxConnections": {
      "type": "integer"
    },
    "MaxSize25": {
      "max": 25,
      "min": 0,
      "type": "integer"
    },
    "NameFilter": {
      "type": "string"
    },
    "NetworkConnectionStatus": {
      "enum": [
        "CONNECTED",
        "NOT_CONNECTED",
        "CONNECTING"
      ],
      "type": "string"
    },
    "NetworkPayload": {
      "documentation": "<p>The network configuration for a device.</p>",
      "members": {
        "Ethernet0": {
          "documentation": "<p>Settings for Ethernet port 0.</p>",
          "shape": "EthernetPayload"
        },
        "Ethernet1": {
          "documentation": "<p>Settings for Ethernet port 1.</p>",
          "shape": "EthernetPayload"
        },
        "Ntp": {
          "documentation": "<p>Network time protocol (NTP) server settings.</p>",
          "shape": "NtpPayload"
        }
      },
      "type": "structure"
    },
    "NetworkStatus": {
      "documentation": "<p>The network status of a device.</p>",
      "members": {
        "Ethernet0Status": {
          "documentation": "<p>The status of Ethernet port 0.</p>",
          "shape": "EthernetStatus"
        },
        "Ethernet1Status": {
          "documentation": "<p>The status of Ethernet port 1.</p>",
          "shape": "EthernetStatus"
        },
        "LastUpdatedTime": {
          "documentation": "<p>When the network status changed.</p>",
          "shape": "LastUpdatedTime"
        },
        "NtpStatus": {
          "documentation": "<p>Details about a network time protocol (NTP) server connection.</p>",
          "shape": "NtpStatus"
        }
      },
      "type": "structure"
    },
    "NextToken": {
      "max": 4096,
      "min": 1,
      "pattern": "^.+$",
      "type": "string"
    },
    "Node": {
      "documentation": "<p>An application node that represents a camera stream, a model, code, or output.</p>",
      "members": {
        "Category": {
          "documentation": "<p>The node's category.</p>",
          "shape": "NodeCategory"
        },
        "CreatedTime": {
          "documentation": "<p>When the node was created.</p>",
          "shape": "TimeStamp"
        },
        "Description": {
          "documentation": "<p>The node's description.</p>",
          "shape": "Description"
        },
        "Name": {
          "documentation": "<p>The node's name.</p>",
          "shape": "NodeName"
        },
        "NodeId": {
          "documentation": "<p>The node's ID.</p>",
          "shape": "NodeId"
        },
        "OwnerAccount": {
          "documentation": "<p>The account ID of the node's owner.</p>",
          "shape": "PackageOwnerAccount"
        },
        "PackageArn": {
          "documentation": "<p>The node's ARN.</p>",
          "shape": "NodePackageArn"
        },
        "PackageId": {
          "documentation": "<p>The node's package ID.</p>",
          "shape": "NodePackageId"
        },
        "PackageName": {
          "documentation": "<p>The node's package name.</p>",
          "shape": "NodePackageName"
        },
        "PackageVersion": {
          "documentation": "<p>The node's package version.</p>",
          "shape": "NodePackageVersion"
        },
        "PatchVersion": {
          "documentation": "<p>The node's patch version.</p>",
          "shape": "NodePackagePatchVersion"
        }
      },
      "required": [
        "Category",
        "CreatedTime",
        "Name",
        "NodeId",
        "PackageId",
        "PackageName",
        "PackageVersion",
        "PatchVersion"
      ],
      "type": "structure"
    },
    "NodeAssetName": {
      "max": 255,
      "min": 1,
      "pattern": "^[a-zA-Z0-9\\-\\_]+$",
      "type": "string"
    },
    "NodeCategory": {
      "enum": [
        "BUSINESS_LOGIC",
        "ML_MODEL",
        "MEDIA_SOURCE",
        "MEDIA_SINK"
      ],
      "type": "string"
    },
    "NodeFromTemplateJob": {
      "documentation": "<p>A job to create a camera stream node.</p>",
      "members": {
        "CreatedTime": {
          "documentation": "<p>When the job was created.</p>",
          "shape": "CreatedTime"
        },
        "JobId": {
          "documentation": "<p>The job's ID.</p>",
          "shape": "JobId"
        },
        "NodeName": {
          "documentation": "<p>The node's name.</p>",
          "shape": "NodeName"
        },
        "Status": {
          "documentation": "<p>The job's status.</p>",
          "shape": "NodeFromTemplateJobStatus"
        },
        "StatusMessage": {
          "documentation": "<p>The job's status message.</p>",
          "shape": "NodeFromTemplateJobStatusMessage"
        },
        "TemplateType": {
          "documentation": "<p>The job's template type.</p>",
          "shape": "TemplateType"
        }
      },
      "type": "structure"
    },
    "NodeFromTemplateJobList": {
      "member": {
        "shape": "NodeFromTemplateJob"
      },
      "type": "list"
    },
    "NodeFromTemplateJobStatus": {
      "enum": [
        "PENDING",
        "SUCCEEDED",
        "FAILED"
      ],
      "type": "string"
    },
    "NodeFromTemplateJobStatusMessage": {
      "type": "string"
    },
    "NodeId": {
      "max": 255,
      "min": 1,
      "pattern": "^[a-zA-Z0-9\\-\\_\\.]+$",
      "type": "string"
    },
    "NodeInputPort": {
      "documentation": "<p>A node input port.</p>",
      "members": {
        "DefaultValue": {
          "documentation": "<p>The input port's default value.</p>",
          "shape": "PortDefaultValue"
        },
        "Description": {
          "documentation": "<p>The input port's description.</p>",
          "shape": "Description"
        },
        "MaxConnections": {
          "documentation": "<p>The input port's max connections.</p>",
          "shape": "MaxConnections"
        },
        "Name": {
          "documentation": "<p>The input port's name.</p>",
          "shape": "PortName"
        },
        "Type": {
          "documentation": "<p>The input port's type.</p>",
          "shape": "PortType"
        }
      },
      "type": "structure"
    },
    "NodeInstance": {
      "documentation": "<p>A node instance.</p>",
      "members": {
        "CurrentStatus": {
          "documentation": "<p>The instance's current status.</p>",
          "shape": "NodeInstanceStatus"
        },
        "NodeId": {
          "documentation": "<p>The node's ID.</p>",
          "shape": "NodeId"
        },
        "NodeInstanceId": {
          "documentation": "<p>The instance's ID.</p>",
          "shape": "NodeInstanceId"
        },
        "NodeName": {
          "documentation": "<p>The instance's name.</p>",
          "shape": "NodeName"
        },
        "PackageName": {
          "documentation": "<p>The instance's package name.</p>",
          "shape": "NodePackageName"
        },
        "PackagePatchVersion": {
          "documentation": "<p>The instance's package patch version.</p>",
          "shape": "NodePackagePatchVersion"
        },
        "PackageVersion": {
          "documentation": "<p>The instance's package version.</p>",
          "shape": "NodePackageVersion"
        }
      },
      "required": [
        "CurrentStatus",
        "NodeInstanceId"
      ],
      "type": "structure"
    },
    "NodeInstanceId": {
      "max": 128,
      "min": 1,
      "pattern": "^[a-zA-Z0-9\\-\\_]+$",
      "type": "string"
    },
    "NodeInstanceStatus": {
      "enum": [
        "RUNNING",
        "ERROR",
        "NOT_AVAILABLE",
        "PAUSED"
      ],
      "type": "string"
    },
    "NodeInstances": {
      "member": {
        "shape": "NodeInstance"
      },
      "type": "list"
    },
    "NodeInterface": {
      "documentation": "<p>A node interface.</p>",
      "members": {
        "Inputs": {
          "documentation": "<p>The node interface's inputs.</p>",
          "shape": "InputPortList"
        },
        "Outputs": {
          "documentation": "<p>The node interface's outputs.</p>",
          "shape": "OutputPortList"
        }
      },
      "required": [
        "Inputs",
        "Outputs"
      ],
      "type": "structure"
    },
    "NodeName": {
      "max": 128,
      "min": 1,
      "pattern": "^[a-zA-Z0-9\\-\\_]+$",
      "type": "string"
    },
    "NodeOutputPort": {
      "documentation": "<p>A node output port.</p>",
      "members": {
        "Description": {
          "documentation": "<p>The output port's description.</p>",
          "shape": "Description"
        },
        "Name": {
          "documentation": "<p>The output port's name.</p>",
          "shape": "PortName"
        },
        "Type": {
          "documentation": "<p>The output port's type.</p>",
          "shape": "PortType"
        }
      },
      "type": "structure"
    },
    "NodePackageArn": {
      "max": 255,
      "min": 1,
      "type": "string"
    },
    "NodePackageId": {
      "max": 255,
      "min": 1,
      "pattern": "^[a-zA-Z0-9\\-\\_\\/]+$",
      "type": "string"
    },
    "NodePackageName": {
      "max": 128,
      "min": 1,
      "pattern": "^[a-zA-Z0-9\\-\\_]+$",
      "type": "string"
    },
    "NodePackagePatchVersion": {
      "max": 255,
      "min": 1,
      "pattern": "^[a-z0-9]+$",
      "type": "string"
    },
    "NodePackageVersion": {
      "max": 255,
      "min": 1,
      "pattern": "^([0-9]+)\\.([0-9]+)$",
      "type": "string"
    },
    "NodeSignal": {
      "documentation": "<p>A signal to a camera node to start or stop processing video.</p>",
      "members": {
        "NodeInstanceId": {
          "documentation": "<p>The camera node's name, from the application manifest.</p>",
          "shape": "NodeInstanceId"
        },
        "Signal": {
          "documentation": "<p>The signal value.</p>",
          "shape": "NodeSignalValue"
        }
      },
      "required": [
        "NodeInstanceId",
        "Signal"
      ],
      "type": "structure"
    },
    "NodeSignalList": {
      "member": {
        "shape": "NodeSignal"
      },
      "min": 1,
      "type": "list"
    },
    "NodeSignalValue": {
      "enum": [
        "PAUSE",
        "RESUME"
      ],
      "type": "string"
    },
    "NodesList": {
      "member": {
        "shape": "Node"
      },
      "type": "list"
    },
    "NtpPayload": {
      "documentation": "<p>Network time protocol (NTP) server settings. Use this option to connect to local NTP servers instead of <code>pool.ntp.org</code>.</p>",
      "members": {
        "NtpServers": {
          "documentation": "<p>NTP servers to use, in order of preference.</p>",
          "shape": "NtpServerList"
        }
      },
      "required": [
        "NtpServers"
      ],
      "type": "structure"
    },
    "NtpServerList": {
      "max": 5,
      "member": {
        "shape": "IpAddressOrServerName"
      },
      "min": 0,
      "type": "list"
    },
    "NtpServerName": {
      "max": 255,
      "min": 1,
      "type": "string"
    },
    "NtpStatus": {
      "documentation": "<p>Details about an NTP server connection.</p>",
      "members": {
        "ConnectionStatus": {
          "documentation": "<p>The connection's status.</p>",
          "shape": "NetworkConnectionStatus"
        },
        "IpAddress": {
          "documentation": "<p>The IP address of the server.</p>",
          "shape": "IpAddress"
        },
        "NtpServerName": {
          "documentation": "<p>The domain name of the server.</p>",
          "shape": "NtpServerName"
        }
      },
      "type": "structure"
    },
    "OTAJobConfig": {
      "documentation": "<p>An over-the-air update (OTA) job configuration.</p>",
      "members": {
        "ImageVersion": {
          "documentation": "<p>The target version of the device software.</p>",
          "shape": "ImageVersion"
        }
      },
      "required": [
        "ImageVersion"
      ],
      "type": "structure"
    },
    "Object": {
      "type": "string"
    },
    "ObjectKey": {
      "max": 255,
      "min": 1,
      "pattern": "^.+$",
      "type": "string"
    },
    "OutPutS3Location": {
      "documentation": "<p>The location of an output object in Amazon S3.</p>",
      "members": {
        "BucketName": {
          "documentation": "<p>The object's bucket.</p>",
          "shape": "BucketName"
        },
        "ObjectKey": {
          "documentation": "<p>The object's key.</p>",
          "shape": "ObjectKey"
        }
      },
      "required": [
        "BucketName",
        "ObjectKey"
      ],
      "type": "structure"
    },
    "OutputPortList": {
      "member": {
        "shape": "NodeOutputPort"
      },
      "type": "list"
    },
    "PackageImportJob": {
      "documentation": "<p>A job to import a package version.</p>",
      "members": {
        "CreatedTime": {
          "documentation": "<p>When the job was created.</p>",
          "shape": "CreatedTime"
        },
        "JobId": {
          "documentation": "<p>The job's ID.</p>",
          "shape": "JobId"
        },
        "JobType": {
          "documentation": "<p>The job's type.</p>",
          "shape": "PackageImportJobType"
        },
        "LastUpdatedTime": {
          "documentation": "<p>When the job was updated.</p>",
          "shape": "LastUpdatedTime"
        },
        "Status": {
          "documentation": "<p>The job's status.</p>",
          "shape": "PackageImportJobStatus"
        },
        "StatusMessage": {
          "documentation": "<p>The job's status message.</p>",
          "shape": "PackageImportJobStatusMessage"
        }
      },
      "type": "structure"
    },
    "PackageImportJobInputConfig": {
      "documentation": "<p>A configuration for a package import job.</p>",
      "members": {
        "PackageVersionInputConfig": {
          "documentation": "<p>The package version's input configuration.</p>",
          "shape": "PackageVersionInputConfig"
        }
      },
      "type": "structure"
    },
    "PackageImportJobList": {
      "member": {
        "shape": "PackageImportJob"
      },
      "type": "list"
    },
    "PackageImportJobOutput": {
      "documentation": "<p>Results of a package import job.</p>",
      "members": {
        "OutputS3Location": {
          "documentation": "<p>The package's output location.</p>",
          "shape": "OutPutS3Location"
        },
        "PackageId": {
          "documentation": "<p>The package's ID.</p>",
          "shape": "NodePackageId"
        },
        "PackageVersion": {
          "documentation": "<p>The package's version.</p>",
          "shape": "NodePackageVersion"
        },
        "PatchVersion": {
          "documentation": "<p>The package's patch version.</p>",
          "shape": "NodePackagePatchVersion"
        }
      },
      "required": [
        "OutputS3Location",
        "PackageId",
        "PackageVersion",
        "PatchVersion"
      ],
      "type": "structure"
    },
    "PackageImportJobOutputConfig": {
      "documentation": "<p>An output configuration for a package import job.</p>",
      "members": {
        "PackageVersionOutputConfig": {
          "documentation": "<p>The package version's output configuration.</p>",
          "shape": "PackageVersionOutputConfig"
        }
      },
      "type": "structure"
    },
    "PackageImportJobStatus": {
      "enum": [
        "PENDING",
        "SUCCEEDED",
        "FAILED"
      ],
      "type": "string"
    },
    "PackageImportJobStatusMessage": {
      "type": "string"
    },
    "PackageImportJobType": {
      "enum": [
        "NODE_PACKAGE_VERSION",
        "MARKETPLACE_NODE_PACKAGE_VERSION"
      ],
      "type": "string"
    },
    "PackageList": {
      "member": {
        "shape": "PackageListItem"
      },
      "type": "list"
    },
    "PackageListItem": {
      "documentation": "<p>A package summary.</p>",
      "members": {
        "Arn": {
          "documentation": "<p>The package's ARN.</p>",
          "shape": "NodePackageArn"
        },
        "CreatedTime": {
          "documentation": "<p>When the package was created.</p>",
          "shape": "TimeStamp"
        },
        "PackageId": {
          "documentation": "<p>The package's ID.</p>",
          "shape": "NodePackageId"
        },
        "PackageName": {
          "documentation": "<p>The package's name.</p>",
          "shape": "NodePackageName"
        },
        "Tags": {
          "documentation": "<p>The package's tags.</p>",
          "shape": "TagMap"
        }
      },
      "type": "structure"
    },
    "PackageObject": {
      "documentation": "<p>A package object.</p>",
      "members": {
        "Name": {
          "documentation": "<p>The object's name.</p>",
          "shape": "NodePackageName"
        },
        "PackageVersion": {
          "documentation": "<p>The object's package version.</p>",
          "shape": "NodePackageVersion"
        },
        "PatchVersion": {
          "documentation": "<p>The object's patch version.</p>",
          "shape": "NodePackagePatchVersion"
        }
      },
      "required": [
        "Name",
        "PackageVersion",
        "PatchVersion"
      ],
      "type": "structure"
    },
    "PackageObjects": {
      "member": {
        "shape": "PackageObject"
      },
      "type": "list"
    },
    "PackageOwnerAccount": {
      "max": 12,
      "min": 1,
      "pattern": "^[0-9a-z\\_]+$",
      "type": "string"
    },
    "PackageVersionInputConfig": {
      "documentation": "<p>A package version input configuration.</p>",
      "members": {
        "S3Location": {
          "documentation": "<p>A location in Amazon S3.</p>",
          "shape": "S3Location"
        }
      },
      "required": [
        "S3Location"
      ],
      "type": "structure"
    },
    "PackageVersionOutputConfig": {
      "documentation": "<p>A package version output configuration.</p>",
      "members": {
        "MarkLatest": {
          "documentation": "<p>Indicates that the version is recommended for all users.</p>",
          "shape": "MarkLatestPatch"
        },
        "PackageName": {
          "documentation": "<p>The output's package name.</p>",
          "shape": "NodePackageName"
        },
        "PackageVersion": {
          "documentation": "<p>The output's package version.</p>",
          "shape": "NodePackageVersion"
        }
      },
      "required": [
        "PackageName",
        "PackageVersion"
      ],
      "type": "structure"
    },
    "PackageVersionStatus": {
      "enum": [
        "REGISTER_PENDING",
        "REGISTER_COMPLETED",
        "FAILED",
        "DELETING"
      ],
      "type": "string"
    },
    "PackageVersionStatusDescription": {
      "max": 255,
      "min": 1,
      "type": "string"
    },
    "PortDefaultValue": {
      "max": 255,
      "min": 1,
      "type": "string"
    },
    "PortName": {
      "max": 50,
      "min": 1,
      "pattern": "^[a-zA-Z0-9\\_]+$",
      "type": "string"
    },
    "PortType": {
      "enum": [
        "BOOLEAN",
        "STRING",
        "INT32",
        "FLOAT32",
        "MEDIA"
      ],
      "type": "string"
    },
    "PrincipalArn": {
      "max": 255,
      "min": 1,
      "pattern": "^arn:[a-z0-9][-.a-z0-9]{0,62}:iam::[0-9]{12}:[a-zA-Z0-9+=,.@\\-_/]+$",
      "type": "string"
    },
    "PrincipalArnsList": {
      "member": {
        "shape": "PrincipalArn"
      },
      "type": "list"
    },
    "ProvisionDeviceRequest": {
      "members": {
        "Description": {
          "documentation": "<p>A description for the device.</p>",
          "shape": "Description"
        },
        "Name": {
          "documentation": "<p>A name for the device.</p>",
          "shape": "DeviceName"
        },
        "NetworkingConfiguration": {
          "documentation": "<p>A networking configuration for the device.</p>",
          "shape": "NetworkPayload"
        },
        "Tags": {
          "documentation": "<p>Tags for the device.</p>",
          "shape": "TagMap"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "ProvisionDeviceResponse": {
      "members": {
        "Arn": {
          "documentation": "<p>The device's ARN.</p>",
          "shape": "DeviceArn"
        },
        "Certificates": {
          "documentation": "<p>The device's configuration bundle.</p>",
          "shape": "Certificates"
        },
        "DeviceId": {
          "documentation": "<p>The device's ID.</p>",
          "shape": "DeviceId"
        },
        "IotThingName": {
          "documentation": "<p>The device's IoT thing name.</p>",
          "shape": "IotThingName"
        },
        "Status": {
          "documentation": "<p>The device's status.</p>",
          "shape": "DeviceStatus"
        }
      },
      "required": [
        "Arn",
        "Status"
      ],
      "type": "structure"
    },
    "Region": {
      "max": 255,
      "min": 1,
      "pattern": "^.+$",
      "type": "string"
    },
    "RegisterPackageVersionRequest": {
      "members": {
        "MarkLatest": {
          "documentation": "<p>Whether to mark the new version as the latest version.</p>",
          "shape": "MarkLatestPatch"
        },
        "OwnerAccount": {
          "documentation": "<p>An owner account.</p>",
          "shape": "PackageOwnerAccount"
        },
        "PackageId": {
          "documentation": "<p>A package ID.</p>",
          "location": "uri",
          "locationName": "PackageId",
          "shape": "NodePackageId"
        },
        "PackageVersion": {
          "documentation": "<p>A package version.</p>",
          "location": "uri",
          "locationName": "PackageVersion",
          "shape": "NodePackageVersion"
        },
        "PatchVersion": {
          "documentation": "<p>A patch version.</p>",
          "location": "uri",
          "locationName": "PatchVersion",
          "shape": "NodePackagePatchVersion"
        }
      },
      "required": [
        "PackageId",
        "PackageVersion",
        "PatchVersion"
      ],
      "type": "structure"
    },
    "RegisterPackageVersionResponse": {
      "members": {},
      "type": "structure"
    },
    "RemoveApplicationInstanceRequest": {
      "members": {
        "ApplicationInstanceId": {
          "documentation": "<p>An application instance ID.</p>",
          "location": "uri",
          "locationName": "ApplicationInstanceId",
          "shape": "ApplicationInstanceId"
        }
      },
      "required": [
        "ApplicationInstanceId"
      ],
      "type": "structure"
    },
    "RemoveApplicationInstanceResponse": {
      "members": {},
      "type": "structure"
    },
    "ReportedRuntimeContextState": {
      "documentation": "<p>An application instance's state.</p>",
      "members": {
        "DesiredState": {
          "documentation": "<p>The application's desired state.</p>",
          "shape": "DesiredState"
        },
        "DeviceReportedStatus": {
          "documentation": "<p>The application's reported status.</p>",
          "shape": "DeviceReportedStatus"
        },
        "DeviceReportedTime": {
          "documentation": "<p>When the device reported the application's state.</p>",
          "shape": "TimeStamp"
        },
        "RuntimeContextName": {
          "documentation": "<p>The device's name.</p>",
          "shape": "RuntimeContextName"
        }
      },
      "required": [
        "DesiredState",
        "DeviceReportedStatus",
        "DeviceReportedTime",
        "RuntimeContextName"
      ],
      "type": "structure"
    },
    "ReportedRuntimeContextStates": {
      "member": {
        "shape": "ReportedRuntimeContextState"
      },
      "type": "list"
    },
    "ResourceArn": {
      "max": 2048,
      "min": 1,
      "pattern": "^.+$",
      "type": "string"
    },
    "ResourceNotFoundException": {
      "documentation": "<p>The target resource was not found.</p>",
      "error": {
        "httpStatusCode": 404,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "String"
        },
        "ResourceId": {
          "documentation": "<p>The resource's ID.</p>",
          "shape": "String"
        },
        "ResourceType": {
          "documentation": "<p>The resource's type.</p>",
          "shape": "String"
        }
      },
      "required": [
        "Message",
        "ResourceId",
        "ResourceType"
      ],
      "type": "structure"
    },
    "RetryAfterSeconds": {
      "type": "integer"
    },
    "RuntimeContextName": {
      "max": 255,
      "min": 1,
      "pattern": "^.+$",
      "type": "string"
    },
    "RuntimeRoleArn": {
      "max": 255,
      "min": 1,
      "pattern": "^arn:[a-z0-9][-.a-z0-9]{0,62}:iam::[0-9]{12}:role/.+$",
      "type": "string"
    },
    "S3Location": {
      "documentation": "<p>A location in Amazon S3.</p>",
      "members": {
        "BucketName": {
          "documentation": "<p>A bucket name.</p>",
          "shape": "BucketName"
        },
        "ObjectKey": {
          "documentation": "<p>An object key.</p>",
          "shape": "ObjectKey"
        },
        "Region": {
          "documentation": "<p>The bucket's Region.</p>",
          "shape": "Region"
        }
      },
      "required": [
        "BucketName",
        "ObjectKey"
      ],
      "type": "structure"
    },
    "ServiceQuotaExceededException": {
      "documentation": "<p>The request would cause a limit to be exceeded.</p>",
      "error": {
        "httpStatusCode": 402,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "String"
        },
        "QuotaCode": {
          "documentation": "<p>The name of the limit.</p>",
          "shape": "String"
        },
        "ResourceId": {
          "documentation": "<p>The target resource's ID.</p>",
          "shape": "String"
        },
        "ResourceType": {
          "documentation": "<p>The target resource's type.</p>",
          "shape": "String"
        },
        "ServiceCode": {
          "documentation": "<p>The name of the service.</p>",
          "shape": "String"
        }
      },
      "required": [
        "Message",
        "QuotaCode",
        "ServiceCode"
      ],
      "type": "structure"
    },
    "SignalApplicationInstanceNodeInstancesRequest": {
      "members": {
        "ApplicationInstanceId": {
          "documentation": "<p>An application instance ID.</p>",
          "location": "uri",
          "locationName": "ApplicationInstanceId",
          "shape": "ApplicationInstanceId"
        },
        "NodeSignals": {
          "documentation": "<p>A list of signals.</p>",
          "shape": "NodeSignalList"
        }
      },
      "required": [
        "ApplicationInstanceId",
        "NodeSignals"
      ],
      "type": "structure"
    },
    "SignalApplicationInstanceNodeInstancesResponse": {
      "members": {
        "ApplicationInstanceId": {
          "documentation": "<p>An application instance ID.</p>",
          "shape": "ApplicationInstanceId"
        }
      },
      "required": [
        "ApplicationInstanceId"
      ],
      "type": "structure"
    },
    "SortOrder": {
      "enum": [
        "ASCENDING",
        "DESCENDING"
      ],
      "type": "string"
    },
    "StaticIpConnectionInfo": {
      "documentation": "<p>A static IP configuration.</p>",
      "members": {
        "DefaultGateway": {
          "documentation": "<p>The connection's default gateway.</p>",
          "shape": "DefaultGateway"
        },
        "Dns": {
          "documentation": "<p>The connection's DNS address.</p>",
          "shape": "DnsList"
        },
        "IpAddress": {
          "documentation": "<p>The connection's IP address.</p>",
          "shape": "IpAddress"
        },
        "Mask": {
          "documentation": "<p>The connection's DNS mask.</p>",
          "shape": "Mask"
        }
      },
      "required": [
        "DefaultGateway",
        "Dns",
        "IpAddress",
        "Mask"
      ],
      "type": "structure"
    },
    "StatusFilter": {
      "enum": [
        "DEPLOYMENT_SUCCEEDED",
        "DEPLOYMENT_ERROR",
        "REMOVAL_SUCCEEDED",
        "REMOVAL_FAILED",
        "PROCESSING_DEPLOYMENT",
        "PROCESSING_REMOVAL",
        "DEPLOYMENT_FAILED"
      ],
      "type": "string"
    },
    "StorageLocation": {
      "documentation": "<p>A storage location.</p>",
      "members": {
        "BinaryPrefixLocation": {
          "documentation": "<p>The location's binary prefix.</p>",
          "shape": "Object"
        },
        "Bucket": {
          "documentation": "<p>The location's bucket.</p>",
          "shape": "Bucket"
        },
        "GeneratedPrefixLocation": {
          "documentation": "<p>The location's generated prefix.</p>",
          "shape": "Object"
        },
        "ManifestPrefixLocation": {
          "documentation": "<p>The location's manifest prefix.</p>",
          "shape": "Object"
        },
        "RepoPrefixLocation": {
          "documentation": "<p>The location's repo prefix.</p>",
          "shape": "Object"
        }
      },
      "required": [
        "BinaryPrefixLocation",
        "Bucket",
        "GeneratedPrefixLocation",
        "ManifestPrefixLocation",
        "RepoPrefixLocation"
      ],
      "type": "structure"
    },
    "String": {
      "type": "string"
    },
    "TagKey": {
      "max": 128,
      "min": 1,
      "pattern": "^.+$",
      "type": "string"
    },
    "TagKeyList": {
      "max": 50,
      "member": {
        "shape": "TagKey"
      },
      "min": 1,
      "type": "list"
    },
    "TagMap": {
      "key": {
        "shape": "TagKey"
      },
      "max": 50,
      "min": 0,
      "type": "map",
      "value": {
        "shape": "TagValue"
      }
    },
    "TagResourceRequest": {
      "members": {
        "ResourceArn": {
          "documentation": "<p>The resource's ARN.</p>",
          "location": "uri",
          "locationName": "ResourceArn",
          "shape": "ResourceArn"
        },
        "Tags": {
          "documentation": "<p>Tags for the resource.</p>",
          "shape": "TagMap"
        }
      },
      "required": [
        "ResourceArn",
        "Tags"
      ],
      "type": "structure"
    },
    "TagResourceResponse": {
      "members": {},
      "type": "structure"
    },
    "TagValue": {
      "max": 256,
      "min": 0,
      "pattern": "^.*$",
      "type": "string"
    },
    "TemplateKey": {
      "max": 255,
      "min": 1,
      "pattern": "^.+$",
      "type": "string"
    },
    "TemplateParametersMap": {
      "key": {
        "shape": "TemplateKey"
      },
      "type": "map",
      "value": {
        "shape": "TemplateValue"
      }
    },
    "TemplateType": {
      "enum": [
        "RTSP_CAMERA_STREAM"
      ],
      "type": "string"
    },
    "TemplateValue": {
      "max": 255,
      "min": 1,
      "pattern": "^.+$",
      "sensitive": true,
      "type": "string"
    },
    "TimeStamp": {
      "type": "timestamp"
    },
    "Token": {
      "max": 4096,
      "min": 1,
      "pattern": "^.+$",
      "type": "string"
    },
    "UntagResourceRequest": {
      "members": {
        "ResourceArn": {
          "documentation": "<p>The resource's ARN.</p>",
          "location": "uri",
          "locationName": "ResourceArn",
          "shape": "ResourceArn"
        },
        "TagKeys": {
          "documentation": "<p>Tag keys to remove.</p>",
          "location": "querystring",
          "locationName": "tagKeys",
          "shape": "TagKeyList"
        }
      },
      "required": [
        "ResourceArn",
        "TagKeys"
      ],
      "type": "structure"
    },
    "UntagResourceResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateCreatedTime": {
      "type": "timestamp"
    },
    "UpdateDeviceMetadataRequest": {
      "members": {
        "Description": {
          "documentation": "<p>A description for the device.</p>",
          "shape": "Description"
        },
        "DeviceId": {
          "documentation": "<p>The device's ID.</p>",
          "location": "uri",
          "locationName": "DeviceId",
          "shape": "DeviceId"
        }
      },
      "required": [
        "DeviceId"
      ],
      "type": "structure"
    },
    "UpdateDeviceMetadataResponse": {
      "members": {
        "DeviceId": {
          "documentation": "<p>The device's ID.</p>",
          "shape": "DeviceId"
        }
      },
      "type": "structure"
    },
    "UpdateProgress": {
      "enum": [
        "PENDING",
        "IN_PROGRESS",
        "VERIFYING",
        "REBOOTING",
        "DOWNLOADING",
        "COMPLETED",
        "FAILED"
      ],
      "type": "string"
    },
    "ValidationException": {
      "documentation": "<p>The request contains an invalid parameter value.</p>",
      "error": {
        "httpStatusCode": 400,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "ErrorArguments": {
          "documentation": "<p>A list of attributes that led to the exception and their values.</p>",
          "shape": "ValidationExceptionErrorArgumentList"
        },
        "ErrorId": {
          "documentation": "<p>A unique ID for the error.</p>",
          "shape": "String"
        },
        "Fields": {
          "documentation": "<p>A list of request parameters that failed validation.</p>",
          "shape": "ValidationExceptionFieldList"
        },
        "Message": {
          "shape": "String"
        },
        "Reason": {
          "documentation": "<p>The reason that validation failed.</p>",
          "shape": "ValidationExceptionReason"
        }
      },
      "required": [
        "Message"
      ],
      "type": "structure"
    },
    "ValidationExceptionErrorArgument": {
      "documentation": "<p>A validation exception error argument.</p>",
      "members": {
        "Name": {
          "documentation": "<p>The argument's name.</p>",
          "shape": "String"
        },
        "Value": {
          "documentation": "<p>The argument's value.</p>",
          "shape": "String"
        }
      },
      "required": [
        "Name",
        "Value"
      ],
      "type": "structure"
    },
    "ValidationExceptionErrorArgumentList": {
      "member": {
        "shape": "ValidationExceptionErrorArgument"
      },
      "type": "list"
    },
    "ValidationExceptionField": {
      "documentation": "<p>A validation exception field.</p>",
      "members": {
        "Message": {
          "documentation": "<p>The field's message.</p>",
          "shape": "String"
        },
        "Name": {
          "documentation": "<p>The field's name.</p>",
          "shape": "String"
        }
      },
      "required": [
        "Message",
        "Name"
      ],
      "type": "structure"
    },
    "ValidationExceptionFieldList": {
      "member": {
        "shape": "ValidationExceptionField"
      },
      "type": "list"
    },
    "ValidationExceptionReason": {
      "enum": [
        "UNKNOWN_OPERATION",
        "CANNOT_PARSE",
        "FIELD_VALIDATION_FAILED",
        "OTHER"
      ],
      "type": "string"
    },
    "Version": {
      "max": 255,
      "min": 1,
      "type": "string"
    }
  },
  "version": "2.0"
}
