{
  "documentation": "<p>The WorkDocs API is designed for the following use cases:</p> <ul> <li> <p>File Migration: File migration applications are supported for users who want to migrate their files from an on-premises or off-premises file system or service. Users can insert files into a user directory structure, as well as allow for basic metadata changes, such as modifications to the permissions of files.</p> </li> <li> <p>Security: Support security applications are supported for users who have additional security needs, such as antivirus or data loss prevention. The API actions, along with AWS CloudTrail, allow these applications to detect when changes occur in Amazon WorkDocs. Then, the application can take the necessary actions and replace the target file. If the target file violates the policy, the application can also choose to email the user.</p> </li> <li> <p>eDiscovery/Analytics: General administrative applications are supported, such as eDiscovery and analytics. These applications can choose to mimic or record the actions in an Amazon WorkDocs site, along with AWS CloudTrail, to replicate data for eDiscovery, backup, or analytical applications.</p> </li> </ul> <p>All Amazon WorkDocs API actions are Amazon authenticated and certificate-signed. They not only require the use of the AWS SDK, but also allow for the exclusive use of IAM users and roles to help facilitate access, trust, and permission policies. By creating a role and allowing an IAM user to access the Amazon WorkDocs site, the IAM user gains full administrative visibility into the entire Amazon WorkDocs site (or as set in the IAM policy). This includes, but is not limited to, the ability to modify file permissions and upload any file to any user. This allows developers to perform the three use cases above, as well as give users the ability to grant access on a selective basis using the IAM model.</p>",
  "metadata": {
    "apiVersion": "2016-05-01",
    "endpointPrefix": "workdocs",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "Amazon WorkDocs",
    "serviceId": "WorkDocs",
    "signatureVersion": "v4",
    "uid": "workdocs-2016-05-01"
  },
  "operations": {
    "AbortDocumentVersionUpload": {
      "documentation": "<p>Aborts the upload of the specified document version that was previously initiated by <a>InitiateDocumentVersionUpload</a>. The client should make this call only when it no longer intends to upload the document version, or fails to do so.</p>",
      "errors": [
        {
          "shape": "EntityNotExistsException"
        },
        {
          "shape": "ProhibitedStateException"
        },
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/api/v1/documents/{DocumentId}/versions/{VersionId}",
        "responseCode": 204
      },
      "input": {
        "shape": "AbortDocumentVersionUploadRequest"
      },
      "name": "AbortDocumentVersionUpload"
    },
    "ActivateUser": {
      "documentation": "<p>Activates the specified user. Only active users can access Amazon WorkDocs.</p>",
      "errors": [
        {
          "shape": "EntityNotExistsException"
        },
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/api/v1/users/{UserId}/activation",
        "responseCode": 200
      },
      "input": {
        "shape": "ActivateUserRequest"
      },
      "name": "ActivateUser",
      "output": {
        "shape": "ActivateUserResponse"
      }
    },
    "AddResourcePermissions": {
      "documentation": "<p>Creates a set of permissions for the specified folder or document. The resource permissions are overwritten if the principals already have different permissions.</p>",
      "errors": [
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/api/v1/resources/{ResourceId}/permissions",
        "responseCode": 201
      },
      "input": {
        "shape": "AddResourcePermissionsRequest"
      },
      "name": "AddResourcePermissions",
      "output": {
        "shape": "AddResourcePermissionsResponse"
      }
    },
    "CreateComment": {
      "documentation": "<p>Adds a new comment to the specified document version.</p>",
      "errors": [
        {
          "shape": "EntityNotExistsException"
        },
        {
          "shape": "ProhibitedStateException"
        },
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "DocumentLockedForCommentsException"
        },
        {
          "shape": "InvalidCommentOperationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/api/v1/documents/{DocumentId}/versions/{VersionId}/comment",
        "responseCode": 201
      },
      "input": {
        "shape": "CreateCommentRequest"
      },
      "name": "CreateComment",
      "output": {
        "shape": "CreateCommentResponse"
      }
    },
    "CreateCustomMetadata": {
      "documentation": "<p>Adds one or more custom properties to the specified resource (a folder, document, or version).</p>",
      "errors": [
        {
          "shape": "EntityNotExistsException"
        },
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "ProhibitedStateException"
        },
        {
          "shape": "CustomMetadataLimitExceededException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/api/v1/resources/{ResourceId}/customMetadata",
        "responseCode": 200
      },
      "input": {
        "shape": "CreateCustomMetadataRequest"
      },
      "name": "CreateCustomMetadata",
      "output": {
        "shape": "CreateCustomMetadataResponse"
      }
    },
    "CreateFolder": {
      "documentation": "<p>Creates a folder with the specified name and parent folder.</p>",
      "errors": [
        {
          "shape": "EntityNotExistsException"
        },
        {
          "shape": "EntityAlreadyExistsException"
        },
        {
          "shape": "ProhibitedStateException"
        },
        {
          "shape": "ConflictingOperationException"
        },
        {
          "shape": "LimitExceededException"
        },
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/api/v1/folders",
        "responseCode": 201
      },
      "input": {
        "shape": "CreateFolderRequest"
      },
      "name": "CreateFolder",
      "output": {
        "shape": "CreateFolderResponse"
      }
    },
    "CreateLabels": {
      "documentation": "<p>Adds the specified list of labels to the given resource (a document or folder)</p>",
      "errors": [
        {
          "shape": "EntityNotExistsException"
        },
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "TooManyLabelsException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/api/v1/resources/{ResourceId}/labels",
        "responseCode": 200
      },
      "input": {
        "shape": "CreateLabelsRequest"
      },
      "name": "CreateLabels",
      "output": {
        "shape": "CreateLabelsResponse"
      }
    },
    "CreateNotificationSubscription": {
      "documentation": "<p>Configure Amazon WorkDocs to use Amazon SNS notifications. The endpoint receives a confirmation message, and must confirm the subscription.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/workdocs/latest/developerguide/subscribe-notifications.html\">Subscribe to Notifications</a> in the <i>Amazon WorkDocs Developer Guide</i>.</p>",
      "errors": [
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "TooManySubscriptionsException"
        },
        {
          "shape": "ServiceUnavailableException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/api/v1/organizations/{OrganizationId}/subscriptions",
        "responseCode": 200
      },
      "input": {
        "shape": "CreateNotificationSubscriptionRequest"
      },
      "name": "CreateNotificationSubscription",
      "output": {
        "shape": "CreateNotificationSubscriptionResponse"
      }
    },
    "CreateUser": {
      "documentation": "<p>Creates a user in a Simple AD or Microsoft AD directory. The status of a newly created user is \"ACTIVE\". New users can access Amazon WorkDocs.</p>",
      "errors": [
        {
          "shape": "EntityAlreadyExistsException"
        },
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/api/v1/users",
        "responseCode": 201
      },
      "input": {
        "shape": "CreateUserRequest"
      },
      "name": "CreateUser",
      "output": {
        "shape": "CreateUserResponse"
      }
    },
    "DeactivateUser": {
      "documentation": "<p>Deactivates the specified user, which revokes the user's access to Amazon WorkDocs.</p>",
      "errors": [
        {
          "shape": "EntityNotExistsException"
        },
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/api/v1/users/{UserId}/activation",
        "responseCode": 204
      },
      "input": {
        "shape": "DeactivateUserRequest"
      },
      "name": "DeactivateUser"
    },
    "DeleteComment": {
      "documentation": "<p>Deletes the specified comment from the document version.</p>",
      "errors": [
        {
          "shape": "EntityNotExistsException"
        },
        {
          "shape": "ProhibitedStateException"
        },
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "DocumentLockedForCommentsException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/api/v1/documents/{DocumentId}/versions/{VersionId}/comment/{CommentId}",
        "responseCode": 204
      },
      "input": {
        "shape": "DeleteCommentRequest"
      },
      "name": "DeleteComment"
    },
    "DeleteCustomMetadata": {
      "documentation": "<p>Deletes custom metadata from the specified resource.</p>",
      "errors": [
        {
          "shape": "EntityNotExistsException"
        },
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "ProhibitedStateException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/api/v1/resources/{ResourceId}/customMetadata",
        "responseCode": 200
      },
      "input": {
        "shape": "DeleteCustomMetadataRequest"
      },
      "name": "DeleteCustomMetadata",
      "output": {
        "shape": "DeleteCustomMetadataResponse"
      }
    },
    "DeleteDocument": {
      "documentation": "<p>Permanently deletes the specified document and its associated metadata.</p>",
      "errors": [
        {
          "shape": "EntityNotExistsException"
        },
        {
          "shape": "ProhibitedStateException"
        },
        {
          "shape": "ConflictingOperationException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/api/v1/documents/{DocumentId}",
        "responseCode": 204
      },
      "input": {
        "shape": "DeleteDocumentRequest"
      },
      "name": "DeleteDocument"
    },
    "DeleteFolder": {
      "documentation": "<p>Permanently deletes the specified folder and its contents.</p>",
      "errors": [
        {
          "shape": "EntityNotExistsException"
        },
        {
          "shape": "ProhibitedStateException"
        },
        {
          "shape": "ConflictingOperationException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/api/v1/folders/{FolderId}",
        "responseCode": 204
      },
      "input": {
        "shape": "DeleteFolderRequest"
      },
      "name": "DeleteFolder"
    },
    "DeleteFolderContents": {
      "documentation": "<p>Deletes the contents of the specified folder.</p>",
      "errors": [
        {
          "shape": "EntityNotExistsException"
        },
        {
          "shape": "ProhibitedStateException"
        },
        {
          "shape": "ConflictingOperationException"
        },
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/api/v1/folders/{FolderId}/contents",
        "responseCode": 204
      },
      "input": {
        "shape": "DeleteFolderContentsRequest"
      },
      "name": "DeleteFolderContents"
    },
    "DeleteLabels": {
      "documentation": "<p>Deletes the specified list of labels from a resource.</p>",
      "errors": [
        {
          "shape": "EntityNotExistsException"
        },
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/api/v1/resources/{ResourceId}/labels",
        "responseCode": 200
      },
      "input": {
        "shape": "DeleteLabelsRequest"
      },
      "name": "DeleteLabels",
      "output": {
        "shape": "DeleteLabelsResponse"
      }
    },
    "DeleteNotificationSubscription": {
      "documentation": "<p>Deletes the specified subscription from the specified organization.</p>",
      "errors": [
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "EntityNotExistsException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ProhibitedStateException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/api/v1/organizations/{OrganizationId}/subscriptions/{SubscriptionId}",
        "responseCode": 200
      },
      "input": {
        "shape": "DeleteNotificationSubscriptionRequest"
      },
      "name": "DeleteNotificationSubscription"
    },
    "DeleteUser": {
      "documentation": "<p>Deletes the specified user from a Simple AD or Microsoft AD directory.</p>",
      "errors": [
        {
          "shape": "EntityNotExistsException"
        },
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/api/v1/users/{UserId}",
        "responseCode": 204
      },
      "input": {
        "shape": "DeleteUserRequest"
      },
      "name": "DeleteUser"
    },
    "DescribeActivities": {
      "documentation": "<p>Describes the user activities in a specified time period.</p>",
      "errors": [
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "InvalidArgumentException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/api/v1/activities",
        "responseCode": 200
      },
      "input": {
        "shape": "DescribeActivitiesRequest"
      },
      "name": "DescribeActivities",
      "output": {
        "shape": "DescribeActivitiesResponse"
      }
    },
    "DescribeComments": {
      "documentation": "<p>List all the comments for the specified document version.</p>",
      "errors": [
        {
          "shape": "EntityNotExistsException"
        },
        {
          "shape": "ProhibitedStateException"
        },
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/api/v1/documents/{DocumentId}/versions/{VersionId}/comments",
        "responseCode": 200
      },
      "input": {
        "shape": "DescribeCommentsRequest"
      },
      "name": "DescribeComments",
      "output": {
        "shape": "DescribeCommentsResponse"
      }
    },
    "DescribeDocumentVersions": {
      "documentation": "<p>Retrieves the document versions for the specified document.</p> <p>By default, only active versions are returned.</p>",
      "errors": [
        {
          "shape": "EntityNotExistsException"
        },
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "InvalidArgumentException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ProhibitedStateException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/api/v1/documents/{DocumentId}/versions",
        "responseCode": 200
      },
      "input": {
        "shape": "DescribeDocumentVersionsRequest"
      },
      "name": "DescribeDocumentVersions",
      "output": {
        "shape": "DescribeDocumentVersionsResponse"
      }
    },
    "DescribeFolderContents": {
      "documentation": "<p>Describes the contents of the specified folder, including its documents and subfolders.</p> <p>By default, Amazon WorkDocs returns the first 100 active document and folder metadata items. If there are more results, the response includes a marker that you can use to request the next set of results. You can also request initialized documents.</p>",
      "errors": [
        {
          "shape": "EntityNotExistsException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "InvalidArgumentException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ProhibitedStateException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/api/v1/folders/{FolderId}/contents",
        "responseCode": 200
      },
      "input": {
        "shape": "DescribeFolderContentsRequest"
      },
      "name": "DescribeFolderContents",
      "output": {
        "shape": "DescribeFolderContentsResponse"
      }
    },
    "DescribeGroups": {
      "documentation": "<p>Describes the groups specified by the query. Groups are defined by the underlying Active Directory.</p>",
      "errors": [
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/api/v1/groups",
        "responseCode": 200
      },
      "input": {
        "shape": "DescribeGroupsRequest"
      },
      "name": "DescribeGroups",
      "output": {
        "shape": "DescribeGroupsResponse"
      }
    },
    "DescribeNotificationSubscriptions": {
      "documentation": "<p>Lists the specified notification subscriptions.</p>",
      "errors": [
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "EntityNotExistsException"
        },
        {
          "shape": "ServiceUnavailableException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/api/v1/organizations/{OrganizationId}/subscriptions",
        "responseCode": 200
      },
      "input": {
        "shape": "DescribeNotificationSubscriptionsRequest"
      },
      "name": "DescribeNotificationSubscriptions",
      "output": {
        "shape": "DescribeNotificationSubscriptionsResponse"
      }
    },
    "DescribeResourcePermissions": {
      "documentation": "<p>Describes the permissions of a specified resource.</p>",
      "errors": [
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/api/v1/resources/{ResourceId}/permissions",
        "responseCode": 200
      },
      "input": {
        "shape": "DescribeResourcePermissionsRequest"
      },
      "name": "DescribeResourcePermissions",
      "output": {
        "shape": "DescribeResourcePermissionsResponse"
      }
    },
    "DescribeRootFolders": {
      "documentation": "<p>Describes the current user's special folders; the <code>RootFolder</code> and the <code>RecycleBin</code>. <code>RootFolder</code> is the root of user's files and folders and <code>RecycleBin</code> is the root of recycled items. This is not a valid action for SigV4 (administrative API) clients.</p> <p>This action requires an authentication token. To get an authentication token, register an application with Amazon WorkDocs. For more information, see <a href=\"https://docs.aws.amazon.com/workdocs/latest/developerguide/wd-auth-user.html\">Authentication and Access Control for User Applications</a> in the <i>Amazon WorkDocs Developer Guide</i>.</p>",
      "errors": [
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "InvalidArgumentException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/api/v1/me/root",
        "responseCode": 200
      },
      "input": {
        "shape": "DescribeRootFoldersRequest"
      },
      "name": "DescribeRootFolders",
      "output": {
        "shape": "DescribeRootFoldersResponse"
      }
    },
    "DescribeUsers": {
      "documentation": "<p>Describes the specified users. You can describe all users or filter the results (for example, by status or organization).</p> <p>By default, Amazon WorkDocs returns the first 24 active or pending users. If there are more results, the response includes a marker that you can use to request the next set of results.</p>",
      "errors": [
        {
          "shape": "EntityNotExistsException"
        },
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "InvalidArgumentException"
        },
        {
          "shape": "RequestedEntityTooLargeException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/api/v1/users",
        "responseCode": 200
      },
      "input": {
        "shape": "DescribeUsersRequest"
      },
      "name": "DescribeUsers",
      "output": {
        "shape": "DescribeUsersResponse"
      }
    },
    "GetCurrentUser": {
      "documentation": "<p>Retrieves details of the current user for whom the authentication token was generated. This is not a valid action for SigV4 (administrative API) clients.</p> <p>This action requires an authentication token. To get an authentication token, register an application with Amazon WorkDocs. For more information, see <a href=\"https://docs.aws.amazon.com/workdocs/latest/developerguide/wd-auth-user.html\">Authentication and Access Control for User Applications</a> in the <i>Amazon WorkDocs Developer Guide</i>.</p>",
      "errors": [
        {
          "shape": "EntityNotExistsException"
        },
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/api/v1/me",
        "responseCode": 200
      },
      "input": {
        "shape": "GetCurrentUserRequest"
      },
      "name": "GetCurrentUser",
      "output": {
        "shape": "GetCurrentUserResponse"
      }
    },
    "GetDocument": {
      "documentation": "<p>Retrieves details of a document.</p>",
      "errors": [
        {
          "shape": "EntityNotExistsException"
        },
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "InvalidArgumentException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "InvalidPasswordException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/api/v1/documents/{DocumentId}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetDocumentRequest"
      },
      "name": "GetDocument",
      "output": {
        "shape": "GetDocumentResponse"
      }
    },
    "GetDocumentPath": {
      "documentation": "<p>Retrieves the path information (the hierarchy from the root folder) for the requested document.</p> <p>By default, Amazon WorkDocs returns a maximum of 100 levels upwards from the requested document and only includes the IDs of the parent folders in the path. You can limit the maximum number of levels. You can also request the names of the parent folders.</p>",
      "errors": [
        {
          "shape": "EntityNotExistsException"
        },
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/api/v1/documents/{DocumentId}/path",
        "responseCode": 200
      },
      "input": {
        "shape": "GetDocumentPathRequest"
      },
      "name": "GetDocumentPath",
      "output": {
        "shape": "GetDocumentPathResponse"
      }
    },
    "GetDocumentVersion": {
      "documentation": "<p>Retrieves version metadata for the specified document.</p>",
      "errors": [
        {
          "shape": "EntityNotExistsException"
        },
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ProhibitedStateException"
        },
        {
          "shape": "InvalidPasswordException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/api/v1/documents/{DocumentId}/versions/{VersionId}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetDocumentVersionRequest"
      },
      "name": "GetDocumentVersion",
      "output": {
        "shape": "GetDocumentVersionResponse"
      }
    },
    "GetFolder": {
      "documentation": "<p>Retrieves the metadata of the specified folder.</p>",
      "errors": [
        {
          "shape": "EntityNotExistsException"
        },
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "InvalidArgumentException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "ProhibitedStateException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/api/v1/folders/{FolderId}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetFolderRequest"
      },
      "name": "GetFolder",
      "output": {
        "shape": "GetFolderResponse"
      }
    },
    "GetFolderPath": {
      "documentation": "<p>Retrieves the path information (the hierarchy from the root folder) for the specified folder.</p> <p>By default, Amazon WorkDocs returns a maximum of 100 levels upwards from the requested folder and only includes the IDs of the parent folders in the path. You can limit the maximum number of levels. You can also request the parent folder names.</p>",
      "errors": [
        {
          "shape": "EntityNotExistsException"
        },
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/api/v1/folders/{FolderId}/path",
        "responseCode": 200
      },
      "input": {
        "shape": "GetFolderPathRequest"
      },
      "name": "GetFolderPath",
      "output": {
        "shape": "GetFolderPathResponse"
      }
    },
    "GetResources": {
      "documentation": "<p>Retrieves a collection of resources, including folders and documents. The only <code>CollectionType</code> supported is <code>SHARED_WITH_ME</code>.</p>",
      "errors": [
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "InvalidArgumentException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/api/v1/resources",
        "responseCode": 200
      },
      "input": {
        "shape": "GetResourcesRequest"
      },
      "name": "GetResources",
      "output": {
        "shape": "GetResourcesResponse"
      }
    },
    "InitiateDocumentVersionUpload": {
      "documentation": "<p>Creates a new document object and version object.</p> <p>The client specifies the parent folder ID and name of the document to upload. The ID is optionally specified when creating a new version of an existing document. This is the first step to upload a document. Next, upload the document to the URL returned from the call, and then call <a>UpdateDocumentVersion</a>.</p> <p>To cancel the document upload, call <a>AbortDocumentVersionUpload</a>.</p>",
      "errors": [
        {
          "shape": "EntityNotExistsException"
        },
        {
          "shape": "EntityAlreadyExistsException"
        },
        {
          "shape": "StorageLimitExceededException"
        },
        {
          "shape": "StorageLimitWillExceedException"
        },
        {
          "shape": "ProhibitedStateException"
        },
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "DraftUploadOutOfSyncException"
        },
        {
          "shape": "ResourceAlreadyCheckedOutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/api/v1/documents",
        "responseCode": 201
      },
      "input": {
        "shape": "InitiateDocumentVersionUploadRequest"
      },
      "name": "InitiateDocumentVersionUpload",
      "output": {
        "shape": "InitiateDocumentVersionUploadResponse"
      }
    },
    "RemoveAllResourcePermissions": {
      "documentation": "<p>Removes all the permissions from the specified resource.</p>",
      "errors": [
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/api/v1/resources/{ResourceId}/permissions",
        "responseCode": 204
      },
      "input": {
        "shape": "RemoveAllResourcePermissionsRequest"
      },
      "name": "RemoveAllResourcePermissions"
    },
    "RemoveResourcePermission": {
      "documentation": "<p>Removes the permission for the specified principal from the specified resource.</p>",
      "errors": [
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/api/v1/resources/{ResourceId}/permissions/{PrincipalId}",
        "responseCode": 204
      },
      "input": {
        "shape": "RemoveResourcePermissionRequest"
      },
      "name": "RemoveResourcePermission"
    },
    "UpdateDocument": {
      "documentation": "<p>Updates the specified attributes of a document. The user must have access to both the document and its parent folder, if applicable.</p>",
      "errors": [
        {
          "shape": "EntityNotExistsException"
        },
        {
          "shape": "EntityAlreadyExistsException"
        },
        {
          "shape": "LimitExceededException"
        },
        {
          "shape": "ProhibitedStateException"
        },
        {
          "shape": "ConflictingOperationException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/api/v1/documents/{DocumentId}",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateDocumentRequest"
      },
      "name": "UpdateDocument"
    },
    "UpdateDocumentVersion": {
      "documentation": "<p>Changes the status of the document version to ACTIVE. </p> <p>Amazon WorkDocs also sets its document container to ACTIVE. This is the last step in a document upload, after the client uploads the document to an S3-presigned URL returned by <a>InitiateDocumentVersionUpload</a>. </p>",
      "errors": [
        {
          "shape": "EntityNotExistsException"
        },
        {
          "shape": "ProhibitedStateException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "InvalidOperationException"
        },
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/api/v1/documents/{DocumentId}/versions/{VersionId}",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateDocumentVersionRequest"
      },
      "name": "UpdateDocumentVersion"
    },
    "UpdateFolder": {
      "documentation": "<p>Updates the specified attributes of the specified folder. The user must have access to both the folder and its parent folder, if applicable.</p>",
      "errors": [
        {
          "shape": "EntityNotExistsException"
        },
        {
          "shape": "EntityAlreadyExistsException"
        },
        {
          "shape": "ProhibitedStateException"
        },
        {
          "shape": "ConflictingOperationException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "LimitExceededException"
        },
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/api/v1/folders/{FolderId}",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateFolderRequest"
      },
      "name": "UpdateFolder"
    },
    "UpdateUser": {
      "documentation": "<p>Updates the specified attributes of the specified user, and grants or revokes administrative privileges to the Amazon WorkDocs site.</p>",
      "errors": [
        {
          "shape": "EntityNotExistsException"
        },
        {
          "shape": "UnauthorizedOperationException"
        },
        {
          "shape": "UnauthorizedResourceAccessException"
        },
        {
          "shape": "IllegalUserStateException"
        },
        {
          "shape": "FailedDependencyException"
        },
        {
          "shape": "ServiceUnavailableException"
        },
        {
          "shape": "DeactivatingLastSystemUserException"
        },
        {
          "shape": "InvalidArgumentException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/api/v1/users/{UserId}",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateUserRequest"
      },
      "name": "UpdateUser",
      "output": {
        "shape": "UpdateUserResponse"
      }
    }
  },
  "shapes": {
    "AbortDocumentVersionUploadRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "DocumentId": {
          "documentation": "<p>The ID of the document.</p>",
          "location": "uri",
          "locationName": "DocumentId",
          "shape": "ResourceIdType"
        },
        "VersionId": {
          "documentation": "<p>The ID of the version.</p>",
          "location": "uri",
          "locationName": "VersionId",
          "shape": "DocumentVersionIdType"
        }
      },
      "required": [
        "DocumentId",
        "VersionId"
      ],
      "type": "structure"
    },
    "ActivateUserRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "UserId": {
          "documentation": "<p>The ID of the user.</p>",
          "location": "uri",
          "locationName": "UserId",
          "shape": "IdType"
        }
      },
      "required": [
        "UserId"
      ],
      "type": "structure"
    },
    "ActivateUserResponse": {
      "members": {
        "User": {
          "documentation": "<p>The user information.</p>",
          "shape": "User"
        }
      },
      "type": "structure"
    },
    "Activity": {
      "documentation": "<p>Describes the activity information.</p>",
      "members": {
        "CommentMetadata": {
          "documentation": "<p>Metadata of the commenting activity. This is an optional field and is filled for commenting activities.</p>",
          "shape": "CommentMetadata"
        },
        "Initiator": {
          "documentation": "<p>The user who performed the action.</p>",
          "shape": "UserMetadata"
        },
        "IsIndirectActivity": {
          "documentation": "<p>Indicates whether an activity is indirect or direct. An indirect activity results from a direct activity performed on a parent resource. For example, sharing a parent folder (the direct activity) shares all of the subfolders and documents within the parent folder (the indirect activity).</p>",
          "shape": "BooleanType"
        },
        "OrganizationId": {
          "documentation": "<p>The ID of the organization.</p>",
          "shape": "IdType"
        },
        "OriginalParent": {
          "documentation": "<p>The original parent of the resource. This is an optional field and is filled for move activities.</p>",
          "shape": "ResourceMetadata"
        },
        "Participants": {
          "documentation": "<p>The list of users or groups impacted by this action. This is an optional field and is filled for the following sharing activities: DOCUMENT_SHARED, DOCUMENT_SHARED, DOCUMENT_UNSHARED, FOLDER_SHARED, FOLDER_UNSHARED.</p>",
          "shape": "Participants"
        },
        "ResourceMetadata": {
          "documentation": "<p>The metadata of the resource involved in the user action.</p>",
          "shape": "ResourceMetadata"
        },
        "TimeStamp": {
          "documentation": "<p>The timestamp when the action was performed.</p>",
          "shape": "TimestampType"
        },
        "Type": {
          "documentation": "<p>The activity type.</p>",
          "shape": "ActivityType"
        }
      },
      "type": "structure"
    },
    "ActivityNamesFilterType": {
      "max": 1024,
      "min": 1,
      "pattern": "[\\w,]+",
      "type": "string"
    },
    "ActivityType": {
      "enum": [
        "DOCUMENT_CHECKED_IN",
        "DOCUMENT_CHECKED_OUT",
        "DOCUMENT_RENAMED",
        "DOCUMENT_VERSION_UPLOADED",
        "DOCUMENT_VERSION_DELETED",
        "DOCUMENT_VERSION_VIEWED",
        "DOCUMENT_VERSION_DOWNLOADED",
        "DOCUMENT_RECYCLED",
        "DOCUMENT_RESTORED",
        "DOCUMENT_REVERTED",
        "DOCUMENT_SHARED",
        "DOCUMENT_UNSHARED",
        "DOCUMENT_SHARE_PERMISSION_CHANGED",
        "DOCUMENT_SHAREABLE_LINK_CREATED",
        "DOCUMENT_SHAREABLE_LINK_REMOVED",
        "DOCUMENT_SHAREABLE_LINK_PERMISSION_CHANGED",
        "DOCUMENT_MOVED",
        "DOCUMENT_COMMENT_ADDED",
        "DOCUMENT_COMMENT_DELETED",
        "DOCUMENT_ANNOTATION_ADDED",
        "DOCUMENT_ANNOTATION_DELETED",
        "FOLDER_CREATED",
        "FOLDER_DELETED",
        "FOLDER_RENAMED",
        "FOLDER_RECYCLED",
        "FOLDER_RESTORED",
        "FOLDER_SHARED",
        "FOLDER_UNSHARED",
        "FOLDER_SHARE_PERMISSION_CHANGED",
        "FOLDER_SHAREABLE_LINK_CREATED",
        "FOLDER_SHAREABLE_LINK_REMOVED",
        "FOLDER_SHAREABLE_LINK_PERMISSION_CHANGED",
        "FOLDER_MOVED"
      ],
      "type": "string"
    },
    "AddResourcePermissionsRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "NotificationOptions": {
          "documentation": "<p>The notification options.</p>",
          "shape": "NotificationOptions"
        },
        "Principals": {
          "documentation": "<p>The users, groups, or organization being granted permission.</p>",
          "shape": "SharePrincipalList"
        },
        "ResourceId": {
          "documentation": "<p>The ID of the resource.</p>",
          "location": "uri",
          "locationName": "ResourceId",
          "shape": "ResourceIdType"
        }
      },
      "required": [
        "ResourceId",
        "Principals"
      ],
      "type": "structure"
    },
    "AddResourcePermissionsResponse": {
      "members": {
        "ShareResults": {
          "documentation": "<p>The share results.</p>",
          "shape": "ShareResultsList"
        }
      },
      "type": "structure"
    },
    "AuthenticationHeaderType": {
      "max": 8199,
      "min": 1,
      "sensitive": true,
      "type": "string"
    },
    "BooleanEnumType": {
      "enum": [
        "TRUE",
        "FALSE"
      ],
      "type": "string"
    },
    "BooleanType": {
      "type": "boolean"
    },
    "Comment": {
      "documentation": "<p>Describes a comment.</p>",
      "members": {
        "CommentId": {
          "documentation": "<p>The ID of the comment.</p>",
          "shape": "CommentIdType"
        },
        "Contributor": {
          "documentation": "<p>The details of the user who made the comment.</p>",
          "shape": "User"
        },
        "CreatedTimestamp": {
          "documentation": "<p>The time that the comment was created.</p>",
          "shape": "TimestampType"
        },
        "ParentId": {
          "documentation": "<p>The ID of the parent comment.</p>",
          "shape": "CommentIdType"
        },
        "RecipientId": {
          "documentation": "<p>If the comment is a reply to another user's comment, this field contains the user ID of the user being replied to.</p>",
          "shape": "IdType"
        },
        "Status": {
          "documentation": "<p>The status of the comment.</p>",
          "shape": "CommentStatusType"
        },
        "Text": {
          "documentation": "<p>The text of the comment.</p>",
          "shape": "CommentTextType"
        },
        "ThreadId": {
          "documentation": "<p>The ID of the root comment in the thread.</p>",
          "shape": "CommentIdType"
        },
        "Visibility": {
          "documentation": "<p>The visibility of the comment. Options are either PRIVATE, where the comment is visible only to the comment author and document owner and co-owners, or PUBLIC, where the comment is visible to document owners, co-owners, and contributors.</p>",
          "shape": "CommentVisibilityType"
        }
      },
      "required": [
        "CommentId"
      ],
      "type": "structure"
    },
    "CommentIdType": {
      "max": 128,
      "min": 1,
      "pattern": "[\\w+-.@]+",
      "type": "string"
    },
    "CommentList": {
      "member": {
        "shape": "Comment"
      },
      "type": "list"
    },
    "CommentMetadata": {
      "documentation": "<p>Describes the metadata of a comment.</p>",
      "members": {
        "CommentId": {
          "documentation": "<p>The ID of the comment.</p>",
          "shape": "CommentIdType"
        },
        "CommentStatus": {
          "documentation": "<p>The status of the comment.</p>",
          "shape": "CommentStatusType"
        },
        "Contributor": {
          "documentation": "<p>The user who made the comment.</p>",
          "shape": "User"
        },
        "CreatedTimestamp": {
          "documentation": "<p>The timestamp that the comment was created.</p>",
          "shape": "TimestampType"
        },
        "RecipientId": {
          "documentation": "<p>The ID of the user being replied to.</p>",
          "shape": "IdType"
        }
      },
      "type": "structure"
    },
    "CommentStatusType": {
      "enum": [
        "DRAFT",
        "PUBLISHED",
        "DELETED"
      ],
      "type": "string"
    },
    "CommentTextType": {
      "max": 2048,
      "min": 1,
      "sensitive": true,
      "type": "string"
    },
    "CommentVisibilityType": {
      "enum": [
        "PUBLIC",
        "PRIVATE"
      ],
      "type": "string"
    },
    "ConcurrentModificationException": {
      "documentation": "<p>The resource hierarchy is changing.</p>",
      "error": {
        "httpStatusCode": 409
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "ErrorMessageType"
        }
      },
      "type": "structure"
    },
    "ConflictingOperationException": {
      "documentation": "<p>Another operation is in progress on the resource that conflicts with the current operation.</p>",
      "error": {
        "httpStatusCode": 409
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "ErrorMessageType"
        }
      },
      "type": "structure"
    },
    "CreateCommentRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "DocumentId": {
          "documentation": "<p>The ID of the document.</p>",
          "location": "uri",
          "locationName": "DocumentId",
          "shape": "ResourceIdType"
        },
        "NotifyCollaborators": {
          "documentation": "<p>Set this parameter to TRUE to send an email out to the document collaborators after the comment is created.</p>",
          "shape": "BooleanType"
        },
        "ParentId": {
          "documentation": "<p>The ID of the parent comment.</p>",
          "shape": "CommentIdType"
        },
        "Text": {
          "documentation": "<p>The text of the comment.</p>",
          "shape": "CommentTextType"
        },
        "ThreadId": {
          "documentation": "<p>The ID of the root comment in the thread.</p>",
          "shape": "CommentIdType"
        },
        "VersionId": {
          "documentation": "<p>The ID of the document version.</p>",
          "location": "uri",
          "locationName": "VersionId",
          "shape": "DocumentVersionIdType"
        },
        "Visibility": {
          "documentation": "<p>The visibility of the comment. Options are either PRIVATE, where the comment is visible only to the comment author and document owner and co-owners, or PUBLIC, where the comment is visible to document owners, co-owners, and contributors.</p>",
          "shape": "CommentVisibilityType"
        }
      },
      "required": [
        "DocumentId",
        "VersionId",
        "Text"
      ],
      "type": "structure"
    },
    "CreateCommentResponse": {
      "members": {
        "Comment": {
          "documentation": "<p>The comment that has been created.</p>",
          "shape": "Comment"
        }
      },
      "type": "structure"
    },
    "CreateCustomMetadataRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "CustomMetadata": {
          "documentation": "<p>Custom metadata in the form of name-value pairs.</p>",
          "shape": "CustomMetadataMap"
        },
        "ResourceId": {
          "documentation": "<p>The ID of the resource.</p>",
          "location": "uri",
          "locationName": "ResourceId",
          "shape": "ResourceIdType"
        },
        "VersionId": {
          "documentation": "<p>The ID of the version, if the custom metadata is being added to a document version.</p>",
          "location": "querystring",
          "locationName": "versionid",
          "shape": "DocumentVersionIdType"
        }
      },
      "required": [
        "ResourceId",
        "CustomMetadata"
      ],
      "type": "structure"
    },
    "CreateCustomMetadataResponse": {
      "members": {},
      "type": "structure"
    },
    "CreateFolderRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "Name": {
          "documentation": "<p>The name of the new folder.</p>",
          "shape": "ResourceNameType"
        },
        "ParentFolderId": {
          "documentation": "<p>The ID of the parent folder.</p>",
          "shape": "ResourceIdType"
        }
      },
      "required": [
        "ParentFolderId"
      ],
      "type": "structure"
    },
    "CreateFolderResponse": {
      "members": {
        "Metadata": {
          "documentation": "<p>The metadata of the folder.</p>",
          "shape": "FolderMetadata"
        }
      },
      "type": "structure"
    },
    "CreateLabelsRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "Labels": {
          "documentation": "<p>List of labels to add to the resource.</p>",
          "shape": "SharedLabels"
        },
        "ResourceId": {
          "documentation": "<p>The ID of the resource.</p>",
          "location": "uri",
          "locationName": "ResourceId",
          "shape": "ResourceIdType"
        }
      },
      "required": [
        "ResourceId",
        "Labels"
      ],
      "type": "structure"
    },
    "CreateLabelsResponse": {
      "members": {},
      "type": "structure"
    },
    "CreateNotificationSubscriptionRequest": {
      "members": {
        "Endpoint": {
          "documentation": "<p>The endpoint to receive the notifications. If the protocol is HTTPS, the endpoint is a URL that begins with <code>https</code>.</p>",
          "shape": "SubscriptionEndPointType"
        },
        "OrganizationId": {
          "documentation": "<p>The ID of the organization.</p>",
          "location": "uri",
          "locationName": "OrganizationId",
          "shape": "IdType"
        },
        "Protocol": {
          "documentation": "<p>The protocol to use. The supported value is https, which delivers JSON-encoded messages using HTTPS POST.</p>",
          "shape": "SubscriptionProtocolType"
        },
        "SubscriptionType": {
          "documentation": "<p>The notification type.</p>",
          "shape": "SubscriptionType"
        }
      },
      "required": [
        "OrganizationId",
        "Endpoint",
        "Protocol",
        "SubscriptionType"
      ],
      "type": "structure"
    },
    "CreateNotificationSubscriptionResponse": {
      "members": {
        "Subscription": {
          "documentation": "<p>The subscription.</p>",
          "shape": "Subscription"
        }
      },
      "type": "structure"
    },
    "CreateUserRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "EmailAddress": {
          "documentation": "<p>The email address of the user.</p>",
          "shape": "EmailAddressType"
        },
        "GivenName": {
          "documentation": "<p>The given name of the user.</p>",
          "shape": "UserAttributeValueType"
        },
        "OrganizationId": {
          "documentation": "<p>The ID of the organization.</p>",
          "shape": "IdType"
        },
        "Password": {
          "documentation": "<p>The password of the user.</p>",
          "shape": "PasswordType"
        },
        "StorageRule": {
          "documentation": "<p>The amount of storage for the user.</p>",
          "shape": "StorageRuleType"
        },
        "Surname": {
          "documentation": "<p>The surname of the user.</p>",
          "shape": "UserAttributeValueType"
        },
        "TimeZoneId": {
          "documentation": "<p>The time zone ID of the user.</p>",
          "shape": "TimeZoneIdType"
        },
        "Username": {
          "documentation": "<p>The login name of the user.</p>",
          "shape": "UsernameType"
        }
      },
      "required": [
        "Username",
        "GivenName",
        "Surname",
        "Password"
      ],
      "type": "structure"
    },
    "CreateUserResponse": {
      "members": {
        "User": {
          "documentation": "<p>The user information.</p>",
          "shape": "User"
        }
      },
      "type": "structure"
    },
    "CustomMetadataKeyList": {
      "max": 8,
      "member": {
        "shape": "CustomMetadataKeyType"
      },
      "type": "list"
    },
    "CustomMetadataKeyType": {
      "max": 56,
      "min": 1,
      "pattern": "[a-zA-Z0-9._+-/=][a-zA-Z0-9 ._+-/=]*",
      "type": "string"
    },
    "CustomMetadataLimitExceededException": {
      "documentation": "<p>The limit has been reached on the number of custom properties for the specified resource.</p>",
      "error": {
        "httpStatusCode": 429
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "ErrorMessageType"
        }
      },
      "type": "structure"
    },
    "CustomMetadataMap": {
      "key": {
        "shape": "CustomMetadataKeyType"
      },
      "max": 8,
      "min": 1,
      "type": "map",
      "value": {
        "shape": "CustomMetadataValueType"
      }
    },
    "CustomMetadataValueType": {
      "max": 256,
      "min": 1,
      "pattern": "[a-zA-Z0-9._+-/=][a-zA-Z0-9 ._+-/=]*",
      "type": "string"
    },
    "DeactivateUserRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "UserId": {
          "documentation": "<p>The ID of the user.</p>",
          "location": "uri",
          "locationName": "UserId",
          "shape": "IdType"
        }
      },
      "required": [
        "UserId"
      ],
      "type": "structure"
    },
    "DeactivatingLastSystemUserException": {
      "documentation": "<p>The last user in the organization is being deactivated.</p>",
      "error": {
        "httpStatusCode": 409
      },
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "DeleteCommentRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "CommentId": {
          "documentation": "<p>The ID of the comment.</p>",
          "location": "uri",
          "locationName": "CommentId",
          "shape": "CommentIdType"
        },
        "DocumentId": {
          "documentation": "<p>The ID of the document.</p>",
          "location": "uri",
          "locationName": "DocumentId",
          "shape": "ResourceIdType"
        },
        "VersionId": {
          "documentation": "<p>The ID of the document version.</p>",
          "location": "uri",
          "locationName": "VersionId",
          "shape": "DocumentVersionIdType"
        }
      },
      "required": [
        "DocumentId",
        "VersionId",
        "CommentId"
      ],
      "type": "structure"
    },
    "DeleteCustomMetadataRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "DeleteAll": {
          "documentation": "<p>Flag to indicate removal of all custom metadata properties from the specified resource.</p>",
          "location": "querystring",
          "locationName": "deleteAll",
          "shape": "BooleanType"
        },
        "Keys": {
          "documentation": "<p>List of properties to remove.</p>",
          "location": "querystring",
          "locationName": "keys",
          "shape": "CustomMetadataKeyList"
        },
        "ResourceId": {
          "documentation": "<p>The ID of the resource, either a document or folder.</p>",
          "location": "uri",
          "locationName": "ResourceId",
          "shape": "ResourceIdType"
        },
        "VersionId": {
          "documentation": "<p>The ID of the version, if the custom metadata is being deleted from a document version.</p>",
          "location": "querystring",
          "locationName": "versionId",
          "shape": "DocumentVersionIdType"
        }
      },
      "required": [
        "ResourceId"
      ],
      "type": "structure"
    },
    "DeleteCustomMetadataResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteDocumentRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "DocumentId": {
          "documentation": "<p>The ID of the document.</p>",
          "location": "uri",
          "locationName": "DocumentId",
          "shape": "ResourceIdType"
        }
      },
      "required": [
        "DocumentId"
      ],
      "type": "structure"
    },
    "DeleteFolderContentsRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "FolderId": {
          "documentation": "<p>The ID of the folder.</p>",
          "location": "uri",
          "locationName": "FolderId",
          "shape": "ResourceIdType"
        }
      },
      "required": [
        "FolderId"
      ],
      "type": "structure"
    },
    "DeleteFolderRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "FolderId": {
          "documentation": "<p>The ID of the folder.</p>",
          "location": "uri",
          "locationName": "FolderId",
          "shape": "ResourceIdType"
        }
      },
      "required": [
        "FolderId"
      ],
      "type": "structure"
    },
    "DeleteLabelsRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "DeleteAll": {
          "documentation": "<p>Flag to request removal of all labels from the specified resource.</p>",
          "location": "querystring",
          "locationName": "deleteAll",
          "shape": "BooleanType"
        },
        "Labels": {
          "documentation": "<p>List of labels to delete from the resource.</p>",
          "location": "querystring",
          "locationName": "labels",
          "shape": "SharedLabels"
        },
        "ResourceId": {
          "documentation": "<p>The ID of the resource.</p>",
          "location": "uri",
          "locationName": "ResourceId",
          "shape": "ResourceIdType"
        }
      },
      "required": [
        "ResourceId"
      ],
      "type": "structure"
    },
    "DeleteLabelsResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteNotificationSubscriptionRequest": {
      "members": {
        "OrganizationId": {
          "documentation": "<p>The ID of the organization.</p>",
          "location": "uri",
          "locationName": "OrganizationId",
          "shape": "IdType"
        },
        "SubscriptionId": {
          "documentation": "<p>The ID of the subscription.</p>",
          "location": "uri",
          "locationName": "SubscriptionId",
          "shape": "IdType"
        }
      },
      "required": [
        "SubscriptionId",
        "OrganizationId"
      ],
      "type": "structure"
    },
    "DeleteUserRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "UserId": {
          "documentation": "<p>The ID of the user.</p>",
          "location": "uri",
          "locationName": "UserId",
          "shape": "IdType"
        }
      },
      "required": [
        "UserId"
      ],
      "type": "structure"
    },
    "DescribeActivitiesRequest": {
      "members": {
        "ActivityTypes": {
          "documentation": "<p>Specifies which activity types to include in the response. If this field is left empty, all activity types are returned.</p>",
          "location": "querystring",
          "locationName": "activityTypes",
          "shape": "ActivityNamesFilterType"
        },
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "EndTime": {
          "documentation": "<p>The timestamp that determines the end time of the activities. The response includes the activities performed before the specified timestamp.</p>",
          "location": "querystring",
          "locationName": "endTime",
          "shape": "TimestampType"
        },
        "IncludeIndirectActivities": {
          "documentation": "<p>Includes indirect activities. An indirect activity results from a direct activity performed on a parent resource. For example, sharing a parent folder (the direct activity) shares all of the subfolders and documents within the parent folder (the indirect activity).</p>",
          "location": "querystring",
          "locationName": "includeIndirectActivities",
          "shape": "BooleanType"
        },
        "Limit": {
          "documentation": "<p>The maximum number of items to return.</p>",
          "location": "querystring",
          "locationName": "limit",
          "shape": "LimitType"
        },
        "Marker": {
          "documentation": "<p>The marker for the next set of results.</p>",
          "location": "querystring",
          "locationName": "marker",
          "shape": "MarkerType"
        },
        "OrganizationId": {
          "documentation": "<p>The ID of the organization. This is a mandatory parameter when using administrative API (SigV4) requests.</p>",
          "location": "querystring",
          "locationName": "organizationId",
          "shape": "IdType"
        },
        "ResourceId": {
          "documentation": "<p>The document or folder ID for which to describe activity types.</p>",
          "location": "querystring",
          "locationName": "resourceId",
          "shape": "IdType"
        },
        "StartTime": {
          "documentation": "<p>The timestamp that determines the starting time of the activities. The response includes the activities performed after the specified timestamp.</p>",
          "location": "querystring",
          "locationName": "startTime",
          "shape": "TimestampType"
        },
        "UserId": {
          "documentation": "<p>The ID of the user who performed the action. The response includes activities pertaining to this user. This is an optional parameter and is only applicable for administrative API (SigV4) requests.</p>",
          "location": "querystring",
          "locationName": "userId",
          "shape": "IdType"
        }
      },
      "type": "structure"
    },
    "DescribeActivitiesResponse": {
      "members": {
        "Marker": {
          "documentation": "<p>The marker for the next set of results.</p>",
          "shape": "MarkerType"
        },
        "UserActivities": {
          "documentation": "<p>The list of activities for the specified user and time period.</p>",
          "shape": "UserActivities"
        }
      },
      "type": "structure"
    },
    "DescribeCommentsRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "DocumentId": {
          "documentation": "<p>The ID of the document.</p>",
          "location": "uri",
          "locationName": "DocumentId",
          "shape": "ResourceIdType"
        },
        "Limit": {
          "documentation": "<p>The maximum number of items to return.</p>",
          "location": "querystring",
          "locationName": "limit",
          "shape": "LimitType"
        },
        "Marker": {
          "documentation": "<p>The marker for the next set of results. This marker was received from a previous call.</p>",
          "location": "querystring",
          "locationName": "marker",
          "shape": "MarkerType"
        },
        "VersionId": {
          "documentation": "<p>The ID of the document version.</p>",
          "location": "uri",
          "locationName": "VersionId",
          "shape": "DocumentVersionIdType"
        }
      },
      "required": [
        "DocumentId",
        "VersionId"
      ],
      "type": "structure"
    },
    "DescribeCommentsResponse": {
      "members": {
        "Comments": {
          "documentation": "<p>The list of comments for the specified document version.</p>",
          "shape": "CommentList"
        },
        "Marker": {
          "documentation": "<p>The marker for the next set of results. This marker was received from a previous call.</p>",
          "shape": "MarkerType"
        }
      },
      "type": "structure"
    },
    "DescribeDocumentVersionsRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "DocumentId": {
          "documentation": "<p>The ID of the document.</p>",
          "location": "uri",
          "locationName": "DocumentId",
          "shape": "ResourceIdType"
        },
        "Fields": {
          "documentation": "<p>Specify \"SOURCE\" to include initialized versions and a URL for the source document.</p>",
          "location": "querystring",
          "locationName": "fields",
          "shape": "FieldNamesType"
        },
        "Include": {
          "documentation": "<p>A comma-separated list of values. Specify \"INITIALIZED\" to include incomplete versions.</p>",
          "location": "querystring",
          "locationName": "include",
          "shape": "FieldNamesType"
        },
        "Limit": {
          "documentation": "<p>The maximum number of versions to return with this call.</p>",
          "location": "querystring",
          "locationName": "limit",
          "shape": "LimitType"
        },
        "Marker": {
          "documentation": "<p>The marker for the next set of results. (You received this marker from a previous call.)</p>",
          "location": "querystring",
          "locationName": "marker",
          "shape": "PageMarkerType"
        }
      },
      "required": [
        "DocumentId"
      ],
      "type": "structure"
    },
    "DescribeDocumentVersionsResponse": {
      "members": {
        "DocumentVersions": {
          "documentation": "<p>The document versions.</p>",
          "shape": "DocumentVersionMetadataList"
        },
        "Marker": {
          "documentation": "<p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>",
          "shape": "PageMarkerType"
        }
      },
      "type": "structure"
    },
    "DescribeFolderContentsRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "FolderId": {
          "documentation": "<p>The ID of the folder.</p>",
          "location": "uri",
          "locationName": "FolderId",
          "shape": "ResourceIdType"
        },
        "Include": {
          "documentation": "<p>The contents to include. Specify \"INITIALIZED\" to include initialized documents.</p>",
          "location": "querystring",
          "locationName": "include",
          "shape": "FieldNamesType"
        },
        "Limit": {
          "documentation": "<p>The maximum number of items to return with this call.</p>",
          "location": "querystring",
          "locationName": "limit",
          "shape": "LimitType"
        },
        "Marker": {
          "documentation": "<p>The marker for the next set of results. This marker was received from a previous call.</p>",
          "location": "querystring",
          "locationName": "marker",
          "shape": "PageMarkerType"
        },
        "Order": {
          "documentation": "<p>The order for the contents of the folder.</p>",
          "location": "querystring",
          "locationName": "order",
          "shape": "OrderType"
        },
        "Sort": {
          "documentation": "<p>The sorting criteria.</p>",
          "location": "querystring",
          "locationName": "sort",
          "shape": "ResourceSortType"
        },
        "Type": {
          "documentation": "<p>The type of items.</p>",
          "location": "querystring",
          "locationName": "type",
          "shape": "FolderContentType"
        }
      },
      "required": [
        "FolderId"
      ],
      "type": "structure"
    },
    "DescribeFolderContentsResponse": {
      "members": {
        "Documents": {
          "documentation": "<p>The documents in the specified folder.</p>",
          "shape": "DocumentMetadataList"
        },
        "Folders": {
          "documentation": "<p>The subfolders in the specified folder.</p>",
          "shape": "FolderMetadataList"
        },
        "Marker": {
          "documentation": "<p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>",
          "shape": "PageMarkerType"
        }
      },
      "type": "structure"
    },
    "DescribeGroupsRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "Limit": {
          "documentation": "<p>The maximum number of items to return with this call.</p>",
          "location": "querystring",
          "locationName": "limit",
          "shape": "PositiveIntegerType"
        },
        "Marker": {
          "documentation": "<p>The marker for the next set of results. (You received this marker from a previous call.)</p>",
          "location": "querystring",
          "locationName": "marker",
          "shape": "MarkerType"
        },
        "OrganizationId": {
          "documentation": "<p>The ID of the organization.</p>",
          "location": "querystring",
          "locationName": "organizationId",
          "shape": "IdType"
        },
        "SearchQuery": {
          "documentation": "<p>A query to describe groups by group name.</p>",
          "location": "querystring",
          "locationName": "searchQuery",
          "shape": "SearchQueryType"
        }
      },
      "required": [
        "SearchQuery"
      ],
      "type": "structure"
    },
    "DescribeGroupsResponse": {
      "members": {
        "Groups": {
          "documentation": "<p>The list of groups.</p>",
          "shape": "GroupMetadataList"
        },
        "Marker": {
          "documentation": "<p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>",
          "shape": "MarkerType"
        }
      },
      "type": "structure"
    },
    "DescribeNotificationSubscriptionsRequest": {
      "members": {
        "Limit": {
          "documentation": "<p>The maximum number of items to return with this call.</p>",
          "location": "querystring",
          "locationName": "limit",
          "shape": "LimitType"
        },
        "Marker": {
          "documentation": "<p>The marker for the next set of results. (You received this marker from a previous call.)</p>",
          "location": "querystring",
          "locationName": "marker",
          "shape": "PageMarkerType"
        },
        "OrganizationId": {
          "documentation": "<p>The ID of the organization.</p>",
          "location": "uri",
          "locationName": "OrganizationId",
          "shape": "IdType"
        }
      },
      "required": [
        "OrganizationId"
      ],
      "type": "structure"
    },
    "DescribeNotificationSubscriptionsResponse": {
      "members": {
        "Marker": {
          "documentation": "<p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>",
          "shape": "PageMarkerType"
        },
        "Subscriptions": {
          "documentation": "<p>The subscriptions.</p>",
          "shape": "SubscriptionList"
        }
      },
      "type": "structure"
    },
    "DescribeResourcePermissionsRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "Limit": {
          "documentation": "<p>The maximum number of items to return with this call.</p>",
          "location": "querystring",
          "locationName": "limit",
          "shape": "LimitType"
        },
        "Marker": {
          "documentation": "<p>The marker for the next set of results. (You received this marker from a previous call)</p>",
          "location": "querystring",
          "locationName": "marker",
          "shape": "PageMarkerType"
        },
        "PrincipalId": {
          "documentation": "<p>The ID of the principal to filter permissions by.</p>",
          "location": "querystring",
          "locationName": "principalId",
          "shape": "IdType"
        },
        "ResourceId": {
          "documentation": "<p>The ID of the resource.</p>",
          "location": "uri",
          "locationName": "ResourceId",
          "shape": "ResourceIdType"
        }
      },
      "required": [
        "ResourceId"
      ],
      "type": "structure"
    },
    "DescribeResourcePermissionsResponse": {
      "members": {
        "Marker": {
          "documentation": "<p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>",
          "shape": "PageMarkerType"
        },
        "Principals": {
          "documentation": "<p>The principals.</p>",
          "shape": "PrincipalList"
        }
      },
      "type": "structure"
    },
    "DescribeRootFoldersRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "Limit": {
          "documentation": "<p>The maximum number of items to return.</p>",
          "location": "querystring",
          "locationName": "limit",
          "shape": "LimitType"
        },
        "Marker": {
          "documentation": "<p>The marker for the next set of results. (You received this marker from a previous call.)</p>",
          "location": "querystring",
          "locationName": "marker",
          "shape": "PageMarkerType"
        }
      },
      "required": [
        "AuthenticationToken"
      ],
      "type": "structure"
    },
    "DescribeRootFoldersResponse": {
      "members": {
        "Folders": {
          "documentation": "<p>The user's special folders.</p>",
          "shape": "FolderMetadataList"
        },
        "Marker": {
          "documentation": "<p>The marker for the next set of results.</p>",
          "shape": "PageMarkerType"
        }
      },
      "type": "structure"
    },
    "DescribeUsersRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "Fields": {
          "documentation": "<p>A comma-separated list of values. Specify \"STORAGE_METADATA\" to include the user storage quota and utilization information.</p>",
          "location": "querystring",
          "locationName": "fields",
          "shape": "FieldNamesType"
        },
        "Include": {
          "documentation": "<p>The state of the users. Specify \"ALL\" to include inactive users.</p>",
          "location": "querystring",
          "locationName": "include",
          "shape": "UserFilterType"
        },
        "Limit": {
          "documentation": "<p>The maximum number of items to return.</p>",
          "location": "querystring",
          "locationName": "limit",
          "shape": "LimitType"
        },
        "Marker": {
          "documentation": "<p>The marker for the next set of results. (You received this marker from a previous call.)</p>",
          "location": "querystring",
          "locationName": "marker",
          "shape": "PageMarkerType"
        },
        "Order": {
          "documentation": "<p>The order for the results.</p>",
          "location": "querystring",
          "locationName": "order",
          "shape": "OrderType"
        },
        "OrganizationId": {
          "documentation": "<p>The ID of the organization.</p>",
          "location": "querystring",
          "locationName": "organizationId",
          "shape": "IdType"
        },
        "Query": {
          "documentation": "<p>A query to filter users by user name.</p>",
          "location": "querystring",
          "locationName": "query",
          "shape": "SearchQueryType"
        },
        "Sort": {
          "documentation": "<p>The sorting criteria.</p>",
          "location": "querystring",
          "locationName": "sort",
          "shape": "UserSortType"
        },
        "UserIds": {
          "documentation": "<p>The IDs of the users.</p>",
          "location": "querystring",
          "locationName": "userIds",
          "shape": "UserIdsType"
        }
      },
      "type": "structure"
    },
    "DescribeUsersResponse": {
      "members": {
        "Marker": {
          "documentation": "<p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>",
          "shape": "PageMarkerType"
        },
        "TotalNumberOfUsers": {
          "deprecated": true,
          "documentation": "<p>The total number of users included in the results.</p>",
          "shape": "SizeType"
        },
        "Users": {
          "documentation": "<p>The users.</p>",
          "shape": "OrganizationUserList"
        }
      },
      "type": "structure"
    },
    "DocumentContentType": {
      "max": 128,
      "min": 1,
      "type": "string"
    },
    "DocumentLockedForCommentsException": {
      "documentation": "<p>This exception is thrown when the document is locked for comments and user tries to create or delete a comment on that document.</p>",
      "error": {
        "httpStatusCode": 409
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "ErrorMessageType"
        }
      },
      "type": "structure"
    },
    "DocumentMetadata": {
      "documentation": "<p>Describes the document.</p>",
      "members": {
        "CreatedTimestamp": {
          "documentation": "<p>The time when the document was created.</p>",
          "shape": "TimestampType"
        },
        "CreatorId": {
          "documentation": "<p>The ID of the creator.</p>",
          "shape": "IdType"
        },
        "Id": {
          "documentation": "<p>The ID of the document.</p>",
          "shape": "ResourceIdType"
        },
        "Labels": {
          "documentation": "<p>List of labels on the document.</p>",
          "shape": "SharedLabels"
        },
        "LatestVersionMetadata": {
          "documentation": "<p>The latest version of the document.</p>",
          "shape": "DocumentVersionMetadata"
        },
        "ModifiedTimestamp": {
          "documentation": "<p>The time when the document was updated.</p>",
          "shape": "TimestampType"
        },
        "ParentFolderId": {
          "documentation": "<p>The ID of the parent folder.</p>",
          "shape": "ResourceIdType"
        },
        "ResourceState": {
          "documentation": "<p>The resource state.</p>",
          "shape": "ResourceStateType"
        }
      },
      "type": "structure"
    },
    "DocumentMetadataList": {
      "member": {
        "shape": "DocumentMetadata"
      },
      "type": "list"
    },
    "DocumentSourceType": {
      "enum": [
        "ORIGINAL",
        "WITH_COMMENTS"
      ],
      "type": "string"
    },
    "DocumentSourceUrlMap": {
      "key": {
        "shape": "DocumentSourceType"
      },
      "type": "map",
      "value": {
        "shape": "UrlType"
      }
    },
    "DocumentStatusType": {
      "enum": [
        "INITIALIZED",
        "ACTIVE"
      ],
      "type": "string"
    },
    "DocumentThumbnailType": {
      "enum": [
        "SMALL",
        "SMALL_HQ",
        "LARGE"
      ],
      "type": "string"
    },
    "DocumentThumbnailUrlMap": {
      "key": {
        "shape": "DocumentThumbnailType"
      },
      "type": "map",
      "value": {
        "shape": "UrlType"
      }
    },
    "DocumentVersionIdType": {
      "max": 128,
      "min": 1,
      "pattern": "[\\w+-.@]+",
      "type": "string"
    },
    "DocumentVersionMetadata": {
      "documentation": "<p>Describes a version of a document.</p>",
      "members": {
        "ContentCreatedTimestamp": {
          "documentation": "<p>The timestamp when the content of the document was originally created.</p>",
          "shape": "TimestampType"
        },
        "ContentModifiedTimestamp": {
          "documentation": "<p>The timestamp when the content of the document was modified.</p>",
          "shape": "TimestampType"
        },
        "ContentType": {
          "documentation": "<p>The content type of the document.</p>",
          "shape": "DocumentContentType"
        },
        "CreatedTimestamp": {
          "documentation": "<p>The timestamp when the document was first uploaded.</p>",
          "shape": "TimestampType"
        },
        "CreatorId": {
          "documentation": "<p>The ID of the creator.</p>",
          "shape": "IdType"
        },
        "Id": {
          "documentation": "<p>The ID of the version.</p>",
          "shape": "DocumentVersionIdType"
        },
        "ModifiedTimestamp": {
          "documentation": "<p>The timestamp when the document was last uploaded.</p>",
          "shape": "TimestampType"
        },
        "Name": {
          "documentation": "<p>The name of the version.</p>",
          "shape": "ResourceNameType"
        },
        "Signature": {
          "documentation": "<p>The signature of the document.</p>",
          "shape": "HashType"
        },
        "Size": {
          "documentation": "<p>The size of the document, in bytes.</p>",
          "shape": "SizeType"
        },
        "Source": {
          "documentation": "<p>The source of the document.</p>",
          "shape": "DocumentSourceUrlMap"
        },
        "Status": {
          "documentation": "<p>The status of the document.</p>",
          "shape": "DocumentStatusType"
        },
        "Thumbnail": {
          "documentation": "<p>The thumbnail of the document.</p>",
          "shape": "DocumentThumbnailUrlMap"
        }
      },
      "type": "structure"
    },
    "DocumentVersionMetadataList": {
      "member": {
        "shape": "DocumentVersionMetadata"
      },
      "type": "list"
    },
    "DocumentVersionStatus": {
      "enum": [
        "ACTIVE"
      ],
      "type": "string"
    },
    "DraftUploadOutOfSyncException": {
      "documentation": "<p>This exception is thrown when a valid checkout ID is not presented on document version upload calls for a document that has been checked out from Web client.</p>",
      "error": {
        "httpStatusCode": 409
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "ErrorMessageType"
        }
      },
      "type": "structure"
    },
    "EmailAddressType": {
      "max": 256,
      "min": 1,
      "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
      "type": "string"
    },
    "EntityAlreadyExistsException": {
      "documentation": "<p>The resource already exists.</p>",
      "error": {
        "httpStatusCode": 409
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "ErrorMessageType"
        }
      },
      "type": "structure"
    },
    "EntityIdList": {
      "member": {
        "shape": "IdType"
      },
      "type": "list"
    },
    "EntityNotExistsException": {
      "documentation": "<p>The resource does not exist.</p>",
      "error": {
        "httpStatusCode": 404
      },
      "exception": true,
      "members": {
        "EntityIds": {
          "shape": "EntityIdList"
        },
        "Message": {
          "shape": "ErrorMessageType"
        }
      },
      "type": "structure"
    },
    "ErrorMessageType": {
      "type": "string"
    },
    "FailedDependencyException": {
      "documentation": "<p>The AWS Directory Service cannot reach an on-premises instance. Or a dependency under the control of the organization is failing, such as a connected Active Directory.</p>",
      "error": {
        "httpStatusCode": 424
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "ErrorMessageType"
        }
      },
      "type": "structure"
    },
    "FieldNamesType": {
      "max": 256,
      "min": 1,
      "pattern": "[\\w,]+",
      "type": "string"
    },
    "FolderContentType": {
      "enum": [
        "ALL",
        "DOCUMENT",
        "FOLDER"
      ],
      "type": "string"
    },
    "FolderMetadata": {
      "documentation": "<p>Describes a folder.</p>",
      "members": {
        "CreatedTimestamp": {
          "documentation": "<p>The time when the folder was created.</p>",
          "shape": "TimestampType"
        },
        "CreatorId": {
          "documentation": "<p>The ID of the creator.</p>",
          "shape": "IdType"
        },
        "Id": {
          "documentation": "<p>The ID of the folder.</p>",
          "shape": "ResourceIdType"
        },
        "Labels": {
          "documentation": "<p>List of labels on the folder.</p>",
          "shape": "SharedLabels"
        },
        "LatestVersionSize": {
          "documentation": "<p>The size of the latest version of the folder metadata.</p>",
          "shape": "SizeType"
        },
        "ModifiedTimestamp": {
          "documentation": "<p>The time when the folder was updated.</p>",
          "shape": "TimestampType"
        },
        "Name": {
          "documentation": "<p>The name of the folder.</p>",
          "shape": "ResourceNameType"
        },
        "ParentFolderId": {
          "documentation": "<p>The ID of the parent folder.</p>",
          "shape": "ResourceIdType"
        },
        "ResourceState": {
          "documentation": "<p>The resource state of the folder.</p>",
          "shape": "ResourceStateType"
        },
        "Signature": {
          "documentation": "<p>The unique identifier created from the subfolders and documents of the folder.</p>",
          "shape": "HashType"
        },
        "Size": {
          "documentation": "<p>The size of the folder metadata.</p>",
          "shape": "SizeType"
        }
      },
      "type": "structure"
    },
    "FolderMetadataList": {
      "member": {
        "shape": "FolderMetadata"
      },
      "type": "list"
    },
    "GetCurrentUserRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        }
      },
      "required": [
        "AuthenticationToken"
      ],
      "type": "structure"
    },
    "GetCurrentUserResponse": {
      "members": {
        "User": {
          "documentation": "<p>Metadata of the user.</p>",
          "shape": "User"
        }
      },
      "type": "structure"
    },
    "GetDocumentPathRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "DocumentId": {
          "documentation": "<p>The ID of the document.</p>",
          "location": "uri",
          "locationName": "DocumentId",
          "shape": "IdType"
        },
        "Fields": {
          "documentation": "<p>A comma-separated list of values. Specify <code>NAME</code> to include the names of the parent folders.</p>",
          "location": "querystring",
          "locationName": "fields",
          "shape": "FieldNamesType"
        },
        "Limit": {
          "documentation": "<p>The maximum number of levels in the hierarchy to return.</p>",
          "location": "querystring",
          "locationName": "limit",
          "shape": "LimitType"
        },
        "Marker": {
          "documentation": "<p>This value is not supported.</p>",
          "location": "querystring",
          "locationName": "marker",
          "shape": "PageMarkerType"
        }
      },
      "required": [
        "DocumentId"
      ],
      "type": "structure"
    },
    "GetDocumentPathResponse": {
      "members": {
        "Path": {
          "documentation": "<p>The path information.</p>",
          "shape": "ResourcePath"
        }
      },
      "type": "structure"
    },
    "GetDocumentRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "DocumentId": {
          "documentation": "<p>The ID of the document.</p>",
          "location": "uri",
          "locationName": "DocumentId",
          "shape": "ResourceIdType"
        },
        "IncludeCustomMetadata": {
          "documentation": "<p>Set this to <code>TRUE</code> to include custom metadata in the response.</p>",
          "location": "querystring",
          "locationName": "includeCustomMetadata",
          "shape": "BooleanType"
        }
      },
      "required": [
        "DocumentId"
      ],
      "type": "structure"
    },
    "GetDocumentResponse": {
      "members": {
        "CustomMetadata": {
          "documentation": "<p>The custom metadata on the document.</p>",
          "shape": "CustomMetadataMap"
        },
        "Metadata": {
          "documentation": "<p>The metadata details of the document.</p>",
          "shape": "DocumentMetadata"
        }
      },
      "type": "structure"
    },
    "GetDocumentVersionRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "DocumentId": {
          "documentation": "<p>The ID of the document.</p>",
          "location": "uri",
          "locationName": "DocumentId",
          "shape": "ResourceIdType"
        },
        "Fields": {
          "documentation": "<p>A comma-separated list of values. Specify \"SOURCE\" to include a URL for the source document.</p>",
          "location": "querystring",
          "locationName": "fields",
          "shape": "FieldNamesType"
        },
        "IncludeCustomMetadata": {
          "documentation": "<p>Set this to TRUE to include custom metadata in the response.</p>",
          "location": "querystring",
          "locationName": "includeCustomMetadata",
          "shape": "BooleanType"
        },
        "VersionId": {
          "documentation": "<p>The version ID of the document.</p>",
          "location": "uri",
          "locationName": "VersionId",
          "shape": "DocumentVersionIdType"
        }
      },
      "required": [
        "DocumentId",
        "VersionId"
      ],
      "type": "structure"
    },
    "GetDocumentVersionResponse": {
      "members": {
        "CustomMetadata": {
          "documentation": "<p>The custom metadata on the document version.</p>",
          "shape": "CustomMetadataMap"
        },
        "Metadata": {
          "documentation": "<p>The version metadata.</p>",
          "shape": "DocumentVersionMetadata"
        }
      },
      "type": "structure"
    },
    "GetFolderPathRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "Fields": {
          "documentation": "<p>A comma-separated list of values. Specify \"NAME\" to include the names of the parent folders.</p>",
          "location": "querystring",
          "locationName": "fields",
          "shape": "FieldNamesType"
        },
        "FolderId": {
          "documentation": "<p>The ID of the folder.</p>",
          "location": "uri",
          "locationName": "FolderId",
          "shape": "IdType"
        },
        "Limit": {
          "documentation": "<p>The maximum number of levels in the hierarchy to return.</p>",
          "location": "querystring",
          "locationName": "limit",
          "shape": "LimitType"
        },
        "Marker": {
          "documentation": "<p>This value is not supported.</p>",
          "location": "querystring",
          "locationName": "marker",
          "shape": "PageMarkerType"
        }
      },
      "required": [
        "FolderId"
      ],
      "type": "structure"
    },
    "GetFolderPathResponse": {
      "members": {
        "Path": {
          "documentation": "<p>The path information.</p>",
          "shape": "ResourcePath"
        }
      },
      "type": "structure"
    },
    "GetFolderRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "FolderId": {
          "documentation": "<p>The ID of the folder.</p>",
          "location": "uri",
          "locationName": "FolderId",
          "shape": "ResourceIdType"
        },
        "IncludeCustomMetadata": {
          "documentation": "<p>Set to TRUE to include custom metadata in the response.</p>",
          "location": "querystring",
          "locationName": "includeCustomMetadata",
          "shape": "BooleanType"
        }
      },
      "required": [
        "FolderId"
      ],
      "type": "structure"
    },
    "GetFolderResponse": {
      "members": {
        "CustomMetadata": {
          "documentation": "<p>The custom metadata on the folder.</p>",
          "shape": "CustomMetadataMap"
        },
        "Metadata": {
          "documentation": "<p>The metadata of the folder.</p>",
          "shape": "FolderMetadata"
        }
      },
      "type": "structure"
    },
    "GetResourcesRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>The Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "CollectionType": {
          "documentation": "<p>The collection type.</p>",
          "location": "querystring",
          "locationName": "collectionType",
          "shape": "ResourceCollectionType"
        },
        "Limit": {
          "documentation": "<p>The maximum number of resources to return.</p>",
          "location": "querystring",
          "locationName": "limit",
          "shape": "LimitType"
        },
        "Marker": {
          "documentation": "<p>The marker for the next set of results. This marker was received from a previous call.</p>",
          "location": "querystring",
          "locationName": "marker",
          "shape": "PageMarkerType"
        },
        "UserId": {
          "documentation": "<p>The user ID for the resource collection. This is a required field for accessing the API operation using IAM credentials.</p>",
          "location": "querystring",
          "locationName": "userId",
          "shape": "IdType"
        }
      },
      "type": "structure"
    },
    "GetResourcesResponse": {
      "members": {
        "Documents": {
          "documentation": "<p>The documents in the specified collection.</p>",
          "shape": "DocumentMetadataList"
        },
        "Folders": {
          "documentation": "<p>The folders in the specified folder.</p>",
          "shape": "FolderMetadataList"
        },
        "Marker": {
          "documentation": "<p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>",
          "shape": "PageMarkerType"
        }
      },
      "type": "structure"
    },
    "GroupMetadata": {
      "documentation": "<p>Describes the metadata of a user group.</p>",
      "members": {
        "Id": {
          "documentation": "<p>The ID of the user group.</p>",
          "shape": "IdType"
        },
        "Name": {
          "documentation": "<p>The name of the group.</p>",
          "shape": "GroupNameType"
        }
      },
      "type": "structure"
    },
    "GroupMetadataList": {
      "member": {
        "shape": "GroupMetadata"
      },
      "type": "list"
    },
    "GroupNameType": {
      "type": "string"
    },
    "HashType": {
      "max": 128,
      "min": 0,
      "pattern": "[&\\w+-.@]+",
      "type": "string"
    },
    "HeaderNameType": {
      "max": 256,
      "min": 1,
      "pattern": "[\\w-]+",
      "type": "string"
    },
    "HeaderValueType": {
      "max": 1024,
      "min": 1,
      "type": "string"
    },
    "IdType": {
      "max": 256,
      "min": 1,
      "pattern": "[&\\w+-.@]+",
      "type": "string"
    },
    "IllegalUserStateException": {
      "documentation": "<p>The user is undergoing transfer of ownership.</p>",
      "error": {
        "httpStatusCode": 409
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "ErrorMessageType"
        }
      },
      "type": "structure"
    },
    "InitiateDocumentVersionUploadRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "ContentCreatedTimestamp": {
          "documentation": "<p>The timestamp when the content of the document was originally created.</p>",
          "shape": "TimestampType"
        },
        "ContentModifiedTimestamp": {
          "documentation": "<p>The timestamp when the content of the document was modified.</p>",
          "shape": "TimestampType"
        },
        "ContentType": {
          "documentation": "<p>The content type of the document.</p>",
          "shape": "DocumentContentType"
        },
        "DocumentSizeInBytes": {
          "documentation": "<p>The size of the document, in bytes.</p>",
          "shape": "SizeType"
        },
        "Id": {
          "documentation": "<p>The ID of the document.</p>",
          "shape": "ResourceIdType"
        },
        "Name": {
          "documentation": "<p>The name of the document.</p>",
          "shape": "ResourceNameType"
        },
        "ParentFolderId": {
          "documentation": "<p>The ID of the parent folder.</p>",
          "shape": "ResourceIdType"
        }
      },
      "required": [
        "ParentFolderId"
      ],
      "type": "structure"
    },
    "InitiateDocumentVersionUploadResponse": {
      "members": {
        "Metadata": {
          "documentation": "<p>The document metadata.</p>",
          "shape": "DocumentMetadata"
        },
        "UploadMetadata": {
          "documentation": "<p>The upload metadata.</p>",
          "shape": "UploadMetadata"
        }
      },
      "type": "structure"
    },
    "InvalidArgumentException": {
      "documentation": "<p>The pagination marker or limit fields are not valid.</p>",
      "error": {
        "httpStatusCode": 400
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "ErrorMessageType"
        }
      },
      "type": "structure"
    },
    "InvalidCommentOperationException": {
      "documentation": "<p>The requested operation is not allowed on the specified comment object.</p>",
      "error": {
        "httpStatusCode": 409
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "ErrorMessageType"
        }
      },
      "type": "structure"
    },
    "InvalidOperationException": {
      "documentation": "<p>The operation is invalid.</p>",
      "error": {
        "httpStatusCode": 405
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "ErrorMessageType"
        }
      },
      "type": "structure"
    },
    "InvalidPasswordException": {
      "documentation": "<p>The password is invalid.</p>",
      "error": {
        "httpStatusCode": 401
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "ErrorMessageType"
        }
      },
      "type": "structure"
    },
    "LimitExceededException": {
      "documentation": "<p>The maximum of 100,000 folders under the parent folder has been exceeded.</p>",
      "error": {
        "httpStatusCode": 409
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "ErrorMessageType"
        }
      },
      "type": "structure"
    },
    "LimitType": {
      "max": 999,
      "min": 1,
      "type": "integer"
    },
    "LocaleType": {
      "enum": [
        "en",
        "fr",
        "ko",
        "de",
        "es",
        "ja",
        "ru",
        "zh_CN",
        "zh_TW",
        "pt_BR",
        "default"
      ],
      "type": "string"
    },
    "MarkerType": {
      "max": 2048,
      "min": 1,
      "pattern": "[\\u0000-\\u00FF]+",
      "type": "string"
    },
    "MessageType": {
      "max": 2048,
      "min": 0,
      "sensitive": true,
      "type": "string"
    },
    "NotificationOptions": {
      "documentation": "<p>Set of options which defines notification preferences of given action.</p>",
      "members": {
        "EmailMessage": {
          "documentation": "<p>Text value to be included in the email body.</p>",
          "shape": "MessageType"
        },
        "SendEmail": {
          "documentation": "<p>Boolean value to indicate an email notification should be sent to the receipients.</p>",
          "shape": "BooleanType"
        }
      },
      "type": "structure"
    },
    "OrderType": {
      "enum": [
        "ASCENDING",
        "DESCENDING"
      ],
      "type": "string"
    },
    "OrganizationUserList": {
      "member": {
        "shape": "User"
      },
      "type": "list"
    },
    "PageMarkerType": {
      "max": 2048,
      "min": 1,
      "type": "string"
    },
    "Participants": {
      "documentation": "<p>Describes the users or user groups.</p>",
      "members": {
        "Groups": {
          "documentation": "<p>The list of user groups.</p>",
          "shape": "GroupMetadataList"
        },
        "Users": {
          "documentation": "<p>The list of users.</p>",
          "shape": "UserMetadataList"
        }
      },
      "type": "structure"
    },
    "PasswordType": {
      "max": 32,
      "min": 4,
      "pattern": "[\\u0020-\\u00FF]+",
      "sensitive": true,
      "type": "string"
    },
    "PermissionInfo": {
      "documentation": "<p>Describes the permissions.</p>",
      "members": {
        "Role": {
          "documentation": "<p>The role of the user.</p>",
          "shape": "RoleType"
        },
        "Type": {
          "documentation": "<p>The type of permissions.</p>",
          "shape": "RolePermissionType"
        }
      },
      "type": "structure"
    },
    "PermissionInfoList": {
      "member": {
        "shape": "PermissionInfo"
      },
      "type": "list"
    },
    "PositiveIntegerType": {
      "min": 1,
      "type": "integer"
    },
    "PositiveSizeType": {
      "min": 0,
      "type": "long"
    },
    "Principal": {
      "documentation": "<p>Describes a resource.</p>",
      "members": {
        "Id": {
          "documentation": "<p>The ID of the resource.</p>",
          "shape": "IdType"
        },
        "Roles": {
          "documentation": "<p>The permission information for the resource.</p>",
          "shape": "PermissionInfoList"
        },
        "Type": {
          "documentation": "<p>The type of resource.</p>",
          "shape": "PrincipalType"
        }
      },
      "type": "structure"
    },
    "PrincipalList": {
      "member": {
        "shape": "Principal"
      },
      "type": "list"
    },
    "PrincipalType": {
      "enum": [
        "USER",
        "GROUP",
        "INVITE",
        "ANONYMOUS",
        "ORGANIZATION"
      ],
      "type": "string"
    },
    "ProhibitedStateException": {
      "documentation": "<p>The specified document version is not in the INITIALIZED state.</p>",
      "error": {
        "httpStatusCode": 409
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "ErrorMessageType"
        }
      },
      "type": "structure"
    },
    "RemoveAllResourcePermissionsRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "ResourceId": {
          "documentation": "<p>The ID of the resource.</p>",
          "location": "uri",
          "locationName": "ResourceId",
          "shape": "ResourceIdType"
        }
      },
      "required": [
        "ResourceId"
      ],
      "type": "structure"
    },
    "RemoveResourcePermissionRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "PrincipalId": {
          "documentation": "<p>The principal ID of the resource.</p>",
          "location": "uri",
          "locationName": "PrincipalId",
          "shape": "IdType"
        },
        "PrincipalType": {
          "documentation": "<p>The principal type of the resource.</p>",
          "location": "querystring",
          "locationName": "type",
          "shape": "PrincipalType"
        },
        "ResourceId": {
          "documentation": "<p>The ID of the resource.</p>",
          "location": "uri",
          "locationName": "ResourceId",
          "shape": "ResourceIdType"
        }
      },
      "required": [
        "ResourceId",
        "PrincipalId"
      ],
      "type": "structure"
    },
    "RequestedEntityTooLargeException": {
      "documentation": "<p>The response is too large to return. The request must include a filter to reduce the size of the response.</p>",
      "error": {
        "httpStatusCode": 413
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "ErrorMessageType"
        }
      },
      "type": "structure"
    },
    "ResourceAlreadyCheckedOutException": {
      "documentation": "<p>The resource is already checked out.</p>",
      "error": {
        "httpStatusCode": 409
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "ErrorMessageType"
        }
      },
      "type": "structure"
    },
    "ResourceCollectionType": {
      "enum": [
        "SHARED_WITH_ME"
      ],
      "type": "string"
    },
    "ResourceIdType": {
      "max": 128,
      "min": 1,
      "pattern": "[\\w+-.@]+",
      "type": "string"
    },
    "ResourceMetadata": {
      "documentation": "<p>Describes the metadata of a resource.</p>",
      "members": {
        "Id": {
          "documentation": "<p>The ID of the resource.</p>",
          "shape": "ResourceIdType"
        },
        "Name": {
          "documentation": "<p>The name of the resource.</p>",
          "shape": "ResourceNameType"
        },
        "OriginalName": {
          "documentation": "<p>The original name of the resource before a rename operation.</p>",
          "shape": "ResourceNameType"
        },
        "Owner": {
          "documentation": "<p>The owner of the resource.</p>",
          "shape": "UserMetadata"
        },
        "ParentId": {
          "documentation": "<p>The parent ID of the resource before a rename operation.</p>",
          "shape": "ResourceIdType"
        },
        "Type": {
          "documentation": "<p>The type of resource.</p>",
          "shape": "ResourceType"
        },
        "VersionId": {
          "documentation": "<p>The version ID of the resource. This is an optional field and is filled for action on document version.</p>",
          "shape": "DocumentVersionIdType"
        }
      },
      "type": "structure"
    },
    "ResourceNameType": {
      "max": 255,
      "min": 1,
      "pattern": "[\\u0020-\\u202D\\u202F-\\uFFFF]+",
      "type": "string"
    },
    "ResourcePath": {
      "documentation": "<p>Describes the path information of a resource.</p>",
      "members": {
        "Components": {
          "documentation": "<p>The components of the resource path.</p>",
          "shape": "ResourcePathComponentList"
        }
      },
      "type": "structure"
    },
    "ResourcePathComponent": {
      "documentation": "<p>Describes the resource path.</p>",
      "members": {
        "Id": {
          "documentation": "<p>The ID of the resource path.</p>",
          "shape": "IdType"
        },
        "Name": {
          "documentation": "<p>The name of the resource path.</p>",
          "shape": "ResourceNameType"
        }
      },
      "type": "structure"
    },
    "ResourcePathComponentList": {
      "member": {
        "shape": "ResourcePathComponent"
      },
      "type": "list"
    },
    "ResourceSortType": {
      "enum": [
        "DATE",
        "NAME"
      ],
      "type": "string"
    },
    "ResourceStateType": {
      "enum": [
        "ACTIVE",
        "RESTORING",
        "RECYCLING",
        "RECYCLED"
      ],
      "type": "string"
    },
    "ResourceType": {
      "enum": [
        "FOLDER",
        "DOCUMENT"
      ],
      "type": "string"
    },
    "RolePermissionType": {
      "enum": [
        "DIRECT",
        "INHERITED"
      ],
      "type": "string"
    },
    "RoleType": {
      "enum": [
        "VIEWER",
        "CONTRIBUTOR",
        "OWNER",
        "COOWNER"
      ],
      "type": "string"
    },
    "SearchQueryType": {
      "max": 512,
      "min": 1,
      "pattern": "[\\u0020-\\uFFFF]+",
      "sensitive": true,
      "type": "string"
    },
    "ServiceUnavailableException": {
      "documentation": "<p>One or more of the dependencies is unavailable.</p>",
      "error": {
        "httpStatusCode": 503
      },
      "exception": true,
      "fault": true,
      "members": {
        "Message": {
          "shape": "ErrorMessageType"
        }
      },
      "type": "structure"
    },
    "SharePrincipal": {
      "documentation": "<p>Describes the recipient type and ID, if available.</p>",
      "members": {
        "Id": {
          "documentation": "<p>The ID of the recipient.</p>",
          "shape": "IdType"
        },
        "Role": {
          "documentation": "<p>The role of the recipient.</p>",
          "shape": "RoleType"
        },
        "Type": {
          "documentation": "<p>The type of the recipient.</p>",
          "shape": "PrincipalType"
        }
      },
      "required": [
        "Id",
        "Type",
        "Role"
      ],
      "type": "structure"
    },
    "SharePrincipalList": {
      "member": {
        "shape": "SharePrincipal"
      },
      "type": "list"
    },
    "ShareResult": {
      "documentation": "<p>Describes the share results of a resource.</p>",
      "members": {
        "InviteePrincipalId": {
          "documentation": "<p>The ID of the invited user.</p>",
          "shape": "IdType"
        },
        "PrincipalId": {
          "documentation": "<p>The ID of the principal.</p>",
          "shape": "IdType"
        },
        "Role": {
          "documentation": "<p>The role.</p>",
          "shape": "RoleType"
        },
        "ShareId": {
          "documentation": "<p>The ID of the resource that was shared.</p>",
          "shape": "ResourceIdType"
        },
        "Status": {
          "documentation": "<p>The status.</p>",
          "shape": "ShareStatusType"
        },
        "StatusMessage": {
          "documentation": "<p>The status message.</p>",
          "shape": "MessageType"
        }
      },
      "type": "structure"
    },
    "ShareResultsList": {
      "member": {
        "shape": "ShareResult"
      },
      "type": "list"
    },
    "ShareStatusType": {
      "enum": [
        "SUCCESS",
        "FAILURE"
      ],
      "type": "string"
    },
    "SharedLabel": {
      "max": 32,
      "min": 1,
      "pattern": "[a-zA-Z0-9._+-/=][a-zA-Z0-9 ._+-/=]*",
      "type": "string"
    },
    "SharedLabels": {
      "max": 20,
      "member": {
        "shape": "SharedLabel"
      },
      "type": "list"
    },
    "SignedHeaderMap": {
      "key": {
        "shape": "HeaderNameType"
      },
      "type": "map",
      "value": {
        "shape": "HeaderValueType"
      }
    },
    "SizeType": {
      "type": "long"
    },
    "StorageLimitExceededException": {
      "documentation": "<p>The storage limit has been exceeded.</p>",
      "error": {
        "httpStatusCode": 409
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "ErrorMessageType"
        }
      },
      "type": "structure"
    },
    "StorageLimitWillExceedException": {
      "documentation": "<p>The storage limit will be exceeded.</p>",
      "error": {
        "httpStatusCode": 413
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "ErrorMessageType"
        }
      },
      "type": "structure"
    },
    "StorageRuleType": {
      "documentation": "<p>Describes the storage for a user.</p>",
      "members": {
        "StorageAllocatedInBytes": {
          "documentation": "<p>The amount of storage allocated, in bytes.</p>",
          "shape": "PositiveSizeType"
        },
        "StorageType": {
          "documentation": "<p>The type of storage.</p>",
          "shape": "StorageType"
        }
      },
      "type": "structure"
    },
    "StorageType": {
      "enum": [
        "UNLIMITED",
        "QUOTA"
      ],
      "type": "string"
    },
    "Subscription": {
      "documentation": "<p>Describes a subscription.</p>",
      "members": {
        "EndPoint": {
          "documentation": "<p>The endpoint of the subscription.</p>",
          "shape": "SubscriptionEndPointType"
        },
        "Protocol": {
          "documentation": "<p>The protocol of the subscription.</p>",
          "shape": "SubscriptionProtocolType"
        },
        "SubscriptionId": {
          "documentation": "<p>The ID of the subscription.</p>",
          "shape": "IdType"
        }
      },
      "type": "structure"
    },
    "SubscriptionEndPointType": {
      "max": 256,
      "min": 1,
      "type": "string"
    },
    "SubscriptionList": {
      "max": 256,
      "member": {
        "shape": "Subscription"
      },
      "type": "list"
    },
    "SubscriptionProtocolType": {
      "enum": [
        "HTTPS"
      ],
      "type": "string"
    },
    "SubscriptionType": {
      "enum": [
        "ALL"
      ],
      "type": "string"
    },
    "TimeZoneIdType": {
      "max": 256,
      "min": 1,
      "type": "string"
    },
    "TimestampType": {
      "type": "timestamp"
    },
    "TooManyLabelsException": {
      "documentation": "<p>The limit has been reached on the number of labels for the specified resource.</p>",
      "error": {
        "httpStatusCode": 429
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "ErrorMessageType"
        }
      },
      "type": "structure"
    },
    "TooManySubscriptionsException": {
      "documentation": "<p>You've reached the limit on the number of subscriptions for the WorkDocs instance.</p>",
      "error": {
        "httpStatusCode": 429
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "ErrorMessageType"
        }
      },
      "type": "structure"
    },
    "UnauthorizedOperationException": {
      "documentation": "<p>The operation is not permitted.</p>",
      "error": {
        "httpStatusCode": 403
      },
      "exception": true,
      "members": {},
      "type": "structure"
    },
    "UnauthorizedResourceAccessException": {
      "documentation": "<p>The caller does not have access to perform the action on the resource.</p>",
      "error": {
        "httpStatusCode": 404
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "ErrorMessageType"
        }
      },
      "type": "structure"
    },
    "UpdateDocumentRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "DocumentId": {
          "documentation": "<p>The ID of the document.</p>",
          "location": "uri",
          "locationName": "DocumentId",
          "shape": "ResourceIdType"
        },
        "Name": {
          "documentation": "<p>The name of the document.</p>",
          "shape": "ResourceNameType"
        },
        "ParentFolderId": {
          "documentation": "<p>The ID of the parent folder.</p>",
          "shape": "ResourceIdType"
        },
        "ResourceState": {
          "documentation": "<p>The resource state of the document. Only ACTIVE and RECYCLED are supported.</p>",
          "shape": "ResourceStateType"
        }
      },
      "required": [
        "DocumentId"
      ],
      "type": "structure"
    },
    "UpdateDocumentVersionRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "DocumentId": {
          "documentation": "<p>The ID of the document.</p>",
          "location": "uri",
          "locationName": "DocumentId",
          "shape": "ResourceIdType"
        },
        "VersionId": {
          "documentation": "<p>The version ID of the document.</p>",
          "location": "uri",
          "locationName": "VersionId",
          "shape": "DocumentVersionIdType"
        },
        "VersionStatus": {
          "documentation": "<p>The status of the version.</p>",
          "shape": "DocumentVersionStatus"
        }
      },
      "required": [
        "DocumentId",
        "VersionId"
      ],
      "type": "structure"
    },
    "UpdateFolderRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "FolderId": {
          "documentation": "<p>The ID of the folder.</p>",
          "location": "uri",
          "locationName": "FolderId",
          "shape": "ResourceIdType"
        },
        "Name": {
          "documentation": "<p>The name of the folder.</p>",
          "shape": "ResourceNameType"
        },
        "ParentFolderId": {
          "documentation": "<p>The ID of the parent folder.</p>",
          "shape": "ResourceIdType"
        },
        "ResourceState": {
          "documentation": "<p>The resource state of the folder. Only ACTIVE and RECYCLED are accepted values from the API.</p>",
          "shape": "ResourceStateType"
        }
      },
      "required": [
        "FolderId"
      ],
      "type": "structure"
    },
    "UpdateUserRequest": {
      "members": {
        "AuthenticationToken": {
          "documentation": "<p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>",
          "location": "header",
          "locationName": "Authentication",
          "shape": "AuthenticationHeaderType"
        },
        "GivenName": {
          "documentation": "<p>The given name of the user.</p>",
          "shape": "UserAttributeValueType"
        },
        "GrantPoweruserPrivileges": {
          "documentation": "<p>Boolean value to determine whether the user is granted Poweruser privileges.</p>",
          "shape": "BooleanEnumType"
        },
        "Locale": {
          "documentation": "<p>The locale of the user.</p>",
          "shape": "LocaleType"
        },
        "StorageRule": {
          "documentation": "<p>The amount of storage for the user.</p>",
          "shape": "StorageRuleType"
        },
        "Surname": {
          "documentation": "<p>The surname of the user.</p>",
          "shape": "UserAttributeValueType"
        },
        "TimeZoneId": {
          "documentation": "<p>The time zone ID of the user.</p>",
          "shape": "TimeZoneIdType"
        },
        "Type": {
          "documentation": "<p>The type of the user.</p>",
          "shape": "UserType"
        },
        "UserId": {
          "documentation": "<p>The ID of the user.</p>",
          "location": "uri",
          "locationName": "UserId",
          "shape": "IdType"
        }
      },
      "required": [
        "UserId"
      ],
      "type": "structure"
    },
    "UpdateUserResponse": {
      "members": {
        "User": {
          "documentation": "<p>The user information.</p>",
          "shape": "User"
        }
      },
      "type": "structure"
    },
    "UploadMetadata": {
      "documentation": "<p>Describes the upload.</p>",
      "members": {
        "SignedHeaders": {
          "documentation": "<p>The signed headers.</p>",
          "shape": "SignedHeaderMap"
        },
        "UploadUrl": {
          "documentation": "<p>The URL of the upload.</p>",
          "shape": "UrlType"
        }
      },
      "type": "structure"
    },
    "UrlType": {
      "max": 1024,
      "min": 1,
      "sensitive": true,
      "type": "string"
    },
    "User": {
      "documentation": "<p>Describes a user.</p>",
      "members": {
        "CreatedTimestamp": {
          "documentation": "<p>The time when the user was created.</p>",
          "shape": "TimestampType"
        },
        "EmailAddress": {
          "documentation": "<p>The email address of the user.</p>",
          "shape": "EmailAddressType"
        },
        "GivenName": {
          "documentation": "<p>The given name of the user.</p>",
          "shape": "UserAttributeValueType"
        },
        "Id": {
          "documentation": "<p>The ID of the user.</p>",
          "shape": "IdType"
        },
        "Locale": {
          "documentation": "<p>The locale of the user.</p>",
          "shape": "LocaleType"
        },
        "ModifiedTimestamp": {
          "documentation": "<p>The time when the user was modified.</p>",
          "shape": "TimestampType"
        },
        "OrganizationId": {
          "documentation": "<p>The ID of the organization.</p>",
          "shape": "IdType"
        },
        "RecycleBinFolderId": {
          "documentation": "<p>The ID of the recycle bin folder.</p>",
          "shape": "ResourceIdType"
        },
        "RootFolderId": {
          "documentation": "<p>The ID of the root folder.</p>",
          "shape": "ResourceIdType"
        },
        "Status": {
          "documentation": "<p>The status of the user.</p>",
          "shape": "UserStatusType"
        },
        "Storage": {
          "documentation": "<p>The storage for the user.</p>",
          "shape": "UserStorageMetadata"
        },
        "Surname": {
          "documentation": "<p>The surname of the user.</p>",
          "shape": "UserAttributeValueType"
        },
        "TimeZoneId": {
          "documentation": "<p>The time zone ID of the user.</p>",
          "shape": "TimeZoneIdType"
        },
        "Type": {
          "documentation": "<p>The type of user.</p>",
          "shape": "UserType"
        },
        "Username": {
          "documentation": "<p>The login name of the user.</p>",
          "shape": "UsernameType"
        }
      },
      "type": "structure"
    },
    "UserActivities": {
      "member": {
        "shape": "Activity"
      },
      "type": "list"
    },
    "UserAttributeValueType": {
      "max": 64,
      "min": 1,
      "type": "string"
    },
    "UserFilterType": {
      "enum": [
        "ALL",
        "ACTIVE_PENDING"
      ],
      "type": "string"
    },
    "UserIdsType": {
      "max": 2000,
      "min": 1,
      "pattern": "[&\\w+-.@, ]+",
      "type": "string"
    },
    "UserMetadata": {
      "documentation": "<p>Describes the metadata of the user.</p>",
      "members": {
        "EmailAddress": {
          "documentation": "<p>The email address of the user.</p>",
          "shape": "EmailAddressType"
        },
        "GivenName": {
          "documentation": "<p>The given name of the user before a rename operation.</p>",
          "shape": "UserAttributeValueType"
        },
        "Id": {
          "documentation": "<p>The ID of the user.</p>",
          "shape": "IdType"
        },
        "Surname": {
          "documentation": "<p>The surname of the user.</p>",
          "shape": "UserAttributeValueType"
        },
        "Username": {
          "documentation": "<p>The name of the user.</p>",
          "shape": "UsernameType"
        }
      },
      "type": "structure"
    },
    "UserMetadataList": {
      "member": {
        "shape": "UserMetadata"
      },
      "type": "list"
    },
    "UserSortType": {
      "enum": [
        "USER_NAME",
        "FULL_NAME",
        "STORAGE_LIMIT",
        "USER_STATUS",
        "STORAGE_USED"
      ],
      "type": "string"
    },
    "UserStatusType": {
      "enum": [
        "ACTIVE",
        "INACTIVE",
        "PENDING"
      ],
      "type": "string"
    },
    "UserStorageMetadata": {
      "documentation": "<p>Describes the storage for a user.</p>",
      "members": {
        "StorageRule": {
          "documentation": "<p>The storage for a user.</p>",
          "shape": "StorageRuleType"
        },
        "StorageUtilizedInBytes": {
          "documentation": "<p>The amount of storage used, in bytes.</p>",
          "shape": "SizeType"
        }
      },
      "type": "structure"
    },
    "UserType": {
      "enum": [
        "USER",
        "ADMIN",
        "POWERUSER",
        "MINIMALUSER",
        "WORKSPACESUSER"
      ],
      "type": "string"
    },
    "UsernameType": {
      "max": 256,
      "min": 1,
      "pattern": "[\\w\\-+.]+(@[a-zA-Z0-9.\\-]+\\.[a-zA-Z]+)?",
      "type": "string"
    }
  },
  "version": "2.0"
}
