{
  "documentation": "<p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>",
  "metadata": {
    "apiVersion": "2020-08-23",
    "endpointPrefix": "appflow",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "Amazon Appflow",
    "serviceId": "Appflow",
    "signatureVersion": "v4",
    "signingName": "appflow",
    "uid": "appflow-2020-08-23"
  },
  "operations": {
    "CreateConnectorProfile": {
      "documentation": "<p> Creates a new connector profile associated with your Amazon Web Services account. There is a soft quota of 100 connector profiles per Amazon Web Services account. If you need more connector profiles than this quota allows, you can submit a request to the Amazon AppFlow team through the Amazon AppFlow support channel. In each connector profile that you create, you can provide the credentials and properties for only one connector.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "ConnectorAuthenticationException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/create-connector-profile"
      },
      "input": {
        "shape": "CreateConnectorProfileRequest"
      },
      "name": "CreateConnectorProfile",
      "output": {
        "shape": "CreateConnectorProfileResponse"
      }
    },
    "CreateFlow": {
      "documentation": "<p> Enables your application to create a new flow using Amazon AppFlow. You must create a connector profile before calling this API. Please note that the Request Syntax below shows syntax for multiple destinations, however, you can only transfer data to one item in this list at a time. Amazon AppFlow does not currently support flows to multiple destinations at once. </p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ConnectorAuthenticationException"
        },
        {
          "shape": "ConnectorServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/create-flow"
      },
      "input": {
        "shape": "CreateFlowRequest"
      },
      "name": "CreateFlow",
      "output": {
        "shape": "CreateFlowResponse"
      }
    },
    "DeleteConnectorProfile": {
      "documentation": "<p> Enables you to delete an existing connector profile. </p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/delete-connector-profile"
      },
      "input": {
        "shape": "DeleteConnectorProfileRequest"
      },
      "name": "DeleteConnectorProfile",
      "output": {
        "shape": "DeleteConnectorProfileResponse"
      }
    },
    "DeleteFlow": {
      "documentation": "<p> Enables your application to delete an existing flow. Before deleting the flow, Amazon AppFlow validates the request by checking the flow configuration and status. You can delete flows one at a time. </p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/delete-flow"
      },
      "input": {
        "shape": "DeleteFlowRequest"
      },
      "name": "DeleteFlow",
      "output": {
        "shape": "DeleteFlowResponse"
      }
    },
    "DescribeConnector": {
      "documentation": "<p>Describes the given custom connector registered in your Amazon Web Services account. This API can be used for custom connectors that are registered in your account and also for Amazon authored connectors.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/describe-connector"
      },
      "input": {
        "shape": "DescribeConnectorRequest"
      },
      "name": "DescribeConnector",
      "output": {
        "shape": "DescribeConnectorResponse"
      }
    },
    "DescribeConnectorEntity": {
      "documentation": "<p> Provides details regarding the entity used with the connector, with a description of the data model for each field in that entity. </p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConnectorAuthenticationException"
        },
        {
          "shape": "ConnectorServerException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/describe-connector-entity"
      },
      "input": {
        "shape": "DescribeConnectorEntityRequest"
      },
      "name": "DescribeConnectorEntity",
      "output": {
        "shape": "DescribeConnectorEntityResponse"
      }
    },
    "DescribeConnectorProfiles": {
      "documentation": "<p> Returns a list of <code>connector-profile</code> details matching the provided <code>connector-profile</code> names and <code>connector-types</code>. Both input lists are optional, and you can use them to filter the result. </p> <p>If no names or <code>connector-types</code> are provided, returns all connector profiles in a paginated form. If there is no match, this operation returns an empty list.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/describe-connector-profiles"
      },
      "input": {
        "shape": "DescribeConnectorProfilesRequest"
      },
      "name": "DescribeConnectorProfiles",
      "output": {
        "shape": "DescribeConnectorProfilesResponse"
      }
    },
    "DescribeConnectors": {
      "documentation": "<p> Describes the connectors vended by Amazon AppFlow for specified connector types. If you don't specify a connector type, this operation describes all connectors vended by Amazon AppFlow. If there are more connectors than can be returned in one page, the response contains a <code>nextToken</code> object, which can be be passed in to the next call to the <code>DescribeConnectors</code> API operation to retrieve the next page. </p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/describe-connectors"
      },
      "input": {
        "shape": "DescribeConnectorsRequest"
      },
      "name": "DescribeConnectors",
      "output": {
        "shape": "DescribeConnectorsResponse"
      }
    },
    "DescribeFlow": {
      "documentation": "<p> Provides a description of the specified flow. </p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/describe-flow"
      },
      "input": {
        "shape": "DescribeFlowRequest"
      },
      "name": "DescribeFlow",
      "output": {
        "shape": "DescribeFlowResponse"
      }
    },
    "DescribeFlowExecutionRecords": {
      "documentation": "<p> Fetches the execution history of the flow. </p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/describe-flow-execution-records"
      },
      "input": {
        "shape": "DescribeFlowExecutionRecordsRequest"
      },
      "name": "DescribeFlowExecutionRecords",
      "output": {
        "shape": "DescribeFlowExecutionRecordsResponse"
      }
    },
    "ListConnectorEntities": {
      "documentation": "<p> Returns the list of available connector entities supported by Amazon AppFlow. For example, you can query Salesforce for <i>Account</i> and <i>Opportunity</i> entities, or query ServiceNow for the <i>Incident</i> entity. </p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConnectorAuthenticationException"
        },
        {
          "shape": "ConnectorServerException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/list-connector-entities"
      },
      "input": {
        "shape": "ListConnectorEntitiesRequest"
      },
      "name": "ListConnectorEntities",
      "output": {
        "shape": "ListConnectorEntitiesResponse"
      }
    },
    "ListConnectors": {
      "documentation": "<p>Returns the list of all registered custom connectors in your Amazon Web Services account. This API lists only custom connectors registered in this account, not the Amazon Web Services authored connectors. </p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/list-connectors"
      },
      "input": {
        "shape": "ListConnectorsRequest"
      },
      "name": "ListConnectors",
      "output": {
        "shape": "ListConnectorsResponse"
      }
    },
    "ListFlows": {
      "documentation": "<p> Lists all of the flows associated with your account. </p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/list-flows"
      },
      "input": {
        "shape": "ListFlowsRequest"
      },
      "name": "ListFlows",
      "output": {
        "shape": "ListFlowsResponse"
      }
    },
    "ListTagsForResource": {
      "documentation": "<p> Retrieves the tags that are associated with a specified flow. </p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/tags/{resourceArn}"
      },
      "input": {
        "shape": "ListTagsForResourceRequest"
      },
      "name": "ListTagsForResource",
      "output": {
        "shape": "ListTagsForResourceResponse"
      }
    },
    "RegisterConnector": {
      "documentation": "<p>Registers a new connector with your Amazon Web Services account. Before you can register the connector, you must deploy lambda in your account.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ConnectorServerException"
        },
        {
          "shape": "ConnectorAuthenticationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/register-connector"
      },
      "input": {
        "shape": "RegisterConnectorRequest"
      },
      "name": "RegisterConnector",
      "output": {
        "shape": "RegisterConnectorResponse"
      }
    },
    "StartFlow": {
      "documentation": "<p> Activates an existing flow. For on-demand flows, this operation runs the flow immediately. For schedule and event-triggered flows, this operation activates the flow. </p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "ConflictException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/start-flow"
      },
      "input": {
        "shape": "StartFlowRequest"
      },
      "name": "StartFlow",
      "output": {
        "shape": "StartFlowResponse"
      }
    },
    "StopFlow": {
      "documentation": "<p> Deactivates the existing flow. For on-demand flows, this operation returns an <code>unsupportedOperationException</code> error message. For schedule and event-triggered flows, this operation deactivates the flow. </p>",
      "errors": [
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "UnsupportedOperationException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/stop-flow"
      },
      "input": {
        "shape": "StopFlowRequest"
      },
      "name": "StopFlow",
      "output": {
        "shape": "StopFlowResponse"
      }
    },
    "TagResource": {
      "documentation": "<p> Applies a tag to the specified flow. </p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/tags/{resourceArn}"
      },
      "input": {
        "shape": "TagResourceRequest"
      },
      "name": "TagResource",
      "output": {
        "shape": "TagResourceResponse"
      }
    },
    "UnregisterConnector": {
      "documentation": "<p>Unregisters the custom connector registered in your account that matches the connectorLabel provided in the request.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/unregister-connector"
      },
      "input": {
        "shape": "UnregisterConnectorRequest"
      },
      "name": "UnregisterConnector",
      "output": {
        "shape": "UnregisterConnectorResponse"
      }
    },
    "UntagResource": {
      "documentation": "<p> Removes a tag from the specified flow. </p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/tags/{resourceArn}"
      },
      "input": {
        "shape": "UntagResourceRequest"
      },
      "name": "UntagResource",
      "output": {
        "shape": "UntagResourceResponse"
      }
    },
    "UpdateConnectorProfile": {
      "documentation": "<p> Updates a given connector profile associated with your account. </p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ConnectorAuthenticationException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/update-connector-profile"
      },
      "input": {
        "shape": "UpdateConnectorProfileRequest"
      },
      "name": "UpdateConnectorProfile",
      "output": {
        "shape": "UpdateConnectorProfileResponse"
      }
    },
    "UpdateFlow": {
      "documentation": "<p> Updates an existing flow. </p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ConnectorAuthenticationException"
        },
        {
          "shape": "ConnectorServerException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/update-flow"
      },
      "input": {
        "shape": "UpdateFlowRequest"
      },
      "name": "UpdateFlow",
      "output": {
        "shape": "UpdateFlowResponse"
      }
    }
  },
  "shapes": {
    "ARN": {
      "max": 512,
      "pattern": "arn:aws:.*:.*:[0-9]+:.*",
      "type": "string"
    },
    "AccessDeniedException": {
      "documentation": "<p>AppFlow/Requester has invalid or missing permissions.</p>",
      "error": {
        "httpStatusCode": 403
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "ErrorMessage"
        }
      },
      "type": "structure"
    },
    "AccessKeyId": {
      "max": 256,
      "pattern": "\\S+",
      "sensitive": true,
      "type": "string"
    },
    "AccessToken": {
      "max": 4096,
      "pattern": "\\S+",
      "sensitive": true,
      "type": "string"
    },
    "AccountName": {
      "max": 512,
      "pattern": "\\S+",
      "type": "string"
    },
    "AggregationConfig": {
      "documentation": "<p> The aggregation settings that you can use to customize the output format of your flow data. </p>",
      "members": {
        "aggregationType": {
          "documentation": "<p> Specifies whether Amazon AppFlow aggregates the flow records into a single file, or leave them unaggregated. </p>",
          "shape": "AggregationType"
        }
      },
      "type": "structure"
    },
    "AggregationType": {
      "enum": [
        "None",
        "SingleFile"
      ],
      "type": "string"
    },
    "AmplitudeConnectorOperator": {
      "enum": [
        "BETWEEN"
      ],
      "type": "string"
    },
    "AmplitudeConnectorProfileCredentials": {
      "documentation": "<p> The connector-specific credentials required when using Amplitude. </p>",
      "members": {
        "apiKey": {
          "documentation": "<p> A unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API. </p>",
          "shape": "ApiKey"
        },
        "secretKey": {
          "documentation": "<p> The Secret Access Key portion of the credentials. </p>",
          "shape": "SecretKey"
        }
      },
      "required": [
        "apiKey",
        "secretKey"
      ],
      "type": "structure"
    },
    "AmplitudeConnectorProfileProperties": {
      "documentation": "<p> The connector-specific profile properties required when using Amplitude. </p>",
      "members": {},
      "type": "structure"
    },
    "AmplitudeMetadata": {
      "documentation": "<p> The connector metadata specific to Amplitude. </p>",
      "members": {},
      "type": "structure"
    },
    "AmplitudeSourceProperties": {
      "documentation": "<p> The properties that are applied when Amplitude is being used as a source. </p>",
      "members": {
        "object": {
          "documentation": "<p> The object specified in the Amplitude flow source. </p>",
          "shape": "Object"
        }
      },
      "required": [
        "object"
      ],
      "type": "structure"
    },
    "ApiKey": {
      "max": 256,
      "pattern": "\\S+",
      "sensitive": true,
      "type": "string"
    },
    "ApiKeyCredentials": {
      "documentation": "<p>The API key credentials required for API key authentication.</p>",
      "members": {
        "apiKey": {
          "documentation": "<p>The API key required for API key authentication.</p>",
          "shape": "ApiKey"
        },
        "apiSecretKey": {
          "documentation": "<p>The API secret key required for API key authentication.</p>",
          "shape": "ApiSecretKey"
        }
      },
      "required": [
        "apiKey"
      ],
      "type": "structure"
    },
    "ApiSecretKey": {
      "max": 256,
      "pattern": "\\S+",
      "sensitive": true,
      "type": "string"
    },
    "ApiToken": {
      "max": 256,
      "pattern": "\\S+",
      "type": "string"
    },
    "ApiVersion": {
      "max": 256,
      "pattern": "\\S+",
      "type": "string"
    },
    "ApplicationHostUrl": {
      "max": 256,
      "pattern": "^(https?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]",
      "type": "string"
    },
    "ApplicationKey": {
      "max": 512,
      "pattern": "\\S+",
      "type": "string"
    },
    "ApplicationServicePath": {
      "max": 512,
      "pattern": "\\S+",
      "type": "string"
    },
    "ApplicationType": {
      "max": 512,
      "pattern": "\\S+",
      "type": "string"
    },
    "AuthCode": {
      "max": 2048,
      "pattern": "\\S+",
      "type": "string"
    },
    "AuthCodeUrl": {
      "max": 256,
      "pattern": "^(https?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]",
      "type": "string"
    },
    "AuthCodeUrlList": {
      "member": {
        "shape": "AuthCodeUrl"
      },
      "type": "list"
    },
    "AuthParameter": {
      "documentation": "<p>Information about required authentication parameters.</p>",
      "members": {
        "connectorSuppliedValues": {
          "documentation": "<p>Contains default values for this authentication parameter that are supplied by the connector.</p>",
          "shape": "ConnectorSuppliedValueList"
        },
        "description": {
          "documentation": "<p>A description about the authentication parameter.</p>",
          "shape": "Description"
        },
        "isRequired": {
          "documentation": "<p>Indicates whether this authentication parameter is required.</p>",
          "shape": "Boolean"
        },
        "isSensitiveField": {
          "documentation": "<p>Indicates whether this authentication parameter is a sensitive field.</p>",
          "shape": "Boolean"
        },
        "key": {
          "documentation": "<p>The authentication key required to authenticate with the connector.</p>",
          "shape": "Key"
        },
        "label": {
          "documentation": "<p>Label used for authentication parameter.</p>",
          "shape": "Label"
        }
      },
      "type": "structure"
    },
    "AuthParameterList": {
      "member": {
        "shape": "AuthParameter"
      },
      "type": "list"
    },
    "AuthenticationConfig": {
      "documentation": "<p>Contains information about the authentication config that the connector supports.</p>",
      "members": {
        "customAuthConfigs": {
          "documentation": "<p>Contains information required for custom authentication.</p>",
          "shape": "CustomAuthConfigList"
        },
        "isApiKeyAuthSupported": {
          "documentation": "<p>Indicates whether API key authentication is supported by the connector</p>",
          "shape": "Boolean"
        },
        "isBasicAuthSupported": {
          "documentation": "<p>Indicates whether basic authentication is supported by the connector.</p>",
          "shape": "Boolean"
        },
        "isCustomAuthSupported": {
          "documentation": "<p>Indicates whether custom authentication is supported by the connector</p>",
          "shape": "Boolean"
        },
        "isOAuth2Supported": {
          "documentation": "<p>Indicates whether OAuth 2.0 authentication is supported by the connector.</p>",
          "shape": "Boolean"
        },
        "oAuth2Defaults": {
          "documentation": "<p>Contains the default values required for OAuth 2.0 authentication.</p>",
          "shape": "OAuth2Defaults"
        }
      },
      "type": "structure"
    },
    "AuthenticationType": {
      "enum": [
        "OAUTH2",
        "APIKEY",
        "BASIC",
        "CUSTOM"
      ],
      "type": "string"
    },
    "BasicAuthCredentials": {
      "documentation": "<p> The basic auth credentials required for basic authentication. </p>",
      "members": {
        "password": {
          "documentation": "<p> The password to use to connect to a resource.</p>",
          "shape": "Password"
        },
        "username": {
          "documentation": "<p> The username to use to connect to a resource. </p>",
          "shape": "Username"
        }
      },
      "required": [
        "username",
        "password"
      ],
      "type": "structure"
    },
    "Boolean": {
      "type": "boolean"
    },
    "BucketName": {
      "max": 63,
      "min": 3,
      "pattern": "\\S+",
      "type": "string"
    },
    "BucketPrefix": {
      "max": 512,
      "pattern": ".*",
      "type": "string"
    },
    "ClientCredentialsArn": {
      "max": 2048,
      "min": 20,
      "pattern": "arn:aws:secretsmanager:.*:[0-9]+:.*",
      "sensitive": true,
      "type": "string"
    },
    "ClientId": {
      "max": 512,
      "pattern": "\\S+",
      "type": "string"
    },
    "ClientNumber": {
      "max": 3,
      "min": 3,
      "pattern": "^\\d{3}$",
      "type": "string"
    },
    "ClientSecret": {
      "max": 512,
      "pattern": "\\S+",
      "sensitive": true,
      "type": "string"
    },
    "ConflictException": {
      "documentation": "<p> There was a conflict when processing the request (for example, a flow with the given name already exists within the account. Check for conflicting resource names and try again. </p>",
      "error": {
        "httpStatusCode": 409
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "ErrorMessage"
        }
      },
      "type": "structure"
    },
    "ConnectionMode": {
      "enum": [
        "Public",
        "Private"
      ],
      "type": "string"
    },
    "ConnectorAuthenticationException": {
      "documentation": "<p> An error occurred when authenticating with the connector endpoint. </p>",
      "error": {
        "httpStatusCode": 401
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "ErrorMessage"
        }
      },
      "type": "structure"
    },
    "ConnectorConfiguration": {
      "documentation": "<p> The configuration settings related to a given connector. </p>",
      "members": {
        "authenticationConfig": {
          "documentation": "<p>The authentication config required for the connector.</p>",
          "shape": "AuthenticationConfig"
        },
        "canUseAsDestination": {
          "documentation": "<p> Specifies whether the connector can be used as a destination. </p>",
          "shape": "Boolean"
        },
        "canUseAsSource": {
          "documentation": "<p> Specifies whether the connector can be used as a source. </p>",
          "shape": "Boolean"
        },
        "connectorArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) for the registered connector.</p>",
          "shape": "ARN"
        },
        "connectorDescription": {
          "documentation": "<p>A description about the connector.</p>",
          "shape": "ConnectorDescription"
        },
        "connectorLabel": {
          "documentation": "<p>The label used for registering the connector.</p>",
          "shape": "ConnectorLabel"
        },
        "connectorMetadata": {
          "documentation": "<p> Specifies connector-specific metadata such as <code>oAuthScopes</code>, <code>supportedRegions</code>, <code>privateLinkServiceUrl</code>, and so on. </p>",
          "shape": "ConnectorMetadata"
        },
        "connectorModes": {
          "documentation": "<p>The connection modes that the connector supports.</p>",
          "shape": "ConnectorModeList"
        },
        "connectorName": {
          "documentation": "<p>The connector name.</p>",
          "shape": "ConnectorName"
        },
        "connectorOwner": {
          "documentation": "<p>The owner who developed the connector.</p>",
          "shape": "ConnectorOwner"
        },
        "connectorProvisioningConfig": {
          "documentation": "<p>The configuration required for registering the connector.</p>",
          "shape": "ConnectorProvisioningConfig"
        },
        "connectorProvisioningType": {
          "documentation": "<p>The provisioning type used to register the connector.</p>",
          "shape": "ConnectorProvisioningType"
        },
        "connectorRuntimeSettings": {
          "documentation": "<p>The required connector runtime settings.</p>",
          "shape": "ConnectorRuntimeSettingList"
        },
        "connectorType": {
          "documentation": "<p>The connector type.</p>",
          "shape": "ConnectorType"
        },
        "connectorVersion": {
          "documentation": "<p>The connector version.</p>",
          "shape": "ConnectorVersion"
        },
        "isPrivateLinkEnabled": {
          "documentation": "<p> Specifies if PrivateLink is enabled for that connector. </p>",
          "shape": "Boolean"
        },
        "isPrivateLinkEndpointUrlRequired": {
          "documentation": "<p> Specifies if a PrivateLink endpoint URL is required. </p>",
          "shape": "Boolean"
        },
        "logoURL": {
          "documentation": "<p>Logo URL of the connector.</p>",
          "shape": "LogoURL"
        },
        "registeredAt": {
          "documentation": "<p>The date on which the connector was registered.</p>",
          "shape": "Date"
        },
        "registeredBy": {
          "documentation": "<p>Information about who registered the connector.</p>",
          "shape": "RegisteredBy"
        },
        "supportedApiVersions": {
          "documentation": "<p>A list of API versions that are supported by the connector.</p>",
          "shape": "SupportedApiVersionList"
        },
        "supportedDestinationConnectors": {
          "documentation": "<p> Lists the connectors that are available for use as destinations. </p>",
          "shape": "ConnectorTypeList"
        },
        "supportedOperators": {
          "documentation": "<p>A list of operators supported by the connector.</p>",
          "shape": "SupportedOperatorList"
        },
        "supportedSchedulingFrequencies": {
          "documentation": "<p> Specifies the supported flow frequency for that connector. </p>",
          "shape": "SchedulingFrequencyTypeList"
        },
        "supportedTriggerTypes": {
          "documentation": "<p> Specifies the supported trigger types for the flow. </p>",
          "shape": "TriggerTypeList"
        },
        "supportedWriteOperations": {
          "documentation": "<p>A list of write operations supported by the connector.</p>",
          "shape": "SupportedWriteOperationList"
        }
      },
      "type": "structure"
    },
    "ConnectorConfigurationsMap": {
      "key": {
        "shape": "ConnectorType"
      },
      "type": "map",
      "value": {
        "shape": "ConnectorConfiguration"
      }
    },
    "ConnectorDescription": {
      "max": 2048,
      "pattern": "[\\w!@#\\-.?,\\s]*",
      "type": "string"
    },
    "ConnectorDetail": {
      "documentation": "<p>Information about the registered connector.</p>",
      "members": {
        "applicationType": {
          "documentation": "<p>The application type of the connector.</p>",
          "shape": "ApplicationType"
        },
        "connectorDescription": {
          "documentation": "<p>A description about the registered connector.</p>",
          "shape": "ConnectorDescription"
        },
        "connectorLabel": {
          "documentation": "<p>A label used for the connector.</p>",
          "shape": "ConnectorLabel"
        },
        "connectorModes": {
          "documentation": "<p>The connection mode that the connector supports.</p>",
          "shape": "ConnectorModeList"
        },
        "connectorName": {
          "documentation": "<p>The name of the connector.</p>",
          "shape": "ConnectorName"
        },
        "connectorOwner": {
          "documentation": "<p>The owner of the connector.</p>",
          "shape": "ConnectorOwner"
        },
        "connectorProvisioningType": {
          "documentation": "<p>The provisioning type that the connector uses.</p>",
          "shape": "ConnectorProvisioningType"
        },
        "connectorType": {
          "documentation": "<p>The connector type.</p>",
          "shape": "ConnectorType"
        },
        "connectorVersion": {
          "documentation": "<p>The connector version.</p>",
          "shape": "ConnectorVersion"
        },
        "registeredAt": {
          "documentation": "<p>The time at which the connector was registered.</p>",
          "shape": "Date"
        },
        "registeredBy": {
          "documentation": "<p>The user who registered the connector.</p>",
          "shape": "RegisteredBy"
        }
      },
      "type": "structure"
    },
    "ConnectorEntity": {
      "documentation": "<p> The high-level entity that can be queried in Amazon AppFlow. For example, a Salesforce entity might be an <i>Account</i> or <i>Opportunity</i>, whereas a ServiceNow entity might be an <i>Incident</i>. </p>",
      "members": {
        "hasNestedEntities": {
          "documentation": "<p> Specifies whether the connector entity is a parent or a category and has more entities nested underneath it. If another call is made with <code>entitiesPath = \"the_current_entity_name_with_hasNestedEntities_true\"</code>, then it returns the nested entities underneath it. This provides a way to retrieve all supported entities in a recursive fashion. </p>",
          "shape": "Boolean"
        },
        "label": {
          "documentation": "<p> The label applied to the connector entity. </p>",
          "shape": "Label"
        },
        "name": {
          "documentation": "<p> The name of the connector entity. </p>",
          "shape": "Name"
        }
      },
      "required": [
        "name"
      ],
      "type": "structure"
    },
    "ConnectorEntityField": {
      "documentation": "<p> Describes the data model of a connector field. For example, for an <i>account</i> entity, the fields would be <i>account name</i>, <i>account ID</i>, and so on. </p>",
      "members": {
        "customProperties": {
          "documentation": "<p>A map that has specific properties related to the ConnectorEntityField.</p>",
          "shape": "CustomProperties"
        },
        "defaultValue": {
          "documentation": "<p>Default value that can be assigned to this field.</p>",
          "shape": "String"
        },
        "description": {
          "documentation": "<p> A description of the connector entity field. </p>",
          "shape": "Description"
        },
        "destinationProperties": {
          "documentation": "<p> The properties applied to a field when the connector is being used as a destination. </p>",
          "shape": "DestinationFieldProperties"
        },
        "identifier": {
          "documentation": "<p> The unique identifier of the connector field. </p>",
          "shape": "Identifier"
        },
        "isDeprecated": {
          "documentation": "<p>Booelan value that indicates whether this field is deprecated or not.</p>",
          "shape": "Boolean"
        },
        "isPrimaryKey": {
          "documentation": "<p>Booelan value that indicates whether this field can be used as a primary key.</p>",
          "shape": "Boolean"
        },
        "label": {
          "documentation": "<p> The label applied to a connector entity field. </p>",
          "shape": "Label"
        },
        "parentIdentifier": {
          "documentation": "<p>The parent identifier of the connector field.</p>",
          "shape": "Identifier"
        },
        "sourceProperties": {
          "documentation": "<p> The properties that can be applied to a field when the connector is being used as a source. </p>",
          "shape": "SourceFieldProperties"
        },
        "supportedFieldTypeDetails": {
          "documentation": "<p> Contains details regarding the supported <code>FieldType</code>, including the corresponding <code>filterOperators</code> and <code>supportedValues</code>. </p>",
          "shape": "SupportedFieldTypeDetails"
        }
      },
      "required": [
        "identifier"
      ],
      "type": "structure"
    },
    "ConnectorEntityFieldList": {
      "member": {
        "shape": "ConnectorEntityField"
      },
      "type": "list"
    },
    "ConnectorEntityList": {
      "member": {
        "shape": "ConnectorEntity"
      },
      "type": "list"
    },
    "ConnectorEntityMap": {
      "key": {
        "shape": "Group"
      },
      "type": "map",
      "value": {
        "shape": "ConnectorEntityList"
      }
    },
    "ConnectorLabel": {
      "max": 256,
      "pattern": "[a-zA-Z0-9][\\w!@#.-]+",
      "type": "string"
    },
    "ConnectorList": {
      "member": {
        "shape": "ConnectorDetail"
      },
      "type": "list"
    },
    "ConnectorMetadata": {
      "documentation": "<p> A structure to specify connector-specific metadata such as <code>oAuthScopes</code>, <code>supportedRegions</code>, <code>privateLinkServiceUrl</code>, and so on. </p>",
      "members": {
        "Amplitude": {
          "documentation": "<p> The connector metadata specific to Amplitude. </p>",
          "shape": "AmplitudeMetadata"
        },
        "CustomerProfiles": {
          "documentation": "<p> The connector metadata specific to Amazon Connect Customer Profiles. </p>",
          "shape": "CustomerProfilesMetadata"
        },
        "Datadog": {
          "documentation": "<p> The connector metadata specific to Datadog. </p>",
          "shape": "DatadogMetadata"
        },
        "Dynatrace": {
          "documentation": "<p> The connector metadata specific to Dynatrace. </p>",
          "shape": "DynatraceMetadata"
        },
        "EventBridge": {
          "documentation": "<p> The connector metadata specific to Amazon EventBridge. </p>",
          "shape": "EventBridgeMetadata"
        },
        "GoogleAnalytics": {
          "documentation": "<p> The connector metadata specific to Google Analytics. </p>",
          "shape": "GoogleAnalyticsMetadata"
        },
        "Honeycode": {
          "documentation": "<p> The connector metadata specific to Amazon Honeycode. </p>",
          "shape": "HoneycodeMetadata"
        },
        "InforNexus": {
          "documentation": "<p> The connector metadata specific to Infor Nexus. </p>",
          "shape": "InforNexusMetadata"
        },
        "Marketo": {
          "documentation": "<p> The connector metadata specific to Marketo. </p>",
          "shape": "MarketoMetadata"
        },
        "Redshift": {
          "documentation": "<p> The connector metadata specific to Amazon Redshift. </p>",
          "shape": "RedshiftMetadata"
        },
        "S3": {
          "documentation": "<p> The connector metadata specific to Amazon S3. </p>",
          "shape": "S3Metadata"
        },
        "SAPOData": {
          "shape": "SAPODataMetadata"
        },
        "Salesforce": {
          "documentation": "<p> The connector metadata specific to Salesforce. </p>",
          "shape": "SalesforceMetadata"
        },
        "ServiceNow": {
          "documentation": "<p> The connector metadata specific to ServiceNow. </p>",
          "shape": "ServiceNowMetadata"
        },
        "Singular": {
          "documentation": "<p> The connector metadata specific to Singular. </p>",
          "shape": "SingularMetadata"
        },
        "Slack": {
          "documentation": "<p> The connector metadata specific to Slack. </p>",
          "shape": "SlackMetadata"
        },
        "Snowflake": {
          "documentation": "<p> The connector metadata specific to Snowflake. </p>",
          "shape": "SnowflakeMetadata"
        },
        "Trendmicro": {
          "documentation": "<p> The connector metadata specific to Trend Micro. </p>",
          "shape": "TrendmicroMetadata"
        },
        "Upsolver": {
          "documentation": "<p> The connector metadata specific to Upsolver. </p>",
          "shape": "UpsolverMetadata"
        },
        "Veeva": {
          "documentation": "<p> The connector metadata specific to Veeva. </p>",
          "shape": "VeevaMetadata"
        },
        "Zendesk": {
          "documentation": "<p> The connector metadata specific to Zendesk. </p>",
          "shape": "ZendeskMetadata"
        }
      },
      "type": "structure"
    },
    "ConnectorMode": {
      "max": 256,
      "pattern": "\\S+",
      "type": "string"
    },
    "ConnectorModeList": {
      "member": {
        "shape": "ConnectorMode"
      },
      "type": "list"
    },
    "ConnectorName": {
      "max": 256,
      "pattern": ".*",
      "type": "string"
    },
    "ConnectorOAuthRequest": {
      "documentation": "<p> Used by select connectors for which the OAuth workflow is supported, such as Salesforce, Google Analytics, Marketo, Zendesk, and Slack. </p>",
      "members": {
        "authCode": {
          "documentation": "<p> The code provided by the connector when it has been authenticated via the connected app. </p>",
          "shape": "AuthCode"
        },
        "redirectUri": {
          "documentation": "<p> The URL to which the authentication server redirects the browser after authorization has been granted. </p>",
          "shape": "RedirectUri"
        }
      },
      "type": "structure"
    },
    "ConnectorOperator": {
      "documentation": "<p> The operation to be performed on the provided source fields. </p>",
      "members": {
        "Amplitude": {
          "documentation": "<p> The operation to be performed on the provided Amplitude source fields. </p>",
          "shape": "AmplitudeConnectorOperator"
        },
        "CustomConnector": {
          "documentation": "<p>Operators supported by the custom connector.</p>",
          "shape": "Operator"
        },
        "Datadog": {
          "documentation": "<p> The operation to be performed on the provided Datadog source fields. </p>",
          "shape": "DatadogConnectorOperator"
        },
        "Dynatrace": {
          "documentation": "<p> The operation to be performed on the provided Dynatrace source fields. </p>",
          "shape": "DynatraceConnectorOperator"
        },
        "GoogleAnalytics": {
          "documentation": "<p> The operation to be performed on the provided Google Analytics source fields. </p>",
          "shape": "GoogleAnalyticsConnectorOperator"
        },
        "InforNexus": {
          "documentation": "<p> The operation to be performed on the provided Infor Nexus source fields. </p>",
          "shape": "InforNexusConnectorOperator"
        },
        "Marketo": {
          "documentation": "<p> The operation to be performed on the provided Marketo source fields. </p>",
          "shape": "MarketoConnectorOperator"
        },
        "S3": {
          "documentation": "<p> The operation to be performed on the provided Amazon S3 source fields. </p>",
          "shape": "S3ConnectorOperator"
        },
        "SAPOData": {
          "documentation": "<p> The operation to be performed on the provided SAPOData source fields. </p>",
          "shape": "SAPODataConnectorOperator"
        },
        "Salesforce": {
          "documentation": "<p> The operation to be performed on the provided Salesforce source fields. </p>",
          "shape": "SalesforceConnectorOperator"
        },
        "ServiceNow": {
          "documentation": "<p> The operation to be performed on the provided ServiceNow source fields. </p>",
          "shape": "ServiceNowConnectorOperator"
        },
        "Singular": {
          "documentation": "<p> The operation to be performed on the provided Singular source fields. </p>",
          "shape": "SingularConnectorOperator"
        },
        "Slack": {
          "documentation": "<p> The operation to be performed on the provided Slack source fields. </p>",
          "shape": "SlackConnectorOperator"
        },
        "Trendmicro": {
          "documentation": "<p> The operation to be performed on the provided Trend Micro source fields. </p>",
          "shape": "TrendmicroConnectorOperator"
        },
        "Veeva": {
          "documentation": "<p> The operation to be performed on the provided Veeva source fields. </p>",
          "shape": "VeevaConnectorOperator"
        },
        "Zendesk": {
          "documentation": "<p> The operation to be performed on the provided Zendesk source fields. </p>",
          "shape": "ZendeskConnectorOperator"
        }
      },
      "type": "structure"
    },
    "ConnectorOwner": {
      "max": 256,
      "pattern": ".*",
      "type": "string"
    },
    "ConnectorProfile": {
      "documentation": "<p> Describes an instance of a connector. This includes the provided name, credentials ARN, connection-mode, and so on. To keep the API intuitive and extensible, the fields that are common to all types of connector profiles are explicitly specified at the top level. The rest of the connector-specific properties are available via the <code>connectorProfileProperties</code> field. </p>",
      "members": {
        "connectionMode": {
          "documentation": "<p> Indicates the connection mode and if it is public or private. </p>",
          "shape": "ConnectionMode"
        },
        "connectorLabel": {
          "documentation": "<p>The label for the connector profile being created.</p>",
          "shape": "ConnectorLabel"
        },
        "connectorProfileArn": {
          "documentation": "<p> The Amazon Resource Name (ARN) of the connector profile. </p>",
          "shape": "ConnectorProfileArn"
        },
        "connectorProfileName": {
          "documentation": "<p> The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account. </p>",
          "shape": "ConnectorProfileName"
        },
        "connectorProfileProperties": {
          "documentation": "<p> The connector-specific properties of the profile configuration. </p>",
          "shape": "ConnectorProfileProperties"
        },
        "connectorType": {
          "documentation": "<p> The type of connector, such as Salesforce, Amplitude, and so on. </p>",
          "shape": "ConnectorType"
        },
        "createdAt": {
          "documentation": "<p> Specifies when the connector profile was created. </p>",
          "shape": "Date"
        },
        "credentialsArn": {
          "documentation": "<p> The Amazon Resource Name (ARN) of the connector profile credentials. </p>",
          "shape": "ARN"
        },
        "lastUpdatedAt": {
          "documentation": "<p> Specifies when the connector profile was last updated. </p>",
          "shape": "Date"
        },
        "privateConnectionProvisioningState": {
          "documentation": "<p> Specifies the private connection provisioning state. </p>",
          "shape": "PrivateConnectionProvisioningState"
        }
      },
      "type": "structure"
    },
    "ConnectorProfileArn": {
      "max": 512,
      "pattern": "arn:aws:appflow:.*:[0-9]+:.*",
      "type": "string"
    },
    "ConnectorProfileConfig": {
      "documentation": "<p> Defines the connector-specific configuration and credentials for the connector profile. </p>",
      "members": {
        "connectorProfileCredentials": {
          "documentation": "<p> The connector-specific credentials required by each connector. </p>",
          "shape": "ConnectorProfileCredentials"
        },
        "connectorProfileProperties": {
          "documentation": "<p> The connector-specific properties of the profile configuration. </p>",
          "shape": "ConnectorProfileProperties"
        }
      },
      "required": [
        "connectorProfileProperties",
        "connectorProfileCredentials"
      ],
      "type": "structure"
    },
    "ConnectorProfileCredentials": {
      "documentation": "<p> The connector-specific credentials required by a connector. </p>",
      "members": {
        "Amplitude": {
          "documentation": "<p> The connector-specific credentials required when using Amplitude. </p>",
          "shape": "AmplitudeConnectorProfileCredentials"
        },
        "CustomConnector": {
          "shape": "CustomConnectorProfileCredentials"
        },
        "Datadog": {
          "documentation": "<p> The connector-specific credentials required when using Datadog. </p>",
          "shape": "DatadogConnectorProfileCredentials"
        },
        "Dynatrace": {
          "documentation": "<p> The connector-specific credentials required when using Dynatrace. </p>",
          "shape": "DynatraceConnectorProfileCredentials"
        },
        "GoogleAnalytics": {
          "documentation": "<p> The connector-specific credentials required when using Google Analytics. </p>",
          "shape": "GoogleAnalyticsConnectorProfileCredentials"
        },
        "Honeycode": {
          "documentation": "<p> The connector-specific credentials required when using Amazon Honeycode. </p>",
          "shape": "HoneycodeConnectorProfileCredentials"
        },
        "InforNexus": {
          "documentation": "<p> The connector-specific credentials required when using Infor Nexus. </p>",
          "shape": "InforNexusConnectorProfileCredentials"
        },
        "Marketo": {
          "documentation": "<p> The connector-specific credentials required when using Marketo. </p>",
          "shape": "MarketoConnectorProfileCredentials"
        },
        "Redshift": {
          "documentation": "<p> The connector-specific credentials required when using Amazon Redshift. </p>",
          "shape": "RedshiftConnectorProfileCredentials"
        },
        "SAPOData": {
          "shape": "SAPODataConnectorProfileCredentials"
        },
        "Salesforce": {
          "documentation": "<p> The connector-specific credentials required when using Salesforce. </p>",
          "shape": "SalesforceConnectorProfileCredentials"
        },
        "ServiceNow": {
          "documentation": "<p> The connector-specific credentials required when using ServiceNow. </p>",
          "shape": "ServiceNowConnectorProfileCredentials"
        },
        "Singular": {
          "documentation": "<p> The connector-specific credentials required when using Singular. </p>",
          "shape": "SingularConnectorProfileCredentials"
        },
        "Slack": {
          "documentation": "<p> The connector-specific credentials required when using Slack. </p>",
          "shape": "SlackConnectorProfileCredentials"
        },
        "Snowflake": {
          "documentation": "<p> The connector-specific credentials required when using Snowflake. </p>",
          "shape": "SnowflakeConnectorProfileCredentials"
        },
        "Trendmicro": {
          "documentation": "<p> The connector-specific credentials required when using Trend Micro. </p>",
          "shape": "TrendmicroConnectorProfileCredentials"
        },
        "Veeva": {
          "documentation": "<p> The connector-specific credentials required when using Veeva. </p>",
          "shape": "VeevaConnectorProfileCredentials"
        },
        "Zendesk": {
          "documentation": "<p> The connector-specific credentials required when using Zendesk. </p>",
          "shape": "ZendeskConnectorProfileCredentials"
        }
      },
      "type": "structure"
    },
    "ConnectorProfileDetailList": {
      "member": {
        "shape": "ConnectorProfile"
      },
      "type": "list"
    },
    "ConnectorProfileName": {
      "max": 256,
      "pattern": "[\\w/!@#+=.-]+",
      "type": "string"
    },
    "ConnectorProfileNameList": {
      "max": 100,
      "member": {
        "shape": "ConnectorProfileName"
      },
      "min": 0,
      "type": "list"
    },
    "ConnectorProfileProperties": {
      "documentation": "<p> The connector-specific profile properties required by each connector. </p>",
      "members": {
        "Amplitude": {
          "documentation": "<p> The connector-specific properties required by Amplitude. </p>",
          "shape": "AmplitudeConnectorProfileProperties"
        },
        "CustomConnector": {
          "documentation": "<p>The properties required by the custom connector.</p>",
          "shape": "CustomConnectorProfileProperties"
        },
        "Datadog": {
          "documentation": "<p> The connector-specific properties required by Datadog. </p>",
          "shape": "DatadogConnectorProfileProperties"
        },
        "Dynatrace": {
          "documentation": "<p> The connector-specific properties required by Dynatrace. </p>",
          "shape": "DynatraceConnectorProfileProperties"
        },
        "GoogleAnalytics": {
          "documentation": "<p> The connector-specific properties required Google Analytics. </p>",
          "shape": "GoogleAnalyticsConnectorProfileProperties"
        },
        "Honeycode": {
          "documentation": "<p> The connector-specific properties required by Amazon Honeycode. </p>",
          "shape": "HoneycodeConnectorProfileProperties"
        },
        "InforNexus": {
          "documentation": "<p> The connector-specific properties required by Infor Nexus. </p>",
          "shape": "InforNexusConnectorProfileProperties"
        },
        "Marketo": {
          "documentation": "<p> The connector-specific properties required by Marketo. </p>",
          "shape": "MarketoConnectorProfileProperties"
        },
        "Redshift": {
          "documentation": "<p> The connector-specific properties required by Amazon Redshift. </p>",
          "shape": "RedshiftConnectorProfileProperties"
        },
        "SAPOData": {
          "shape": "SAPODataConnectorProfileProperties"
        },
        "Salesforce": {
          "documentation": "<p> The connector-specific properties required by Salesforce. </p>",
          "shape": "SalesforceConnectorProfileProperties"
        },
        "ServiceNow": {
          "documentation": "<p> The connector-specific properties required by serviceNow. </p>",
          "shape": "ServiceNowConnectorProfileProperties"
        },
        "Singular": {
          "documentation": "<p> The connector-specific properties required by Singular. </p>",
          "shape": "SingularConnectorProfileProperties"
        },
        "Slack": {
          "documentation": "<p> The connector-specific properties required by Slack. </p>",
          "shape": "SlackConnectorProfileProperties"
        },
        "Snowflake": {
          "documentation": "<p> The connector-specific properties required by Snowflake. </p>",
          "shape": "SnowflakeConnectorProfileProperties"
        },
        "Trendmicro": {
          "documentation": "<p> The connector-specific properties required by Trend Micro. </p>",
          "shape": "TrendmicroConnectorProfileProperties"
        },
        "Veeva": {
          "documentation": "<p> The connector-specific properties required by Veeva. </p>",
          "shape": "VeevaConnectorProfileProperties"
        },
        "Zendesk": {
          "documentation": "<p> The connector-specific properties required by Zendesk. </p>",
          "shape": "ZendeskConnectorProfileProperties"
        }
      },
      "type": "structure"
    },
    "ConnectorProvisioningConfig": {
      "documentation": "<p>Contains information about the configuration of the connector being registered.</p>",
      "members": {
        "lambda": {
          "documentation": "<p>Contains information about the configuration of the lambda which is being registered as the connector.</p>",
          "shape": "LambdaConnectorProvisioningConfig"
        }
      },
      "type": "structure"
    },
    "ConnectorProvisioningType": {
      "documentation": "<p>The type of provisioning that the connector supports, such as Lambda.</p>",
      "enum": [
        "LAMBDA"
      ],
      "type": "string"
    },
    "ConnectorRuntimeSetting": {
      "documentation": "<p>Contains information about the connector runtime settings that are required for flow execution.</p>",
      "members": {
        "connectorSuppliedValueOptions": {
          "documentation": "<p>Contains default values for the connector runtime setting that are supplied by the connector.</p>",
          "shape": "ConnectorSuppliedValueOptionList"
        },
        "dataType": {
          "documentation": "<p>Data type of the connector runtime setting.</p>",
          "shape": "ConnectorRuntimeSettingDataType"
        },
        "description": {
          "documentation": "<p>A description about the connector runtime setting.</p>",
          "shape": "Description"
        },
        "isRequired": {
          "documentation": "<p>Indicates whether this connector runtime setting is required.</p>",
          "shape": "Boolean"
        },
        "key": {
          "documentation": "<p>Contains value information about the connector runtime setting.</p>",
          "shape": "Key"
        },
        "label": {
          "documentation": "<p>A label used for connector runtime setting.</p>",
          "shape": "Label"
        },
        "scope": {
          "documentation": "<p>Indicates the scope of the connector runtime setting.</p>",
          "shape": "ConnectorRuntimeSettingScope"
        }
      },
      "type": "structure"
    },
    "ConnectorRuntimeSettingDataType": {
      "max": 256,
      "pattern": "\\S+",
      "type": "string"
    },
    "ConnectorRuntimeSettingList": {
      "member": {
        "shape": "ConnectorRuntimeSetting"
      },
      "type": "list"
    },
    "ConnectorRuntimeSettingScope": {
      "max": 256,
      "pattern": "\\S+",
      "type": "string"
    },
    "ConnectorServerException": {
      "documentation": "<p> An error occurred when retrieving data from the connector endpoint. </p>",
      "error": {
        "httpStatusCode": 400
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "ErrorMessage"
        }
      },
      "type": "structure"
    },
    "ConnectorSuppliedValue": {
      "max": 256,
      "pattern": "\\S+",
      "type": "string"
    },
    "ConnectorSuppliedValueList": {
      "member": {
        "shape": "ConnectorSuppliedValue"
      },
      "type": "list"
    },
    "ConnectorSuppliedValueOptionList": {
      "member": {
        "shape": "ConnectorSuppliedValue"
      },
      "type": "list"
    },
    "ConnectorType": {
      "enum": [
        "Salesforce",
        "Singular",
        "Slack",
        "Redshift",
        "S3",
        "Marketo",
        "Googleanalytics",
        "Zendesk",
        "Servicenow",
        "Datadog",
        "Trendmicro",
        "Snowflake",
        "Dynatrace",
        "Infornexus",
        "Amplitude",
        "Veeva",
        "EventBridge",
        "LookoutMetrics",
        "Upsolver",
        "Honeycode",
        "CustomerProfiles",
        "SAPOData",
        "CustomConnector"
      ],
      "type": "string"
    },
    "ConnectorTypeList": {
      "max": 100,
      "member": {
        "shape": "ConnectorType"
      },
      "min": 0,
      "type": "list"
    },
    "ConnectorVersion": {
      "max": 256,
      "pattern": "\\S+",
      "type": "string"
    },
    "CreateConnectorProfileRequest": {
      "members": {
        "connectionMode": {
          "documentation": "<p> Indicates the connection mode and specifies whether it is public or private. Private flows use Amazon Web Services PrivateLink to route data over Amazon Web Services infrastructure without exposing it to the public internet. </p>",
          "shape": "ConnectionMode"
        },
        "connectorLabel": {
          "documentation": "<p>The label of the connector. The label is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR connector type/.</p>",
          "shape": "ConnectorLabel"
        },
        "connectorProfileConfig": {
          "documentation": "<p> Defines the connector-specific configuration and credentials. </p>",
          "shape": "ConnectorProfileConfig"
        },
        "connectorProfileName": {
          "documentation": "<p> The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in your Amazon Web Services account. </p>",
          "shape": "ConnectorProfileName"
        },
        "connectorType": {
          "documentation": "<p> The type of connector, such as Salesforce, Amplitude, and so on. </p>",
          "shape": "ConnectorType"
        },
        "kmsArn": {
          "documentation": "<p> The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key. </p>",
          "shape": "KMSArn"
        }
      },
      "required": [
        "connectorProfileName",
        "connectorType",
        "connectionMode",
        "connectorProfileConfig"
      ],
      "type": "structure"
    },
    "CreateConnectorProfileResponse": {
      "members": {
        "connectorProfileArn": {
          "documentation": "<p> The Amazon Resource Name (ARN) of the connector profile. </p>",
          "shape": "ConnectorProfileArn"
        }
      },
      "type": "structure"
    },
    "CreateFlowRequest": {
      "members": {
        "description": {
          "documentation": "<p> A description of the flow you want to create. </p>",
          "shape": "FlowDescription"
        },
        "destinationFlowConfigList": {
          "documentation": "<p> The configuration that controls how Amazon AppFlow places data in the destination connector. </p>",
          "shape": "DestinationFlowConfigList"
        },
        "flowName": {
          "documentation": "<p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>",
          "shape": "FlowName"
        },
        "kmsArn": {
          "documentation": "<p> The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key. </p>",
          "shape": "KMSArn"
        },
        "sourceFlowConfig": {
          "documentation": "<p> The configuration that controls how Amazon AppFlow retrieves data from the source connector. </p>",
          "shape": "SourceFlowConfig"
        },
        "tags": {
          "documentation": "<p> The tags used to organize, track, or control access for your flow. </p>",
          "shape": "TagMap"
        },
        "tasks": {
          "documentation": "<p> A list of tasks that Amazon AppFlow performs while transferring the data in the flow run. </p>",
          "shape": "Tasks"
        },
        "triggerConfig": {
          "documentation": "<p> The trigger settings that determine how and when the flow runs. </p>",
          "shape": "TriggerConfig"
        }
      },
      "required": [
        "flowName",
        "triggerConfig",
        "sourceFlowConfig",
        "destinationFlowConfigList",
        "tasks"
      ],
      "type": "structure"
    },
    "CreateFlowResponse": {
      "members": {
        "flowArn": {
          "documentation": "<p> The flow's Amazon Resource Name (ARN). </p>",
          "shape": "FlowArn"
        },
        "flowStatus": {
          "documentation": "<p> Indicates the current status of the flow. </p>",
          "shape": "FlowStatus"
        }
      },
      "type": "structure"
    },
    "CreatedBy": {
      "max": 256,
      "pattern": "\\S+",
      "type": "string"
    },
    "CredentialsMap": {
      "key": {
        "shape": "CredentialsMapKey"
      },
      "max": 50,
      "min": 0,
      "type": "map",
      "value": {
        "shape": "CredentialsMapValue"
      }
    },
    "CredentialsMapKey": {
      "max": 128,
      "min": 1,
      "pattern": "[\\w]+",
      "sensitive": true,
      "type": "string"
    },
    "CredentialsMapValue": {
      "max": 2048,
      "pattern": "\\S+",
      "sensitive": true,
      "type": "string"
    },
    "CustomAuthConfig": {
      "documentation": "<p>Configuration information required for custom authentication.</p>",
      "members": {
        "authParameters": {
          "documentation": "<p>Information about authentication parameters required for authentication.</p>",
          "shape": "AuthParameterList"
        },
        "customAuthenticationType": {
          "documentation": "<p>The authentication type that the custom connector uses.</p>",
          "shape": "CustomAuthenticationType"
        }
      },
      "type": "structure"
    },
    "CustomAuthConfigList": {
      "member": {
        "shape": "CustomAuthConfig"
      },
      "type": "list"
    },
    "CustomAuthCredentials": {
      "documentation": "<p>The custom credentials required for custom authentication.</p>",
      "members": {
        "credentialsMap": {
          "documentation": "<p>A map that holds custom authentication credentials.</p>",
          "shape": "CredentialsMap"
        },
        "customAuthenticationType": {
          "documentation": "<p>The custom authentication type that the connector uses.</p>",
          "shape": "CustomAuthenticationType"
        }
      },
      "required": [
        "customAuthenticationType"
      ],
      "type": "structure"
    },
    "CustomAuthenticationType": {
      "max": 256,
      "pattern": "\\S+",
      "type": "string"
    },
    "CustomConnectorDestinationProperties": {
      "documentation": "<p>The properties that are applied when the custom connector is being used as a destination.</p>",
      "members": {
        "customProperties": {
          "documentation": "<p>The custom properties that are specific to the connector when it's used as a destination in the flow.</p>",
          "shape": "CustomProperties"
        },
        "entityName": {
          "documentation": "<p>The entity specified in the custom connector as a destination in the flow.</p>",
          "shape": "EntityName"
        },
        "errorHandlingConfig": {
          "documentation": "<p>The settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination.</p>",
          "shape": "ErrorHandlingConfig"
        },
        "idFieldNames": {
          "documentation": "<p>The name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.</p>",
          "shape": "IdFieldNameList"
        },
        "writeOperationType": {
          "documentation": "<p>Specifies the type of write operation to be performed in the custom connector when it's used as destination.</p>",
          "shape": "WriteOperationType"
        }
      },
      "required": [
        "entityName"
      ],
      "type": "structure"
    },
    "CustomConnectorProfileCredentials": {
      "documentation": "<p>The connector-specific profile credentials that are required when using the custom connector.</p>",
      "members": {
        "apiKey": {
          "documentation": "<p>The API keys required for the authentication of the user.</p>",
          "shape": "ApiKeyCredentials"
        },
        "authenticationType": {
          "documentation": "<p>The authentication type that the custom connector uses for authenticating while creating a connector profile.</p>",
          "shape": "AuthenticationType"
        },
        "basic": {
          "documentation": "<p>The basic credentials that are required for the authentication of the user.</p>",
          "shape": "BasicAuthCredentials"
        },
        "custom": {
          "documentation": "<p>If the connector uses the custom authentication mechanism, this holds the required credentials.</p>",
          "shape": "CustomAuthCredentials"
        },
        "oauth2": {
          "documentation": "<p>The OAuth 2.0 credentials required for the authentication of the user.</p>",
          "shape": "OAuth2Credentials"
        }
      },
      "required": [
        "authenticationType"
      ],
      "type": "structure"
    },
    "CustomConnectorProfileProperties": {
      "documentation": "<p>The profile properties required by the custom connector.</p>",
      "members": {
        "oAuth2Properties": {
          "shape": "OAuth2Properties"
        },
        "profileProperties": {
          "documentation": "<p>A map of properties that are required to create a profile for the custom connector.</p>",
          "shape": "ProfilePropertiesMap"
        }
      },
      "type": "structure"
    },
    "CustomConnectorSourceProperties": {
      "documentation": "<p>The properties that are applied when the custom connector is being used as a source.</p>",
      "members": {
        "customProperties": {
          "documentation": "<p>Custom properties that are required to use the custom connector as a source.</p>",
          "shape": "CustomProperties"
        },
        "entityName": {
          "documentation": "<p>The entity specified in the custom connector as a source in the flow.</p>",
          "shape": "EntityName"
        }
      },
      "required": [
        "entityName"
      ],
      "type": "structure"
    },
    "CustomProperties": {
      "key": {
        "shape": "CustomPropertyKey"
      },
      "max": 50,
      "min": 0,
      "type": "map",
      "value": {
        "shape": "CustomPropertyValue"
      }
    },
    "CustomPropertyKey": {
      "max": 128,
      "min": 1,
      "pattern": "[\\w]+",
      "type": "string"
    },
    "CustomPropertyValue": {
      "max": 2048,
      "pattern": "\\S+",
      "type": "string"
    },
    "CustomerProfilesDestinationProperties": {
      "documentation": "<p> The properties that are applied when Amazon Connect Customer Profiles is used as a destination. </p>",
      "members": {
        "domainName": {
          "documentation": "<p> The unique name of the Amazon Connect Customer Profiles domain. </p>",
          "shape": "DomainName"
        },
        "objectTypeName": {
          "documentation": "<p> The object specified in the Amazon Connect Customer Profiles flow destination. </p>",
          "shape": "ObjectTypeName"
        }
      },
      "required": [
        "domainName"
      ],
      "type": "structure"
    },
    "CustomerProfilesMetadata": {
      "documentation": "<p> The connector metadata specific to Amazon Connect Customer Profiles. </p>",
      "members": {},
      "type": "structure"
    },
    "DataPullMode": {
      "enum": [
        "Incremental",
        "Complete"
      ],
      "type": "string"
    },
    "DatabaseUrl": {
      "max": 512,
      "pattern": "\\S+",
      "type": "string"
    },
    "DatadogConnectorOperator": {
      "enum": [
        "PROJECTION",
        "BETWEEN",
        "EQUAL_TO",
        "ADDITION",
        "MULTIPLICATION",
        "DIVISION",
        "SUBTRACTION",
        "MASK_ALL",
        "MASK_FIRST_N",
        "MASK_LAST_N",
        "VALIDATE_NON_NULL",
        "VALIDATE_NON_ZERO",
        "VALIDATE_NON_NEGATIVE",
        "VALIDATE_NUMERIC",
        "NO_OP"
      ],
      "type": "string"
    },
    "DatadogConnectorProfileCredentials": {
      "documentation": "<p> The connector-specific credentials required by Datadog. </p>",
      "members": {
        "apiKey": {
          "documentation": "<p> A unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API. </p>",
          "shape": "ApiKey"
        },
        "applicationKey": {
          "documentation": "<p> Application keys, in conjunction with your API key, give you full access to Datadog\u2019s programmatic API. Application keys are associated with the user account that created them. The application key is used to log all requests made to the API. </p>",
          "shape": "ApplicationKey"
        }
      },
      "required": [
        "apiKey",
        "applicationKey"
      ],
      "type": "structure"
    },
    "DatadogConnectorProfileProperties": {
      "documentation": "<p> The connector-specific profile properties required by Datadog. </p>",
      "members": {
        "instanceUrl": {
          "documentation": "<p> The location of the Datadog resource. </p>",
          "shape": "InstanceUrl"
        }
      },
      "required": [
        "instanceUrl"
      ],
      "type": "structure"
    },
    "DatadogMetadata": {
      "documentation": "<p> The connector metadata specific to Datadog. </p>",
      "members": {},
      "type": "structure"
    },
    "DatadogSourceProperties": {
      "documentation": "<p> The properties that are applied when Datadog is being used as a source. </p>",
      "members": {
        "object": {
          "documentation": "<p> The object specified in the Datadog flow source. </p>",
          "shape": "Object"
        }
      },
      "required": [
        "object"
      ],
      "type": "structure"
    },
    "Date": {
      "type": "timestamp"
    },
    "DatetimeTypeFieldName": {
      "max": 256,
      "pattern": ".*",
      "type": "string"
    },
    "DeleteConnectorProfileRequest": {
      "members": {
        "connectorProfileName": {
          "documentation": "<p> The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in your account. </p>",
          "shape": "ConnectorProfileName"
        },
        "forceDelete": {
          "documentation": "<p> Indicates whether Amazon AppFlow should delete the profile, even if it is currently in use in one or more flows. </p>",
          "shape": "Boolean"
        }
      },
      "required": [
        "connectorProfileName"
      ],
      "type": "structure"
    },
    "DeleteConnectorProfileResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteFlowRequest": {
      "members": {
        "flowName": {
          "documentation": "<p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>",
          "shape": "FlowName"
        },
        "forceDelete": {
          "documentation": "<p> Indicates whether Amazon AppFlow should delete the flow, even if it is currently in use. </p>",
          "shape": "Boolean"
        }
      },
      "required": [
        "flowName"
      ],
      "type": "structure"
    },
    "DeleteFlowResponse": {
      "members": {},
      "type": "structure"
    },
    "DescribeConnectorEntityRequest": {
      "members": {
        "apiVersion": {
          "documentation": "<p>The version of the API that's used by the connector.</p>",
          "shape": "ApiVersion"
        },
        "connectorEntityName": {
          "documentation": "<p> The entity name for that connector. </p>",
          "shape": "EntityName"
        },
        "connectorProfileName": {
          "documentation": "<p> The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account. </p>",
          "shape": "ConnectorProfileName"
        },
        "connectorType": {
          "documentation": "<p> The type of connector application, such as Salesforce, Amplitude, and so on. </p>",
          "shape": "ConnectorType"
        }
      },
      "required": [
        "connectorEntityName"
      ],
      "type": "structure"
    },
    "DescribeConnectorEntityResponse": {
      "members": {
        "connectorEntityFields": {
          "documentation": "<p> Describes the fields for that connector entity. For example, for an <i>account</i> entity, the fields would be <i>account name</i>, <i>account ID</i>, and so on. </p>",
          "shape": "ConnectorEntityFieldList"
        }
      },
      "required": [
        "connectorEntityFields"
      ],
      "type": "structure"
    },
    "DescribeConnectorProfilesRequest": {
      "members": {
        "connectorLabel": {
          "documentation": "<p>The name of the connector. The name is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR connector type/.</p>",
          "shape": "ConnectorLabel"
        },
        "connectorProfileNames": {
          "documentation": "<p> The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account. </p>",
          "shape": "ConnectorProfileNameList"
        },
        "connectorType": {
          "documentation": "<p> The type of connector, such as Salesforce, Amplitude, and so on. </p>",
          "shape": "ConnectorType"
        },
        "maxResults": {
          "documentation": "<p> Specifies the maximum number of items that should be returned in the result set. The default for <code>maxResults</code> is 20 (for all paginated API operations). </p>",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p> The pagination token for the next page of data. </p>",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "DescribeConnectorProfilesResponse": {
      "members": {
        "connectorProfileDetails": {
          "documentation": "<p> Returns information about the connector profiles associated with the flow. </p>",
          "shape": "ConnectorProfileDetailList"
        },
        "nextToken": {
          "documentation": "<p> The pagination token for the next page of data. If <code>nextToken=null</code>, this means that all records have been fetched. </p>",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "DescribeConnectorRequest": {
      "members": {
        "connectorLabel": {
          "documentation": "<p>The label of the connector. The label is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR connector type/.</p>",
          "shape": "ConnectorLabel"
        },
        "connectorType": {
          "documentation": "<p>The connector type, such as CUSTOMCONNECTOR, Saleforce, Marketo. Please choose CUSTOMCONNECTOR for Lambda based custom connectors.</p>",
          "shape": "ConnectorType"
        }
      },
      "required": [
        "connectorType"
      ],
      "type": "structure"
    },
    "DescribeConnectorResponse": {
      "members": {
        "connectorConfiguration": {
          "documentation": "<p>Configuration info of all the connectors that the user requested.</p>",
          "shape": "ConnectorConfiguration"
        }
      },
      "type": "structure"
    },
    "DescribeConnectorsRequest": {
      "members": {
        "connectorTypes": {
          "documentation": "<p> The type of connector, such as Salesforce, Amplitude, and so on. </p>",
          "shape": "ConnectorTypeList"
        },
        "maxResults": {
          "documentation": "<p>The maximum number of items that should be returned in the result set. The default is 20.</p>",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p> The pagination token for the next page of data. </p>",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "DescribeConnectorsResponse": {
      "members": {
        "connectorConfigurations": {
          "documentation": "<p> The configuration that is applied to the connectors used in the flow. </p>",
          "shape": "ConnectorConfigurationsMap"
        },
        "connectors": {
          "documentation": "<p>Information about the connectors supported in Amazon AppFlow.</p>",
          "shape": "ConnectorList"
        },
        "nextToken": {
          "documentation": "<p> The pagination token for the next page of data. </p>",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "DescribeFlowExecutionRecordsRequest": {
      "members": {
        "flowName": {
          "documentation": "<p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>",
          "shape": "FlowName"
        },
        "maxResults": {
          "documentation": "<p> Specifies the maximum number of items that should be returned in the result set. The default for <code>maxResults</code> is 20 (for all paginated API operations). </p>",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p> The pagination token for the next page of data. </p>",
          "shape": "NextToken"
        }
      },
      "required": [
        "flowName"
      ],
      "type": "structure"
    },
    "DescribeFlowExecutionRecordsResponse": {
      "members": {
        "flowExecutions": {
          "documentation": "<p> Returns a list of all instances when this flow was run. </p>",
          "shape": "FlowExecutionList"
        },
        "nextToken": {
          "documentation": "<p> The pagination token for the next page of data. </p>",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "DescribeFlowRequest": {
      "members": {
        "flowName": {
          "documentation": "<p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>",
          "shape": "FlowName"
        }
      },
      "required": [
        "flowName"
      ],
      "type": "structure"
    },
    "DescribeFlowResponse": {
      "members": {
        "createdAt": {
          "documentation": "<p> Specifies when the flow was created. </p>",
          "shape": "Date"
        },
        "createdBy": {
          "documentation": "<p> The ARN of the user who created the flow. </p>",
          "shape": "CreatedBy"
        },
        "description": {
          "documentation": "<p> A description of the flow. </p>",
          "shape": "FlowDescription"
        },
        "destinationFlowConfigList": {
          "documentation": "<p> The configuration that controls how Amazon AppFlow transfers data to the destination connector. </p>",
          "shape": "DestinationFlowConfigList"
        },
        "flowArn": {
          "documentation": "<p> The flow's Amazon Resource Name (ARN). </p>",
          "shape": "FlowArn"
        },
        "flowName": {
          "documentation": "<p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>",
          "shape": "FlowName"
        },
        "flowStatus": {
          "documentation": "<p> Indicates the current status of the flow. </p>",
          "shape": "FlowStatus"
        },
        "flowStatusMessage": {
          "documentation": "<p> Contains an error message if the flow status is in a suspended or error state. This applies only to scheduled or event-triggered flows. </p>",
          "shape": "FlowStatusMessage"
        },
        "kmsArn": {
          "documentation": "<p> The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key. </p>",
          "shape": "KMSArn"
        },
        "lastRunExecutionDetails": {
          "documentation": "<p> Describes the details of the most recent flow run. </p>",
          "shape": "ExecutionDetails"
        },
        "lastUpdatedAt": {
          "documentation": "<p> Specifies when the flow was last updated. </p>",
          "shape": "Date"
        },
        "lastUpdatedBy": {
          "documentation": "<p> Specifies the user name of the account that performed the most recent update. </p>",
          "shape": "UpdatedBy"
        },
        "sourceFlowConfig": {
          "documentation": "<p> The configuration that controls how Amazon AppFlow retrieves data from the source connector. </p>",
          "shape": "SourceFlowConfig"
        },
        "tags": {
          "documentation": "<p> The tags used to organize, track, or control access for your flow. </p>",
          "shape": "TagMap"
        },
        "tasks": {
          "documentation": "<p> A list of tasks that Amazon AppFlow performs while transferring the data in the flow run. </p>",
          "shape": "Tasks"
        },
        "triggerConfig": {
          "documentation": "<p> The trigger settings that determine how and when the flow runs. </p>",
          "shape": "TriggerConfig"
        }
      },
      "type": "structure"
    },
    "Description": {
      "max": 1024,
      "pattern": "[\\s\\w/!@#+=.-]*",
      "type": "string"
    },
    "DestinationConnectorProperties": {
      "documentation": "<p> This stores the information that is required to query a particular connector. </p>",
      "members": {
        "CustomConnector": {
          "documentation": "<p>The properties that are required to query the custom Connector.</p>",
          "shape": "CustomConnectorDestinationProperties"
        },
        "CustomerProfiles": {
          "documentation": "<p> The properties required to query Amazon Connect Customer Profiles. </p>",
          "shape": "CustomerProfilesDestinationProperties"
        },
        "EventBridge": {
          "documentation": "<p> The properties required to query Amazon EventBridge. </p>",
          "shape": "EventBridgeDestinationProperties"
        },
        "Honeycode": {
          "documentation": "<p> The properties required to query Amazon Honeycode. </p>",
          "shape": "HoneycodeDestinationProperties"
        },
        "LookoutMetrics": {
          "documentation": "<p> The properties required to query Amazon Lookout for Metrics. </p>",
          "shape": "LookoutMetricsDestinationProperties"
        },
        "Marketo": {
          "documentation": "<p>The properties required to query Marketo.</p>",
          "shape": "MarketoDestinationProperties"
        },
        "Redshift": {
          "documentation": "<p> The properties required to query Amazon Redshift. </p>",
          "shape": "RedshiftDestinationProperties"
        },
        "S3": {
          "documentation": "<p> The properties required to query Amazon S3. </p>",
          "shape": "S3DestinationProperties"
        },
        "SAPOData": {
          "documentation": "<p>The properties required to query SAPOData.</p>",
          "shape": "SAPODataDestinationProperties"
        },
        "Salesforce": {
          "documentation": "<p> The properties required to query Salesforce. </p>",
          "shape": "SalesforceDestinationProperties"
        },
        "Snowflake": {
          "documentation": "<p> The properties required to query Snowflake. </p>",
          "shape": "SnowflakeDestinationProperties"
        },
        "Upsolver": {
          "documentation": "<p> The properties required to query Upsolver. </p>",
          "shape": "UpsolverDestinationProperties"
        },
        "Zendesk": {
          "documentation": "<p>The properties required to query Zendesk.</p>",
          "shape": "ZendeskDestinationProperties"
        }
      },
      "type": "structure"
    },
    "DestinationField": {
      "max": 256,
      "pattern": ".*",
      "type": "string"
    },
    "DestinationFieldProperties": {
      "documentation": "<p> The properties that can be applied to a field when connector is being used as a destination. </p>",
      "members": {
        "isCreatable": {
          "documentation": "<p> Specifies if the destination field can be created by the current user. </p>",
          "shape": "Boolean"
        },
        "isDefaultedOnCreate": {
          "documentation": "<p>Specifies whether the field can use the default value during a Create operation.</p>",
          "shape": "Boolean"
        },
        "isNullable": {
          "documentation": "<p> Specifies if the destination field can have a null value. </p>",
          "shape": "Boolean"
        },
        "isUpdatable": {
          "documentation": "<p> Specifies whether the field can be updated during an <code>UPDATE</code> or <code>UPSERT</code> write operation. </p>",
          "shape": "Boolean"
        },
        "isUpsertable": {
          "documentation": "<p> Specifies if the flow run can either insert new rows in the destination field if they do not already exist, or update them if they do. </p>",
          "shape": "Boolean"
        },
        "supportedWriteOperations": {
          "documentation": "<p> A list of supported write operations. For each write operation listed, this field can be used in <code>idFieldNames</code> when that write operation is present as a destination option. </p>",
          "shape": "SupportedWriteOperationList"
        }
      },
      "type": "structure"
    },
    "DestinationFlowConfig": {
      "documentation": "<p> Contains information about the configuration of destination connectors present in the flow. </p>",
      "members": {
        "apiVersion": {
          "documentation": "<p>The API version that the destination connector uses.</p>",
          "shape": "ApiVersion"
        },
        "connectorProfileName": {
          "documentation": "<p> The name of the connector profile. This name must be unique for each connector profile in the Amazon Web Services account. </p>",
          "shape": "ConnectorProfileName"
        },
        "connectorType": {
          "documentation": "<p> The type of connector, such as Salesforce, Amplitude, and so on. </p>",
          "shape": "ConnectorType"
        },
        "destinationConnectorProperties": {
          "documentation": "<p> This stores the information that is required to query a particular connector. </p>",
          "shape": "DestinationConnectorProperties"
        }
      },
      "required": [
        "connectorType",
        "destinationConnectorProperties"
      ],
      "type": "structure"
    },
    "DestinationFlowConfigList": {
      "member": {
        "shape": "DestinationFlowConfig"
      },
      "type": "list"
    },
    "DocumentType": {
      "max": 512,
      "pattern": "[\\s\\w_-]+",
      "type": "string"
    },
    "DomainName": {
      "max": 64,
      "pattern": "\\S+",
      "type": "string"
    },
    "Double": {
      "type": "double"
    },
    "DynatraceConnectorOperator": {
      "enum": [
        "PROJECTION",
        "BETWEEN",
        "EQUAL_TO",
        "ADDITION",
        "MULTIPLICATION",
        "DIVISION",
        "SUBTRACTION",
        "MASK_ALL",
        "MASK_FIRST_N",
        "MASK_LAST_N",
        "VALIDATE_NON_NULL",
        "VALIDATE_NON_ZERO",
        "VALIDATE_NON_NEGATIVE",
        "VALIDATE_NUMERIC",
        "NO_OP"
      ],
      "type": "string"
    },
    "DynatraceConnectorProfileCredentials": {
      "documentation": "<p> The connector-specific profile credentials required by Dynatrace. </p>",
      "members": {
        "apiToken": {
          "documentation": "<p> The API tokens used by Dynatrace API to authenticate various API calls. </p>",
          "shape": "ApiToken"
        }
      },
      "required": [
        "apiToken"
      ],
      "type": "structure"
    },
    "DynatraceConnectorProfileProperties": {
      "documentation": "<p> The connector-specific profile properties required by Dynatrace. </p>",
      "members": {
        "instanceUrl": {
          "documentation": "<p> The location of the Dynatrace resource. </p>",
          "shape": "InstanceUrl"
        }
      },
      "required": [
        "instanceUrl"
      ],
      "type": "structure"
    },
    "DynatraceMetadata": {
      "documentation": "<p> The connector metadata specific to Dynatrace. </p>",
      "members": {},
      "type": "structure"
    },
    "DynatraceSourceProperties": {
      "documentation": "<p> The properties that are applied when Dynatrace is being used as a source. </p>",
      "members": {
        "object": {
          "documentation": "<p> The object specified in the Dynatrace flow source. </p>",
          "shape": "Object"
        }
      },
      "required": [
        "object"
      ],
      "type": "structure"
    },
    "EntitiesPath": {
      "max": 256,
      "pattern": "[\\s\\w/!@#+=.-]*",
      "type": "string"
    },
    "EntityName": {
      "max": 1024,
      "pattern": "\\S+",
      "type": "string"
    },
    "ErrorHandlingConfig": {
      "documentation": "<p> The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. <code>ErrorHandlingConfig</code> is a part of the destination connector details. </p>",
      "members": {
        "bucketName": {
          "documentation": "<p> Specifies the name of the Amazon S3 bucket. </p>",
          "shape": "BucketName"
        },
        "bucketPrefix": {
          "documentation": "<p> Specifies the Amazon S3 bucket prefix. </p>",
          "shape": "BucketPrefix"
        },
        "failOnFirstDestinationError": {
          "documentation": "<p> Specifies if the flow should fail after the first instance of a failure when attempting to place data in the destination. </p>",
          "shape": "Boolean"
        }
      },
      "type": "structure"
    },
    "ErrorInfo": {
      "documentation": "<p> Provides details in the event of a failed flow, including the failure count and the related error messages. </p>",
      "members": {
        "executionMessage": {
          "documentation": "<p> Specifies the error message that appears if a flow fails. </p>",
          "shape": "ExecutionMessage"
        },
        "putFailuresCount": {
          "documentation": "<p> Specifies the failure count for the attempted flow. </p>",
          "shape": "Long"
        }
      },
      "type": "structure"
    },
    "ErrorMessage": {
      "max": 2048,
      "pattern": "[\\s\\w/!@#+=.-]*",
      "type": "string"
    },
    "EventBridgeDestinationProperties": {
      "documentation": "<p> The properties that are applied when Amazon EventBridge is being used as a destination. </p>",
      "members": {
        "errorHandlingConfig": {
          "shape": "ErrorHandlingConfig"
        },
        "object": {
          "documentation": "<p> The object specified in the Amazon EventBridge flow destination. </p>",
          "shape": "Object"
        }
      },
      "required": [
        "object"
      ],
      "type": "structure"
    },
    "EventBridgeMetadata": {
      "documentation": "<p> The connector metadata specific to Amazon EventBridge. </p>",
      "members": {},
      "type": "structure"
    },
    "ExecutionDetails": {
      "documentation": "<p> Describes the details of the flow run, including the timestamp, status, and message. </p>",
      "members": {
        "mostRecentExecutionMessage": {
          "documentation": "<p> Describes the details of the most recent flow run. </p>",
          "shape": "MostRecentExecutionMessage"
        },
        "mostRecentExecutionStatus": {
          "documentation": "<p> Specifies the status of the most recent flow run. </p>",
          "shape": "ExecutionStatus"
        },
        "mostRecentExecutionTime": {
          "documentation": "<p> Specifies the time of the most recent flow run. </p>",
          "shape": "Date"
        }
      },
      "type": "structure"
    },
    "ExecutionId": {
      "max": 256,
      "pattern": "\\S+",
      "type": "string"
    },
    "ExecutionMessage": {
      "max": 2048,
      "pattern": "[\\s\\w/!@#+=.-]*",
      "type": "string"
    },
    "ExecutionRecord": {
      "documentation": "<p> Specifies information about the past flow run instances for a given flow. </p>",
      "members": {
        "dataPullEndTime": {
          "documentation": "<p> The timestamp that indicates the last new or updated record to be transferred in the flow run. </p>",
          "shape": "Date"
        },
        "dataPullStartTime": {
          "documentation": "<p> The timestamp that determines the first new or updated record to be transferred in the flow run. </p>",
          "shape": "Date"
        },
        "executionId": {
          "documentation": "<p> Specifies the identifier of the given flow run. </p>",
          "shape": "ExecutionId"
        },
        "executionResult": {
          "documentation": "<p> Describes the result of the given flow run. </p>",
          "shape": "ExecutionResult"
        },
        "executionStatus": {
          "documentation": "<p> Specifies the flow run status and whether it is in progress, has completed successfully, or has failed. </p>",
          "shape": "ExecutionStatus"
        },
        "lastUpdatedAt": {
          "documentation": "<p> Specifies the time of the most recent update. </p>",
          "shape": "Date"
        },
        "startedAt": {
          "documentation": "<p> Specifies the start time of the flow run. </p>",
          "shape": "Date"
        }
      },
      "type": "structure"
    },
    "ExecutionResult": {
      "documentation": "<p> Specifies the end result of the flow run. </p>",
      "members": {
        "bytesProcessed": {
          "documentation": "<p> The total number of bytes processed by the flow run. </p>",
          "shape": "Long"
        },
        "bytesWritten": {
          "documentation": "<p> The total number of bytes written as a result of the flow run. </p>",
          "shape": "Long"
        },
        "errorInfo": {
          "documentation": "<p> Provides any error message information related to the flow run. </p>",
          "shape": "ErrorInfo"
        },
        "recordsProcessed": {
          "documentation": "<p> The number of records processed in the flow run. </p>",
          "shape": "Long"
        }
      },
      "type": "structure"
    },
    "ExecutionStatus": {
      "enum": [
        "InProgress",
        "Successful",
        "Error"
      ],
      "type": "string"
    },
    "FieldType": {
      "type": "string"
    },
    "FieldTypeDetails": {
      "documentation": "<p> Contains details regarding the supported field type and the operators that can be applied for filtering. </p>",
      "members": {
        "fieldLengthRange": {
          "documentation": "<p>This is the allowable length range for this field's value.</p>",
          "shape": "Range"
        },
        "fieldType": {
          "documentation": "<p> The type of field, such as string, integer, date, and so on. </p>",
          "shape": "FieldType"
        },
        "fieldValueRange": {
          "documentation": "<p>The range of values this field can hold.</p>",
          "shape": "Range"
        },
        "filterOperators": {
          "documentation": "<p> The list of operators supported by a field. </p>",
          "shape": "FilterOperatorList"
        },
        "supportedDateFormat": {
          "documentation": "<p>The date format that the field supports.</p>",
          "shape": "String"
        },
        "supportedValues": {
          "documentation": "<p> The list of values that a field can contain. For example, a Boolean <code>fieldType</code> can have two values: \"true\" and \"false\". </p>",
          "shape": "SupportedValueList"
        },
        "valueRegexPattern": {
          "documentation": "<p>The regular expression pattern for the field name.</p>",
          "shape": "String"
        }
      },
      "required": [
        "fieldType",
        "filterOperators"
      ],
      "type": "structure"
    },
    "FileType": {
      "enum": [
        "CSV",
        "JSON",
        "PARQUET"
      ],
      "type": "string"
    },
    "FilterOperatorList": {
      "member": {
        "shape": "Operator"
      },
      "type": "list"
    },
    "FlowArn": {
      "max": 512,
      "pattern": "arn:aws:appflow:.*:[0-9]+:.*",
      "type": "string"
    },
    "FlowDefinition": {
      "documentation": "<p> The properties of the flow, such as its source, destination, trigger type, and so on. </p>",
      "members": {
        "createdAt": {
          "documentation": "<p> Specifies when the flow was created. </p>",
          "shape": "Date"
        },
        "createdBy": {
          "documentation": "<p> The ARN of the user who created the flow. </p>",
          "shape": "CreatedBy"
        },
        "description": {
          "documentation": "<p> A user-entered description of the flow. </p>",
          "shape": "FlowDescription"
        },
        "destinationConnectorLabel": {
          "documentation": "<p>The label of the destination connector in the flow.</p>",
          "shape": "ConnectorLabel"
        },
        "destinationConnectorType": {
          "documentation": "<p> Specifies the destination connector type, such as Salesforce, Amazon S3, Amplitude, and so on. </p>",
          "shape": "ConnectorType"
        },
        "flowArn": {
          "documentation": "<p> The flow's Amazon Resource Name (ARN). </p>",
          "shape": "FlowArn"
        },
        "flowName": {
          "documentation": "<p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>",
          "shape": "FlowName"
        },
        "flowStatus": {
          "documentation": "<p> Indicates the current status of the flow. </p>",
          "shape": "FlowStatus"
        },
        "lastRunExecutionDetails": {
          "documentation": "<p> Describes the details of the most recent flow run. </p>",
          "shape": "ExecutionDetails"
        },
        "lastUpdatedAt": {
          "documentation": "<p> Specifies when the flow was last updated. </p>",
          "shape": "Date"
        },
        "lastUpdatedBy": {
          "documentation": "<p> Specifies the account user name that most recently updated the flow. </p>",
          "shape": "UpdatedBy"
        },
        "sourceConnectorLabel": {
          "documentation": "<p>The label of the source connector in the flow.</p>",
          "shape": "ConnectorLabel"
        },
        "sourceConnectorType": {
          "documentation": "<p> Specifies the source connector type, such as Salesforce, Amazon S3, Amplitude, and so on. </p>",
          "shape": "ConnectorType"
        },
        "tags": {
          "documentation": "<p> The tags used to organize, track, or control access for your flow. </p>",
          "shape": "TagMap"
        },
        "triggerType": {
          "documentation": "<p> Specifies the type of flow trigger. This can be <code>OnDemand</code>, <code>Scheduled</code>, or <code>Event</code>. </p>",
          "shape": "TriggerType"
        }
      },
      "type": "structure"
    },
    "FlowDescription": {
      "max": 2048,
      "pattern": "[\\w!@#\\-.?,\\s]*",
      "type": "string"
    },
    "FlowErrorDeactivationThreshold": {
      "max": 100,
      "min": 1,
      "type": "integer"
    },
    "FlowExecutionList": {
      "member": {
        "shape": "ExecutionRecord"
      },
      "type": "list"
    },
    "FlowList": {
      "member": {
        "shape": "FlowDefinition"
      },
      "type": "list"
    },
    "FlowName": {
      "max": 256,
      "pattern": "[a-zA-Z0-9][\\w!@#.-]+",
      "type": "string"
    },
    "FlowStatus": {
      "enum": [
        "Active",
        "Deprecated",
        "Deleted",
        "Draft",
        "Errored",
        "Suspended"
      ],
      "type": "string"
    },
    "FlowStatusMessage": {
      "max": 2048,
      "pattern": "[\\s\\w/!@#+=.-]*",
      "type": "string"
    },
    "GoogleAnalyticsConnectorOperator": {
      "enum": [
        "PROJECTION",
        "BETWEEN"
      ],
      "type": "string"
    },
    "GoogleAnalyticsConnectorProfileCredentials": {
      "documentation": "<p> The connector-specific profile credentials required by Google Analytics. </p>",
      "members": {
        "accessToken": {
          "documentation": "<p> The credentials used to access protected Google Analytics resources. </p>",
          "shape": "AccessToken"
        },
        "clientId": {
          "documentation": "<p> The identifier for the desired client. </p>",
          "shape": "ClientId"
        },
        "clientSecret": {
          "documentation": "<p> The client secret used by the OAuth client to authenticate to the authorization server. </p>",
          "shape": "ClientSecret"
        },
        "oAuthRequest": {
          "documentation": "<p> The OAuth requirement needed to request security tokens from the connector endpoint. </p>",
          "shape": "ConnectorOAuthRequest"
        },
        "refreshToken": {
          "documentation": "<p> The credentials used to acquire new access tokens. This is required only for OAuth2 access tokens, and is not required for OAuth1 access tokens. </p>",
          "shape": "RefreshToken"
        }
      },
      "required": [
        "clientId",
        "clientSecret"
      ],
      "type": "structure"
    },
    "GoogleAnalyticsConnectorProfileProperties": {
      "documentation": "<p> The connector-specific profile properties required by Google Analytics. </p>",
      "members": {},
      "type": "structure"
    },
    "GoogleAnalyticsMetadata": {
      "documentation": "<p> The connector metadata specific to Google Analytics. </p>",
      "members": {
        "oAuthScopes": {
          "documentation": "<p> The desired authorization scope for the Google Analytics account. </p>",
          "shape": "OAuthScopeList"
        }
      },
      "type": "structure"
    },
    "GoogleAnalyticsSourceProperties": {
      "documentation": "<p> The properties that are applied when Google Analytics is being used as a source. </p>",
      "members": {
        "object": {
          "documentation": "<p> The object specified in the Google Analytics flow source. </p>",
          "shape": "Object"
        }
      },
      "required": [
        "object"
      ],
      "type": "structure"
    },
    "Group": {
      "max": 128,
      "pattern": "\\S+",
      "type": "string"
    },
    "HoneycodeConnectorProfileCredentials": {
      "documentation": "<p> The connector-specific credentials required when using Amazon Honeycode. </p>",
      "members": {
        "accessToken": {
          "documentation": "<p> The credentials used to access protected Amazon Honeycode resources. </p>",
          "shape": "AccessToken"
        },
        "oAuthRequest": {
          "shape": "ConnectorOAuthRequest"
        },
        "refreshToken": {
          "documentation": "<p> The credentials used to acquire new access tokens. </p>",
          "shape": "RefreshToken"
        }
      },
      "type": "structure"
    },
    "HoneycodeConnectorProfileProperties": {
      "documentation": "<p> The connector-specific properties required when using Amazon Honeycode. </p>",
      "members": {},
      "type": "structure"
    },
    "HoneycodeDestinationProperties": {
      "documentation": "<p> The properties that are applied when Amazon Honeycode is used as a destination. </p>",
      "members": {
        "errorHandlingConfig": {
          "shape": "ErrorHandlingConfig"
        },
        "object": {
          "documentation": "<p> The object specified in the Amazon Honeycode flow destination. </p>",
          "shape": "Object"
        }
      },
      "required": [
        "object"
      ],
      "type": "structure"
    },
    "HoneycodeMetadata": {
      "documentation": "<p> The connector metadata specific to Amazon Honeycode. </p>",
      "members": {
        "oAuthScopes": {
          "documentation": "<p> The desired authorization scope for the Amazon Honeycode account. </p>",
          "shape": "OAuthScopeList"
        }
      },
      "type": "structure"
    },
    "IdFieldNameList": {
      "documentation": "<p> A list of field names that can be used as an ID field when performing a write operation. </p>",
      "member": {
        "shape": "Name"
      },
      "min": 0,
      "type": "list"
    },
    "Identifier": {
      "max": 128,
      "pattern": "\\S+",
      "type": "string"
    },
    "IncrementalPullConfig": {
      "documentation": "<p> Specifies the configuration used when importing incremental records from the source. </p>",
      "members": {
        "datetimeTypeFieldName": {
          "documentation": "<p> A field that specifies the date time or timestamp field as the criteria to use when importing incremental records from the source. </p>",
          "shape": "DatetimeTypeFieldName"
        }
      },
      "type": "structure"
    },
    "InforNexusConnectorOperator": {
      "enum": [
        "PROJECTION",
        "BETWEEN",
        "EQUAL_TO",
        "ADDITION",
        "MULTIPLICATION",
        "DIVISION",
        "SUBTRACTION",
        "MASK_ALL",
        "MASK_FIRST_N",
        "MASK_LAST_N",
        "VALIDATE_NON_NULL",
        "VALIDATE_NON_ZERO",
        "VALIDATE_NON_NEGATIVE",
        "VALIDATE_NUMERIC",
        "NO_OP"
      ],
      "type": "string"
    },
    "InforNexusConnectorProfileCredentials": {
      "documentation": "<p> The connector-specific profile credentials required by Infor Nexus. </p>",
      "members": {
        "accessKeyId": {
          "documentation": "<p> The Access Key portion of the credentials. </p>",
          "shape": "AccessKeyId"
        },
        "datakey": {
          "documentation": "<p> The encryption keys used to encrypt data. </p>",
          "shape": "Key"
        },
        "secretAccessKey": {
          "documentation": "<p> The secret key used to sign requests. </p>",
          "shape": "Key"
        },
        "userId": {
          "documentation": "<p> The identifier for the user. </p>",
          "shape": "Username"
        }
      },
      "required": [
        "accessKeyId",
        "userId",
        "secretAccessKey",
        "datakey"
      ],
      "type": "structure"
    },
    "InforNexusConnectorProfileProperties": {
      "documentation": "<p> The connector-specific profile properties required by Infor Nexus. </p>",
      "members": {
        "instanceUrl": {
          "documentation": "<p> The location of the Infor Nexus resource. </p>",
          "shape": "InstanceUrl"
        }
      },
      "required": [
        "instanceUrl"
      ],
      "type": "structure"
    },
    "InforNexusMetadata": {
      "documentation": "<p> The connector metadata specific to Infor Nexus. </p>",
      "members": {},
      "type": "structure"
    },
    "InforNexusSourceProperties": {
      "documentation": "<p> The properties that are applied when Infor Nexus is being used as a source. </p>",
      "members": {
        "object": {
          "documentation": "<p> The object specified in the Infor Nexus flow source. </p>",
          "shape": "Object"
        }
      },
      "required": [
        "object"
      ],
      "type": "structure"
    },
    "InstanceUrl": {
      "max": 256,
      "pattern": "\\S+",
      "type": "string"
    },
    "InternalServerException": {
      "documentation": "<p> An internal service error occurred during the processing of your request. Try again later. </p>",
      "error": {
        "httpStatusCode": 500
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "ErrorMessage"
        }
      },
      "type": "structure"
    },
    "JavaBoolean": {
      "type": "boolean"
    },
    "KMSArn": {
      "max": 2048,
      "min": 20,
      "pattern": "arn:aws:kms:.*:[0-9]+:.*",
      "type": "string"
    },
    "Key": {
      "max": 512,
      "pattern": "\\S+",
      "type": "string"
    },
    "Label": {
      "max": 128,
      "pattern": ".*",
      "type": "string"
    },
    "LambdaConnectorProvisioningConfig": {
      "documentation": "<p>Contains information about the configuration of the lambda which is being registered as the connector.</p>",
      "members": {
        "lambdaArn": {
          "documentation": "<p>Lambda ARN of the connector being registered.</p>",
          "shape": "ARN"
        }
      },
      "required": [
        "lambdaArn"
      ],
      "type": "structure"
    },
    "ListConnectorEntitiesRequest": {
      "members": {
        "apiVersion": {
          "documentation": "<p>The version of the API that's used by the connector.</p>",
          "shape": "ApiVersion"
        },
        "connectorProfileName": {
          "documentation": "<p> The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account, and is used to query the downstream connector. </p>",
          "shape": "ConnectorProfileName"
        },
        "connectorType": {
          "documentation": "<p> The type of connector, such as Salesforce, Amplitude, and so on. </p>",
          "shape": "ConnectorType"
        },
        "entitiesPath": {
          "documentation": "<p> This optional parameter is specific to connector implementation. Some connectors support multiple levels or categories of entities. You can find out the list of roots for such providers by sending a request without the <code>entitiesPath</code> parameter. If the connector supports entities at different roots, this initial request returns the list of roots. Otherwise, this request returns all entities supported by the provider. </p>",
          "shape": "EntitiesPath"
        }
      },
      "type": "structure"
    },
    "ListConnectorEntitiesResponse": {
      "members": {
        "connectorEntityMap": {
          "documentation": "<p> The response of <code>ListConnectorEntities</code> lists entities grouped by category. This map's key represents the group name, and its value contains the list of entities belonging to that group. </p>",
          "shape": "ConnectorEntityMap"
        }
      },
      "required": [
        "connectorEntityMap"
      ],
      "type": "structure"
    },
    "ListConnectorsRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p>Specifies the maximum number of items that should be returned in the result set. The default for <code>maxResults</code> is 20 (for all paginated API operations).</p>",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>The pagination token for the next page of data.</p>",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListConnectorsResponse": {
      "members": {
        "connectors": {
          "documentation": "<p>Contains information about the connectors supported by Amazon AppFlow.</p>",
          "shape": "ConnectorList"
        },
        "nextToken": {
          "documentation": "<p>The pagination token for the next page of data. If nextToken=null, this means that all records have been fetched.</p>",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListFlowsRequest": {
      "members": {
        "maxResults": {
          "documentation": "<p> Specifies the maximum number of items that should be returned in the result set. </p>",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p> The pagination token for next page of data. </p>",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListFlowsResponse": {
      "members": {
        "flows": {
          "documentation": "<p> The list of flows associated with your account. </p>",
          "shape": "FlowList"
        },
        "nextToken": {
          "documentation": "<p> The pagination token for next page of data. </p>",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListTagsForResourceRequest": {
      "members": {
        "resourceArn": {
          "documentation": "<p> The Amazon Resource Name (ARN) of the specified flow. </p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "ARN"
        }
      },
      "required": [
        "resourceArn"
      ],
      "type": "structure"
    },
    "ListTagsForResourceResponse": {
      "members": {
        "tags": {
          "documentation": "<p> The tags used to organize, track, or control access for your flow. </p>",
          "shape": "TagMap"
        }
      },
      "type": "structure"
    },
    "LogoURL": {
      "max": 256,
      "pattern": "^(https?|ftp|file)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]",
      "type": "string"
    },
    "LogonLanguage": {
      "max": 2,
      "pattern": "^[a-zA-Z0-9_]*$",
      "type": "string"
    },
    "Long": {
      "type": "long"
    },
    "LookoutMetricsDestinationProperties": {
      "documentation": "<p> The properties that are applied when Amazon Lookout for Metrics is used as a destination. </p>",
      "members": {},
      "type": "structure"
    },
    "MarketoConnectorOperator": {
      "enum": [
        "PROJECTION",
        "LESS_THAN",
        "GREATER_THAN",
        "BETWEEN",
        "ADDITION",
        "MULTIPLICATION",
        "DIVISION",
        "SUBTRACTION",
        "MASK_ALL",
        "MASK_FIRST_N",
        "MASK_LAST_N",
        "VALIDATE_NON_NULL",
        "VALIDATE_NON_ZERO",
        "VALIDATE_NON_NEGATIVE",
        "VALIDATE_NUMERIC",
        "NO_OP"
      ],
      "type": "string"
    },
    "MarketoConnectorProfileCredentials": {
      "documentation": "<p> The connector-specific profile credentials required by Marketo. </p>",
      "members": {
        "accessToken": {
          "documentation": "<p> The credentials used to access protected Marketo resources. </p>",
          "shape": "AccessToken"
        },
        "clientId": {
          "documentation": "<p> The identifier for the desired client. </p>",
          "shape": "ClientId"
        },
        "clientSecret": {
          "documentation": "<p> The client secret used by the OAuth client to authenticate to the authorization server. </p>",
          "shape": "ClientSecret"
        },
        "oAuthRequest": {
          "documentation": "<p> The OAuth requirement needed to request security tokens from the connector endpoint. </p>",
          "shape": "ConnectorOAuthRequest"
        }
      },
      "required": [
        "clientId",
        "clientSecret"
      ],
      "type": "structure"
    },
    "MarketoConnectorProfileProperties": {
      "documentation": "<p> The connector-specific profile properties required when using Marketo. </p>",
      "members": {
        "instanceUrl": {
          "documentation": "<p> The location of the Marketo resource. </p>",
          "shape": "InstanceUrl"
        }
      },
      "required": [
        "instanceUrl"
      ],
      "type": "structure"
    },
    "MarketoDestinationProperties": {
      "documentation": "<p>The properties that Amazon AppFlow applies when you use Marketo as a flow destination.</p>",
      "members": {
        "errorHandlingConfig": {
          "shape": "ErrorHandlingConfig"
        },
        "object": {
          "documentation": "<p>The object specified in the Marketo flow destination.</p>",
          "shape": "Object"
        }
      },
      "required": [
        "object"
      ],
      "type": "structure"
    },
    "MarketoMetadata": {
      "documentation": "<p> The connector metadata specific to Marketo. </p>",
      "members": {},
      "type": "structure"
    },
    "MarketoSourceProperties": {
      "documentation": "<p> The properties that are applied when Marketo is being used as a source. </p>",
      "members": {
        "object": {
          "documentation": "<p> The object specified in the Marketo flow source. </p>",
          "shape": "Object"
        }
      },
      "required": [
        "object"
      ],
      "type": "structure"
    },
    "MaxResults": {
      "max": 100,
      "min": 1,
      "type": "integer"
    },
    "MostRecentExecutionMessage": {
      "max": 2048,
      "pattern": "[\\w!@#\\-.?,\\s]*",
      "type": "string"
    },
    "Name": {
      "max": 128,
      "pattern": "\\S+",
      "type": "string"
    },
    "NextToken": {
      "max": 2048,
      "pattern": "\\S+",
      "type": "string"
    },
    "OAuth2Credentials": {
      "documentation": "<p>The OAuth 2.0 credentials required for OAuth 2.0 authentication.</p>",
      "members": {
        "accessToken": {
          "documentation": "<p>The access token used to access the connector on your behalf.</p>",
          "shape": "AccessToken"
        },
        "clientId": {
          "documentation": "<p>The identifier for the desired client.</p>",
          "shape": "ClientId"
        },
        "clientSecret": {
          "documentation": "<p>The client secret used by the OAuth client to authenticate to the authorization server.</p>",
          "shape": "ClientSecret"
        },
        "oAuthRequest": {
          "shape": "ConnectorOAuthRequest"
        },
        "refreshToken": {
          "documentation": "<p>The refresh token used to refresh an expired access token.</p>",
          "shape": "RefreshToken"
        }
      },
      "type": "structure"
    },
    "OAuth2CustomParameter": {
      "documentation": "<p>Custom parameter required for OAuth 2.0 authentication.</p>",
      "members": {
        "connectorSuppliedValues": {
          "documentation": "<p>Contains default values for this authentication parameter that are supplied by the connector.</p>",
          "shape": "ConnectorSuppliedValueList"
        },
        "description": {
          "documentation": "<p>A description about the custom parameter used for OAuth 2.0 authentication.</p>",
          "shape": "Description"
        },
        "isRequired": {
          "documentation": "<p>Indicates whether the custom parameter for OAuth 2.0 authentication is required.</p>",
          "shape": "Boolean"
        },
        "isSensitiveField": {
          "documentation": "<p>Indicates whether this authentication custom parameter is a sensitive field.</p>",
          "shape": "Boolean"
        },
        "key": {
          "documentation": "<p>The key of the custom parameter required for OAuth 2.0 authentication.</p>",
          "shape": "Key"
        },
        "label": {
          "documentation": "<p>The label of the custom parameter used for OAuth 2.0 authentication.</p>",
          "shape": "Label"
        },
        "type": {
          "documentation": "<p>Indicates whether custom parameter is used with TokenUrl or AuthUrl.</p>",
          "shape": "OAuth2CustomPropType"
        }
      },
      "type": "structure"
    },
    "OAuth2CustomPropType": {
      "enum": [
        "TOKEN_URL",
        "AUTH_URL"
      ],
      "type": "string"
    },
    "OAuth2CustomPropertiesList": {
      "member": {
        "shape": "OAuth2CustomParameter"
      },
      "type": "list"
    },
    "OAuth2Defaults": {
      "documentation": "<p>Contains the default values required for OAuth 2.0 authentication.</p>",
      "members": {
        "authCodeUrls": {
          "documentation": "<p>Auth code URLs that can be used for OAuth 2.0 authentication.</p>",
          "shape": "AuthCodeUrlList"
        },
        "oauth2CustomProperties": {
          "documentation": "<p>List of custom parameters required for OAuth 2.0 authentication.</p>",
          "shape": "OAuth2CustomPropertiesList"
        },
        "oauth2GrantTypesSupported": {
          "documentation": "<p>OAuth 2.0 grant types supported by the connector.</p>",
          "shape": "OAuth2GrantTypeSupportedList"
        },
        "oauthScopes": {
          "documentation": "<p>OAuth 2.0 scopes that the connector supports.</p>",
          "shape": "OAuthScopeList"
        },
        "tokenUrls": {
          "documentation": "<p>Token URLs that can be used for OAuth 2.0 authentication.</p>",
          "shape": "TokenUrlList"
        }
      },
      "type": "structure"
    },
    "OAuth2GrantType": {
      "enum": [
        "CLIENT_CREDENTIALS",
        "AUTHORIZATION_CODE"
      ],
      "type": "string"
    },
    "OAuth2GrantTypeSupportedList": {
      "member": {
        "shape": "OAuth2GrantType"
      },
      "type": "list"
    },
    "OAuth2Properties": {
      "documentation": "<p>The OAuth 2.0 properties required for OAuth 2.0 authentication.</p>",
      "members": {
        "oAuth2GrantType": {
          "documentation": "<p>The OAuth 2.0 grant type used by connector for OAuth 2.0 authentication.</p>",
          "shape": "OAuth2GrantType"
        },
        "tokenUrl": {
          "documentation": "<p>The token URL required for OAuth 2.0 authentication.</p>",
          "shape": "TokenUrl"
        },
        "tokenUrlCustomProperties": {
          "documentation": "<p>Associates your token URL with a map of properties that you define. Use this parameter to provide any additional details that the connector requires to authenticate your request.</p>",
          "shape": "TokenUrlCustomProperties"
        }
      },
      "required": [
        "tokenUrl",
        "oAuth2GrantType"
      ],
      "type": "structure"
    },
    "OAuthCredentials": {
      "documentation": "<p> The OAuth credentials required for OAuth type authentication. </p>",
      "members": {
        "accessToken": {
          "documentation": "<p> The access token used to access protected SAPOData resources. </p>",
          "shape": "AccessToken"
        },
        "clientId": {
          "documentation": "<p> The identifier for the desired client. </p>",
          "shape": "ClientId"
        },
        "clientSecret": {
          "documentation": "<p> The client secret used by the OAuth client to authenticate to the authorization server. </p>",
          "shape": "ClientSecret"
        },
        "oAuthRequest": {
          "documentation": "<p> The OAuth requirement needed to request security tokens from the connector endpoint. </p>",
          "shape": "ConnectorOAuthRequest"
        },
        "refreshToken": {
          "documentation": "<p> The refresh token used to refresh expired access token. </p>",
          "shape": "RefreshToken"
        }
      },
      "required": [
        "clientId",
        "clientSecret"
      ],
      "type": "structure"
    },
    "OAuthProperties": {
      "documentation": "<p> The OAuth properties required for OAuth type authentication. </p>",
      "members": {
        "authCodeUrl": {
          "documentation": "<p> The authorization code url required to redirect to SAP Login Page to fetch authorization code for OAuth type authentication. </p>",
          "shape": "AuthCodeUrl"
        },
        "oAuthScopes": {
          "documentation": "<p> The OAuth scopes required for OAuth type authentication. </p>",
          "shape": "OAuthScopeList"
        },
        "tokenUrl": {
          "documentation": "<p> The token url required to fetch access/refresh tokens using authorization code and also to refresh expired access token using refresh token.</p>",
          "shape": "TokenUrl"
        }
      },
      "required": [
        "tokenUrl",
        "authCodeUrl",
        "oAuthScopes"
      ],
      "type": "structure"
    },
    "OAuthScope": {
      "max": 128,
      "pattern": "\\S+",
      "type": "string"
    },
    "OAuthScopeList": {
      "member": {
        "shape": "OAuthScope"
      },
      "type": "list"
    },
    "Object": {
      "max": 512,
      "pattern": "\\S+",
      "type": "string"
    },
    "ObjectTypeName": {
      "max": 255,
      "pattern": "\\S+",
      "type": "string"
    },
    "Operator": {
      "enum": [
        "PROJECTION",
        "LESS_THAN",
        "GREATER_THAN",
        "CONTAINS",
        "BETWEEN",
        "LESS_THAN_OR_EQUAL_TO",
        "GREATER_THAN_OR_EQUAL_TO",
        "EQUAL_TO",
        "NOT_EQUAL_TO",
        "ADDITION",
        "MULTIPLICATION",
        "DIVISION",
        "SUBTRACTION",
        "MASK_ALL",
        "MASK_FIRST_N",
        "MASK_LAST_N",
        "VALIDATE_NON_NULL",
        "VALIDATE_NON_ZERO",
        "VALIDATE_NON_NEGATIVE",
        "VALIDATE_NUMERIC",
        "NO_OP"
      ],
      "type": "string"
    },
    "OperatorPropertiesKeys": {
      "enum": [
        "VALUE",
        "VALUES",
        "DATA_TYPE",
        "UPPER_BOUND",
        "LOWER_BOUND",
        "SOURCE_DATA_TYPE",
        "DESTINATION_DATA_TYPE",
        "VALIDATION_ACTION",
        "MASK_VALUE",
        "MASK_LENGTH",
        "TRUNCATE_LENGTH",
        "MATH_OPERATION_FIELDS_ORDER",
        "CONCAT_FORMAT",
        "SUBFIELD_CATEGORY_MAP",
        "EXCLUDE_SOURCE_FIELDS_LIST",
        "INCLUDE_NEW_FIELDS"
      ],
      "type": "string"
    },
    "Operators": {
      "enum": [
        "PROJECTION",
        "LESS_THAN",
        "GREATER_THAN",
        "CONTAINS",
        "BETWEEN",
        "LESS_THAN_OR_EQUAL_TO",
        "GREATER_THAN_OR_EQUAL_TO",
        "EQUAL_TO",
        "NOT_EQUAL_TO",
        "ADDITION",
        "MULTIPLICATION",
        "DIVISION",
        "SUBTRACTION",
        "MASK_ALL",
        "MASK_FIRST_N",
        "MASK_LAST_N",
        "VALIDATE_NON_NULL",
        "VALIDATE_NON_ZERO",
        "VALIDATE_NON_NEGATIVE",
        "VALIDATE_NUMERIC",
        "NO_OP"
      ],
      "type": "string"
    },
    "Password": {
      "max": 512,
      "pattern": ".*",
      "sensitive": true,
      "type": "string"
    },
    "PortNumber": {
      "max": 65535,
      "min": 1,
      "type": "integer"
    },
    "PrefixConfig": {
      "documentation": "<p> Determines the prefix that Amazon AppFlow applies to the destination folder name. You can name your destination folders according to the flow frequency and date. </p>",
      "members": {
        "prefixFormat": {
          "documentation": "<p> Determines the level of granularity that's included in the prefix. </p>",
          "shape": "PrefixFormat"
        },
        "prefixType": {
          "documentation": "<p> Determines the format of the prefix, and whether it applies to the file name, file path, or both. </p>",
          "shape": "PrefixType"
        }
      },
      "type": "structure"
    },
    "PrefixFormat": {
      "enum": [
        "YEAR",
        "MONTH",
        "DAY",
        "HOUR",
        "MINUTE"
      ],
      "type": "string"
    },
    "PrefixType": {
      "enum": [
        "FILENAME",
        "PATH",
        "PATH_AND_FILENAME"
      ],
      "type": "string"
    },
    "PrivateConnectionProvisioningFailureCause": {
      "enum": [
        "CONNECTOR_AUTHENTICATION",
        "CONNECTOR_SERVER",
        "INTERNAL_SERVER",
        "ACCESS_DENIED",
        "VALIDATION"
      ],
      "type": "string"
    },
    "PrivateConnectionProvisioningFailureMessage": {
      "max": 2048,
      "pattern": "[\\s\\w/!@#+=.-]*",
      "type": "string"
    },
    "PrivateConnectionProvisioningState": {
      "documentation": "<p> Specifies the private connection provisioning state. </p>",
      "members": {
        "failureCause": {
          "documentation": "<p> Specifies the private connection provisioning failure cause. </p>",
          "shape": "PrivateConnectionProvisioningFailureCause"
        },
        "failureMessage": {
          "documentation": "<p> Specifies the private connection provisioning failure reason. </p>",
          "shape": "PrivateConnectionProvisioningFailureMessage"
        },
        "status": {
          "documentation": "<p> Specifies the private connection provisioning status. </p>",
          "shape": "PrivateConnectionProvisioningStatus"
        }
      },
      "type": "structure"
    },
    "PrivateConnectionProvisioningStatus": {
      "enum": [
        "FAILED",
        "PENDING",
        "CREATED"
      ],
      "type": "string"
    },
    "PrivateLinkServiceName": {
      "max": 512,
      "pattern": "^$|com.amazonaws.vpce.[\\w/!:@#.\\-]+",
      "type": "string"
    },
    "ProfilePropertiesMap": {
      "key": {
        "shape": "ProfilePropertyKey"
      },
      "max": 50,
      "min": 0,
      "type": "map",
      "value": {
        "shape": "ProfilePropertyValue"
      }
    },
    "ProfilePropertyKey": {
      "max": 128,
      "min": 1,
      "pattern": "[\\w]+",
      "type": "string"
    },
    "ProfilePropertyValue": {
      "max": 2048,
      "pattern": "\\S+",
      "type": "string"
    },
    "Property": {
      "max": 2048,
      "pattern": ".+",
      "type": "string"
    },
    "Range": {
      "documentation": "<p>The range of values that the property supports.</p>",
      "members": {
        "maximum": {
          "documentation": "<p>Maximum value supported by the field.</p>",
          "shape": "Double"
        },
        "minimum": {
          "documentation": "<p>Minimum value supported by the field.</p>",
          "shape": "Double"
        }
      },
      "type": "structure"
    },
    "RedirectUri": {
      "max": 512,
      "pattern": "\\S+",
      "type": "string"
    },
    "RedshiftConnectorProfileCredentials": {
      "documentation": "<p> The connector-specific profile credentials required when using Amazon Redshift. </p>",
      "members": {
        "password": {
          "documentation": "<p> The password that corresponds to the user name. </p>",
          "shape": "Password"
        },
        "username": {
          "documentation": "<p> The name of the user. </p>",
          "shape": "Username"
        }
      },
      "required": [
        "username",
        "password"
      ],
      "type": "structure"
    },
    "RedshiftConnectorProfileProperties": {
      "documentation": "<p> The connector-specific profile properties when using Amazon Redshift. </p>",
      "members": {
        "bucketName": {
          "documentation": "<p> A name for the associated Amazon S3 bucket. </p>",
          "shape": "BucketName"
        },
        "bucketPrefix": {
          "documentation": "<p> The object key for the destination bucket in which Amazon AppFlow places the files. </p>",
          "shape": "BucketPrefix"
        },
        "databaseUrl": {
          "documentation": "<p> The JDBC URL of the Amazon Redshift cluster. </p>",
          "shape": "DatabaseUrl"
        },
        "roleArn": {
          "documentation": "<p> The Amazon Resource Name (ARN) of the IAM role. </p>",
          "shape": "RoleArn"
        }
      },
      "required": [
        "databaseUrl",
        "bucketName",
        "roleArn"
      ],
      "type": "structure"
    },
    "RedshiftDestinationProperties": {
      "documentation": "<p> The properties that are applied when Amazon Redshift is being used as a destination. </p>",
      "members": {
        "bucketPrefix": {
          "documentation": "<p> The object key for the bucket in which Amazon AppFlow places the destination files. </p>",
          "shape": "BucketPrefix"
        },
        "errorHandlingConfig": {
          "documentation": "<p> The settings that determine how Amazon AppFlow handles an error when placing data in the Amazon Redshift destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. <code>ErrorHandlingConfig</code> is a part of the destination connector details. </p>",
          "shape": "ErrorHandlingConfig"
        },
        "intermediateBucketName": {
          "documentation": "<p> The intermediate bucket that Amazon AppFlow uses when moving data into Amazon Redshift. </p>",
          "shape": "BucketName"
        },
        "object": {
          "documentation": "<p> The object specified in the Amazon Redshift flow destination. </p>",
          "shape": "Object"
        }
      },
      "required": [
        "object",
        "intermediateBucketName"
      ],
      "type": "structure"
    },
    "RedshiftMetadata": {
      "documentation": "<p> The connector metadata specific to Amazon Redshift. </p>",
      "members": {},
      "type": "structure"
    },
    "RefreshToken": {
      "max": 2048,
      "pattern": "\\S+",
      "type": "string"
    },
    "Region": {
      "max": 64,
      "pattern": "\\S+",
      "type": "string"
    },
    "RegionList": {
      "member": {
        "shape": "Region"
      },
      "type": "list"
    },
    "RegisterConnectorRequest": {
      "members": {
        "connectorLabel": {
          "documentation": "<p> The name of the connector. The name is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account.</p>",
          "shape": "ConnectorLabel"
        },
        "connectorProvisioningConfig": {
          "documentation": "<p>The provisioning type of the connector. Currently the only supported value is LAMBDA.</p>",
          "shape": "ConnectorProvisioningConfig"
        },
        "connectorProvisioningType": {
          "documentation": "<p>The provisioning type of the connector. Currently the only supported value is LAMBDA. </p>",
          "shape": "ConnectorProvisioningType"
        },
        "description": {
          "documentation": "<p>A description about the connector that's being registered.</p>",
          "shape": "Description"
        }
      },
      "type": "structure"
    },
    "RegisterConnectorResponse": {
      "members": {
        "connectorArn": {
          "documentation": "<p>The ARN of the connector being registered.</p>",
          "shape": "ARN"
        }
      },
      "type": "structure"
    },
    "RegisteredBy": {
      "max": 512,
      "pattern": "\\S+",
      "type": "string"
    },
    "ResourceNotFoundException": {
      "documentation": "<p> The resource specified in the request (such as the source or destination connector profile) is not found. </p>",
      "error": {
        "httpStatusCode": 404
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "ErrorMessage"
        }
      },
      "type": "structure"
    },
    "RoleArn": {
      "max": 512,
      "pattern": "arn:aws:iam:.*:[0-9]+:.*",
      "type": "string"
    },
    "S3ConnectorOperator": {
      "enum": [
        "PROJECTION",
        "LESS_THAN",
        "GREATER_THAN",
        "BETWEEN",
        "LESS_THAN_OR_EQUAL_TO",
        "GREATER_THAN_OR_EQUAL_TO",
        "EQUAL_TO",
        "NOT_EQUAL_TO",
        "ADDITION",
        "MULTIPLICATION",
        "DIVISION",
        "SUBTRACTION",
        "MASK_ALL",
        "MASK_FIRST_N",
        "MASK_LAST_N",
        "VALIDATE_NON_NULL",
        "VALIDATE_NON_ZERO",
        "VALIDATE_NON_NEGATIVE",
        "VALIDATE_NUMERIC",
        "NO_OP"
      ],
      "type": "string"
    },
    "S3DestinationProperties": {
      "documentation": "<p> The properties that are applied when Amazon S3 is used as a destination. </p>",
      "members": {
        "bucketName": {
          "documentation": "<p> The Amazon S3 bucket name in which Amazon AppFlow places the transferred data. </p>",
          "shape": "BucketName"
        },
        "bucketPrefix": {
          "documentation": "<p> The object key for the destination bucket in which Amazon AppFlow places the files. </p>",
          "shape": "BucketPrefix"
        },
        "s3OutputFormatConfig": {
          "shape": "S3OutputFormatConfig"
        }
      },
      "required": [
        "bucketName"
      ],
      "type": "structure"
    },
    "S3InputFileType": {
      "enum": [
        "CSV",
        "JSON"
      ],
      "type": "string"
    },
    "S3InputFormatConfig": {
      "documentation": "<p> When you use Amazon S3 as the source, the configuration format that you provide the flow input data. </p>",
      "members": {
        "s3InputFileType": {
          "documentation": "<p> The file type that Amazon AppFlow gets from your Amazon S3 bucket. </p>",
          "shape": "S3InputFileType"
        }
      },
      "type": "structure"
    },
    "S3Metadata": {
      "documentation": "<p> The connector metadata specific to Amazon S3. </p>",
      "members": {},
      "type": "structure"
    },
    "S3OutputFormatConfig": {
      "documentation": "<p> The configuration that determines how Amazon AppFlow should format the flow output data when Amazon S3 is used as the destination. </p>",
      "members": {
        "aggregationConfig": {
          "shape": "AggregationConfig"
        },
        "fileType": {
          "documentation": "<p> Indicates the file type that Amazon AppFlow places in the Amazon S3 bucket. </p>",
          "shape": "FileType"
        },
        "prefixConfig": {
          "documentation": "<p> Determines the prefix that Amazon AppFlow applies to the folder name in the Amazon S3 bucket. You can name folders according to the flow frequency and date. </p>",
          "shape": "PrefixConfig"
        },
        "preserveSourceDataTyping": {
          "documentation": "<p>If your file output format is Parquet, use this parameter to set whether Amazon AppFlow preserves the data types in your source data when it writes the output to Amazon S3. </p> <ul> <li> <p> <code>true</code>: Amazon AppFlow preserves the data types when it writes to Amazon S3. For example, an integer or <code>1</code> in your source data is still an integer in your output.</p> </li> <li> <p> <code>false</code>: Amazon AppFlow converts all of the source data into strings when it writes to Amazon S3. For example, an integer of <code>1</code> in your source data becomes the string <code>\"1\"</code> in the output.</p> </li> </ul>",
          "shape": "JavaBoolean"
        }
      },
      "type": "structure"
    },
    "S3SourceProperties": {
      "documentation": "<p> The properties that are applied when Amazon S3 is being used as the flow source. </p>",
      "members": {
        "bucketName": {
          "documentation": "<p> The Amazon S3 bucket name where the source files are stored. </p>",
          "shape": "BucketName"
        },
        "bucketPrefix": {
          "documentation": "<p> The object key for the Amazon S3 bucket in which the source files are stored. </p>",
          "shape": "BucketPrefix"
        },
        "s3InputFormatConfig": {
          "shape": "S3InputFormatConfig"
        }
      },
      "required": [
        "bucketName"
      ],
      "type": "structure"
    },
    "SAPODataConnectorOperator": {
      "enum": [
        "PROJECTION",
        "LESS_THAN",
        "CONTAINS",
        "GREATER_THAN",
        "BETWEEN",
        "LESS_THAN_OR_EQUAL_TO",
        "GREATER_THAN_OR_EQUAL_TO",
        "EQUAL_TO",
        "NOT_EQUAL_TO",
        "ADDITION",
        "MULTIPLICATION",
        "DIVISION",
        "SUBTRACTION",
        "MASK_ALL",
        "MASK_FIRST_N",
        "MASK_LAST_N",
        "VALIDATE_NON_NULL",
        "VALIDATE_NON_ZERO",
        "VALIDATE_NON_NEGATIVE",
        "VALIDATE_NUMERIC",
        "NO_OP"
      ],
      "type": "string"
    },
    "SAPODataConnectorProfileCredentials": {
      "documentation": "<p> The connector-specific profile credentials required when using SAPOData. </p>",
      "members": {
        "basicAuthCredentials": {
          "documentation": "<p> The SAPOData basic authentication credentials. </p>",
          "shape": "BasicAuthCredentials"
        },
        "oAuthCredentials": {
          "documentation": "<p> The SAPOData OAuth type authentication credentials. </p>",
          "shape": "OAuthCredentials"
        }
      },
      "type": "structure"
    },
    "SAPODataConnectorProfileProperties": {
      "documentation": "<p> The connector-specific profile properties required when using SAPOData. </p>",
      "members": {
        "applicationHostUrl": {
          "documentation": "<p> The location of the SAPOData resource. </p>",
          "shape": "ApplicationHostUrl"
        },
        "applicationServicePath": {
          "documentation": "<p> The application path to catalog service. </p>",
          "shape": "ApplicationServicePath"
        },
        "clientNumber": {
          "documentation": "<p> The client number for the client creating the connection. </p>",
          "shape": "ClientNumber"
        },
        "logonLanguage": {
          "documentation": "<p> The logon language of SAPOData instance. </p>",
          "shape": "LogonLanguage"
        },
        "oAuthProperties": {
          "documentation": "<p> The SAPOData OAuth properties required for OAuth type authentication. </p>",
          "shape": "OAuthProperties"
        },
        "portNumber": {
          "box": true,
          "documentation": "<p> The port number of the SAPOData instance. </p>",
          "shape": "PortNumber"
        },
        "privateLinkServiceName": {
          "documentation": "<p> The SAPOData Private Link service name to be used for private data transfers. </p>",
          "shape": "PrivateLinkServiceName"
        }
      },
      "required": [
        "applicationHostUrl",
        "applicationServicePath",
        "portNumber",
        "clientNumber"
      ],
      "type": "structure"
    },
    "SAPODataDestinationProperties": {
      "documentation": "<p>The properties that are applied when using SAPOData as a flow destination</p>",
      "members": {
        "errorHandlingConfig": {
          "shape": "ErrorHandlingConfig"
        },
        "idFieldNames": {
          "shape": "IdFieldNameList"
        },
        "objectPath": {
          "documentation": "<p>The object path specified in the SAPOData flow destination.</p>",
          "shape": "Object"
        },
        "successResponseHandlingConfig": {
          "documentation": "<p>Determines how Amazon AppFlow handles the success response that it gets from the connector after placing data.</p> <p>For example, this setting would determine where to write the response from a destination connector upon a successful insert operation.</p>",
          "shape": "SuccessResponseHandlingConfig"
        },
        "writeOperationType": {
          "shape": "WriteOperationType"
        }
      },
      "required": [
        "objectPath"
      ],
      "type": "structure"
    },
    "SAPODataMetadata": {
      "documentation": "<p> The connector metadata specific to SAPOData. </p>",
      "members": {},
      "type": "structure"
    },
    "SAPODataSourceProperties": {
      "documentation": "<p> The properties that are applied when using SAPOData as a flow source. </p>",
      "members": {
        "objectPath": {
          "documentation": "<p> The object path specified in the SAPOData flow source. </p>",
          "shape": "Object"
        }
      },
      "type": "structure"
    },
    "SalesforceConnectorOperator": {
      "enum": [
        "PROJECTION",
        "LESS_THAN",
        "CONTAINS",
        "GREATER_THAN",
        "BETWEEN",
        "LESS_THAN_OR_EQUAL_TO",
        "GREATER_THAN_OR_EQUAL_TO",
        "EQUAL_TO",
        "NOT_EQUAL_TO",
        "ADDITION",
        "MULTIPLICATION",
        "DIVISION",
        "SUBTRACTION",
        "MASK_ALL",
        "MASK_FIRST_N",
        "MASK_LAST_N",
        "VALIDATE_NON_NULL",
        "VALIDATE_NON_ZERO",
        "VALIDATE_NON_NEGATIVE",
        "VALIDATE_NUMERIC",
        "NO_OP"
      ],
      "type": "string"
    },
    "SalesforceConnectorProfileCredentials": {
      "documentation": "<p> The connector-specific profile credentials required when using Salesforce. </p>",
      "members": {
        "accessToken": {
          "documentation": "<p> The credentials used to access protected Salesforce resources. </p>",
          "shape": "AccessToken"
        },
        "clientCredentialsArn": {
          "documentation": "<p> The secret manager ARN, which contains the client ID and client secret of the connected app. </p>",
          "shape": "ClientCredentialsArn"
        },
        "oAuthRequest": {
          "documentation": "<p> The OAuth requirement needed to request security tokens from the connector endpoint. </p>",
          "shape": "ConnectorOAuthRequest"
        },
        "refreshToken": {
          "documentation": "<p> The credentials used to acquire new access tokens. </p>",
          "shape": "RefreshToken"
        }
      },
      "type": "structure"
    },
    "SalesforceConnectorProfileProperties": {
      "documentation": "<p> The connector-specific profile properties required when using Salesforce. </p>",
      "members": {
        "instanceUrl": {
          "documentation": "<p> The location of the Salesforce resource. </p>",
          "shape": "InstanceUrl"
        },
        "isSandboxEnvironment": {
          "documentation": "<p> Indicates whether the connector profile applies to a sandbox or production environment. </p>",
          "shape": "Boolean"
        }
      },
      "type": "structure"
    },
    "SalesforceDataTransferApi": {
      "enum": [
        "AUTOMATIC",
        "BULKV2",
        "REST_SYNC"
      ],
      "type": "string"
    },
    "SalesforceDataTransferApiList": {
      "member": {
        "shape": "SalesforceDataTransferApi"
      },
      "type": "list"
    },
    "SalesforceDestinationProperties": {
      "documentation": "<p> The properties that are applied when Salesforce is being used as a destination. </p>",
      "members": {
        "dataTransferApi": {
          "documentation": "<p>Specifies which Salesforce API is used by Amazon AppFlow when your flow transfers data to Salesforce.</p> <dl> <dt>AUTOMATIC</dt> <dd> <p>The default. Amazon AppFlow selects which API to use based on the number of records that your flow transfers to Salesforce. If your flow transfers fewer than 1,000 records, Amazon AppFlow uses Salesforce REST API. If your flow transfers 1,000 records or more, Amazon AppFlow uses Salesforce Bulk API 2.0.</p> <p>Each of these Salesforce APIs structures data differently. If Amazon AppFlow selects the API automatically, be aware that, for recurring flows, the data output might vary from one flow run to the next. For example, if a flow runs daily, it might use REST API on one day to transfer 900 records, and it might use Bulk API 2.0 on the next day to transfer 1,100 records. For each of these flow runs, the respective Salesforce API formats the data differently. Some of the differences include how dates are formatted and null values are represented. Also, Bulk API 2.0 doesn't transfer Salesforce compound fields.</p> <p>By choosing this option, you optimize flow performance for both small and large data transfers, but the tradeoff is inconsistent formatting in the output.</p> </dd> <dt>BULKV2</dt> <dd> <p>Amazon AppFlow uses only Salesforce Bulk API 2.0. This API runs asynchronous data transfers, and it's optimal for large sets of data. By choosing this option, you ensure that your flow writes consistent output, but you optimize performance only for large data transfers.</p> <p>Note that Bulk API 2.0 does not transfer Salesforce compound fields.</p> </dd> <dt>REST_SYNC</dt> <dd> <p>Amazon AppFlow uses only Salesforce REST API. By choosing this option, you ensure that your flow writes consistent output, but you decrease performance for large data transfers that are better suited for Bulk API 2.0. In some cases, if your flow attempts to transfer a vary large set of data, it might fail with a timed out error.</p> </dd> </dl>",
          "shape": "SalesforceDataTransferApi"
        },
        "errorHandlingConfig": {
          "documentation": "<p> The settings that determine how Amazon AppFlow handles an error when placing data in the Salesforce destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. <code>ErrorHandlingConfig</code> is a part of the destination connector details. </p>",
          "shape": "ErrorHandlingConfig"
        },
        "idFieldNames": {
          "documentation": "<p> The name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update or delete. </p>",
          "shape": "IdFieldNameList"
        },
        "object": {
          "documentation": "<p> The object specified in the Salesforce flow destination. </p>",
          "shape": "Object"
        },
        "writeOperationType": {
          "documentation": "<p> This specifies the type of write operation to be performed in Salesforce. When the value is <code>UPSERT</code>, then <code>idFieldNames</code> is required. </p>",
          "shape": "WriteOperationType"
        }
      },
      "required": [
        "object"
      ],
      "type": "structure"
    },
    "SalesforceMetadata": {
      "documentation": "<p> The connector metadata specific to Salesforce. </p>",
      "members": {
        "dataTransferApis": {
          "documentation": "<p>The Salesforce APIs that you can have Amazon AppFlow use when your flows transfers data to or from Salesforce.</p>",
          "shape": "SalesforceDataTransferApiList"
        },
        "oAuthScopes": {
          "documentation": "<p> The desired authorization scope for the Salesforce account. </p>",
          "shape": "OAuthScopeList"
        }
      },
      "type": "structure"
    },
    "SalesforceSourceProperties": {
      "documentation": "<p> The properties that are applied when Salesforce is being used as a source. </p>",
      "members": {
        "dataTransferApi": {
          "documentation": "<p>Specifies which Salesforce API is used by Amazon AppFlow when your flow transfers data from Salesforce.</p> <dl> <dt>AUTOMATIC</dt> <dd> <p>The default. Amazon AppFlow selects which API to use based on the number of records that your flow transfers from Salesforce. If your flow transfers fewer than 1,000,000 records, Amazon AppFlow uses Salesforce REST API. If your flow transfers 1,000,000 records or more, Amazon AppFlow uses Salesforce Bulk API 2.0.</p> <p>Each of these Salesforce APIs structures data differently. If Amazon AppFlow selects the API automatically, be aware that, for recurring flows, the data output might vary from one flow run to the next. For example, if a flow runs daily, it might use REST API on one day to transfer 900,000 records, and it might use Bulk API 2.0 on the next day to transfer 1,100,000 records. For each of these flow runs, the respective Salesforce API formats the data differently. Some of the differences include how dates are formatted and null values are represented. Also, Bulk API 2.0 doesn't transfer Salesforce compound fields.</p> <p>By choosing this option, you optimize flow performance for both small and large data transfers, but the tradeoff is inconsistent formatting in the output.</p> </dd> <dt>BULKV2</dt> <dd> <p>Amazon AppFlow uses only Salesforce Bulk API 2.0. This API runs asynchronous data transfers, and it's optimal for large sets of data. By choosing this option, you ensure that your flow writes consistent output, but you optimize performance only for large data transfers.</p> <p>Note that Bulk API 2.0 does not transfer Salesforce compound fields.</p> </dd> <dt>REST_SYNC</dt> <dd> <p>Amazon AppFlow uses only Salesforce REST API. By choosing this option, you ensure that your flow writes consistent output, but you decrease performance for large data transfers that are better suited for Bulk API 2.0. In some cases, if your flow attempts to transfer a vary large set of data, it might fail with a timed out error.</p> </dd> </dl>",
          "shape": "SalesforceDataTransferApi"
        },
        "enableDynamicFieldUpdate": {
          "documentation": "<p> The flag that enables dynamic fetching of new (recently added) fields in the Salesforce objects while running a flow. </p>",
          "shape": "Boolean"
        },
        "includeDeletedRecords": {
          "documentation": "<p> Indicates whether Amazon AppFlow includes deleted files in the flow run. </p>",
          "shape": "Boolean"
        },
        "object": {
          "documentation": "<p> The object specified in the Salesforce flow source. </p>",
          "shape": "Object"
        }
      },
      "required": [
        "object"
      ],
      "type": "structure"
    },
    "ScheduleExpression": {
      "max": 256,
      "pattern": ".*",
      "type": "string"
    },
    "ScheduleFrequencyType": {
      "enum": [
        "BYMINUTE",
        "HOURLY",
        "DAILY",
        "WEEKLY",
        "MONTHLY",
        "ONCE"
      ],
      "type": "string"
    },
    "ScheduleOffset": {
      "max": 36000,
      "min": 0,
      "type": "long"
    },
    "ScheduledTriggerProperties": {
      "documentation": "<p> Specifies the configuration details of a schedule-triggered flow as defined by the user. Currently, these settings only apply to the <code>Scheduled</code> trigger type. </p>",
      "members": {
        "dataPullMode": {
          "documentation": "<p> Specifies whether a scheduled flow has an incremental data transfer or a complete data transfer for each flow run. </p>",
          "shape": "DataPullMode"
        },
        "firstExecutionFrom": {
          "documentation": "<p> Specifies the date range for the records to import from the connector in the first flow run. </p>",
          "shape": "Date"
        },
        "flowErrorDeactivationThreshold": {
          "box": true,
          "documentation": "<p>Defines how many times a scheduled flow fails consecutively before Amazon AppFlow deactivates it.</p>",
          "shape": "FlowErrorDeactivationThreshold"
        },
        "scheduleEndTime": {
          "documentation": "<p>The time at which the scheduled flow ends. The time is formatted as a timestamp that follows the ISO 8601 standard, such as <code>2022-04-27T13:00:00-07:00</code>.</p>",
          "shape": "Date"
        },
        "scheduleExpression": {
          "documentation": "<p> The scheduling expression that determines the rate at which the schedule will run, for example <code>rate(5minutes)</code>. </p>",
          "shape": "ScheduleExpression"
        },
        "scheduleOffset": {
          "box": true,
          "documentation": "<p> Specifies the optional offset that is added to the time interval for a schedule-triggered flow. </p>",
          "shape": "ScheduleOffset"
        },
        "scheduleStartTime": {
          "documentation": "<p>The time at which the scheduled flow starts. The time is formatted as a timestamp that follows the ISO 8601 standard, such as <code>2022-04-26T13:00:00-07:00</code>.</p>",
          "shape": "Date"
        },
        "timezone": {
          "documentation": "<p>Specifies the time zone used when referring to the dates and times of a scheduled flow, such as <code>America/New_York</code>. This time zone is only a descriptive label. It doesn't affect how Amazon AppFlow interprets the timestamps that you specify to schedule the flow.</p> <p>If you want to schedule a flow by using times in a particular time zone, indicate the time zone as a UTC offset in your timestamps. For example, the UTC offsets for the <code>America/New_York</code> timezone are <code>-04:00</code> EDT and <code>-05:00 EST</code>.</p>",
          "shape": "Timezone"
        }
      },
      "required": [
        "scheduleExpression"
      ],
      "type": "structure"
    },
    "SchedulingFrequencyTypeList": {
      "member": {
        "shape": "ScheduleFrequencyType"
      },
      "type": "list"
    },
    "SecretKey": {
      "max": 256,
      "pattern": "\\S+",
      "sensitive": true,
      "type": "string"
    },
    "ServiceNowConnectorOperator": {
      "enum": [
        "PROJECTION",
        "CONTAINS",
        "LESS_THAN",
        "GREATER_THAN",
        "BETWEEN",
        "LESS_THAN_OR_EQUAL_TO",
        "GREATER_THAN_OR_EQUAL_TO",
        "EQUAL_TO",
        "NOT_EQUAL_TO",
        "ADDITION",
        "MULTIPLICATION",
        "DIVISION",
        "SUBTRACTION",
        "MASK_ALL",
        "MASK_FIRST_N",
        "MASK_LAST_N",
        "VALIDATE_NON_NULL",
        "VALIDATE_NON_ZERO",
        "VALIDATE_NON_NEGATIVE",
        "VALIDATE_NUMERIC",
        "NO_OP"
      ],
      "type": "string"
    },
    "ServiceNowConnectorProfileCredentials": {
      "documentation": "<p> The connector-specific profile credentials required when using ServiceNow. </p>",
      "members": {
        "password": {
          "documentation": "<p> The password that corresponds to the user name. </p>",
          "shape": "Password"
        },
        "username": {
          "documentation": "<p> The name of the user. </p>",
          "shape": "Username"
        }
      },
      "required": [
        "username",
        "password"
      ],
      "type": "structure"
    },
    "ServiceNowConnectorProfileProperties": {
      "documentation": "<p> The connector-specific profile properties required when using ServiceNow. </p>",
      "members": {
        "instanceUrl": {
          "documentation": "<p> The location of the ServiceNow resource. </p>",
          "shape": "InstanceUrl"
        }
      },
      "required": [
        "instanceUrl"
      ],
      "type": "structure"
    },
    "ServiceNowMetadata": {
      "documentation": "<p> The connector metadata specific to ServiceNow. </p>",
      "members": {},
      "type": "structure"
    },
    "ServiceNowSourceProperties": {
      "documentation": "<p> The properties that are applied when ServiceNow is being used as a source. </p>",
      "members": {
        "object": {
          "documentation": "<p> The object specified in the ServiceNow flow source. </p>",
          "shape": "Object"
        }
      },
      "required": [
        "object"
      ],
      "type": "structure"
    },
    "ServiceQuotaExceededException": {
      "documentation": "<p> The request would cause a service quota (such as the number of flows) to be exceeded. </p>",
      "error": {
        "httpStatusCode": 402
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "ErrorMessage"
        }
      },
      "type": "structure"
    },
    "SingularConnectorOperator": {
      "enum": [
        "PROJECTION",
        "EQUAL_TO",
        "ADDITION",
        "MULTIPLICATION",
        "DIVISION",
        "SUBTRACTION",
        "MASK_ALL",
        "MASK_FIRST_N",
        "MASK_LAST_N",
        "VALIDATE_NON_NULL",
        "VALIDATE_NON_ZERO",
        "VALIDATE_NON_NEGATIVE",
        "VALIDATE_NUMERIC",
        "NO_OP"
      ],
      "type": "string"
    },
    "SingularConnectorProfileCredentials": {
      "documentation": "<p> The connector-specific profile credentials required when using Singular. </p>",
      "members": {
        "apiKey": {
          "documentation": "<p> A unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API. </p>",
          "shape": "ApiKey"
        }
      },
      "required": [
        "apiKey"
      ],
      "type": "structure"
    },
    "SingularConnectorProfileProperties": {
      "documentation": "<p> The connector-specific profile properties required when using Singular. </p>",
      "members": {},
      "type": "structure"
    },
    "SingularMetadata": {
      "documentation": "<p> The connector metadata specific to Singular. </p>",
      "members": {},
      "type": "structure"
    },
    "SingularSourceProperties": {
      "documentation": "<p> The properties that are applied when Singular is being used as a source. </p>",
      "members": {
        "object": {
          "documentation": "<p> The object specified in the Singular flow source. </p>",
          "shape": "Object"
        }
      },
      "required": [
        "object"
      ],
      "type": "structure"
    },
    "SlackConnectorOperator": {
      "enum": [
        "PROJECTION",
        "LESS_THAN",
        "GREATER_THAN",
        "BETWEEN",
        "LESS_THAN_OR_EQUAL_TO",
        "GREATER_THAN_OR_EQUAL_TO",
        "EQUAL_TO",
        "ADDITION",
        "MULTIPLICATION",
        "DIVISION",
        "SUBTRACTION",
        "MASK_ALL",
        "MASK_FIRST_N",
        "MASK_LAST_N",
        "VALIDATE_NON_NULL",
        "VALIDATE_NON_ZERO",
        "VALIDATE_NON_NEGATIVE",
        "VALIDATE_NUMERIC",
        "NO_OP"
      ],
      "type": "string"
    },
    "SlackConnectorProfileCredentials": {
      "documentation": "<p> The connector-specific profile credentials required when using Slack. </p>",
      "members": {
        "accessToken": {
          "documentation": "<p> The credentials used to access protected Slack resources. </p>",
          "shape": "AccessToken"
        },
        "clientId": {
          "documentation": "<p> The identifier for the client. </p>",
          "shape": "ClientId"
        },
        "clientSecret": {
          "documentation": "<p> The client secret used by the OAuth client to authenticate to the authorization server. </p>",
          "shape": "ClientSecret"
        },
        "oAuthRequest": {
          "documentation": "<p> The OAuth requirement needed to request security tokens from the connector endpoint. </p>",
          "shape": "ConnectorOAuthRequest"
        }
      },
      "required": [
        "clientId",
        "clientSecret"
      ],
      "type": "structure"
    },
    "SlackConnectorProfileProperties": {
      "documentation": "<p> The connector-specific profile properties required when using Slack. </p>",
      "members": {
        "instanceUrl": {
          "documentation": "<p> The location of the Slack resource. </p>",
          "shape": "InstanceUrl"
        }
      },
      "required": [
        "instanceUrl"
      ],
      "type": "structure"
    },
    "SlackMetadata": {
      "documentation": "<p> The connector metadata specific to Slack. </p>",
      "members": {
        "oAuthScopes": {
          "documentation": "<p> The desired authorization scope for the Slack account. </p>",
          "shape": "OAuthScopeList"
        }
      },
      "type": "structure"
    },
    "SlackSourceProperties": {
      "documentation": "<p> The properties that are applied when Slack is being used as a source. </p>",
      "members": {
        "object": {
          "documentation": "<p> The object specified in the Slack flow source. </p>",
          "shape": "Object"
        }
      },
      "required": [
        "object"
      ],
      "type": "structure"
    },
    "SnowflakeConnectorProfileCredentials": {
      "documentation": "<p> The connector-specific profile credentials required when using Snowflake. </p>",
      "members": {
        "password": {
          "documentation": "<p> The password that corresponds to the user name. </p>",
          "shape": "Password"
        },
        "username": {
          "documentation": "<p> The name of the user. </p>",
          "shape": "Username"
        }
      },
      "required": [
        "username",
        "password"
      ],
      "type": "structure"
    },
    "SnowflakeConnectorProfileProperties": {
      "documentation": "<p> The connector-specific profile properties required when using Snowflake. </p>",
      "members": {
        "accountName": {
          "documentation": "<p> The name of the account. </p>",
          "shape": "AccountName"
        },
        "bucketName": {
          "documentation": "<p> The name of the Amazon S3 bucket associated with Snowflake. </p>",
          "shape": "BucketName"
        },
        "bucketPrefix": {
          "documentation": "<p> The bucket path that refers to the Amazon S3 bucket associated with Snowflake. </p>",
          "shape": "BucketPrefix"
        },
        "privateLinkServiceName": {
          "documentation": "<p> The Snowflake Private Link service name to be used for private data transfers. </p>",
          "shape": "PrivateLinkServiceName"
        },
        "region": {
          "documentation": "<p> The Amazon Web Services Region of the Snowflake account. </p>",
          "shape": "Region"
        },
        "stage": {
          "documentation": "<p> The name of the Amazon S3 stage that was created while setting up an Amazon S3 stage in the Snowflake account. This is written in the following format: &lt; Database&gt;&lt; Schema&gt;&lt;Stage Name&gt;. </p>",
          "shape": "Stage"
        },
        "warehouse": {
          "documentation": "<p> The name of the Snowflake warehouse. </p>",
          "shape": "Warehouse"
        }
      },
      "required": [
        "warehouse",
        "stage",
        "bucketName"
      ],
      "type": "structure"
    },
    "SnowflakeDestinationProperties": {
      "documentation": "<p> The properties that are applied when Snowflake is being used as a destination. </p>",
      "members": {
        "bucketPrefix": {
          "documentation": "<p> The object key for the destination bucket in which Amazon AppFlow places the files. </p>",
          "shape": "BucketPrefix"
        },
        "errorHandlingConfig": {
          "documentation": "<p> The settings that determine how Amazon AppFlow handles an error when placing data in the Snowflake destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. <code>ErrorHandlingConfig</code> is a part of the destination connector details. </p>",
          "shape": "ErrorHandlingConfig"
        },
        "intermediateBucketName": {
          "documentation": "<p> The intermediate bucket that Amazon AppFlow uses when moving data into Snowflake. </p>",
          "shape": "BucketName"
        },
        "object": {
          "documentation": "<p> The object specified in the Snowflake flow destination. </p>",
          "shape": "Object"
        }
      },
      "required": [
        "object",
        "intermediateBucketName"
      ],
      "type": "structure"
    },
    "SnowflakeMetadata": {
      "documentation": "<p> The connector metadata specific to Snowflake. </p>",
      "members": {
        "supportedRegions": {
          "documentation": "<p> Specifies the supported Amazon Web Services Regions when using Snowflake. </p>",
          "shape": "RegionList"
        }
      },
      "type": "structure"
    },
    "SourceConnectorProperties": {
      "documentation": "<p> Specifies the information that is required to query a particular connector. </p>",
      "members": {
        "Amplitude": {
          "documentation": "<p> Specifies the information that is required for querying Amplitude. </p>",
          "shape": "AmplitudeSourceProperties"
        },
        "CustomConnector": {
          "shape": "CustomConnectorSourceProperties"
        },
        "Datadog": {
          "documentation": "<p> Specifies the information that is required for querying Datadog. </p>",
          "shape": "DatadogSourceProperties"
        },
        "Dynatrace": {
          "documentation": "<p> Specifies the information that is required for querying Dynatrace. </p>",
          "shape": "DynatraceSourceProperties"
        },
        "GoogleAnalytics": {
          "documentation": "<p> Specifies the information that is required for querying Google Analytics. </p>",
          "shape": "GoogleAnalyticsSourceProperties"
        },
        "InforNexus": {
          "documentation": "<p> Specifies the information that is required for querying Infor Nexus. </p>",
          "shape": "InforNexusSourceProperties"
        },
        "Marketo": {
          "documentation": "<p> Specifies the information that is required for querying Marketo. </p>",
          "shape": "MarketoSourceProperties"
        },
        "S3": {
          "documentation": "<p> Specifies the information that is required for querying Amazon S3. </p>",
          "shape": "S3SourceProperties"
        },
        "SAPOData": {
          "shape": "SAPODataSourceProperties"
        },
        "Salesforce": {
          "documentation": "<p> Specifies the information that is required for querying Salesforce. </p>",
          "shape": "SalesforceSourceProperties"
        },
        "ServiceNow": {
          "documentation": "<p> Specifies the information that is required for querying ServiceNow. </p>",
          "shape": "ServiceNowSourceProperties"
        },
        "Singular": {
          "documentation": "<p> Specifies the information that is required for querying Singular. </p>",
          "shape": "SingularSourceProperties"
        },
        "Slack": {
          "documentation": "<p> Specifies the information that is required for querying Slack. </p>",
          "shape": "SlackSourceProperties"
        },
        "Trendmicro": {
          "documentation": "<p> Specifies the information that is required for querying Trend Micro. </p>",
          "shape": "TrendmicroSourceProperties"
        },
        "Veeva": {
          "documentation": "<p> Specifies the information that is required for querying Veeva. </p>",
          "shape": "VeevaSourceProperties"
        },
        "Zendesk": {
          "documentation": "<p> Specifies the information that is required for querying Zendesk. </p>",
          "shape": "ZendeskSourceProperties"
        }
      },
      "type": "structure"
    },
    "SourceFieldProperties": {
      "documentation": "<p> The properties that can be applied to a field when the connector is being used as a source. </p>",
      "members": {
        "isQueryable": {
          "documentation": "<p> Indicates if the field can be queried. </p>",
          "shape": "Boolean"
        },
        "isRetrievable": {
          "documentation": "<p> Indicates whether the field can be returned in a search result. </p>",
          "shape": "Boolean"
        },
        "isTimestampFieldForIncrementalQueries": {
          "documentation": "<p>Indicates if this timestamp field can be used for incremental queries.</p>",
          "shape": "Boolean"
        }
      },
      "type": "structure"
    },
    "SourceFields": {
      "member": {
        "shape": "String"
      },
      "type": "list"
    },
    "SourceFlowConfig": {
      "documentation": "<p> Contains information about the configuration of the source connector used in the flow. </p>",
      "members": {
        "apiVersion": {
          "documentation": "<p>The API version of the connector when it's used as a source in the flow.</p>",
          "shape": "ApiVersion"
        },
        "connectorProfileName": {
          "documentation": "<p> The name of the connector profile. This name must be unique for each connector profile in the Amazon Web Services account. </p>",
          "shape": "ConnectorProfileName"
        },
        "connectorType": {
          "documentation": "<p> The type of connector, such as Salesforce, Amplitude, and so on. </p>",
          "shape": "ConnectorType"
        },
        "incrementalPullConfig": {
          "documentation": "<p> Defines the configuration for a scheduled incremental data pull. If a valid configuration is provided, the fields specified in the configuration are used when querying for the incremental data pull. </p>",
          "shape": "IncrementalPullConfig"
        },
        "sourceConnectorProperties": {
          "documentation": "<p> Specifies the information that is required to query a particular source connector. </p>",
          "shape": "SourceConnectorProperties"
        }
      },
      "required": [
        "connectorType",
        "sourceConnectorProperties"
      ],
      "type": "structure"
    },
    "Stage": {
      "max": 512,
      "pattern": "\\S+",
      "type": "string"
    },
    "StartFlowRequest": {
      "members": {
        "flowName": {
          "documentation": "<p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>",
          "shape": "FlowName"
        }
      },
      "required": [
        "flowName"
      ],
      "type": "structure"
    },
    "StartFlowResponse": {
      "members": {
        "executionId": {
          "documentation": "<p> Returns the internal execution ID of an on-demand flow when the flow is started. For scheduled or event-triggered flows, this value is null. </p>",
          "shape": "ExecutionId"
        },
        "flowArn": {
          "documentation": "<p> The flow's Amazon Resource Name (ARN). </p>",
          "shape": "FlowArn"
        },
        "flowStatus": {
          "documentation": "<p> Indicates the current status of the flow. </p>",
          "shape": "FlowStatus"
        }
      },
      "type": "structure"
    },
    "StopFlowRequest": {
      "members": {
        "flowName": {
          "documentation": "<p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>",
          "shape": "FlowName"
        }
      },
      "required": [
        "flowName"
      ],
      "type": "structure"
    },
    "StopFlowResponse": {
      "members": {
        "flowArn": {
          "documentation": "<p> The flow's Amazon Resource Name (ARN). </p>",
          "shape": "FlowArn"
        },
        "flowStatus": {
          "documentation": "<p> Indicates the current status of the flow. </p>",
          "shape": "FlowStatus"
        }
      },
      "type": "structure"
    },
    "String": {
      "max": 2048,
      "pattern": ".*",
      "type": "string"
    },
    "SuccessResponseHandlingConfig": {
      "documentation": "<p>Determines how Amazon AppFlow handles the success response that it gets from the connector after placing data.</p> <p>For example, this setting would determine where to write the response from the destination connector upon a successful insert operation.</p>",
      "members": {
        "bucketName": {
          "documentation": "<p>The name of the Amazon S3 bucket.</p>",
          "shape": "BucketName"
        },
        "bucketPrefix": {
          "documentation": "<p>The Amazon S3 bucket prefix.</p>",
          "shape": "BucketPrefix"
        }
      },
      "type": "structure"
    },
    "SupportedApiVersion": {
      "max": 256,
      "pattern": "\\S+",
      "type": "string"
    },
    "SupportedApiVersionList": {
      "member": {
        "shape": "SupportedApiVersion"
      },
      "type": "list"
    },
    "SupportedFieldTypeDetails": {
      "documentation": "<p> Contains details regarding all the supported <code>FieldTypes</code> and their corresponding <code>filterOperators</code> and <code>supportedValues</code>. </p>",
      "members": {
        "v1": {
          "documentation": "<p> The initial supported version for <code>fieldType</code>. If this is later changed to a different version, v2 will be introduced. </p>",
          "shape": "FieldTypeDetails"
        }
      },
      "required": [
        "v1"
      ],
      "type": "structure"
    },
    "SupportedOperatorList": {
      "member": {
        "shape": "Operators"
      },
      "type": "list"
    },
    "SupportedValueList": {
      "member": {
        "shape": "Value"
      },
      "type": "list"
    },
    "SupportedWriteOperationList": {
      "member": {
        "shape": "WriteOperationType"
      },
      "type": "list"
    },
    "TagKey": {
      "max": 128,
      "min": 1,
      "pattern": "^(?!aws:)[a-zA-Z+-=._:/]+$",
      "type": "string"
    },
    "TagKeyList": {
      "max": 50,
      "member": {
        "shape": "TagKey"
      },
      "min": 0,
      "type": "list"
    },
    "TagMap": {
      "key": {
        "shape": "TagKey"
      },
      "max": 50,
      "min": 0,
      "type": "map",
      "value": {
        "shape": "TagValue"
      }
    },
    "TagResourceRequest": {
      "members": {
        "resourceArn": {
          "documentation": "<p> The Amazon Resource Name (ARN) of the flow that you want to tag. </p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "ARN"
        },
        "tags": {
          "documentation": "<p> The tags used to organize, track, or control access for your flow. </p>",
          "shape": "TagMap"
        }
      },
      "required": [
        "resourceArn",
        "tags"
      ],
      "type": "structure"
    },
    "TagResourceResponse": {
      "members": {},
      "type": "structure"
    },
    "TagValue": {
      "max": 256,
      "pattern": "[\\s\\w+-=\\.:/@]*",
      "type": "string"
    },
    "Task": {
      "documentation": "<p> A class for modeling different type of tasks. Task implementation varies based on the <code>TaskType</code>. </p>",
      "members": {
        "connectorOperator": {
          "documentation": "<p> The operation to be performed on the provided source fields. </p>",
          "shape": "ConnectorOperator"
        },
        "destinationField": {
          "documentation": "<p> A field in a destination connector, or a field value against which Amazon AppFlow validates a source field. </p>",
          "shape": "DestinationField"
        },
        "sourceFields": {
          "documentation": "<p> The source fields to which a particular task is applied. </p>",
          "shape": "SourceFields"
        },
        "taskProperties": {
          "documentation": "<p> A map used to store task-related information. The execution service looks for particular information based on the <code>TaskType</code>. </p>",
          "shape": "TaskPropertiesMap"
        },
        "taskType": {
          "documentation": "<p> Specifies the particular task implementation that Amazon AppFlow performs. </p>",
          "shape": "TaskType"
        }
      },
      "required": [
        "sourceFields",
        "taskType"
      ],
      "type": "structure"
    },
    "TaskPropertiesMap": {
      "key": {
        "shape": "OperatorPropertiesKeys"
      },
      "type": "map",
      "value": {
        "shape": "Property"
      }
    },
    "TaskType": {
      "enum": [
        "Arithmetic",
        "Filter",
        "Map",
        "Map_all",
        "Mask",
        "Merge",
        "Passthrough",
        "Truncate",
        "Validate"
      ],
      "type": "string"
    },
    "Tasks": {
      "member": {
        "shape": "Task"
      },
      "type": "list"
    },
    "ThrottlingException": {
      "documentation": "<p>API calls have exceeded the maximum allowed API request rate per account and per Region. </p>",
      "error": {
        "httpStatusCode": 429
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "ErrorMessage"
        }
      },
      "type": "structure"
    },
    "Timezone": {
      "max": 256,
      "pattern": ".*",
      "type": "string"
    },
    "TokenUrl": {
      "max": 256,
      "pattern": "^(https?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]",
      "type": "string"
    },
    "TokenUrlCustomProperties": {
      "key": {
        "shape": "CustomPropertyKey"
      },
      "max": 50,
      "min": 0,
      "type": "map",
      "value": {
        "shape": "CustomPropertyValue"
      }
    },
    "TokenUrlList": {
      "member": {
        "shape": "TokenUrl"
      },
      "type": "list"
    },
    "TrendmicroConnectorOperator": {
      "enum": [
        "PROJECTION",
        "EQUAL_TO",
        "ADDITION",
        "MULTIPLICATION",
        "DIVISION",
        "SUBTRACTION",
        "MASK_ALL",
        "MASK_FIRST_N",
        "MASK_LAST_N",
        "VALIDATE_NON_NULL",
        "VALIDATE_NON_ZERO",
        "VALIDATE_NON_NEGATIVE",
        "VALIDATE_NUMERIC",
        "NO_OP"
      ],
      "type": "string"
    },
    "TrendmicroConnectorProfileCredentials": {
      "documentation": "<p> The connector-specific profile credentials required when using Trend Micro. </p>",
      "members": {
        "apiSecretKey": {
          "documentation": "<p> The Secret Access Key portion of the credentials. </p>",
          "shape": "ApiSecretKey"
        }
      },
      "required": [
        "apiSecretKey"
      ],
      "type": "structure"
    },
    "TrendmicroConnectorProfileProperties": {
      "documentation": "<p> The connector-specific profile properties required when using Trend Micro. </p>",
      "members": {},
      "type": "structure"
    },
    "TrendmicroMetadata": {
      "documentation": "<p> The connector metadata specific to Trend Micro. </p>",
      "members": {},
      "type": "structure"
    },
    "TrendmicroSourceProperties": {
      "documentation": "<p> The properties that are applied when using Trend Micro as a flow source. </p>",
      "members": {
        "object": {
          "documentation": "<p> The object specified in the Trend Micro flow source. </p>",
          "shape": "Object"
        }
      },
      "required": [
        "object"
      ],
      "type": "structure"
    },
    "TriggerConfig": {
      "documentation": "<p> The trigger settings that determine how and when Amazon AppFlow runs the specified flow. </p>",
      "members": {
        "triggerProperties": {
          "documentation": "<p> Specifies the configuration details of a schedule-triggered flow as defined by the user. Currently, these settings only apply to the <code>Scheduled</code> trigger type. </p>",
          "shape": "TriggerProperties"
        },
        "triggerType": {
          "documentation": "<p> Specifies the type of flow trigger. This can be <code>OnDemand</code>, <code>Scheduled</code>, or <code>Event</code>. </p>",
          "shape": "TriggerType"
        }
      },
      "required": [
        "triggerType"
      ],
      "type": "structure"
    },
    "TriggerProperties": {
      "documentation": "<p> Specifies the configuration details that control the trigger for a flow. Currently, these settings only apply to the <code>Scheduled</code> trigger type. </p>",
      "members": {
        "Scheduled": {
          "documentation": "<p> Specifies the configuration details of a schedule-triggered flow as defined by the user. </p>",
          "shape": "ScheduledTriggerProperties"
        }
      },
      "type": "structure"
    },
    "TriggerType": {
      "enum": [
        "Scheduled",
        "Event",
        "OnDemand"
      ],
      "type": "string"
    },
    "TriggerTypeList": {
      "member": {
        "shape": "TriggerType"
      },
      "type": "list"
    },
    "UnregisterConnectorRequest": {
      "members": {
        "connectorLabel": {
          "documentation": "<p>The label of the connector. The label is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account.</p>",
          "shape": "ConnectorLabel"
        },
        "forceDelete": {
          "documentation": "<p>Indicates whether Amazon AppFlow should unregister the connector, even if it is currently in use in one or more connector profiles. The default value is false.</p>",
          "shape": "Boolean"
        }
      },
      "required": [
        "connectorLabel"
      ],
      "type": "structure"
    },
    "UnregisterConnectorResponse": {
      "members": {},
      "type": "structure"
    },
    "UnsupportedOperationException": {
      "documentation": "<p> The requested operation is not supported for the current flow. </p>",
      "error": {
        "httpStatusCode": 400
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "ErrorMessage"
        }
      },
      "type": "structure"
    },
    "UntagResourceRequest": {
      "members": {
        "resourceArn": {
          "documentation": "<p> The Amazon Resource Name (ARN) of the flow that you want to untag. </p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "ARN"
        },
        "tagKeys": {
          "documentation": "<p> The tag keys associated with the tag that you want to remove from your flow. </p>",
          "location": "querystring",
          "locationName": "tagKeys",
          "shape": "TagKeyList"
        }
      },
      "required": [
        "resourceArn",
        "tagKeys"
      ],
      "type": "structure"
    },
    "UntagResourceResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateConnectorProfileRequest": {
      "members": {
        "connectionMode": {
          "documentation": "<p> Indicates the connection mode and if it is public or private. </p>",
          "shape": "ConnectionMode"
        },
        "connectorProfileConfig": {
          "documentation": "<p> Defines the connector-specific profile configuration and credentials. </p>",
          "shape": "ConnectorProfileConfig"
        },
        "connectorProfileName": {
          "documentation": "<p> The name of the connector profile and is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account. </p>",
          "shape": "ConnectorProfileName"
        }
      },
      "required": [
        "connectorProfileName",
        "connectionMode",
        "connectorProfileConfig"
      ],
      "type": "structure"
    },
    "UpdateConnectorProfileResponse": {
      "members": {
        "connectorProfileArn": {
          "documentation": "<p> The Amazon Resource Name (ARN) of the connector profile. </p>",
          "shape": "ConnectorProfileArn"
        }
      },
      "type": "structure"
    },
    "UpdateFlowRequest": {
      "members": {
        "description": {
          "documentation": "<p> A description of the flow. </p>",
          "shape": "FlowDescription"
        },
        "destinationFlowConfigList": {
          "documentation": "<p> The configuration that controls how Amazon AppFlow transfers data to the destination connector. </p>",
          "shape": "DestinationFlowConfigList"
        },
        "flowName": {
          "documentation": "<p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>",
          "shape": "FlowName"
        },
        "sourceFlowConfig": {
          "shape": "SourceFlowConfig"
        },
        "tasks": {
          "documentation": "<p> A list of tasks that Amazon AppFlow performs while transferring the data in the flow run. </p>",
          "shape": "Tasks"
        },
        "triggerConfig": {
          "documentation": "<p> The trigger settings that determine how and when the flow runs. </p>",
          "shape": "TriggerConfig"
        }
      },
      "required": [
        "flowName",
        "triggerConfig",
        "sourceFlowConfig",
        "destinationFlowConfigList",
        "tasks"
      ],
      "type": "structure"
    },
    "UpdateFlowResponse": {
      "members": {
        "flowStatus": {
          "documentation": "<p>Indicates the current status of the flow. </p>",
          "shape": "FlowStatus"
        }
      },
      "type": "structure"
    },
    "UpdatedBy": {
      "max": 256,
      "pattern": "\\S+",
      "type": "string"
    },
    "UpsolverBucketName": {
      "max": 63,
      "min": 16,
      "pattern": "^(upsolver-appflow)\\S*",
      "type": "string"
    },
    "UpsolverDestinationProperties": {
      "documentation": "<p> The properties that are applied when Upsolver is used as a destination. </p>",
      "members": {
        "bucketName": {
          "documentation": "<p> The Upsolver Amazon S3 bucket name in which Amazon AppFlow places the transferred data. </p>",
          "shape": "UpsolverBucketName"
        },
        "bucketPrefix": {
          "documentation": "<p> The object key for the destination Upsolver Amazon S3 bucket in which Amazon AppFlow places the files. </p>",
          "shape": "BucketPrefix"
        },
        "s3OutputFormatConfig": {
          "documentation": "<p> The configuration that determines how data is formatted when Upsolver is used as the flow destination. </p>",
          "shape": "UpsolverS3OutputFormatConfig"
        }
      },
      "required": [
        "bucketName",
        "s3OutputFormatConfig"
      ],
      "type": "structure"
    },
    "UpsolverMetadata": {
      "documentation": "<p> The connector metadata specific to Upsolver. </p>",
      "members": {},
      "type": "structure"
    },
    "UpsolverS3OutputFormatConfig": {
      "documentation": "<p> The configuration that determines how Amazon AppFlow formats the flow output data when Upsolver is used as the destination. </p>",
      "members": {
        "aggregationConfig": {
          "shape": "AggregationConfig"
        },
        "fileType": {
          "documentation": "<p> Indicates the file type that Amazon AppFlow places in the Upsolver Amazon S3 bucket. </p>",
          "shape": "FileType"
        },
        "prefixConfig": {
          "shape": "PrefixConfig"
        }
      },
      "required": [
        "prefixConfig"
      ],
      "type": "structure"
    },
    "Username": {
      "max": 512,
      "pattern": "\\S+",
      "type": "string"
    },
    "ValidationException": {
      "documentation": "<p> The request has invalid or missing parameters. </p>",
      "error": {
        "httpStatusCode": 400
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "ErrorMessage"
        }
      },
      "type": "structure"
    },
    "Value": {
      "max": 128,
      "pattern": "\\S+",
      "type": "string"
    },
    "VeevaConnectorOperator": {
      "enum": [
        "PROJECTION",
        "LESS_THAN",
        "GREATER_THAN",
        "CONTAINS",
        "BETWEEN",
        "LESS_THAN_OR_EQUAL_TO",
        "GREATER_THAN_OR_EQUAL_TO",
        "EQUAL_TO",
        "NOT_EQUAL_TO",
        "ADDITION",
        "MULTIPLICATION",
        "DIVISION",
        "SUBTRACTION",
        "MASK_ALL",
        "MASK_FIRST_N",
        "MASK_LAST_N",
        "VALIDATE_NON_NULL",
        "VALIDATE_NON_ZERO",
        "VALIDATE_NON_NEGATIVE",
        "VALIDATE_NUMERIC",
        "NO_OP"
      ],
      "type": "string"
    },
    "VeevaConnectorProfileCredentials": {
      "documentation": "<p> The connector-specific profile credentials required when using Veeva. </p>",
      "members": {
        "password": {
          "documentation": "<p> The password that corresponds to the user name. </p>",
          "shape": "Password"
        },
        "username": {
          "documentation": "<p> The name of the user. </p>",
          "shape": "Username"
        }
      },
      "required": [
        "username",
        "password"
      ],
      "type": "structure"
    },
    "VeevaConnectorProfileProperties": {
      "documentation": "<p> The connector-specific profile properties required when using Veeva. </p>",
      "members": {
        "instanceUrl": {
          "documentation": "<p> The location of the Veeva resource. </p>",
          "shape": "InstanceUrl"
        }
      },
      "required": [
        "instanceUrl"
      ],
      "type": "structure"
    },
    "VeevaMetadata": {
      "documentation": "<p> The connector metadata specific to Veeva. </p>",
      "members": {},
      "type": "structure"
    },
    "VeevaSourceProperties": {
      "documentation": "<p> The properties that are applied when using Veeva as a flow source. </p>",
      "members": {
        "documentType": {
          "documentation": "<p>The document type specified in the Veeva document extract flow.</p>",
          "shape": "DocumentType"
        },
        "includeAllVersions": {
          "documentation": "<p>Boolean value to include All Versions of files in Veeva document extract flow.</p>",
          "shape": "Boolean"
        },
        "includeRenditions": {
          "documentation": "<p>Boolean value to include file renditions in Veeva document extract flow.</p>",
          "shape": "Boolean"
        },
        "includeSourceFiles": {
          "documentation": "<p>Boolean value to include source files in Veeva document extract flow.</p>",
          "shape": "Boolean"
        },
        "object": {
          "documentation": "<p> The object specified in the Veeva flow source. </p>",
          "shape": "Object"
        }
      },
      "required": [
        "object"
      ],
      "type": "structure"
    },
    "Warehouse": {
      "max": 512,
      "pattern": "[\\s\\w/!@#+=.-]*",
      "type": "string"
    },
    "WriteOperationType": {
      "documentation": "<p> The possible write operations in the destination connector. When this value is not provided, this defaults to the <code>INSERT</code> operation. </p>",
      "enum": [
        "INSERT",
        "UPSERT",
        "UPDATE",
        "DELETE"
      ],
      "type": "string"
    },
    "ZendeskConnectorOperator": {
      "enum": [
        "PROJECTION",
        "GREATER_THAN",
        "ADDITION",
        "MULTIPLICATION",
        "DIVISION",
        "SUBTRACTION",
        "MASK_ALL",
        "MASK_FIRST_N",
        "MASK_LAST_N",
        "VALIDATE_NON_NULL",
        "VALIDATE_NON_ZERO",
        "VALIDATE_NON_NEGATIVE",
        "VALIDATE_NUMERIC",
        "NO_OP"
      ],
      "type": "string"
    },
    "ZendeskConnectorProfileCredentials": {
      "documentation": "<p> The connector-specific profile credentials required when using Zendesk. </p>",
      "members": {
        "accessToken": {
          "documentation": "<p> The credentials used to access protected Zendesk resources. </p>",
          "shape": "AccessToken"
        },
        "clientId": {
          "documentation": "<p> The identifier for the desired client. </p>",
          "shape": "ClientId"
        },
        "clientSecret": {
          "documentation": "<p> The client secret used by the OAuth client to authenticate to the authorization server. </p>",
          "shape": "ClientSecret"
        },
        "oAuthRequest": {
          "documentation": "<p> The OAuth requirement needed to request security tokens from the connector endpoint. </p>",
          "shape": "ConnectorOAuthRequest"
        }
      },
      "required": [
        "clientId",
        "clientSecret"
      ],
      "type": "structure"
    },
    "ZendeskConnectorProfileProperties": {
      "documentation": "<p> The connector-specific profile properties required when using Zendesk. </p>",
      "members": {
        "instanceUrl": {
          "documentation": "<p> The location of the Zendesk resource. </p>",
          "shape": "InstanceUrl"
        }
      },
      "required": [
        "instanceUrl"
      ],
      "type": "structure"
    },
    "ZendeskDestinationProperties": {
      "documentation": "<p>The properties that are applied when Zendesk is used as a destination.</p>",
      "members": {
        "errorHandlingConfig": {
          "shape": "ErrorHandlingConfig"
        },
        "idFieldNames": {
          "shape": "IdFieldNameList"
        },
        "object": {
          "documentation": "<p>The object specified in the Zendesk flow destination.</p>",
          "shape": "Object"
        },
        "writeOperationType": {
          "shape": "WriteOperationType"
        }
      },
      "required": [
        "object"
      ],
      "type": "structure"
    },
    "ZendeskMetadata": {
      "documentation": "<p> The connector metadata specific to Zendesk. </p>",
      "members": {
        "oAuthScopes": {
          "documentation": "<p> The desired authorization scope for the Zendesk account. </p>",
          "shape": "OAuthScopeList"
        }
      },
      "type": "structure"
    },
    "ZendeskSourceProperties": {
      "documentation": "<p> The properties that are applied when using Zendesk as a flow source. </p>",
      "members": {
        "object": {
          "documentation": "<p> The object specified in the Zendesk flow source. </p>",
          "shape": "Object"
        }
      },
      "required": [
        "object"
      ],
      "type": "structure"
    }
  },
  "version": "2.0"
}
