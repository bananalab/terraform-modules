{
  "documentation": "<p>Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.</p>",
  "metadata": {
    "apiVersion": "2021-04-28",
    "endpointPrefix": "m2",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "AWSMainframeModernization",
    "serviceId": "m2",
    "signatureVersion": "v4",
    "signingName": "m2",
    "uid": "m2-2021-04-28"
  },
  "operations": {
    "CancelBatchJobExecution": {
      "documentation": "<p>Cancels the running of a specific batch job execution.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/applications/{applicationId}/batch-job-executions/{executionId}/cancel",
        "responseCode": 200
      },
      "input": {
        "shape": "CancelBatchJobExecutionRequest"
      },
      "name": "CancelBatchJobExecution",
      "output": {
        "shape": "CancelBatchJobExecutionResponse"
      }
    },
    "CreateApplication": {
      "documentation": "<p>Creates a new application with given parameters. Requires an existing environment and application definition file.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/applications",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "CreateApplicationRequest"
      },
      "name": "CreateApplication",
      "output": {
        "shape": "CreateApplicationResponse"
      }
    },
    "CreateDataSetImportTask": {
      "documentation": "<p>Starts a data set import task for a specific application.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/applications/{applicationId}/dataset-import-task",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "CreateDataSetImportTaskRequest"
      },
      "name": "CreateDataSetImportTask",
      "output": {
        "shape": "CreateDataSetImportTaskResponse"
      }
    },
    "CreateDeployment": {
      "documentation": "<p>Creates and starts a deployment to deploy an application into an environment.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/applications/{applicationId}/deployments",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "CreateDeploymentRequest"
      },
      "name": "CreateDeployment",
      "output": {
        "shape": "CreateDeploymentResponse"
      }
    },
    "CreateEnvironment": {
      "documentation": "<p>Creates a runtime environment for a given runtime engine.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/environments",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "CreateEnvironmentRequest"
      },
      "name": "CreateEnvironment",
      "output": {
        "shape": "CreateEnvironmentResponse"
      }
    },
    "DeleteApplication": {
      "documentation": "<p>Deletes a specific application. You cannot delete a running application.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/applications/{applicationId}",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "DeleteApplicationRequest"
      },
      "name": "DeleteApplication",
      "output": {
        "shape": "DeleteApplicationResponse"
      }
    },
    "DeleteApplicationFromEnvironment": {
      "documentation": "<p>Deletes a specific application from a specified environment where it has been previously deployed. You cannot delete an environment using DeleteEnvironment, if any application has ever been deployed to it. This API removes the association of the application with the environment so you can delete the environment smoothly.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/applications/{applicationId}/environment/{environmentId}",
        "responseCode": 200
      },
      "input": {
        "shape": "DeleteApplicationFromEnvironmentRequest"
      },
      "name": "DeleteApplicationFromEnvironment",
      "output": {
        "shape": "DeleteApplicationFromEnvironmentResponse"
      }
    },
    "DeleteEnvironment": {
      "documentation": "<p>Deletes a specific environment. The environment cannot contain deployed applications. If it does, you must delete those applications before you delete the environment.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/environments/{environmentId}",
        "responseCode": 200
      },
      "idempotent": true,
      "input": {
        "shape": "DeleteEnvironmentRequest"
      },
      "name": "DeleteEnvironment",
      "output": {
        "shape": "DeleteEnvironmentResponse"
      }
    },
    "GetApplication": {
      "documentation": "<p>Describes the details of a specific application.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/applications/{applicationId}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetApplicationRequest"
      },
      "name": "GetApplication",
      "output": {
        "shape": "GetApplicationResponse"
      }
    },
    "GetApplicationVersion": {
      "documentation": "<p>Returns details about a specific version of a specific application.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/applications/{applicationId}/versions/{applicationVersion}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetApplicationVersionRequest"
      },
      "name": "GetApplicationVersion",
      "output": {
        "shape": "GetApplicationVersionResponse"
      }
    },
    "GetBatchJobExecution": {
      "documentation": "<p>Gets the details of a specific batch job execution for a specific application.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/applications/{applicationId}/batch-job-executions/{executionId}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetBatchJobExecutionRequest"
      },
      "name": "GetBatchJobExecution",
      "output": {
        "shape": "GetBatchJobExecutionResponse"
      }
    },
    "GetDataSetDetails": {
      "documentation": "<p>Gets the details of a specific data set.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/applications/{applicationId}/datasets/{dataSetName}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetDataSetDetailsRequest"
      },
      "name": "GetDataSetDetails",
      "output": {
        "shape": "GetDataSetDetailsResponse"
      }
    },
    "GetDataSetImportTask": {
      "documentation": "<p>Gets the status of a data set import task initiated with the <a>CreateDataSetImportTask</a> operation.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/applications/{applicationId}/dataset-import-tasks/{taskId}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetDataSetImportTaskRequest"
      },
      "name": "GetDataSetImportTask",
      "output": {
        "shape": "GetDataSetImportTaskResponse"
      }
    },
    "GetDeployment": {
      "documentation": "<p>Gets details of a specific deployment with a given deployment identifier.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/applications/{applicationId}/deployments/{deploymentId}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetDeploymentRequest"
      },
      "name": "GetDeployment",
      "output": {
        "shape": "GetDeploymentResponse"
      }
    },
    "GetEnvironment": {
      "documentation": "<p>Describes a specific runtime environment.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/environments/{environmentId}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetEnvironmentRequest"
      },
      "name": "GetEnvironment",
      "output": {
        "shape": "GetEnvironmentResponse"
      }
    },
    "ListApplicationVersions": {
      "documentation": "<p>Returns a list of the application versions for a specific application.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/applications/{applicationId}/versions",
        "responseCode": 200
      },
      "input": {
        "shape": "ListApplicationVersionsRequest"
      },
      "name": "ListApplicationVersions",
      "output": {
        "shape": "ListApplicationVersionsResponse"
      }
    },
    "ListApplications": {
      "documentation": "<p>Lists the applications associated with a specific Amazon Web Services account. You can provide the unique identifier of a specific environment in a query parameter to see all applications associated with that environment.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/applications",
        "responseCode": 200
      },
      "input": {
        "shape": "ListApplicationsRequest"
      },
      "name": "ListApplications",
      "output": {
        "shape": "ListApplicationsResponse"
      }
    },
    "ListBatchJobDefinitions": {
      "documentation": "<p>Lists all the available batch job definitions based on the batch job resources uploaded during the application creation. The listed batch job definitions can then be used to start a batch job.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/applications/{applicationId}/batch-job-definitions",
        "responseCode": 200
      },
      "input": {
        "shape": "ListBatchJobDefinitionsRequest"
      },
      "name": "ListBatchJobDefinitions",
      "output": {
        "shape": "ListBatchJobDefinitionsResponse"
      }
    },
    "ListBatchJobExecutions": {
      "documentation": "<p>Lists historical, current, and scheduled batch job executions for a specific application.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/applications/{applicationId}/batch-job-executions",
        "responseCode": 200
      },
      "input": {
        "shape": "ListBatchJobExecutionsRequest"
      },
      "name": "ListBatchJobExecutions",
      "output": {
        "shape": "ListBatchJobExecutionsResponse"
      }
    },
    "ListDataSetImportHistory": {
      "documentation": "<p>Lists the data set imports for the specified application.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/applications/{applicationId}/dataset-import-tasks",
        "responseCode": 200
      },
      "input": {
        "shape": "ListDataSetImportHistoryRequest"
      },
      "name": "ListDataSetImportHistory",
      "output": {
        "shape": "ListDataSetImportHistoryResponse"
      }
    },
    "ListDataSets": {
      "documentation": "<p>Lists the data sets imported for a specific application. In Amazon Web Services Mainframe Modernization, data sets are associated with applications deployed on environments. This is known as importing data sets. Currently, Amazon Web Services Mainframe Modernization can import data sets into catalogs using <a href=\"https://docs.aws.amazon.com/m2/latest/APIReference/API_CreateDataSetImportTask.html\">CreateDataSetImportTask</a>.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/applications/{applicationId}/datasets",
        "responseCode": 200
      },
      "input": {
        "shape": "ListDataSetsRequest"
      },
      "name": "ListDataSets",
      "output": {
        "shape": "ListDataSetsResponse"
      }
    },
    "ListDeployments": {
      "documentation": "<p>Returns a list of all deployments of a specific application. A deployment is a combination of a specific application and a specific version of that application. Each deployment is mapped to a particular application version.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/applications/{applicationId}/deployments",
        "responseCode": 200
      },
      "input": {
        "shape": "ListDeploymentsRequest"
      },
      "name": "ListDeployments",
      "output": {
        "shape": "ListDeploymentsResponse"
      }
    },
    "ListEngineVersions": {
      "documentation": "<p>Lists the available engine versions.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/engine-versions",
        "responseCode": 200
      },
      "input": {
        "shape": "ListEngineVersionsRequest"
      },
      "name": "ListEngineVersions",
      "output": {
        "shape": "ListEngineVersionsResponse"
      }
    },
    "ListEnvironments": {
      "documentation": "<p>Lists the runtime environments.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/environments",
        "responseCode": 200
      },
      "input": {
        "shape": "ListEnvironmentsRequest"
      },
      "name": "ListEnvironments",
      "output": {
        "shape": "ListEnvironmentsResponse"
      }
    },
    "ListTagsForResource": {
      "documentation": "<p>Lists the tags for the specified resource.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/tags/{resourceArn}",
        "responseCode": 200
      },
      "input": {
        "shape": "ListTagsForResourceRequest"
      },
      "name": "ListTagsForResource",
      "output": {
        "shape": "ListTagsForResourceResponse"
      }
    },
    "StartApplication": {
      "documentation": "<p>Starts an application that is currently stopped.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/applications/{applicationId}/start",
        "responseCode": 200
      },
      "input": {
        "shape": "StartApplicationRequest"
      },
      "name": "StartApplication",
      "output": {
        "shape": "StartApplicationResponse"
      }
    },
    "StartBatchJob": {
      "documentation": "<p>Starts a batch job and returns the unique identifier of this execution of the batch job. The associated application must be running in order to start the batch job.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/applications/{applicationId}/batch-job",
        "responseCode": 200
      },
      "input": {
        "shape": "StartBatchJobRequest"
      },
      "name": "StartBatchJob",
      "output": {
        "shape": "StartBatchJobResponse"
      }
    },
    "StopApplication": {
      "documentation": "<p>Stops a running application.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/applications/{applicationId}/stop",
        "responseCode": 200
      },
      "input": {
        "shape": "StopApplicationRequest"
      },
      "name": "StopApplication",
      "output": {
        "shape": "StopApplicationResponse"
      }
    },
    "TagResource": {
      "documentation": "<p>Adds one or more tags to the specified resource.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/tags/{resourceArn}",
        "responseCode": 200
      },
      "input": {
        "shape": "TagResourceRequest"
      },
      "name": "TagResource",
      "output": {
        "shape": "TagResourceResponse"
      }
    },
    "UntagResource": {
      "documentation": "<p>Removes one or more tags from the specified resource.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/tags/{resourceArn}",
        "responseCode": 200
      },
      "input": {
        "shape": "UntagResourceRequest"
      },
      "name": "UntagResource",
      "output": {
        "shape": "UntagResourceResponse"
      }
    },
    "UpdateApplication": {
      "documentation": "<p>Updates an application and creates a new version.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/applications/{applicationId}",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateApplicationRequest"
      },
      "name": "UpdateApplication",
      "output": {
        "shape": "UpdateApplicationResponse"
      }
    },
    "UpdateEnvironment": {
      "documentation": "<p>Updates the configuration details for a specific environment.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/environments/{environmentId}",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateEnvironmentRequest"
      },
      "name": "UpdateEnvironment",
      "output": {
        "shape": "UpdateEnvironmentResponse"
      }
    }
  },
  "shapes": {
    "AccessDeniedException": {
      "documentation": "<p>The account or role doesn't have the right permissions to make the request.</p>",
      "error": {
        "httpStatusCode": 403,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "String"
        }
      },
      "required": [
        "message"
      ],
      "type": "structure"
    },
    "AlternateKey": {
      "documentation": "<p>Defines an alternate key. This value is optional. A legacy data set might not have any alternate key defined but if those alternate keys definitions exist, provide them, as some applications will make use of them.</p>",
      "members": {
        "allowDuplicates": {
          "documentation": "<p>Indicates whether the alternate key values are supposed to be unique for the given data set.</p>",
          "shape": "Boolean"
        },
        "length": {
          "documentation": "<p>A strictly positive integer value representing the length of the alternate key.</p>",
          "shape": "Integer"
        },
        "name": {
          "documentation": "<p>The name of the alternate key.</p>",
          "shape": "String"
        },
        "offset": {
          "documentation": "<p>A positive integer value representing the offset to mark the start of the alternate key part in the record byte array.</p>",
          "shape": "Integer"
        }
      },
      "required": [
        "length",
        "offset"
      ],
      "type": "structure"
    },
    "AlternateKeyList": {
      "member": {
        "shape": "AlternateKey"
      },
      "type": "list"
    },
    "ApplicationDeploymentLifecycle": {
      "enum": [
        "Deploying",
        "Deployed"
      ],
      "type": "string"
    },
    "ApplicationLifecycle": {
      "enum": [
        "Creating",
        "Created",
        "Available",
        "Ready",
        "Starting",
        "Running",
        "Stopping",
        "Stopped",
        "Failed",
        "Deleting"
      ],
      "type": "string"
    },
    "ApplicationSummary": {
      "documentation": "<p>A subset of the possible application attributes. Used in the application list.</p>",
      "members": {
        "applicationArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the application.</p>",
          "shape": "Arn"
        },
        "applicationId": {
          "documentation": "<p>The unique identifier of the application.</p>",
          "shape": "Identifier"
        },
        "applicationVersion": {
          "documentation": "<p>The version of the application.</p>",
          "shape": "Version"
        },
        "creationTime": {
          "documentation": "<p>The timestamp when the application was created.</p>",
          "shape": "Timestamp"
        },
        "deploymentStatus": {
          "documentation": "<p>Indicates whether there is an ongoing deployment or if the application has ever deployed successfully.</p>",
          "shape": "ApplicationDeploymentLifecycle"
        },
        "description": {
          "documentation": "<p>The description of the application.</p>",
          "shape": "EntityDescription"
        },
        "engineType": {
          "documentation": "<p>The type of the target platform for this application.</p>",
          "shape": "EngineType"
        },
        "environmentId": {
          "documentation": "<p>The unique identifier of the runtime environment that hosts this application.</p>",
          "shape": "Identifier"
        },
        "lastStartTime": {
          "documentation": "<p>The timestamp when the application was last started. Null until the application has started running for the first time.</p>",
          "shape": "Timestamp"
        },
        "name": {
          "documentation": "<p>The name of the application.</p>",
          "shape": "EntityName"
        },
        "status": {
          "documentation": "<p>The status of the application.</p>",
          "shape": "ApplicationLifecycle"
        },
        "versionStatus": {
          "documentation": "<p>Indicates the status of the latest version of the application.</p>",
          "shape": "ApplicationVersionLifecycle"
        }
      },
      "required": [
        "applicationArn",
        "applicationId",
        "applicationVersion",
        "creationTime",
        "engineType",
        "name",
        "status"
      ],
      "type": "structure"
    },
    "ApplicationSummaryList": {
      "member": {
        "shape": "ApplicationSummary"
      },
      "type": "list"
    },
    "ApplicationVersionLifecycle": {
      "enum": [
        "Creating",
        "Available",
        "Failed"
      ],
      "type": "string"
    },
    "ApplicationVersionSummary": {
      "documentation": "<p>Defines an application version summary.</p>",
      "members": {
        "applicationVersion": {
          "documentation": "<p>The application version.</p>",
          "shape": "Version"
        },
        "creationTime": {
          "documentation": "<p>The timestamp when the application version was created.</p>",
          "shape": "Timestamp"
        },
        "status": {
          "documentation": "<p>The status of the application.</p>",
          "shape": "ApplicationVersionLifecycle"
        },
        "statusReason": {
          "documentation": "<p>The reason for the reported status.</p>",
          "shape": "String"
        }
      },
      "required": [
        "applicationVersion",
        "creationTime",
        "status"
      ],
      "type": "structure"
    },
    "ApplicationVersionSummaryList": {
      "member": {
        "shape": "ApplicationVersionSummary"
      },
      "type": "list"
    },
    "Arn": {
      "pattern": "^arn:(aws|aws-cn|aws-iso|aws-iso-[a-z]{1}|aws-us-gov):[A-Za-z0-9][A-Za-z0-9_/.-]{0,62}:([a-z]{2}-((iso[a-z]{0,1}-)|(gov-)){0,1}[a-z]+-[0-9]):[0-9]{12}:[A-Za-z0-9/][A-Za-z0-9:_/+=,@.-]{0,1023}$",
      "type": "string"
    },
    "ArnList": {
      "member": {
        "shape": "Arn"
      },
      "min": 1,
      "type": "list"
    },
    "BatchJobDefinition": {
      "documentation": "<p>Defines the details of a batch job.</p>",
      "members": {
        "fileBatchJobDefinition": {
          "documentation": "<p>Specifies a file containing a batch job definition.</p>",
          "shape": "FileBatchJobDefinition"
        },
        "scriptBatchJobDefinition": {
          "documentation": "<p>A script containing a batch job definition.</p>",
          "shape": "ScriptBatchJobDefinition"
        }
      },
      "type": "structure",
      "union": true
    },
    "BatchJobDefinitions": {
      "member": {
        "shape": "BatchJobDefinition"
      },
      "type": "list"
    },
    "BatchJobExecutionStatus": {
      "enum": [
        "Submitting",
        "Holding",
        "Dispatching",
        "Running",
        "Cancelling",
        "Cancelled",
        "Succeeded",
        "Failed",
        "Succeeded With Warning"
      ],
      "type": "string"
    },
    "BatchJobExecutionSummary": {
      "documentation": "<p>A subset of the possible batch job attributes. Used in the batch job list.</p>",
      "members": {
        "applicationId": {
          "documentation": "<p>The unique identifier of the application that hosts this batch job.</p>",
          "shape": "Identifier"
        },
        "endTime": {
          "documentation": "<p>The timestamp when this batch job execution ended.</p>",
          "shape": "Timestamp"
        },
        "executionId": {
          "documentation": "<p>The unique identifier of this execution of the batch job.</p>",
          "shape": "Identifier"
        },
        "jobId": {
          "documentation": "<p>The unique identifier of a particular batch job.</p>",
          "shape": "String100"
        },
        "jobName": {
          "documentation": "<p>The name of a particular batch job.</p>",
          "shape": "String100"
        },
        "jobType": {
          "documentation": "<p>The type of a particular batch job execution.</p>",
          "shape": "BatchJobType"
        },
        "startTime": {
          "documentation": "<p>The timestamp when a particular batch job execution started.</p>",
          "shape": "Timestamp"
        },
        "status": {
          "documentation": "<p>The status of a particular batch job execution.</p>",
          "shape": "BatchJobExecutionStatus"
        }
      },
      "required": [
        "applicationId",
        "executionId",
        "startTime",
        "status"
      ],
      "type": "structure"
    },
    "BatchJobExecutionSummaryList": {
      "member": {
        "shape": "BatchJobExecutionSummary"
      },
      "type": "list"
    },
    "BatchJobIdentifier": {
      "documentation": "<p>Identifies a specific batch job.</p>",
      "members": {
        "fileBatchJobIdentifier": {
          "documentation": "<p>Specifies a file associated with a specific batch job.</p>",
          "shape": "FileBatchJobIdentifier"
        },
        "scriptBatchJobIdentifier": {
          "documentation": "<p>A batch job identifier in which the batch job to run is identified by the script name.</p>",
          "shape": "ScriptBatchJobIdentifier"
        }
      },
      "type": "structure",
      "union": true
    },
    "BatchJobParametersMap": {
      "documentation": "<p>Job parameters are optional. Can contain up to 500 entries.</p>",
      "key": {
        "shape": "BatchParamKey"
      },
      "max": 500,
      "min": 0,
      "type": "map",
      "value": {
        "shape": "BatchParamValue"
      }
    },
    "BatchJobType": {
      "enum": [
        "VSE",
        "JES2",
        "JES3"
      ],
      "type": "string"
    },
    "BatchParamKey": {
      "documentation": "<p>Parameter key: the first character must be alphabetic. Can be of up to 8 alphanumeric characters.</p>",
      "max": 8,
      "min": 1,
      "pattern": "^[A-Za-z][A-Za-z0-9]{1,7}$",
      "type": "string"
    },
    "BatchParamValue": {
      "documentation": "<p>Parameter value can be of up to 44 alphanumeric characters.</p>",
      "max": 44,
      "min": 0,
      "type": "string"
    },
    "Boolean": {
      "type": "boolean"
    },
    "CancelBatchJobExecutionRequest": {
      "members": {
        "applicationId": {
          "documentation": "<p>The unique identifier of the application.</p>",
          "location": "uri",
          "locationName": "applicationId",
          "shape": "Identifier"
        },
        "executionId": {
          "documentation": "<p>The unique identifier of the batch job execution.</p>",
          "location": "uri",
          "locationName": "executionId",
          "shape": "Identifier"
        }
      },
      "required": [
        "applicationId",
        "executionId"
      ],
      "type": "structure"
    },
    "CancelBatchJobExecutionResponse": {
      "members": {},
      "type": "structure"
    },
    "CapacityValue": {
      "box": true,
      "max": 100,
      "min": 1,
      "type": "integer"
    },
    "ConflictException": {
      "documentation": "<p>The parameters provided in the request conflict with existing resources.</p>",
      "error": {
        "httpStatusCode": 409,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "String"
        },
        "resourceId": {
          "documentation": "<p>The ID of the conflicting resource.</p>",
          "shape": "String"
        },
        "resourceType": {
          "documentation": "<p>The type of the conflicting resource.</p>",
          "shape": "String"
        }
      },
      "required": [
        "message"
      ],
      "type": "structure"
    },
    "CreateApplicationRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>Unique, case-sensitive identifier the service generates to ensure the idempotency of the request to create an application. The service generates the clientToken when the API call is triggered. The token expires after one hour, so if you retry the API within this timeframe with the same clientToken, you will get the same response. The service also handles deleting the clientToken after it expires. </p>",
          "idempotencyToken": true,
          "shape": "String"
        },
        "definition": {
          "documentation": "<p>The application definition for this application. You can specify either inline JSON or an S3 bucket location.</p>",
          "shape": "Definition"
        },
        "description": {
          "documentation": "<p>The description of the application.</p>",
          "shape": "EntityDescription"
        },
        "engineType": {
          "documentation": "<p>The type of the target platform for this application.</p>",
          "shape": "EngineType"
        },
        "name": {
          "documentation": "<p>The unique identifier of the application.</p>",
          "shape": "EntityName"
        },
        "tags": {
          "documentation": "<p>A list of tags to apply to the application.</p>",
          "shape": "TagMap"
        }
      },
      "required": [
        "definition",
        "engineType",
        "name"
      ],
      "type": "structure"
    },
    "CreateApplicationResponse": {
      "members": {
        "applicationArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the application.</p>",
          "shape": "Arn"
        },
        "applicationId": {
          "documentation": "<p>The unique application identifier.</p>",
          "shape": "Identifier"
        },
        "applicationVersion": {
          "documentation": "<p>The version number of the application.</p>",
          "shape": "Version"
        }
      },
      "required": [
        "applicationArn",
        "applicationId",
        "applicationVersion"
      ],
      "type": "structure"
    },
    "CreateDataSetImportTaskRequest": {
      "members": {
        "applicationId": {
          "documentation": "<p>The unique identifier of the application for which you want to import data sets.</p>",
          "location": "uri",
          "locationName": "applicationId",
          "shape": "Identifier"
        },
        "clientToken": {
          "documentation": "<p> Unique, case-sensitive identifier you provide to ensure the idempotency of the request to create a data set import. The service generates the clientToken when the API call is triggered. The token expires after one hour, so if you retry the API within this timeframe with the same clientToken, you will get the same response. The service also handles deleting the clientToken after it expires. </p>",
          "idempotencyToken": true,
          "shape": "String"
        },
        "importConfig": {
          "documentation": "<p>The data set import task configuration.</p>",
          "shape": "DataSetImportConfig"
        }
      },
      "required": [
        "applicationId",
        "importConfig"
      ],
      "type": "structure"
    },
    "CreateDataSetImportTaskResponse": {
      "members": {
        "taskId": {
          "documentation": "<p>The task identifier. This operation is asynchronous. Use this identifier with the <a>GetDataSetImportTask</a> operation to obtain the status of this task.</p>",
          "shape": "Identifier"
        }
      },
      "required": [
        "taskId"
      ],
      "type": "structure"
    },
    "CreateDeploymentRequest": {
      "members": {
        "applicationId": {
          "documentation": "<p>The application identifier.</p>",
          "location": "uri",
          "locationName": "applicationId",
          "shape": "Identifier"
        },
        "applicationVersion": {
          "documentation": "<p>The version of the application to deploy.</p>",
          "shape": "Version"
        },
        "clientToken": {
          "documentation": "<p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request to create a deployment. The service generates the clientToken when the API call is triggered. The token expires after one hour, so if you retry the API within this timeframe with the same clientToken, you will get the same response. The service also handles deleting the clientToken after it expires. </p>",
          "idempotencyToken": true,
          "shape": "String"
        },
        "environmentId": {
          "documentation": "<p>The identifier of the environment where this application will be deployed.</p>",
          "shape": "Identifier"
        }
      },
      "required": [
        "applicationId",
        "applicationVersion",
        "environmentId"
      ],
      "type": "structure"
    },
    "CreateDeploymentResponse": {
      "members": {
        "deploymentId": {
          "documentation": "<p>The unique identifier of the deployment.</p>",
          "shape": "Identifier"
        }
      },
      "required": [
        "deploymentId"
      ],
      "type": "structure"
    },
    "CreateEnvironmentRequest": {
      "members": {
        "clientToken": {
          "documentation": "<p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request to create an environment. The service generates the clientToken when the API call is triggered. The token expires after one hour, so if you retry the API within this timeframe with the same clientToken, you will get the same response. The service also handles deleting the clientToken after it expires. </p>",
          "idempotencyToken": true,
          "shape": "String"
        },
        "description": {
          "documentation": "<p>The description of the environment.</p>",
          "shape": "EntityDescription"
        },
        "engineType": {
          "documentation": "<p>The engine type for the environment.</p>",
          "shape": "EngineType"
        },
        "engineVersion": {
          "documentation": "<p>The version of the engine type for the environment.</p>",
          "shape": "EngineVersion"
        },
        "highAvailabilityConfig": {
          "documentation": "<p>The details of a high availability configuration for this runtime environment.</p>",
          "shape": "HighAvailabilityConfig"
        },
        "instanceType": {
          "documentation": "<p>The type of instance for the environment.</p>",
          "shape": "String20"
        },
        "name": {
          "documentation": "<p>The unique identifier of the environment.</p>",
          "shape": "EntityName"
        },
        "preferredMaintenanceWindow": {
          "documentation": "<p>Configures a desired maintenance window for the environment. If you do not provide a value, a random system-generated value will be assigned.</p>",
          "shape": "String50"
        },
        "publiclyAccessible": {
          "documentation": "<p>Specifies whether the environment is publicly accessible.</p>",
          "shape": "Boolean"
        },
        "securityGroupIds": {
          "documentation": "<p>The list of security groups for the VPC associated with this environment.</p>",
          "shape": "String50List"
        },
        "storageConfigurations": {
          "documentation": "<p>Optional. The storage configurations for this environment.</p>",
          "shape": "StorageConfigurationList"
        },
        "subnetIds": {
          "documentation": "<p>The list of subnets associated with the VPC for this environment.</p>",
          "shape": "String50List"
        },
        "tags": {
          "documentation": "<p>The tags for the environment.</p>",
          "shape": "TagMap"
        }
      },
      "required": [
        "engineType",
        "instanceType",
        "name"
      ],
      "type": "structure"
    },
    "CreateEnvironmentResponse": {
      "members": {
        "environmentId": {
          "documentation": "<p>The identifier of this environment.</p>",
          "shape": "Identifier"
        }
      },
      "required": [
        "environmentId"
      ],
      "type": "structure"
    },
    "DataSet": {
      "documentation": "<p>Defines a data set.</p>",
      "members": {
        "datasetName": {
          "documentation": "<p>The logical identifier for a specific data set (in mainframe format).</p>",
          "shape": "String"
        },
        "datasetOrg": {
          "documentation": "<p>The type of dataset. Possible values include VSAM, IS, PS, GDG, PO, PS, UNKNOWN etc.</p>",
          "shape": "DatasetOrgAttributes"
        },
        "recordLength": {
          "documentation": "<p>The length of a record.</p>",
          "shape": "RecordLength"
        },
        "relativePath": {
          "documentation": "<p>The relative location of the data set in the database or file system. </p>",
          "shape": "String"
        },
        "storageType": {
          "documentation": "<p>The storage type of the data set: database or file system. For Micro Focus, database corresponds to datastore and file system corresponds to EFS/FSX. For Blu Age, there is no support of file system and database corresponds to Blusam. </p>",
          "shape": "String"
        }
      },
      "required": [
        "datasetName",
        "datasetOrg",
        "recordLength"
      ],
      "type": "structure"
    },
    "DataSetImportConfig": {
      "documentation": "<p>Identifies one or more data sets you want to import with the <a>CreateDataSetImportTask</a> operation.</p>",
      "members": {
        "dataSets": {
          "documentation": "<p>The data sets.</p>",
          "shape": "DataSetImportList"
        },
        "s3Location": {
          "documentation": "<p>The Amazon S3 location of the data sets.</p>",
          "shape": "String2000"
        }
      },
      "type": "structure",
      "union": true
    },
    "DataSetImportItem": {
      "documentation": "<p>Identifies a specific data set to import from an external location.</p>",
      "members": {
        "dataSet": {
          "documentation": "<p>The data set.</p>",
          "shape": "DataSet"
        },
        "externalLocation": {
          "documentation": "<p>The location of the data set.</p>",
          "shape": "ExternalLocation"
        }
      },
      "required": [
        "dataSet",
        "externalLocation"
      ],
      "type": "structure"
    },
    "DataSetImportList": {
      "max": 100,
      "member": {
        "shape": "DataSetImportItem"
      },
      "min": 1,
      "type": "list"
    },
    "DataSetImportSummary": {
      "documentation": "<p>Represents a summary of data set imports.</p>",
      "members": {
        "failed": {
          "documentation": "<p>The number of data set imports that have failed.</p>",
          "shape": "Integer"
        },
        "inProgress": {
          "documentation": "<p>The number of data set imports that are in progress.</p>",
          "shape": "Integer"
        },
        "pending": {
          "documentation": "<p>The number of data set imports that are pending.</p>",
          "shape": "Integer"
        },
        "succeeded": {
          "documentation": "<p>The number of data set imports that have succeeded.</p>",
          "shape": "Integer"
        },
        "total": {
          "documentation": "<p>The total number of data set imports.</p>",
          "shape": "Integer"
        }
      },
      "required": [
        "failed",
        "inProgress",
        "pending",
        "succeeded",
        "total"
      ],
      "type": "structure"
    },
    "DataSetImportTask": {
      "documentation": "<p>Contains information about a data set import task.</p>",
      "members": {
        "status": {
          "documentation": "<p>The status of the data set import task.</p>",
          "shape": "DataSetTaskLifecycle"
        },
        "summary": {
          "documentation": "<p>A summary of the data set import task.</p>",
          "shape": "DataSetImportSummary"
        },
        "taskId": {
          "documentation": "<p>The identifier of the data set import task.</p>",
          "shape": "Identifier"
        }
      },
      "required": [
        "status",
        "summary",
        "taskId"
      ],
      "type": "structure"
    },
    "DataSetImportTaskList": {
      "member": {
        "shape": "DataSetImportTask"
      },
      "type": "list"
    },
    "DataSetSummary": {
      "documentation": "<p>A subset of the possible data set attributes.</p>",
      "members": {
        "creationTime": {
          "documentation": "<p>The timestamp when the data set was created.</p>",
          "shape": "Timestamp"
        },
        "dataSetName": {
          "documentation": "<p>The name of the data set.</p>",
          "shape": "String200"
        },
        "dataSetOrg": {
          "documentation": "<p>The type of data set. Possible values include VSAM, IS, PS, GDG, PO, PS, or unknown.</p>",
          "shape": "String20"
        },
        "format": {
          "documentation": "<p>The format of the data set. </p>",
          "shape": "String20"
        },
        "lastReferencedTime": {
          "documentation": "<p>The last time the data set was referenced.</p>",
          "shape": "Timestamp"
        },
        "lastUpdatedTime": {
          "documentation": "<p>The last time the data set was updated.</p>",
          "shape": "Timestamp"
        }
      },
      "required": [
        "dataSetName"
      ],
      "type": "structure"
    },
    "DataSetTaskLifecycle": {
      "enum": [
        "Creating",
        "Running",
        "Completed"
      ],
      "type": "string"
    },
    "DataSetsSummaryList": {
      "member": {
        "shape": "DataSetSummary"
      },
      "type": "list"
    },
    "DatasetDetailOrgAttributes": {
      "documentation": "<p>Additional details about the data set. Different attributes correspond to different data set organizations. The values are populated based on datasetOrg, storageType and backend (Blu Age or Micro Focus).</p>",
      "members": {
        "gdg": {
          "documentation": "<p>The generation data group of the data set.</p>",
          "shape": "GdgDetailAttributes"
        },
        "vsam": {
          "documentation": "<p>The details of a VSAM data set.</p>",
          "shape": "VsamDetailAttributes"
        }
      },
      "type": "structure",
      "union": true
    },
    "DatasetOrgAttributes": {
      "documentation": "<p>Additional details about the data set. Different attributes correspond to different data set organizations. The values are populated based on datasetOrg, storageType and backend (Blu Age or Micro Focus).</p>",
      "members": {
        "gdg": {
          "documentation": "<p>The generation data group of the data set.</p>",
          "shape": "GdgAttributes"
        },
        "vsam": {
          "documentation": "<p>The details of a VSAM data set.</p>",
          "shape": "VsamAttributes"
        }
      },
      "type": "structure",
      "union": true
    },
    "Definition": {
      "documentation": "<p>The application definition for a particular application. </p>",
      "members": {
        "content": {
          "documentation": "<p>The content of the application definition. This is a JSON object that contains the resource configuration/definitions that identify an application.</p>",
          "shape": "StringFree65000"
        },
        "s3Location": {
          "documentation": "<p>The S3 bucket that contains the application definition.</p>",
          "shape": "String2000"
        }
      },
      "type": "structure",
      "union": true
    },
    "DeleteApplicationFromEnvironmentRequest": {
      "members": {
        "applicationId": {
          "documentation": "<p>The unique identifier of the application you want to delete.</p>",
          "location": "uri",
          "locationName": "applicationId",
          "shape": "Identifier"
        },
        "environmentId": {
          "documentation": "<p>The unique identifier of the runtime environment where the application was previously deployed.</p>",
          "location": "uri",
          "locationName": "environmentId",
          "shape": "Identifier"
        }
      },
      "required": [
        "applicationId",
        "environmentId"
      ],
      "type": "structure"
    },
    "DeleteApplicationFromEnvironmentResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteApplicationRequest": {
      "members": {
        "applicationId": {
          "documentation": "<p>The unique identifier of the application you want to delete.</p>",
          "location": "uri",
          "locationName": "applicationId",
          "shape": "Identifier"
        }
      },
      "required": [
        "applicationId"
      ],
      "type": "structure"
    },
    "DeleteApplicationResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteEnvironmentRequest": {
      "members": {
        "environmentId": {
          "documentation": "<p>The unique identifier of the runtime environment you want to delete.</p>",
          "location": "uri",
          "locationName": "environmentId",
          "shape": "Identifier"
        }
      },
      "required": [
        "environmentId"
      ],
      "type": "structure"
    },
    "DeleteEnvironmentResponse": {
      "members": {},
      "type": "structure"
    },
    "DeployedVersionSummary": {
      "documentation": "<p>Contains a summary of a deployed application.</p>",
      "members": {
        "applicationVersion": {
          "documentation": "<p>The version of the deployed application.</p>",
          "shape": "Version"
        },
        "status": {
          "documentation": "<p>The status of the deployment.</p>",
          "shape": "DeploymentLifecycle"
        },
        "statusReason": {
          "documentation": "<p>The reason for the reported status.</p>",
          "shape": "String"
        }
      },
      "required": [
        "applicationVersion",
        "status"
      ],
      "type": "structure"
    },
    "DeploymentLifecycle": {
      "enum": [
        "Deploying",
        "Succeeded",
        "Failed"
      ],
      "type": "string"
    },
    "DeploymentList": {
      "member": {
        "shape": "DeploymentSummary"
      },
      "type": "list"
    },
    "DeploymentSummary": {
      "documentation": "<p>A subset of information about a specific deployment.</p>",
      "members": {
        "applicationId": {
          "documentation": "<p>The unique identifier of the application.</p>",
          "shape": "Identifier"
        },
        "applicationVersion": {
          "documentation": "<p>The version of the application.</p>",
          "shape": "Version"
        },
        "creationTime": {
          "documentation": "<p>The timestamp when the deployment was created.</p>",
          "shape": "Timestamp"
        },
        "deploymentId": {
          "documentation": "<p>The unique identifier of the deployment.</p>",
          "shape": "Identifier"
        },
        "environmentId": {
          "documentation": "<p>The unique identifier of the environment.</p>",
          "shape": "Identifier"
        },
        "status": {
          "documentation": "<p>The current status of the deployment.</p>",
          "shape": "DeploymentLifecycle"
        },
        "statusReason": {
          "documentation": "<p>The reason for the reported status.</p>",
          "shape": "String"
        }
      },
      "required": [
        "applicationId",
        "applicationVersion",
        "creationTime",
        "deploymentId",
        "environmentId",
        "status"
      ],
      "type": "structure"
    },
    "EfsStorageConfiguration": {
      "documentation": "<p>Defines the storage configuration for an Amazon EFS file system.</p>",
      "members": {
        "fileSystemId": {
          "documentation": "<p>The file system identifier.</p>",
          "locationName": "file-system-id",
          "shape": "String200"
        },
        "mountPoint": {
          "documentation": "<p>The mount point for the file system.</p>",
          "locationName": "mount-point",
          "shape": "String200"
        }
      },
      "required": [
        "fileSystemId",
        "mountPoint"
      ],
      "type": "structure"
    },
    "EngineType": {
      "enum": [
        "microfocus",
        "bluage"
      ],
      "type": "string"
    },
    "EngineVersion": {
      "pattern": "^\\S{1,10}$",
      "type": "string"
    },
    "EngineVersionsSummary": {
      "documentation": "<p>A subset of information about the engine version for a specific application.</p>",
      "members": {
        "engineType": {
          "documentation": "<p>The type of target platform for the application.</p>",
          "shape": "String"
        },
        "engineVersion": {
          "documentation": "<p>The version of the engine type used by the application.</p>",
          "shape": "String"
        }
      },
      "required": [
        "engineType",
        "engineVersion"
      ],
      "type": "structure"
    },
    "EngineVersionsSummaryList": {
      "member": {
        "shape": "EngineVersionsSummary"
      },
      "type": "list"
    },
    "EntityDescription": {
      "max": 500,
      "min": 0,
      "type": "string"
    },
    "EntityName": {
      "pattern": "^[A-Za-z0-9][A-Za-z0-9_\\-]{1,59}$",
      "type": "string"
    },
    "EntityNameList": {
      "max": 10,
      "member": {
        "shape": "EntityName"
      },
      "min": 1,
      "type": "list"
    },
    "EnvironmentLifecycle": {
      "enum": [
        "Creating",
        "Available",
        "Deleting",
        "Failed"
      ],
      "type": "string"
    },
    "EnvironmentSummary": {
      "documentation": "<p>Contains a subset of the possible environment attributes. Used in the environment list.</p>",
      "members": {
        "creationTime": {
          "documentation": "<p>The timestamp when the environment was created.</p>",
          "shape": "Timestamp"
        },
        "engineType": {
          "documentation": "<p>The target platform for the environment.</p>",
          "shape": "EngineType"
        },
        "engineVersion": {
          "documentation": "<p>The version of the runtime engine.</p>",
          "shape": "EngineVersion"
        },
        "environmentArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of a particular runtime environment.</p>",
          "shape": "Arn"
        },
        "environmentId": {
          "documentation": "<p>The unique identifier of a particular runtime environment.</p>",
          "shape": "Identifier"
        },
        "instanceType": {
          "documentation": "<p>The instance type of the environment.</p>",
          "shape": "String20"
        },
        "name": {
          "documentation": "<p>The name of the environment.</p>",
          "shape": "EntityName"
        },
        "status": {
          "documentation": "<p>The status of the environment</p>",
          "shape": "EnvironmentLifecycle"
        }
      },
      "required": [
        "creationTime",
        "engineType",
        "engineVersion",
        "environmentArn",
        "environmentId",
        "instanceType",
        "name",
        "status"
      ],
      "type": "structure"
    },
    "EnvironmentSummaryList": {
      "member": {
        "shape": "EnvironmentSummary"
      },
      "type": "list"
    },
    "ExternalLocation": {
      "documentation": "<p>Defines an external storage location.</p>",
      "members": {
        "s3Location": {
          "documentation": "<p>The URI of the Amazon S3 bucket.</p>",
          "shape": "String2000"
        }
      },
      "type": "structure",
      "union": true
    },
    "FileBatchJobDefinition": {
      "documentation": "<p>A file containing a batch job definition.</p>",
      "members": {
        "fileName": {
          "documentation": "<p>The name of the file containing the batch job definition.</p>",
          "shape": "String"
        },
        "folderPath": {
          "documentation": "<p>The path to the file containing the batch job definition.</p>",
          "shape": "String"
        }
      },
      "required": [
        "fileName"
      ],
      "type": "structure"
    },
    "FileBatchJobIdentifier": {
      "documentation": "<p>A batch job identifier in which the batch job to run is identified by the file name and the relative path to the file name.</p>",
      "members": {
        "fileName": {
          "documentation": "<p>The file name for the batch job identifier.</p>",
          "shape": "String"
        },
        "folderPath": {
          "documentation": "<p>The relative path to the file name for the batch job identifier.</p>",
          "shape": "String"
        }
      },
      "required": [
        "fileName"
      ],
      "type": "structure"
    },
    "FsxStorageConfiguration": {
      "documentation": "<p>Defines the storage configuration for an Amazon FSx file system.</p>",
      "members": {
        "fileSystemId": {
          "documentation": "<p>The file system identifier.</p>",
          "locationName": "file-system-id",
          "shape": "String200"
        },
        "mountPoint": {
          "documentation": "<p>The mount point for the file system.</p>",
          "locationName": "mount-point",
          "shape": "String200"
        }
      },
      "required": [
        "fileSystemId",
        "mountPoint"
      ],
      "type": "structure"
    },
    "GdgAttributes": {
      "documentation": "<p>The required attributes for a generation data group data set. A generation data set is one of a collection of successive, historically related, catalogued data sets that together are known as a generation data group (GDG). Use this structure when you want to import a GDG. For more information on GDG, see <a href=\"https://www.ibm.com/docs/en/zos/2.3.0?topic=guide-generation-data-sets\">Generation data sets</a>.</p>",
      "members": {
        "limit": {
          "documentation": "<p>The maximum number of generation data sets, up to 255, in a GDG.</p>",
          "shape": "Integer"
        },
        "rollDisposition": {
          "documentation": "<p>The disposition of the data set in the catalog.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "GdgDetailAttributes": {
      "documentation": "<p>The required attributes for a generation data group data set. A generation data set is one of a collection of successive, historically related, catalogued data sets that together are known as a generation data group (GDG). Use this structure when you want to import a GDG. For more information on GDG, see <a href=\"https://www.ibm.com/docs/en/zos/2.3.0?topic=guide-generation-data-sets\">Generation data sets</a>.</p>",
      "members": {
        "limit": {
          "documentation": "<p>The maximum number of generation data sets, up to 255, in a GDG.</p>",
          "shape": "Integer"
        },
        "rollDisposition": {
          "documentation": "<p>The disposition of the data set in the catalog.</p>",
          "shape": "String50"
        }
      },
      "type": "structure"
    },
    "GetApplicationRequest": {
      "members": {
        "applicationId": {
          "documentation": "<p>The identifier of the application.</p>",
          "location": "uri",
          "locationName": "applicationId",
          "shape": "Identifier"
        }
      },
      "required": [
        "applicationId"
      ],
      "type": "structure"
    },
    "GetApplicationResponse": {
      "members": {
        "applicationArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the application.</p>",
          "shape": "Arn"
        },
        "applicationId": {
          "documentation": "<p>The identifier of the application.</p>",
          "shape": "Identifier"
        },
        "creationTime": {
          "documentation": "<p>The timestamp when this application was created.</p>",
          "shape": "Timestamp"
        },
        "deployedVersion": {
          "documentation": "<p>The version of the application that is deployed.</p>",
          "shape": "DeployedVersionSummary"
        },
        "description": {
          "documentation": "<p>The description of the application.</p>",
          "shape": "EntityDescription"
        },
        "engineType": {
          "documentation": "<p>The type of the target platform for the application.</p>",
          "shape": "EngineType"
        },
        "environmentId": {
          "documentation": "<p>The identifier of the environment where the application will be deployed.</p>",
          "shape": "Identifier"
        },
        "lastStartTime": {
          "documentation": "<p>The timestamp when the application was last started. Null until the application has started running for the first time.</p>",
          "shape": "Timestamp"
        },
        "latestVersion": {
          "documentation": "<p>The latest version of the application.</p>",
          "shape": "ApplicationVersionSummary"
        },
        "listenerArns": {
          "documentation": "<p>The Amazon Resource Name (ARN) for the network load balancer listener created in your Amazon Web Services account. Amazon Web Services Mainframe Modernization creates this listener on your behalf the first time you deploy an application.</p>",
          "shape": "ArnList"
        },
        "listenerPorts": {
          "documentation": "<p>The port associated with the network load balancer listener created in your Amazon Web Services account.</p>",
          "shape": "PortList"
        },
        "loadBalancerDnsName": {
          "documentation": "<p>The public DNS name of the load balancer created in your Amazon Web Services account.</p>",
          "shape": "String100"
        },
        "logGroups": {
          "documentation": "<p>The list of log summaries. Each log summary includes the log type as well as the log group identifier. These are CloudWatch logs. The Amazon Web Services Mainframe Modernization application log is pushed to CloudWatch under the customer's account.</p>",
          "shape": "LogGroupSummaries"
        },
        "name": {
          "documentation": "<p>The unique identifier of the application.</p>",
          "shape": "EntityName"
        },
        "status": {
          "documentation": "<p>The status of the application.</p>",
          "shape": "ApplicationLifecycle"
        },
        "statusReason": {
          "documentation": "<p>The reason for the reported status.</p>",
          "shape": "String"
        },
        "tags": {
          "documentation": "<p>A list of tags associated with the application.</p>",
          "shape": "TagMap"
        },
        "targetGroupArns": {
          "documentation": "<p>Returns the Amazon Resource Names (ARNs) of the target groups that are attached to the network load balancer.</p>",
          "shape": "ArnList"
        }
      },
      "required": [
        "applicationArn",
        "applicationId",
        "creationTime",
        "engineType",
        "latestVersion",
        "name",
        "status"
      ],
      "type": "structure"
    },
    "GetApplicationVersionRequest": {
      "members": {
        "applicationId": {
          "documentation": "<p>The unique identifier of the application.</p>",
          "location": "uri",
          "locationName": "applicationId",
          "shape": "Identifier"
        },
        "applicationVersion": {
          "documentation": "<p>The specific version of the application.</p>",
          "location": "uri",
          "locationName": "applicationVersion",
          "shape": "Version"
        }
      },
      "required": [
        "applicationId",
        "applicationVersion"
      ],
      "type": "structure"
    },
    "GetApplicationVersionResponse": {
      "members": {
        "applicationVersion": {
          "documentation": "<p>The specific version of the application.</p>",
          "shape": "Version"
        },
        "creationTime": {
          "documentation": "<p>The timestamp when the application version was created.</p>",
          "shape": "Timestamp"
        },
        "definitionContent": {
          "documentation": "<p>The content of the application definition. This is a JSON object that contains the resource configuration/definitions that identify an application.</p>",
          "shape": "StringFree65000"
        },
        "description": {
          "documentation": "<p>The application description.</p>",
          "shape": "EntityDescription"
        },
        "name": {
          "documentation": "<p>The name of the application version.</p>",
          "shape": "EntityName"
        },
        "status": {
          "documentation": "<p>The status of the application version.</p>",
          "shape": "ApplicationVersionLifecycle"
        },
        "statusReason": {
          "documentation": "<p>The reason for the reported status.</p>",
          "shape": "String"
        }
      },
      "required": [
        "applicationVersion",
        "creationTime",
        "definitionContent",
        "name",
        "status"
      ],
      "type": "structure"
    },
    "GetBatchJobExecutionRequest": {
      "members": {
        "applicationId": {
          "documentation": "<p>The identifier of the application.</p>",
          "location": "uri",
          "locationName": "applicationId",
          "shape": "Identifier"
        },
        "executionId": {
          "documentation": "<p>The unique identifier of the batch job execution.</p>",
          "location": "uri",
          "locationName": "executionId",
          "shape": "Identifier"
        }
      },
      "required": [
        "applicationId",
        "executionId"
      ],
      "type": "structure"
    },
    "GetBatchJobExecutionResponse": {
      "members": {
        "applicationId": {
          "documentation": "<p>The identifier of the application.</p>",
          "shape": "Identifier"
        },
        "endTime": {
          "documentation": "<p>The timestamp when the batch job execution ended.</p>",
          "shape": "Timestamp"
        },
        "executionId": {
          "documentation": "<p>The unique identifier for this batch job execution.</p>",
          "shape": "Identifier"
        },
        "jobId": {
          "documentation": "<p>The unique identifier for this batch job.</p>",
          "shape": "String100"
        },
        "jobName": {
          "documentation": "<p>The name of this batch job.</p>",
          "shape": "String100"
        },
        "jobType": {
          "documentation": "<p>The type of job.</p>",
          "shape": "BatchJobType"
        },
        "jobUser": {
          "documentation": "<p>The user for the job.</p>",
          "shape": "String100"
        },
        "startTime": {
          "documentation": "<p>The timestamp when the batch job execution started.</p>",
          "shape": "Timestamp"
        },
        "status": {
          "documentation": "<p>The status of the batch job execution.</p>",
          "shape": "BatchJobExecutionStatus"
        },
        "statusReason": {
          "documentation": "<p>The reason for the reported status.</p>",
          "shape": "String"
        }
      },
      "required": [
        "applicationId",
        "executionId",
        "startTime",
        "status"
      ],
      "type": "structure"
    },
    "GetDataSetDetailsRequest": {
      "members": {
        "applicationId": {
          "documentation": "<p>The unique identifier of the application that this data set is associated with.</p>",
          "location": "uri",
          "locationName": "applicationId",
          "shape": "Identifier"
        },
        "dataSetName": {
          "documentation": "<p>The name of the data set.</p>",
          "location": "uri",
          "locationName": "dataSetName",
          "shape": "String200"
        }
      },
      "required": [
        "applicationId",
        "dataSetName"
      ],
      "type": "structure"
    },
    "GetDataSetDetailsResponse": {
      "members": {
        "blocksize": {
          "box": true,
          "documentation": "<p>The size of the block on disk. </p>",
          "shape": "Integer"
        },
        "creationTime": {
          "documentation": "<p>The timestamp when the data set was created.</p>",
          "shape": "Timestamp"
        },
        "dataSetName": {
          "documentation": "<p>The name of the data set.</p>",
          "shape": "String200"
        },
        "dataSetOrg": {
          "documentation": "<p>The type of data set. Possible values include VSAM, IS, PS, GDG, PO, PS, or unknown.</p>",
          "shape": "DatasetDetailOrgAttributes"
        },
        "lastReferencedTime": {
          "documentation": "<p>The last time the data set was referenced.</p>",
          "shape": "Timestamp"
        },
        "lastUpdatedTime": {
          "documentation": "<p>The last time the data set was updated.</p>",
          "shape": "Timestamp"
        },
        "location": {
          "documentation": "<p>The locaion where the data set is stored.</p>",
          "shape": "String2000"
        },
        "recordLength": {
          "box": true,
          "documentation": "<p>The length of records in the data set.</p>",
          "shape": "Integer"
        }
      },
      "required": [
        "dataSetName"
      ],
      "type": "structure"
    },
    "GetDataSetImportTaskRequest": {
      "members": {
        "applicationId": {
          "documentation": "<p>The application identifier.</p>",
          "location": "uri",
          "locationName": "applicationId",
          "shape": "Identifier"
        },
        "taskId": {
          "documentation": "<p>The task identifier returned by the <a>CreateDataSetImportTask</a> operation. </p>",
          "location": "uri",
          "locationName": "taskId",
          "shape": "Identifier"
        }
      },
      "required": [
        "applicationId",
        "taskId"
      ],
      "type": "structure"
    },
    "GetDataSetImportTaskResponse": {
      "members": {
        "status": {
          "documentation": "<p>The status of the task.</p>",
          "shape": "DataSetTaskLifecycle"
        },
        "summary": {
          "documentation": "<p>A summary of the status of the task.</p>",
          "shape": "DataSetImportSummary"
        },
        "taskId": {
          "documentation": "<p>The task identifier.</p>",
          "shape": "Identifier"
        }
      },
      "required": [
        "status",
        "taskId"
      ],
      "type": "structure"
    },
    "GetDeploymentRequest": {
      "members": {
        "applicationId": {
          "documentation": "<p>The unique identifier of the application.</p>",
          "location": "uri",
          "locationName": "applicationId",
          "shape": "Identifier"
        },
        "deploymentId": {
          "documentation": "<p>The unique identifier for the deployment.</p>",
          "location": "uri",
          "locationName": "deploymentId",
          "shape": "Identifier"
        }
      },
      "required": [
        "applicationId",
        "deploymentId"
      ],
      "type": "structure"
    },
    "GetDeploymentResponse": {
      "members": {
        "applicationId": {
          "documentation": "<p>The unique identifier of the application.</p>",
          "shape": "Identifier"
        },
        "applicationVersion": {
          "documentation": "<p>The application version.</p>",
          "shape": "Version"
        },
        "creationTime": {
          "documentation": "<p>The timestamp when the deployment was created.</p>",
          "shape": "Timestamp"
        },
        "deploymentId": {
          "documentation": "<p>The unique identifier of the deployment.</p>",
          "shape": "Identifier"
        },
        "environmentId": {
          "documentation": "<p>The unique identifier of the runtime environment.</p>",
          "shape": "Identifier"
        },
        "status": {
          "documentation": "<p>The status of the deployment.</p>",
          "shape": "DeploymentLifecycle"
        },
        "statusReason": {
          "documentation": "<p>The reason for the reported status.</p>",
          "shape": "String"
        }
      },
      "required": [
        "applicationId",
        "applicationVersion",
        "creationTime",
        "deploymentId",
        "environmentId",
        "status"
      ],
      "type": "structure"
    },
    "GetEnvironmentRequest": {
      "members": {
        "environmentId": {
          "documentation": "<p>The unique identifier of the runtime environment.</p>",
          "location": "uri",
          "locationName": "environmentId",
          "shape": "Identifier"
        }
      },
      "required": [
        "environmentId"
      ],
      "type": "structure"
    },
    "GetEnvironmentResponse": {
      "members": {
        "actualCapacity": {
          "documentation": "<p>The number of instances included in the runtime environment. A standalone runtime environment has a maxiumum of one instance. Currently, a high availability runtime environment has a maximum of two instances. </p>",
          "shape": "CapacityValue"
        },
        "creationTime": {
          "documentation": "<p>The timestamp when the runtime environment was created.</p>",
          "shape": "Timestamp"
        },
        "description": {
          "documentation": "<p>The description of the runtime environment.</p>",
          "shape": "EntityDescription"
        },
        "engineType": {
          "documentation": "<p>The target platform for the runtime environment.</p>",
          "shape": "EngineType"
        },
        "engineVersion": {
          "documentation": "<p>The version of the runtime engine.</p>",
          "shape": "EngineVersion"
        },
        "environmentArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the runtime environment.</p>",
          "shape": "Arn"
        },
        "environmentId": {
          "documentation": "<p>The unique identifier of the runtime environment.</p>",
          "shape": "Identifier"
        },
        "highAvailabilityConfig": {
          "documentation": "<p>The desired capacity of the high availability configuration for the runtime environment.</p>",
          "shape": "HighAvailabilityConfig"
        },
        "instanceType": {
          "documentation": "<p>The type of instance underlying the runtime environment.</p>",
          "shape": "String20"
        },
        "loadBalancerArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) for the load balancer used with the runtime environment.</p>",
          "shape": "String"
        },
        "name": {
          "documentation": "<p>The name of the runtime environment. </p>",
          "shape": "EntityName"
        },
        "pendingMaintenance": {
          "documentation": "<p>Indicates the pending maintenance scheduled on this environment.</p>",
          "shape": "PendingMaintenance"
        },
        "preferredMaintenanceWindow": {
          "documentation": "<p>Configures a desired maintenance window for the environment. If you do not provide a value, a random system-generated value will be assigned.</p>",
          "shape": "String"
        },
        "publiclyAccessible": {
          "documentation": "<p>Whether applications running in this runtime environment are publicly accessible. </p>",
          "shape": "Boolean"
        },
        "securityGroupIds": {
          "documentation": "<p>The unique identifiers of the security groups assigned to this runtime environment.</p>",
          "shape": "String50List"
        },
        "status": {
          "documentation": "<p>The status of the runtime environment.</p>",
          "shape": "EnvironmentLifecycle"
        },
        "statusReason": {
          "documentation": "<p>The reason for the reported status.</p>",
          "shape": "String"
        },
        "storageConfigurations": {
          "documentation": "<p>The storage configurations defined for the runtime environment.</p>",
          "shape": "StorageConfigurationList"
        },
        "subnetIds": {
          "documentation": "<p>The unique identifiers of the subnets assigned to this runtime environment.</p>",
          "shape": "String50List"
        },
        "tags": {
          "documentation": "<p>The tags defined for this runtime environment.</p>",
          "shape": "TagMap"
        },
        "vpcId": {
          "documentation": "<p>The unique identifier for the VPC used with this runtime environment.</p>",
          "shape": "String50"
        }
      },
      "required": [
        "creationTime",
        "engineType",
        "engineVersion",
        "environmentArn",
        "environmentId",
        "instanceType",
        "name",
        "securityGroupIds",
        "status",
        "subnetIds",
        "vpcId"
      ],
      "type": "structure"
    },
    "HighAvailabilityConfig": {
      "documentation": "<p>Defines the details of a high availability configuration.</p>",
      "members": {
        "desiredCapacity": {
          "documentation": "<p>The number of instances in a high availability configuration.</p>",
          "shape": "CapacityValue"
        }
      },
      "required": [
        "desiredCapacity"
      ],
      "type": "structure"
    },
    "Identifier": {
      "pattern": "^\\S{1,80}$",
      "type": "string"
    },
    "IdentifierList": {
      "max": 10,
      "member": {
        "shape": "Identifier"
      },
      "min": 1,
      "type": "list"
    },
    "Integer": {
      "type": "integer"
    },
    "InternalServerException": {
      "documentation": "<p>An unexpected error occurred during the processing of the request.</p>",
      "error": {
        "httpStatusCode": 500
      },
      "exception": true,
      "fault": true,
      "members": {
        "message": {
          "shape": "String"
        },
        "retryAfterSeconds": {
          "documentation": "<p>The number of seconds to wait before retrying the request.</p>",
          "location": "header",
          "locationName": "Retry-After",
          "shape": "Integer"
        }
      },
      "required": [
        "message"
      ],
      "retryable": {
        "throttling": false
      },
      "type": "structure"
    },
    "ListApplicationVersionsRequest": {
      "members": {
        "applicationId": {
          "documentation": "<p>The unique identifier of the application.</p>",
          "location": "uri",
          "locationName": "applicationId",
          "shape": "Identifier"
        },
        "maxResults": {
          "box": true,
          "documentation": "<p>The maximum number of application versions to return.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>A pagination token returned from a previous call to this operation. This specifies the next item to return. To return to the beginning of the list, exclude this parameter.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        }
      },
      "required": [
        "applicationId"
      ],
      "type": "structure"
    },
    "ListApplicationVersionsResponse": {
      "members": {
        "applicationVersions": {
          "documentation": "<p>The list of application versions.</p>",
          "shape": "ApplicationVersionSummaryList"
        },
        "nextToken": {
          "documentation": "<p>If there are more items to return, this contains a token that is passed to a subsequent call to this operation to retrieve the next set of items.</p>",
          "shape": "NextToken"
        }
      },
      "required": [
        "applicationVersions"
      ],
      "type": "structure"
    },
    "ListApplicationsRequest": {
      "members": {
        "environmentId": {
          "documentation": "<p>The unique identifier of the runtime environment where the applications are deployed.</p>",
          "location": "querystring",
          "locationName": "environmentId",
          "shape": "Identifier"
        },
        "maxResults": {
          "box": true,
          "documentation": "<p>The maximum number of applications to return.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "names": {
          "documentation": "<p>The names of the applications.</p>",
          "location": "querystring",
          "locationName": "names",
          "shape": "EntityNameList"
        },
        "nextToken": {
          "documentation": "<p>A pagination token to control the number of applications displayed in the list.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListApplicationsResponse": {
      "members": {
        "applications": {
          "documentation": "<p>Returns a list of summary details for all the applications in an environment.</p>",
          "shape": "ApplicationSummaryList"
        },
        "nextToken": {
          "documentation": "<p>A pagination token that's returned when the response doesn't contain all applications.</p>",
          "shape": "NextToken"
        }
      },
      "required": [
        "applications"
      ],
      "type": "structure"
    },
    "ListBatchJobDefinitionsRequest": {
      "members": {
        "applicationId": {
          "documentation": "<p>The identifier of the application.</p>",
          "location": "uri",
          "locationName": "applicationId",
          "shape": "Identifier"
        },
        "maxResults": {
          "box": true,
          "documentation": "<p>The maximum number of batch job definitions to return.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>A pagination token returned from a previous call to this operation. This specifies the next item to return. To return to the beginning of the list, exclude this parameter.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        },
        "prefix": {
          "documentation": "<p>If the batch job definition is a FileBatchJobDefinition, the prefix allows you to search on the file names of FileBatchJobDefinitions.</p>",
          "location": "querystring",
          "locationName": "prefix",
          "shape": "String"
        }
      },
      "required": [
        "applicationId"
      ],
      "type": "structure"
    },
    "ListBatchJobDefinitionsResponse": {
      "members": {
        "batchJobDefinitions": {
          "documentation": "<p>The list of batch job definitions.</p>",
          "shape": "BatchJobDefinitions"
        },
        "nextToken": {
          "documentation": "<p>If there are more items to return, this contains a token that is passed to a subsequent call to this operation to retrieve the next set of items.</p>",
          "shape": "NextToken"
        }
      },
      "required": [
        "batchJobDefinitions"
      ],
      "type": "structure"
    },
    "ListBatchJobExecutionsRequest": {
      "members": {
        "applicationId": {
          "documentation": "<p>The unique identifier of the application.</p>",
          "location": "uri",
          "locationName": "applicationId",
          "shape": "Identifier"
        },
        "executionIds": {
          "documentation": "<p>The unique identifier of each batch job execution.</p>",
          "location": "querystring",
          "locationName": "executionIds",
          "shape": "IdentifierList"
        },
        "jobName": {
          "documentation": "<p>The name of each batch job execution.</p>",
          "location": "querystring",
          "locationName": "jobName",
          "shape": "String100"
        },
        "maxResults": {
          "box": true,
          "documentation": "<p>The maximum number of batch job executions to return.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>A pagination token to control the number of batch job executions displayed in the list.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        },
        "startedAfter": {
          "documentation": "<p>The time after which the batch job executions started.</p>",
          "location": "querystring",
          "locationName": "startedAfter",
          "shape": "Timestamp"
        },
        "startedBefore": {
          "documentation": "<p>The time before the batch job executions started.</p>",
          "location": "querystring",
          "locationName": "startedBefore",
          "shape": "Timestamp"
        },
        "status": {
          "documentation": "<p>The status of the batch job executions.</p>",
          "location": "querystring",
          "locationName": "status",
          "shape": "BatchJobExecutionStatus"
        }
      },
      "required": [
        "applicationId"
      ],
      "type": "structure"
    },
    "ListBatchJobExecutionsResponse": {
      "members": {
        "batchJobExecutions": {
          "documentation": "<p>Returns a list of batch job executions for an application.</p>",
          "shape": "BatchJobExecutionSummaryList"
        },
        "nextToken": {
          "documentation": "<p>A pagination token that's returned when the response doesn't contain all batch job executions.</p>",
          "shape": "NextToken"
        }
      },
      "required": [
        "batchJobExecutions"
      ],
      "type": "structure"
    },
    "ListDataSetImportHistoryRequest": {
      "members": {
        "applicationId": {
          "documentation": "<p>The unique identifier of the application.</p>",
          "location": "uri",
          "locationName": "applicationId",
          "shape": "Identifier"
        },
        "maxResults": {
          "box": true,
          "documentation": "<p>The maximum number of objects to return.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>A pagination token returned from a previous call to this operation. This specifies the next item to return. To return to the beginning of the list, exclude this parameter.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        }
      },
      "required": [
        "applicationId"
      ],
      "type": "structure"
    },
    "ListDataSetImportHistoryResponse": {
      "members": {
        "dataSetImportTasks": {
          "documentation": "<p>The data set import tasks.</p>",
          "shape": "DataSetImportTaskList"
        },
        "nextToken": {
          "documentation": "<p>If there are more items to return, this contains a token that is passed to a subsequent call to this operation to retrieve the next set of items.</p>",
          "shape": "NextToken"
        }
      },
      "required": [
        "dataSetImportTasks"
      ],
      "type": "structure"
    },
    "ListDataSetsRequest": {
      "members": {
        "applicationId": {
          "documentation": "<p>The unique identifier of the application for which you want to list the associated data sets.</p>",
          "location": "uri",
          "locationName": "applicationId",
          "shape": "Identifier"
        },
        "maxResults": {
          "box": true,
          "documentation": "<p>The maximum number of objects to return.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>A pagination token returned from a previous call to this operation. This specifies the next item to return. To return to the beginning of the list, exclude this parameter.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        },
        "prefix": {
          "documentation": "<p>The prefix of the data set name, which you can use to filter the list of data sets.</p>",
          "location": "querystring",
          "locationName": "prefix",
          "shape": "String200"
        }
      },
      "required": [
        "applicationId"
      ],
      "type": "structure"
    },
    "ListDataSetsResponse": {
      "members": {
        "dataSets": {
          "documentation": "<p>The list of data sets, containing ionformation including the creating time, the data set name, the data set organization, the data set format, and the last time the data set was referenced or updated.</p>",
          "shape": "DataSetsSummaryList"
        },
        "nextToken": {
          "documentation": "<p>If there are more items to return, this contains a token that is passed to a subsequent call to this operation to retrieve the next set of items.</p>",
          "shape": "NextToken"
        }
      },
      "required": [
        "dataSets"
      ],
      "type": "structure"
    },
    "ListDeploymentsRequest": {
      "members": {
        "applicationId": {
          "documentation": "<p>The application identifier.</p>",
          "location": "uri",
          "locationName": "applicationId",
          "shape": "Identifier"
        },
        "maxResults": {
          "box": true,
          "documentation": "<p>The maximum number of objects to return.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>A pagination token returned from a previous call to this operation. This specifies the next item to return. To return to the beginning of the list, exclude this parameter.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        }
      },
      "required": [
        "applicationId"
      ],
      "type": "structure"
    },
    "ListDeploymentsResponse": {
      "members": {
        "deployments": {
          "documentation": "<p>The list of deployments that is returned.</p>",
          "shape": "DeploymentList"
        },
        "nextToken": {
          "documentation": "<p>If there are more items to return, this contains a token that is passed to a subsequent call to this operation to retrieve the next set of items.</p>",
          "shape": "NextToken"
        }
      },
      "required": [
        "deployments"
      ],
      "type": "structure"
    },
    "ListEngineVersionsRequest": {
      "members": {
        "engineType": {
          "documentation": "<p>The type of target platform.</p>",
          "location": "querystring",
          "locationName": "engineType",
          "shape": "EngineType"
        },
        "maxResults": {
          "box": true,
          "documentation": "<p>The maximum number of objects to return.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "nextToken": {
          "documentation": "<p>A pagination token returned from a previous call to this operation. This specifies the next item to return. To return to the beginning of the list, exclude this parameter.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListEngineVersionsResponse": {
      "members": {
        "engineVersions": {
          "documentation": "<p>Returns the engine versions.</p>",
          "shape": "EngineVersionsSummaryList"
        },
        "nextToken": {
          "documentation": "<p>If there are more items to return, this contains a token that is passed to a subsequent call to this operation to retrieve the next set of items.</p>",
          "shape": "NextToken"
        }
      },
      "required": [
        "engineVersions"
      ],
      "type": "structure"
    },
    "ListEnvironmentsRequest": {
      "members": {
        "engineType": {
          "documentation": "<p>The engine type for the environment.</p>",
          "location": "querystring",
          "locationName": "engineType",
          "shape": "EngineType"
        },
        "maxResults": {
          "box": true,
          "documentation": "<p>The maximum number of environments to return.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "names": {
          "documentation": "<p>The name of the environment.</p>",
          "location": "querystring",
          "locationName": "names",
          "shape": "EntityNameList"
        },
        "nextToken": {
          "documentation": "<p>A pagination token to control the number of environments displayed in the list.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListEnvironmentsResponse": {
      "members": {
        "environments": {
          "documentation": "<p>Returns a list of summary details for all the environments in your account. </p>",
          "shape": "EnvironmentSummaryList"
        },
        "nextToken": {
          "documentation": "<p>A pagination token that's returned when the response doesn't contain all the environments.</p>",
          "shape": "NextToken"
        }
      },
      "required": [
        "environments"
      ],
      "type": "structure"
    },
    "ListTagsForResourceRequest": {
      "members": {
        "resourceArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the resource.</p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "Arn"
        }
      },
      "required": [
        "resourceArn"
      ],
      "type": "structure"
    },
    "ListTagsForResourceResponse": {
      "members": {
        "tags": {
          "documentation": "<p>The tags for the resource.</p>",
          "shape": "TagMap"
        }
      },
      "required": [
        "tags"
      ],
      "type": "structure"
    },
    "LogGroupIdentifier": {
      "max": 512,
      "min": 1,
      "type": "string"
    },
    "LogGroupSummaries": {
      "member": {
        "shape": "LogGroupSummary"
      },
      "type": "list"
    },
    "LogGroupSummary": {
      "documentation": "<p>A subset of the attributes about a log group. In CloudWatch a log group is a group of log streams that share the same retention, monitoring, and access control settings.</p>",
      "members": {
        "logGroupName": {
          "documentation": "<p>The name of the log group.</p>",
          "shape": "LogGroupIdentifier"
        },
        "logType": {
          "documentation": "<p>The type of log.</p>",
          "shape": "String20"
        }
      },
      "required": [
        "logGroupName",
        "logType"
      ],
      "type": "structure"
    },
    "MaintenanceSchedule": {
      "documentation": "<p>The information about the maintenance schedule.</p>",
      "members": {
        "endTime": {
          "documentation": "<p>The time the scheduled maintenance is to end.</p>",
          "shape": "Timestamp"
        },
        "startTime": {
          "documentation": "<p>The time the scheduled maintenance is to start.</p>",
          "shape": "Timestamp"
        }
      },
      "type": "structure"
    },
    "MaxResults": {
      "box": true,
      "max": 100,
      "min": 1,
      "type": "integer"
    },
    "NextToken": {
      "pattern": "^\\S{1,2000}$",
      "type": "string"
    },
    "PendingMaintenance": {
      "documentation": "<p>The scheduled maintenance for a runtime engine.</p>",
      "members": {
        "engineVersion": {
          "documentation": "<p>The specific runtime engine that the maintenance schedule applies to.</p>",
          "shape": "String"
        },
        "schedule": {
          "documentation": "<p>The maintenance schedule for the engine version.</p>",
          "shape": "MaintenanceSchedule"
        }
      },
      "type": "structure"
    },
    "PortList": {
      "member": {
        "shape": "Integer"
      },
      "min": 1,
      "type": "list"
    },
    "PrimaryKey": {
      "documentation": "<p>The primary key for a KSDS data set.</p>",
      "members": {
        "length": {
          "documentation": "<p>A strictly positive integer value representing the length of the primary key. </p>",
          "shape": "Integer"
        },
        "name": {
          "documentation": "<p>A name for the Primary Key.</p>",
          "shape": "String"
        },
        "offset": {
          "documentation": "<p>A positive integer value representing the offset to mark the start of the primary key in the record byte array.</p>",
          "shape": "Integer"
        }
      },
      "required": [
        "length",
        "offset"
      ],
      "type": "structure"
    },
    "RecordLength": {
      "documentation": "<p>The length of the records in the data set.</p>",
      "members": {
        "max": {
          "documentation": "<p>The maximum record length. In case of fixed, both minimum and maximum are the same.</p>",
          "shape": "Integer"
        },
        "min": {
          "documentation": "<p>The minimum record length of a record.</p>",
          "shape": "Integer"
        }
      },
      "required": [
        "max",
        "min"
      ],
      "type": "structure"
    },
    "ResourceNotFoundException": {
      "documentation": "<p>The specified resource was not found.</p>",
      "error": {
        "httpStatusCode": 404,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "String"
        },
        "resourceId": {
          "documentation": "<p>The ID of the missing resource.</p>",
          "shape": "String"
        },
        "resourceType": {
          "documentation": "<p>The type of the missing resource.</p>",
          "shape": "String"
        }
      },
      "required": [
        "message"
      ],
      "type": "structure"
    },
    "ScriptBatchJobDefinition": {
      "documentation": "<p>A batch job definition contained in a script.</p>",
      "members": {
        "scriptName": {
          "documentation": "<p>The name of the script containing the batch job definition.</p>",
          "shape": "String"
        }
      },
      "required": [
        "scriptName"
      ],
      "type": "structure"
    },
    "ScriptBatchJobIdentifier": {
      "documentation": "<p>A batch job identifier in which the batch job to run is identified by the script name.</p>",
      "members": {
        "scriptName": {
          "documentation": "<p>The name of the script containing the batch job definition.</p>",
          "shape": "String"
        }
      },
      "required": [
        "scriptName"
      ],
      "type": "structure"
    },
    "ServiceQuotaExceededException": {
      "documentation": "<p>One or more quotas for Amazon Web Services Mainframe Modernization exceeds the limit.</p>",
      "error": {
        "httpStatusCode": 402,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "String"
        },
        "quotaCode": {
          "documentation": "<p>The identifier of the exceeded quota.</p>",
          "shape": "String"
        },
        "resourceId": {
          "documentation": "<p>The ID of the resource that is exceeding the quota limit.</p>",
          "shape": "String"
        },
        "resourceType": {
          "documentation": "<p>The type of resource that is exceeding the quota limit for Amazon Web Services Mainframe Modernization.</p>",
          "shape": "String"
        },
        "serviceCode": {
          "documentation": "<p>A code that identifies the service that the exceeded quota belongs to.</p>",
          "shape": "String"
        }
      },
      "required": [
        "message"
      ],
      "type": "structure"
    },
    "StartApplicationRequest": {
      "members": {
        "applicationId": {
          "documentation": "<p>The unique identifier of the application you want to start.</p>",
          "location": "uri",
          "locationName": "applicationId",
          "shape": "Identifier"
        }
      },
      "required": [
        "applicationId"
      ],
      "type": "structure"
    },
    "StartApplicationResponse": {
      "members": {},
      "type": "structure"
    },
    "StartBatchJobRequest": {
      "members": {
        "applicationId": {
          "documentation": "<p>The unique identifier of the application associated with this batch job.</p>",
          "location": "uri",
          "locationName": "applicationId",
          "shape": "Identifier"
        },
        "batchJobIdentifier": {
          "documentation": "<p>The unique identifier of the batch job.</p>",
          "shape": "BatchJobIdentifier"
        },
        "jobParams": {
          "documentation": "<p>The collection of batch job parameters. For details about limits for keys and values, see <a href=\"https://www.ibm.com/docs/en/workload-automation/9.3.0?topic=zos-coding-variables-in-jcl\">Coding variables in JCL</a>.</p>",
          "shape": "BatchJobParametersMap"
        }
      },
      "required": [
        "applicationId",
        "batchJobIdentifier"
      ],
      "type": "structure"
    },
    "StartBatchJobResponse": {
      "members": {
        "executionId": {
          "documentation": "<p>The unique identifier of this execution of the batch job.</p>",
          "shape": "Identifier"
        }
      },
      "required": [
        "executionId"
      ],
      "type": "structure"
    },
    "StopApplicationRequest": {
      "members": {
        "applicationId": {
          "documentation": "<p>The unique identifier of the application you want to stop.</p>",
          "location": "uri",
          "locationName": "applicationId",
          "shape": "Identifier"
        },
        "forceStop": {
          "documentation": "<p>Stopping an application process can take a long time. Setting this parameter to true lets you force stop the application so you don't need to wait until the process finishes to apply another action on the application. The default value is false.</p>",
          "shape": "Boolean"
        }
      },
      "required": [
        "applicationId"
      ],
      "type": "structure"
    },
    "StopApplicationResponse": {
      "members": {},
      "type": "structure"
    },
    "StorageConfiguration": {
      "documentation": "<p>Defines the storage configuration for an environment.</p>",
      "members": {
        "efs": {
          "documentation": "<p>Defines the storage configuration for an Amazon EFS file system.</p>",
          "shape": "EfsStorageConfiguration"
        },
        "fsx": {
          "documentation": "<p>Defines the storage configuration for an Amazon FSx file system.</p>",
          "shape": "FsxStorageConfiguration"
        }
      },
      "type": "structure",
      "union": true
    },
    "StorageConfigurationList": {
      "member": {
        "shape": "StorageConfiguration"
      },
      "type": "list"
    },
    "String": {
      "type": "string"
    },
    "String100": {
      "pattern": "^\\S{1,100}$",
      "type": "string"
    },
    "String20": {
      "pattern": "^\\S{1,20}$",
      "type": "string"
    },
    "String200": {
      "pattern": "^\\S{1,200}$",
      "type": "string"
    },
    "String2000": {
      "pattern": "^\\S{1,2000}$",
      "type": "string"
    },
    "String50": {
      "pattern": "^\\S{1,50}$",
      "type": "string"
    },
    "String50List": {
      "member": {
        "shape": "String50"
      },
      "type": "list"
    },
    "StringFree65000": {
      "max": 65000,
      "min": 1,
      "type": "string"
    },
    "TagKey": {
      "max": 128,
      "min": 1,
      "pattern": "^(?!aws:).+$",
      "type": "string"
    },
    "TagKeyList": {
      "member": {
        "shape": "TagKey"
      },
      "type": "list"
    },
    "TagMap": {
      "key": {
        "shape": "TagKey"
      },
      "max": 200,
      "min": 0,
      "type": "map",
      "value": {
        "shape": "TagValue"
      }
    },
    "TagResourceRequest": {
      "members": {
        "resourceArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the resource.</p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "Arn"
        },
        "tags": {
          "documentation": "<p>The tags to add to the resource.</p>",
          "shape": "TagMap"
        }
      },
      "required": [
        "resourceArn",
        "tags"
      ],
      "type": "structure"
    },
    "TagResourceResponse": {
      "members": {},
      "type": "structure"
    },
    "TagValue": {
      "max": 256,
      "min": 0,
      "type": "string"
    },
    "ThrottlingException": {
      "documentation": "<p>The number of requests made exceeds the limit.</p>",
      "error": {
        "httpStatusCode": 429,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "String"
        },
        "quotaCode": {
          "documentation": "<p>The identifier of the throttled reuqest.</p>",
          "shape": "String"
        },
        "retryAfterSeconds": {
          "documentation": "<p>The number of seconds to wait before retrying the request.</p>",
          "location": "header",
          "locationName": "Retry-After",
          "shape": "Integer"
        },
        "serviceCode": {
          "documentation": "<p>The identifier of the service that the throttled request was made to.</p>",
          "shape": "String"
        }
      },
      "required": [
        "message"
      ],
      "retryable": {
        "throttling": true
      },
      "type": "structure"
    },
    "Timestamp": {
      "type": "timestamp"
    },
    "UntagResourceRequest": {
      "members": {
        "resourceArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the resource.</p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "Arn"
        },
        "tagKeys": {
          "documentation": "<p>The keys of the tags to remove.</p>",
          "location": "querystring",
          "locationName": "tagKeys",
          "shape": "TagKeyList"
        }
      },
      "required": [
        "resourceArn",
        "tagKeys"
      ],
      "type": "structure"
    },
    "UntagResourceResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateApplicationRequest": {
      "members": {
        "applicationId": {
          "documentation": "<p>The unique identifier of the application you want to update.</p>",
          "location": "uri",
          "locationName": "applicationId",
          "shape": "Identifier"
        },
        "currentApplicationVersion": {
          "documentation": "<p>The current version of the application to update.</p>",
          "shape": "Version"
        },
        "definition": {
          "documentation": "<p>The application definition for this application. You can specify either inline JSON or an S3 bucket location.</p>",
          "shape": "Definition"
        },
        "description": {
          "documentation": "<p>The description of the application to update.</p>",
          "shape": "EntityDescription"
        }
      },
      "required": [
        "applicationId",
        "currentApplicationVersion"
      ],
      "type": "structure"
    },
    "UpdateApplicationResponse": {
      "members": {
        "applicationVersion": {
          "documentation": "<p>The new version of the application.</p>",
          "shape": "Version"
        }
      },
      "required": [
        "applicationVersion"
      ],
      "type": "structure"
    },
    "UpdateEnvironmentRequest": {
      "members": {
        "applyDuringMaintenanceWindow": {
          "documentation": "<p>Indicates whether to update the environment during the maintenance window. The default is false. Currently, Amazon Web Services Mainframe Modernization accepts the <code>engineVersion</code> parameter only if <code>applyDuringMaintenanceWindow</code> is true. If any parameter other than <code>engineVersion</code> is provided in <code>UpdateEnvironmentRequest</code>, it will fail if <code>applyDuringMaintenanceWindow</code> is set to true.</p>",
          "shape": "Boolean"
        },
        "desiredCapacity": {
          "box": true,
          "documentation": "<p>The desired capacity for the environment to update.</p>",
          "shape": "CapacityValue"
        },
        "engineVersion": {
          "documentation": "<p>The version of the runtime engine for the environment.</p>",
          "shape": "EngineVersion"
        },
        "environmentId": {
          "documentation": "<p>The unique identifier of the runtime environment that you want to update.</p>",
          "location": "uri",
          "locationName": "environmentId",
          "shape": "Identifier"
        },
        "instanceType": {
          "documentation": "<p>The instance type for the environment to update.</p>",
          "shape": "String20"
        },
        "preferredMaintenanceWindow": {
          "documentation": "<p>Configures a desired maintenance window for the environment. If you do not provide a value, a random system-generated value will be assigned.</p>",
          "shape": "String"
        }
      },
      "required": [
        "environmentId"
      ],
      "type": "structure"
    },
    "UpdateEnvironmentResponse": {
      "members": {
        "environmentId": {
          "documentation": "<p>The unique identifier of the runtime environment that was updated.</p>",
          "shape": "Identifier"
        }
      },
      "required": [
        "environmentId"
      ],
      "type": "structure"
    },
    "ValidationException": {
      "documentation": "<p>One or more parameters provided in the request is not valid.</p>",
      "error": {
        "httpStatusCode": 400,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "fieldList": {
          "documentation": "<p>The list of fields that failed service validation.</p>",
          "shape": "ValidationExceptionFieldList"
        },
        "message": {
          "shape": "String"
        },
        "reason": {
          "documentation": "<p>The reason why it failed service validation.</p>",
          "shape": "ValidationExceptionReason"
        }
      },
      "required": [
        "message"
      ],
      "type": "structure"
    },
    "ValidationExceptionField": {
      "documentation": "<p>Contains information about a validation exception field.</p>",
      "members": {
        "message": {
          "documentation": "<p>The message of the exception field.</p>",
          "shape": "String"
        },
        "name": {
          "documentation": "<p>The name of the exception field.</p>",
          "shape": "String"
        }
      },
      "required": [
        "message",
        "name"
      ],
      "type": "structure"
    },
    "ValidationExceptionFieldList": {
      "member": {
        "shape": "ValidationExceptionField"
      },
      "type": "list"
    },
    "ValidationExceptionReason": {
      "enum": [
        "unknownOperation",
        "cannotParse",
        "fieldValidationFailed",
        "other"
      ],
      "type": "string"
    },
    "Version": {
      "box": true,
      "min": 1,
      "type": "integer"
    },
    "VsamAttributes": {
      "documentation": "<p>The attributes of a VSAM type data set.</p>",
      "members": {
        "alternateKeys": {
          "documentation": "<p>The alternate key definitions, if any. A legacy dataset might not have any alternate key defined, but if those alternate keys definitions exist, provide them as some applications will make use of them.</p>",
          "shape": "AlternateKeyList"
        },
        "compressed": {
          "documentation": "<p>Indicates whether indexes for this dataset are stored as compressed values. If you have a large data set (typically &gt; 100 Mb), consider setting this flag to True.</p>",
          "shape": "Boolean"
        },
        "encoding": {
          "documentation": "<p>The character set used by the data set. Can be ASCII, EBCDIC, or unknown.</p>",
          "shape": "String"
        },
        "format": {
          "documentation": "<p>The record format of the data set.</p>",
          "shape": "String"
        },
        "primaryKey": {
          "documentation": "<p>The primary key of the data set.</p>",
          "shape": "PrimaryKey"
        }
      },
      "required": [
        "format"
      ],
      "type": "structure"
    },
    "VsamDetailAttributes": {
      "documentation": "<p>The attributes of a VSAM type data set.</p>",
      "members": {
        "alternateKeys": {
          "documentation": "<p>The alternate key definitions, if any. A legacy dataset might not have any alternate key defined, but if those alternate keys definitions exist, provide them as some applications will make use of them.</p>",
          "shape": "AlternateKeyList"
        },
        "cacheAtStartup": {
          "box": true,
          "documentation": "<p>If set to True, enforces loading the data set into cache before it\u2019s used by the application.</p>",
          "shape": "Boolean"
        },
        "compressed": {
          "box": true,
          "documentation": "<p>Indicates whether indexes for this dataset are stored as compressed values. If you have a large data set (typically &gt; 100 Mb), consider setting this flag to True.</p>",
          "shape": "Boolean"
        },
        "encoding": {
          "documentation": "<p>The character set used by the data set. Can be ASCII, EBCDIC, or unknown.</p>",
          "shape": "String20"
        },
        "primaryKey": {
          "documentation": "<p>The primary key of the data set.</p>",
          "shape": "PrimaryKey"
        },
        "recordFormat": {
          "documentation": "<p>The record format of the data set.</p>",
          "shape": "String20"
        }
      },
      "type": "structure"
    }
  },
  "version": "2.0"
}
