{
  "documentation": "<fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>",
  "metadata": {
    "apiVersion": "2017-03-31",
    "endpointPrefix": "lakeformation",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "AWS Lake Formation",
    "serviceId": "LakeFormation",
    "signatureVersion": "v4",
    "signingName": "lakeformation",
    "uid": "lakeformation-2017-03-31"
  },
  "operations": {
    "AddLFTagsToResource": {
      "documentation": "<p>Attaches one or more LF-tags to an existing resource.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ConcurrentModificationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/AddLFTagsToResource"
      },
      "input": {
        "shape": "AddLFTagsToResourceRequest"
      },
      "name": "AddLFTagsToResource",
      "output": {
        "shape": "AddLFTagsToResourceResponse"
      }
    },
    "AssumeDecoratedRoleWithSAML": {
      "documentation": "<p>Allows a caller to assume an IAM role decorated as the SAML user specified in the SAML assertion included in the request. This decoration allows Lake Formation to enforce access policies against the SAML users and groups. This API operation requires SAML federation setup in the caller\u2019s account as it can only be called with valid SAML assertions. Lake Formation does not scope down the permission of the assumed role. All permissions attached to the role via the SAML federation setup will be included in the role session. </p> <p> This decorated role is expected to access data in Amazon S3 by getting temporary access from Lake Formation which is authorized via the virtual API <code>GetDataAccess</code>. Therefore, all SAML roles that can be assumed via <code>AssumeDecoratedRoleWithSAML</code> must at a minimum include <code>lakeformation:GetDataAccess</code> in their role policies. A typical IAM policy attached to such a role would look as follows: </p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/AssumeDecoratedRoleWithSAML"
      },
      "input": {
        "shape": "AssumeDecoratedRoleWithSAMLRequest"
      },
      "name": "AssumeDecoratedRoleWithSAML",
      "output": {
        "shape": "AssumeDecoratedRoleWithSAMLResponse"
      }
    },
    "BatchGrantPermissions": {
      "documentation": "<p>Batch operation to grant permissions to the principal.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/BatchGrantPermissions"
      },
      "input": {
        "shape": "BatchGrantPermissionsRequest"
      },
      "name": "BatchGrantPermissions",
      "output": {
        "shape": "BatchGrantPermissionsResponse"
      }
    },
    "BatchRevokePermissions": {
      "documentation": "<p>Batch operation to revoke permissions from the principal.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/BatchRevokePermissions"
      },
      "input": {
        "shape": "BatchRevokePermissionsRequest"
      },
      "name": "BatchRevokePermissions",
      "output": {
        "shape": "BatchRevokePermissionsResponse"
      }
    },
    "CancelTransaction": {
      "documentation": "<p>Attempts to cancel the specified transaction. Returns an exception if the transaction was previously committed.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "TransactionCommittedException"
        },
        {
          "shape": "TransactionCommitInProgressException"
        },
        {
          "shape": "ConcurrentModificationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/CancelTransaction"
      },
      "input": {
        "shape": "CancelTransactionRequest"
      },
      "name": "CancelTransaction",
      "output": {
        "shape": "CancelTransactionResponse"
      }
    },
    "CommitTransaction": {
      "documentation": "<p>Attempts to commit the specified transaction. Returns an exception if the transaction was previously aborted. This API action is idempotent if called multiple times for the same transaction.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "TransactionCanceledException"
        },
        {
          "shape": "ConcurrentModificationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/CommitTransaction"
      },
      "input": {
        "shape": "CommitTransactionRequest"
      },
      "name": "CommitTransaction",
      "output": {
        "shape": "CommitTransactionResponse"
      }
    },
    "CreateDataCellsFilter": {
      "documentation": "<p>Creates a data cell filter to allow one to grant access to certain columns on certain rows.</p>",
      "errors": [
        {
          "shape": "AlreadyExistsException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "ResourceNumberLimitExceededException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/CreateDataCellsFilter"
      },
      "input": {
        "shape": "CreateDataCellsFilterRequest"
      },
      "name": "CreateDataCellsFilter",
      "output": {
        "shape": "CreateDataCellsFilterResponse"
      }
    },
    "CreateLFTag": {
      "documentation": "<p>Creates an LF-tag with the specified name and values.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "ResourceNumberLimitExceededException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/CreateLFTag"
      },
      "input": {
        "shape": "CreateLFTagRequest"
      },
      "name": "CreateLFTag",
      "output": {
        "shape": "CreateLFTagResponse"
      }
    },
    "DeleteDataCellsFilter": {
      "documentation": "<p>Deletes a data cell filter.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/DeleteDataCellsFilter"
      },
      "input": {
        "shape": "DeleteDataCellsFilterRequest"
      },
      "name": "DeleteDataCellsFilter",
      "output": {
        "shape": "DeleteDataCellsFilterResponse"
      }
    },
    "DeleteLFTag": {
      "documentation": "<p>Deletes the specified LF-tag given a key name. If the input parameter tag key was not found, then the operation will throw an exception. When you delete an LF-tag, the <code>LFTagPolicy</code> attached to the LF-tag becomes invalid. If the deleted LF-tag was still assigned to any resource, the tag policy attach to the deleted LF-tag will no longer be applied to the resource.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/DeleteLFTag"
      },
      "input": {
        "shape": "DeleteLFTagRequest"
      },
      "name": "DeleteLFTag",
      "output": {
        "shape": "DeleteLFTagResponse"
      }
    },
    "DeleteObjectsOnCancel": {
      "documentation": "<p>For a specific governed table, provides a list of Amazon S3 objects that will be written during the current transaction and that can be automatically deleted if the transaction is canceled. Without this call, no Amazon S3 objects are automatically deleted when a transaction cancels. </p> <p> The Glue ETL library function <code>write_dynamic_frame.from_catalog()</code> includes an option to automatically call <code>DeleteObjectsOnCancel</code> before writes. For more information, see <a href=\"https://docs.aws.amazon.com/lake-formation/latest/dg/transactions-data-operations.html#rolling-back-writes\">Rolling Back Amazon S3 Writes</a>. </p>",
      "errors": [
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "TransactionCommittedException"
        },
        {
          "shape": "TransactionCanceledException"
        },
        {
          "shape": "ResourceNotReadyException"
        },
        {
          "shape": "ConcurrentModificationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/DeleteObjectsOnCancel"
      },
      "input": {
        "shape": "DeleteObjectsOnCancelRequest"
      },
      "name": "DeleteObjectsOnCancel",
      "output": {
        "shape": "DeleteObjectsOnCancelResponse"
      }
    },
    "DeregisterResource": {
      "documentation": "<p>Deregisters the resource as managed by the Data Catalog.</p> <p>When you deregister a path, Lake Formation removes the path from the inline policy attached to your service-linked role.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "EntityNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/DeregisterResource"
      },
      "input": {
        "shape": "DeregisterResourceRequest"
      },
      "name": "DeregisterResource",
      "output": {
        "shape": "DeregisterResourceResponse"
      }
    },
    "DescribeResource": {
      "documentation": "<p>Retrieves the current data access role for the given resource registered in Lake Formation.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "EntityNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/DescribeResource"
      },
      "input": {
        "shape": "DescribeResourceRequest"
      },
      "name": "DescribeResource",
      "output": {
        "shape": "DescribeResourceResponse"
      }
    },
    "DescribeTransaction": {
      "documentation": "<p>Returns the details of a single transaction.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/DescribeTransaction"
      },
      "input": {
        "shape": "DescribeTransactionRequest"
      },
      "name": "DescribeTransaction",
      "output": {
        "shape": "DescribeTransactionResponse"
      }
    },
    "ExtendTransaction": {
      "documentation": "<p>Indicates to the service that the specified transaction is still active and should not be treated as idle and aborted.</p> <p>Write transactions that remain idle for a long period are automatically aborted unless explicitly extended.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "TransactionCommittedException"
        },
        {
          "shape": "TransactionCanceledException"
        },
        {
          "shape": "TransactionCommitInProgressException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/ExtendTransaction"
      },
      "input": {
        "shape": "ExtendTransactionRequest"
      },
      "name": "ExtendTransaction",
      "output": {
        "shape": "ExtendTransactionResponse"
      }
    },
    "GetDataLakeSettings": {
      "documentation": "<p>Retrieves the list of the data lake administrators of a Lake Formation-managed data lake. </p>",
      "errors": [
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/GetDataLakeSettings"
      },
      "input": {
        "shape": "GetDataLakeSettingsRequest"
      },
      "name": "GetDataLakeSettings",
      "output": {
        "shape": "GetDataLakeSettingsResponse"
      }
    },
    "GetEffectivePermissionsForPath": {
      "documentation": "<p>Returns the Lake Formation permissions for a specified table or database resource located at a path in Amazon S3. <code>GetEffectivePermissionsForPath</code> will not return databases and tables if the catalog is encrypted.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InternalServiceException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/GetEffectivePermissionsForPath"
      },
      "input": {
        "shape": "GetEffectivePermissionsForPathRequest"
      },
      "name": "GetEffectivePermissionsForPath",
      "output": {
        "shape": "GetEffectivePermissionsForPathResponse"
      }
    },
    "GetLFTag": {
      "documentation": "<p>Returns an LF-tag definition.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/GetLFTag"
      },
      "input": {
        "shape": "GetLFTagRequest"
      },
      "name": "GetLFTag",
      "output": {
        "shape": "GetLFTagResponse"
      }
    },
    "GetQueryState": {
      "documentation": "<p>Returns the state of a query previously submitted. Clients are expected to poll <code>GetQueryState</code> to monitor the current state of the planning before retrieving the work units. A query state is only visible to the principal that made the initial call to <code>StartQueryPlanning</code>.</p>",
      "endpoint": {
        "hostPrefix": "query-"
      },
      "errors": [
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/GetQueryState",
        "responseCode": 200
      },
      "input": {
        "shape": "GetQueryStateRequest"
      },
      "name": "GetQueryState",
      "output": {
        "shape": "GetQueryStateResponse"
      }
    },
    "GetQueryStatistics": {
      "documentation": "<p>Retrieves statistics on the planning and execution of a query.</p>",
      "endpoint": {
        "hostPrefix": "query-"
      },
      "errors": [
        {
          "shape": "StatisticsNotReadyYetException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ExpiredException"
        },
        {
          "shape": "ThrottledException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/GetQueryStatistics",
        "responseCode": 200
      },
      "input": {
        "shape": "GetQueryStatisticsRequest"
      },
      "name": "GetQueryStatistics",
      "output": {
        "shape": "GetQueryStatisticsResponse"
      }
    },
    "GetResourceLFTags": {
      "documentation": "<p>Returns the LF-tags applied to a resource.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "GlueEncryptionException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/GetResourceLFTags"
      },
      "input": {
        "shape": "GetResourceLFTagsRequest"
      },
      "name": "GetResourceLFTags",
      "output": {
        "shape": "GetResourceLFTagsResponse"
      }
    },
    "GetTableObjects": {
      "documentation": "<p>Returns the set of Amazon S3 objects that make up the specified governed table. A transaction ID or timestamp can be specified for time-travel queries.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "TransactionCommittedException"
        },
        {
          "shape": "TransactionCanceledException"
        },
        {
          "shape": "ResourceNotReadyException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/GetTableObjects"
      },
      "input": {
        "shape": "GetTableObjectsRequest"
      },
      "name": "GetTableObjects",
      "output": {
        "shape": "GetTableObjectsResponse"
      }
    },
    "GetTemporaryGluePartitionCredentials": {
      "documentation": "<p>This API is identical to <code>GetTemporaryTableCredentials</code> except that this is used when the target Data Catalog resource is of type Partition. Lake Formation restricts the permission of the vended credentials with the same scope down policy which restricts access to a single Amazon S3 prefix.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "PermissionTypeMismatchException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/GetTemporaryGluePartitionCredentials"
      },
      "input": {
        "shape": "GetTemporaryGluePartitionCredentialsRequest"
      },
      "name": "GetTemporaryGluePartitionCredentials",
      "output": {
        "shape": "GetTemporaryGluePartitionCredentialsResponse"
      }
    },
    "GetTemporaryGlueTableCredentials": {
      "documentation": "<p>Allows a caller in a secure environment to assume a role with permission to access Amazon S3. In order to vend such credentials, Lake Formation assumes the role associated with a registered location, for example an Amazon S3 bucket, with a scope down policy which restricts the access to a single prefix.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "PermissionTypeMismatchException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/GetTemporaryGlueTableCredentials"
      },
      "input": {
        "shape": "GetTemporaryGlueTableCredentialsRequest"
      },
      "name": "GetTemporaryGlueTableCredentials",
      "output": {
        "shape": "GetTemporaryGlueTableCredentialsResponse"
      }
    },
    "GetWorkUnitResults": {
      "documentation": "<p>Returns the work units resulting from the query. Work units can be executed in any order and in parallel. </p>",
      "endpoint": {
        "hostPrefix": "data-"
      },
      "errors": [
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ExpiredException"
        },
        {
          "shape": "ThrottledException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/GetWorkUnitResults",
        "responseCode": 200
      },
      "input": {
        "shape": "GetWorkUnitResultsRequest"
      },
      "name": "GetWorkUnitResults",
      "output": {
        "shape": "GetWorkUnitResultsResponse"
      }
    },
    "GetWorkUnits": {
      "documentation": "<p>Retrieves the work units generated by the <code>StartQueryPlanning</code> operation.</p>",
      "endpoint": {
        "hostPrefix": "query-"
      },
      "errors": [
        {
          "shape": "WorkUnitsNotReadyYetException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ExpiredException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/GetWorkUnits",
        "responseCode": 200
      },
      "input": {
        "shape": "GetWorkUnitsRequest"
      },
      "name": "GetWorkUnits",
      "output": {
        "shape": "GetWorkUnitsResponse"
      }
    },
    "GrantPermissions": {
      "documentation": "<p>Grants permissions to the principal to access metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3.</p> <p>For information about permissions, see <a href=\"https://docs-aws.amazon.com/lake-formation/latest/dg/security-data-access.html\">Security and Access Control to Metadata and Data</a>.</p>",
      "errors": [
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/GrantPermissions"
      },
      "input": {
        "shape": "GrantPermissionsRequest"
      },
      "name": "GrantPermissions",
      "output": {
        "shape": "GrantPermissionsResponse"
      }
    },
    "ListDataCellsFilter": {
      "documentation": "<p>Lists all the data cell filters on a table.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/ListDataCellsFilter"
      },
      "input": {
        "shape": "ListDataCellsFilterRequest"
      },
      "name": "ListDataCellsFilter",
      "output": {
        "shape": "ListDataCellsFilterResponse"
      }
    },
    "ListLFTags": {
      "documentation": "<p>Lists LF-tags that the requester has permission to view. </p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/ListLFTags"
      },
      "input": {
        "shape": "ListLFTagsRequest"
      },
      "name": "ListLFTags",
      "output": {
        "shape": "ListLFTagsResponse"
      }
    },
    "ListPermissions": {
      "documentation": "<p>Returns a list of the principal permissions on the resource, filtered by the permissions of the caller. For example, if you are granted an ALTER permission, you are able to see only the principal permissions for ALTER.</p> <p>This operation returns only those permissions that have been explicitly granted.</p> <p>For information about permissions, see <a href=\"https://docs-aws.amazon.com/lake-formation/latest/dg/security-data-access.html\">Security and Access Control to Metadata and Data</a>.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "InternalServiceException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/ListPermissions"
      },
      "input": {
        "shape": "ListPermissionsRequest"
      },
      "name": "ListPermissions",
      "output": {
        "shape": "ListPermissionsResponse"
      }
    },
    "ListResources": {
      "documentation": "<p>Lists the resources registered to be managed by the Data Catalog.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/ListResources"
      },
      "input": {
        "shape": "ListResourcesRequest"
      },
      "name": "ListResources",
      "output": {
        "shape": "ListResourcesResponse"
      }
    },
    "ListTableStorageOptimizers": {
      "documentation": "<p>Returns the configuration of all storage optimizers associated with a specified table.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServiceException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/ListTableStorageOptimizers"
      },
      "input": {
        "shape": "ListTableStorageOptimizersRequest"
      },
      "name": "ListTableStorageOptimizers",
      "output": {
        "shape": "ListTableStorageOptimizersResponse"
      }
    },
    "ListTransactions": {
      "documentation": "<p>Returns metadata about transactions and their status. To prevent the response from growing indefinitely, only uncommitted transactions and those available for time-travel queries are returned.</p> <p>This operation can help you identify uncommitted transactions or to get information about transactions.</p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/ListTransactions"
      },
      "input": {
        "shape": "ListTransactionsRequest"
      },
      "name": "ListTransactions",
      "output": {
        "shape": "ListTransactionsResponse"
      }
    },
    "PutDataLakeSettings": {
      "documentation": "<p>Sets the list of data lake administrators who have admin privileges on all resources managed by Lake Formation. For more information on admin privileges, see <a href=\"https://docs.aws.amazon.com/lake-formation/latest/dg/lake-formation-permissions.html\">Granting Lake Formation Permissions</a>.</p> <p>This API replaces the current list of data lake admins with the new list being passed. To add an admin, fetch the current list and add the new admin to that list and pass that list in this API.</p>",
      "errors": [
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "InvalidInputException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/PutDataLakeSettings"
      },
      "input": {
        "shape": "PutDataLakeSettingsRequest"
      },
      "name": "PutDataLakeSettings",
      "output": {
        "shape": "PutDataLakeSettingsResponse"
      }
    },
    "RegisterResource": {
      "documentation": "<p>Registers the resource as managed by the Data Catalog.</p> <p>To add or update data, Lake Formation needs read/write access to the chosen Amazon S3 path. Choose a role that you know has permission to do this, or choose the AWSServiceRoleForLakeFormationDataAccess service-linked role. When you register the first Amazon S3 path, the service-linked role and a new inline policy are created on your behalf. Lake Formation adds the first path to the inline policy and attaches it to the service-linked role. When you register subsequent paths, Lake Formation adds the path to the existing policy.</p> <p>The following request registers a new location and gives Lake Formation permission to use the service-linked role to access that location.</p> <p> <code>ResourceArn = arn:aws:s3:::my-bucket UseServiceLinkedRole = true</code> </p> <p>If <code>UseServiceLinkedRole</code> is not set to true, you must provide or set the <code>RoleArn</code>:</p> <p> <code>arn:aws:iam::12345:role/my-data-access-role</code> </p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "AlreadyExistsException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "ResourceNumberLimitExceededException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/RegisterResource"
      },
      "input": {
        "shape": "RegisterResourceRequest"
      },
      "name": "RegisterResource",
      "output": {
        "shape": "RegisterResourceResponse"
      }
    },
    "RemoveLFTagsFromResource": {
      "documentation": "<p>Removes an LF-tag from the resource. Only database, table, or tableWithColumns resource are allowed. To tag columns, use the column inclusion list in <code>tableWithColumns</code> to specify column input.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "GlueEncryptionException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ConcurrentModificationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/RemoveLFTagsFromResource"
      },
      "input": {
        "shape": "RemoveLFTagsFromResourceRequest"
      },
      "name": "RemoveLFTagsFromResource",
      "output": {
        "shape": "RemoveLFTagsFromResourceResponse"
      }
    },
    "RevokePermissions": {
      "documentation": "<p>Revokes permissions to the principal to access metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3.</p>",
      "errors": [
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/RevokePermissions"
      },
      "input": {
        "shape": "RevokePermissionsRequest"
      },
      "name": "RevokePermissions",
      "output": {
        "shape": "RevokePermissionsResponse"
      }
    },
    "SearchDatabasesByLFTags": {
      "documentation": "<p>This operation allows a search on <code>DATABASE</code> resources by <code>TagCondition</code>. This operation is used by admins who want to grant user permissions on certain <code>TagConditions</code>. Before making a grant, the admin can use <code>SearchDatabasesByTags</code> to find all resources where the given <code>TagConditions</code> are valid to verify whether the returned resources can be shared.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "GlueEncryptionException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/SearchDatabasesByLFTags"
      },
      "input": {
        "shape": "SearchDatabasesByLFTagsRequest"
      },
      "name": "SearchDatabasesByLFTags",
      "output": {
        "shape": "SearchDatabasesByLFTagsResponse"
      }
    },
    "SearchTablesByLFTags": {
      "documentation": "<p>This operation allows a search on <code>TABLE</code> resources by <code>LFTag</code>s. This will be used by admins who want to grant user permissions on certain LF-tags. Before making a grant, the admin can use <code>SearchTablesByLFTags</code> to find all resources where the given <code>LFTag</code>s are valid to verify whether the returned resources can be shared.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "GlueEncryptionException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/SearchTablesByLFTags"
      },
      "input": {
        "shape": "SearchTablesByLFTagsRequest"
      },
      "name": "SearchTablesByLFTags",
      "output": {
        "shape": "SearchTablesByLFTagsResponse"
      }
    },
    "StartQueryPlanning": {
      "documentation": "<p>Submits a request to process a query statement.</p> <p>This operation generates work units that can be retrieved with the <code>GetWorkUnits</code> operation as soon as the query state is WORKUNITS_AVAILABLE or FINISHED.</p>",
      "endpoint": {
        "hostPrefix": "query-"
      },
      "errors": [
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottledException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/StartQueryPlanning",
        "responseCode": 200
      },
      "input": {
        "shape": "StartQueryPlanningRequest"
      },
      "name": "StartQueryPlanning",
      "output": {
        "shape": "StartQueryPlanningResponse"
      }
    },
    "StartTransaction": {
      "documentation": "<p>Starts a new transaction and returns its transaction ID. Transaction IDs are opaque objects that you can use to identify a transaction.</p>",
      "errors": [
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/StartTransaction"
      },
      "input": {
        "shape": "StartTransactionRequest"
      },
      "name": "StartTransaction",
      "output": {
        "shape": "StartTransactionResponse"
      }
    },
    "UpdateLFTag": {
      "documentation": "<p>Updates the list of possible values for the specified LF-tag key. If the LF-tag does not exist, the operation throws an EntityNotFoundException. The values in the delete key values will be deleted from list of possible values. If any value in the delete key values is attached to a resource, then API errors out with a 400 Exception - \"Update not allowed\". Untag the attribute before deleting the LF-tag key's value. </p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "ConcurrentModificationException"
        },
        {
          "shape": "AccessDeniedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/UpdateLFTag"
      },
      "input": {
        "shape": "UpdateLFTagRequest"
      },
      "name": "UpdateLFTag",
      "output": {
        "shape": "UpdateLFTagResponse"
      }
    },
    "UpdateResource": {
      "documentation": "<p>Updates the data access role used for vending access to the given (registered) resource in Lake Formation. </p>",
      "errors": [
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "EntityNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/UpdateResource"
      },
      "input": {
        "shape": "UpdateResourceRequest"
      },
      "name": "UpdateResource",
      "output": {
        "shape": "UpdateResourceResponse"
      }
    },
    "UpdateTableObjects": {
      "documentation": "<p>Updates the manifest of Amazon S3 objects that make up the specified governed table.</p>",
      "errors": [
        {
          "shape": "InternalServiceException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "OperationTimeoutException"
        },
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "TransactionCommittedException"
        },
        {
          "shape": "TransactionCanceledException"
        },
        {
          "shape": "TransactionCommitInProgressException"
        },
        {
          "shape": "ResourceNotReadyException"
        },
        {
          "shape": "ConcurrentModificationException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/UpdateTableObjects"
      },
      "input": {
        "shape": "UpdateTableObjectsRequest"
      },
      "name": "UpdateTableObjects",
      "output": {
        "shape": "UpdateTableObjectsResponse"
      }
    },
    "UpdateTableStorageOptimizer": {
      "documentation": "<p>Updates the configuration of the storage optimizers for a table.</p>",
      "errors": [
        {
          "shape": "EntityNotFoundException"
        },
        {
          "shape": "InvalidInputException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "InternalServiceException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/UpdateTableStorageOptimizer"
      },
      "input": {
        "shape": "UpdateTableStorageOptimizerRequest"
      },
      "name": "UpdateTableStorageOptimizer",
      "output": {
        "shape": "UpdateTableStorageOptimizerResponse"
      }
    }
  },
  "shapes": {
    "AccessDeniedException": {
      "documentation": "<p>Access to a resource was denied.</p>",
      "error": {
        "httpStatusCode": 403,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "AccessKeyIdString": {
      "type": "string"
    },
    "AddLFTagsToResourceRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>",
          "shape": "CatalogIdString"
        },
        "LFTags": {
          "documentation": "<p>The LF-tags to attach to the resource.</p>",
          "shape": "LFTagsList"
        },
        "Resource": {
          "documentation": "<p>The database, table, or column resource to which to attach an LF-tag.</p>",
          "shape": "Resource"
        }
      },
      "required": [
        "Resource",
        "LFTags"
      ],
      "type": "structure"
    },
    "AddLFTagsToResourceResponse": {
      "members": {
        "Failures": {
          "documentation": "<p>A list of failures to tag the resource.</p>",
          "shape": "LFTagErrors"
        }
      },
      "type": "structure"
    },
    "AddObjectInput": {
      "documentation": "<p>A new object to add to the governed table.</p>",
      "members": {
        "ETag": {
          "documentation": "<p>The Amazon S3 ETag of the object. Returned by <code>GetTableObjects</code> for validation and used to identify changes to the underlying data.</p>",
          "shape": "ETagString"
        },
        "PartitionValues": {
          "documentation": "<p>A list of partition values for the object. A value must be specified for each partition key associated with the table.</p> <p>The supported data types are integer, long, date(yyyy-MM-dd), timestamp(yyyy-MM-dd HH:mm:ssXXX or yyyy-MM-dd HH:mm:ss\"), string and decimal.</p>",
          "shape": "PartitionValuesList"
        },
        "Size": {
          "documentation": "<p>The size of the Amazon S3 object in bytes.</p>",
          "shape": "ObjectSize"
        },
        "Uri": {
          "documentation": "<p>The Amazon S3 location of the object.</p>",
          "shape": "URI"
        }
      },
      "required": [
        "Uri",
        "ETag",
        "Size"
      ],
      "type": "structure"
    },
    "AllRowsWildcard": {
      "documentation": "<p>A structure that you pass to indicate you want all rows in a filter. </p>",
      "members": {},
      "type": "structure"
    },
    "AlreadyExistsException": {
      "documentation": "<p>A resource to be created or added already exists.</p>",
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "AssumeDecoratedRoleWithSAMLRequest": {
      "members": {
        "DurationSeconds": {
          "documentation": "<p>The time period, between 900 and 43,200 seconds, for the timeout of the temporary credentials.</p>",
          "shape": "CredentialTimeoutDurationSecondInteger"
        },
        "PrincipalArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the SAML provider in IAM that describes the IdP.</p>",
          "shape": "IAMSAMLProviderArn"
        },
        "RoleArn": {
          "documentation": "<p>The role that represents an IAM principal whose scope down policy allows it to call credential vending APIs such as <code>GetTemporaryTableCredentials</code>. The caller must also have iam:PassRole permission on this role. </p>",
          "shape": "IAMRoleArn"
        },
        "SAMLAssertion": {
          "documentation": "<p>A SAML assertion consisting of an assertion statement for the user who needs temporary credentials. This must match the SAML assertion that was issued to IAM. This must be Base64 encoded.</p>",
          "shape": "SAMLAssertionString"
        }
      },
      "required": [
        "SAMLAssertion",
        "RoleArn",
        "PrincipalArn"
      ],
      "type": "structure"
    },
    "AssumeDecoratedRoleWithSAMLResponse": {
      "members": {
        "AccessKeyId": {
          "documentation": "<p>The access key ID for the temporary credentials. (The access key consists of an access key ID and a secret key).</p>",
          "shape": "AccessKeyIdString"
        },
        "Expiration": {
          "documentation": "<p>The date and time when the temporary credentials expire.</p>",
          "shape": "ExpirationTimestamp"
        },
        "SecretAccessKey": {
          "documentation": "<p>The secret key for the temporary credentials. (The access key consists of an access key ID and a secret key).</p>",
          "shape": "SecretAccessKeyString"
        },
        "SessionToken": {
          "documentation": "<p>The session token for the temporary credentials.</p>",
          "shape": "SessionTokenString"
        }
      },
      "type": "structure"
    },
    "AuditContext": {
      "documentation": "<p>A structure used to include auditing information on the privileged API. </p>",
      "members": {
        "AdditionalAuditContext": {
          "documentation": "<p>The filter engine can populate the 'AdditionalAuditContext' information with the request ID for you to track. This information will be displayed in CloudTrail log in your account.</p>",
          "shape": "AuditContextString"
        }
      },
      "type": "structure"
    },
    "AuditContextString": {
      "max": 2048,
      "min": 0,
      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
      "type": "string"
    },
    "AuthorizedSessionTagValueList": {
      "member": {
        "shape": "NameString"
      },
      "type": "list"
    },
    "BatchGrantPermissionsRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>",
          "shape": "CatalogIdString"
        },
        "Entries": {
          "documentation": "<p>A list of up to 20 entries for resource permissions to be granted by batch operation to the principal.</p>",
          "shape": "BatchPermissionsRequestEntryList"
        }
      },
      "required": [
        "Entries"
      ],
      "type": "structure"
    },
    "BatchGrantPermissionsResponse": {
      "members": {
        "Failures": {
          "documentation": "<p>A list of failures to grant permissions to the resources.</p>",
          "shape": "BatchPermissionsFailureList"
        }
      },
      "type": "structure"
    },
    "BatchPermissionsFailureEntry": {
      "documentation": "<p>A list of failures when performing a batch grant or batch revoke operation.</p>",
      "members": {
        "Error": {
          "documentation": "<p>An error message that applies to the failure of the entry.</p>",
          "shape": "ErrorDetail"
        },
        "RequestEntry": {
          "documentation": "<p>An identifier for an entry of the batch request.</p>",
          "shape": "BatchPermissionsRequestEntry"
        }
      },
      "type": "structure"
    },
    "BatchPermissionsFailureList": {
      "member": {
        "shape": "BatchPermissionsFailureEntry"
      },
      "type": "list"
    },
    "BatchPermissionsRequestEntry": {
      "documentation": "<p>A permission to a resource granted by batch operation to the principal.</p>",
      "members": {
        "Id": {
          "documentation": "<p>A unique identifier for the batch permissions request entry.</p>",
          "shape": "Identifier"
        },
        "Permissions": {
          "documentation": "<p>The permissions to be granted.</p>",
          "shape": "PermissionList"
        },
        "PermissionsWithGrantOption": {
          "documentation": "<p>Indicates if the option to pass permissions is granted.</p>",
          "shape": "PermissionList"
        },
        "Principal": {
          "documentation": "<p>The principal to be granted a permission.</p>",
          "shape": "DataLakePrincipal"
        },
        "Resource": {
          "documentation": "<p>The resource to which the principal is to be granted a permission.</p>",
          "shape": "Resource"
        }
      },
      "required": [
        "Id"
      ],
      "type": "structure"
    },
    "BatchPermissionsRequestEntryList": {
      "member": {
        "shape": "BatchPermissionsRequestEntry"
      },
      "type": "list"
    },
    "BatchRevokePermissionsRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>",
          "shape": "CatalogIdString"
        },
        "Entries": {
          "documentation": "<p>A list of up to 20 entries for resource permissions to be revoked by batch operation to the principal.</p>",
          "shape": "BatchPermissionsRequestEntryList"
        }
      },
      "required": [
        "Entries"
      ],
      "type": "structure"
    },
    "BatchRevokePermissionsResponse": {
      "members": {
        "Failures": {
          "documentation": "<p>A list of failures to revoke permissions to the resources.</p>",
          "shape": "BatchPermissionsFailureList"
        }
      },
      "type": "structure"
    },
    "BooleanNullable": {
      "type": "boolean"
    },
    "CancelTransactionRequest": {
      "members": {
        "TransactionId": {
          "documentation": "<p>The transaction to cancel.</p>",
          "shape": "TransactionIdString"
        }
      },
      "required": [
        "TransactionId"
      ],
      "type": "structure"
    },
    "CancelTransactionResponse": {
      "members": {},
      "type": "structure"
    },
    "CatalogIdString": {
      "max": 255,
      "min": 1,
      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
      "type": "string"
    },
    "CatalogResource": {
      "documentation": "<p>A structure for the catalog object.</p>",
      "members": {},
      "type": "structure"
    },
    "ColumnLFTag": {
      "documentation": "<p>A structure containing the name of a column resource and the LF-tags attached to it.</p>",
      "members": {
        "LFTags": {
          "documentation": "<p>The LF-tags attached to a column resource.</p>",
          "shape": "LFTagsList"
        },
        "Name": {
          "documentation": "<p>The name of a column resource.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "ColumnLFTagsList": {
      "member": {
        "shape": "ColumnLFTag"
      },
      "type": "list"
    },
    "ColumnNames": {
      "member": {
        "shape": "NameString"
      },
      "type": "list"
    },
    "ColumnWildcard": {
      "documentation": "<p>A wildcard object, consisting of an optional list of excluded column names or indexes.</p>",
      "members": {
        "ExcludedColumnNames": {
          "documentation": "<p>Excludes column names. Any column with this name will be excluded.</p>",
          "shape": "ColumnNames"
        }
      },
      "type": "structure"
    },
    "CommitTransactionRequest": {
      "members": {
        "TransactionId": {
          "documentation": "<p>The transaction to commit.</p>",
          "shape": "TransactionIdString"
        }
      },
      "required": [
        "TransactionId"
      ],
      "type": "structure"
    },
    "CommitTransactionResponse": {
      "members": {
        "TransactionStatus": {
          "documentation": "<p>The status of the transaction.</p>",
          "shape": "TransactionStatus"
        }
      },
      "type": "structure"
    },
    "ComparisonOperator": {
      "enum": [
        "EQ",
        "NE",
        "LE",
        "LT",
        "GE",
        "GT",
        "CONTAINS",
        "NOT_CONTAINS",
        "BEGINS_WITH",
        "IN",
        "BETWEEN"
      ],
      "type": "string"
    },
    "ConcurrentModificationException": {
      "documentation": "<p>Two processes are trying to modify a resource simultaneously.</p>",
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "CreateDataCellsFilterRequest": {
      "members": {
        "TableData": {
          "documentation": "<p>A <code>DataCellsFilter</code> structure containing information about the data cells filter.</p>",
          "shape": "DataCellsFilter"
        }
      },
      "required": [
        "TableData"
      ],
      "type": "structure"
    },
    "CreateDataCellsFilterResponse": {
      "members": {},
      "type": "structure"
    },
    "CreateLFTagRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>",
          "shape": "CatalogIdString"
        },
        "TagKey": {
          "documentation": "<p>The key-name for the LF-tag.</p>",
          "shape": "LFTagKey"
        },
        "TagValues": {
          "documentation": "<p>A list of possible values an attribute can take.</p>",
          "shape": "TagValueList"
        }
      },
      "required": [
        "TagKey",
        "TagValues"
      ],
      "type": "structure"
    },
    "CreateLFTagResponse": {
      "members": {},
      "type": "structure"
    },
    "CredentialTimeoutDurationSecondInteger": {
      "box": true,
      "max": 43200,
      "min": 900,
      "type": "integer"
    },
    "DataCellsFilter": {
      "documentation": "<p>A structure that describes certain columns on certain rows.</p>",
      "members": {
        "ColumnNames": {
          "documentation": "<p>A list of column names.</p>",
          "shape": "ColumnNames"
        },
        "ColumnWildcard": {
          "documentation": "<p>A wildcard with exclusions.</p> <p>You must specify either a <code>ColumnNames</code> list or the <code>ColumnWildCard</code>. </p>",
          "shape": "ColumnWildcard"
        },
        "DatabaseName": {
          "documentation": "<p>A database in the Glue Data Catalog.</p>",
          "shape": "NameString"
        },
        "Name": {
          "documentation": "<p>The name given by the user to the data filter cell.</p>",
          "shape": "NameString"
        },
        "RowFilter": {
          "documentation": "<p>A PartiQL predicate.</p>",
          "shape": "RowFilter"
        },
        "TableCatalogId": {
          "documentation": "<p>The ID of the catalog to which the table belongs.</p>",
          "shape": "CatalogIdString"
        },
        "TableName": {
          "documentation": "<p>A table in the database.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "TableCatalogId",
        "DatabaseName",
        "TableName",
        "Name"
      ],
      "type": "structure"
    },
    "DataCellsFilterList": {
      "member": {
        "shape": "DataCellsFilter"
      },
      "type": "list"
    },
    "DataCellsFilterResource": {
      "documentation": "<p>A structure for a data cells filter resource. </p>",
      "members": {
        "DatabaseName": {
          "documentation": "<p>A database in the Glue Data Catalog.</p>",
          "shape": "NameString"
        },
        "Name": {
          "documentation": "<p>The name of the data cells filter. </p>",
          "shape": "NameString"
        },
        "TableCatalogId": {
          "documentation": "<p>The ID of the catalog to which the table belongs.</p>",
          "shape": "CatalogIdString"
        },
        "TableName": {
          "documentation": "<p>The name of the table.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "DataLakePrincipal": {
      "documentation": "<p>The Lake Formation principal. Supported principals are IAM users or IAM roles.</p>",
      "members": {
        "DataLakePrincipalIdentifier": {
          "documentation": "<p>An identifier for the Lake Formation principal.</p>",
          "shape": "DataLakePrincipalString"
        }
      },
      "type": "structure"
    },
    "DataLakePrincipalList": {
      "max": 30,
      "member": {
        "shape": "DataLakePrincipal"
      },
      "min": 0,
      "type": "list"
    },
    "DataLakePrincipalString": {
      "max": 255,
      "min": 1,
      "type": "string"
    },
    "DataLakeResourceType": {
      "enum": [
        "CATALOG",
        "DATABASE",
        "TABLE",
        "DATA_LOCATION",
        "LF_TAG",
        "LF_TAG_POLICY",
        "LF_TAG_POLICY_DATABASE",
        "LF_TAG_POLICY_TABLE"
      ],
      "type": "string"
    },
    "DataLakeSettings": {
      "documentation": "<p>A structure representing a list of Lake Formation principals designated as data lake administrators and lists of principal permission entries for default create database and default create table permissions.</p>",
      "members": {
        "AllowExternalDataFiltering": {
          "documentation": "<p>Whether to allow Amazon EMR clusters to access data managed by Lake Formation. </p> <p>If true, you allow Amazon EMR clusters to access data in Amazon S3 locations that are registered with Lake Formation.</p> <p>If false or null, no Amazon EMR clusters will be able to access data in Amazon S3 locations that are registered with Lake Formation.</p> <p>For more information, see <a href=\"https://docs-aws.amazon.com/lake-formation/latest/dg/getting-started-setup.html#emr-switch\">(Optional) Allow Data Filtering on Amazon EMR</a>.</p>",
          "shape": "NullableBoolean"
        },
        "AuthorizedSessionTagValueList": {
          "documentation": "<p>Lake Formation relies on a privileged process secured by Amazon EMR or the third party integrator to tag the user's role while assuming it. Lake Formation will publish the acceptable key-value pair, for example key = \"LakeFormationTrustedCaller\" and value = \"TRUE\" and the third party integrator must properly tag the temporary security credentials that will be used to call Lake Formation's administrative APIs.</p>",
          "shape": "AuthorizedSessionTagValueList"
        },
        "CreateDatabaseDefaultPermissions": {
          "documentation": "<p>Specifies whether access control on newly created database is managed by Lake Formation permissions or exclusively by IAM permissions. You can override this default setting when you create a database.</p> <p>A null value indicates access control by Lake Formation permissions. A value that assigns ALL to IAM_ALLOWED_PRINCIPALS indicates access control by IAM permissions. This is referred to as the setting \"Use only IAM access control,\" and is for backward compatibility with the Glue permission model implemented by IAM permissions.</p> <p>The only permitted values are an empty array or an array that contains a single JSON object that grants ALL to IAM_ALLOWED_PRINCIPALS.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/lake-formation/latest/dg/change-settings.html\">Changing the Default Security Settings for Your Data Lake</a>.</p>",
          "shape": "PrincipalPermissionsList"
        },
        "CreateTableDefaultPermissions": {
          "documentation": "<p>Specifies whether access control on newly created table is managed by Lake Formation permissions or exclusively by IAM permissions.</p> <p>A null value indicates access control by Lake Formation permissions. A value that assigns ALL to IAM_ALLOWED_PRINCIPALS indicates access control by IAM permissions. This is referred to as the setting \"Use only IAM access control,\" and is for backward compatibility with the Glue permission model implemented by IAM permissions.</p> <p>The only permitted values are an empty array or an array that contains a single JSON object that grants ALL to IAM_ALLOWED_PRINCIPALS.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/lake-formation/latest/dg/change-settings.html\">Changing the Default Security Settings for Your Data Lake</a>.</p>",
          "shape": "PrincipalPermissionsList"
        },
        "DataLakeAdmins": {
          "documentation": "<p>A list of Lake Formation principals. Supported principals are IAM users or IAM roles.</p>",
          "shape": "DataLakePrincipalList"
        },
        "ExternalDataFilteringAllowList": {
          "documentation": "<p>A list of the account IDs of Amazon Web Services accounts with Amazon EMR clusters that are to perform data filtering.&gt;</p>",
          "shape": "DataLakePrincipalList"
        },
        "TrustedResourceOwners": {
          "documentation": "<p>A list of the resource-owning account IDs that the caller's account can use to share their user access details (user ARNs). The user ARNs can be logged in the resource owner's CloudTrail log.</p> <p>You may want to specify this property when you are in a high-trust boundary, such as the same team or company. </p>",
          "shape": "TrustedResourceOwners"
        }
      },
      "type": "structure"
    },
    "DataLocationResource": {
      "documentation": "<p>A structure for a data location object where permissions are granted or revoked. </p>",
      "members": {
        "CatalogId": {
          "documentation": "<p>The identifier for the Data Catalog where the location is registered with Lake Formation. By default, it is the account ID of the caller.</p>",
          "shape": "CatalogIdString"
        },
        "ResourceArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) that uniquely identifies the data location resource.</p>",
          "shape": "ResourceArnString"
        }
      },
      "required": [
        "ResourceArn"
      ],
      "type": "structure"
    },
    "DatabaseLFTagsList": {
      "member": {
        "shape": "TaggedDatabase"
      },
      "type": "list"
    },
    "DatabaseResource": {
      "documentation": "<p>A structure for the database object.</p>",
      "members": {
        "CatalogId": {
          "documentation": "<p>The identifier for the Data Catalog. By default, it is the account ID of the caller.</p>",
          "shape": "CatalogIdString"
        },
        "Name": {
          "documentation": "<p>The name of the database resource. Unique to the Data Catalog.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "DateTime": {
      "timestampFormat": "iso8601",
      "type": "timestamp"
    },
    "DeleteDataCellsFilterRequest": {
      "members": {
        "DatabaseName": {
          "documentation": "<p>A database in the Glue Data Catalog.</p>",
          "shape": "NameString"
        },
        "Name": {
          "documentation": "<p>The name given by the user to the data filter cell.</p>",
          "shape": "NameString"
        },
        "TableCatalogId": {
          "documentation": "<p>The ID of the catalog to which the table belongs.</p>",
          "shape": "CatalogIdString"
        },
        "TableName": {
          "documentation": "<p>A table in the database.</p>",
          "shape": "NameString"
        }
      },
      "type": "structure"
    },
    "DeleteDataCellsFilterResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteLFTagRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>",
          "shape": "CatalogIdString"
        },
        "TagKey": {
          "documentation": "<p>The key-name for the LF-tag to delete.</p>",
          "shape": "LFTagKey"
        }
      },
      "required": [
        "TagKey"
      ],
      "type": "structure"
    },
    "DeleteLFTagResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteObjectInput": {
      "documentation": "<p>An object to delete from the governed table.</p>",
      "members": {
        "ETag": {
          "documentation": "<p>The Amazon S3 ETag of the object. Returned by <code>GetTableObjects</code> for validation and used to identify changes to the underlying data.</p>",
          "shape": "ETagString"
        },
        "PartitionValues": {
          "documentation": "<p>A list of partition values for the object. A value must be specified for each partition key associated with the governed table.</p>",
          "shape": "PartitionValuesList"
        },
        "Uri": {
          "documentation": "<p>The Amazon S3 location of the object to delete.</p>",
          "shape": "URI"
        }
      },
      "required": [
        "Uri"
      ],
      "type": "structure"
    },
    "DeleteObjectsOnCancelRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The Glue data catalog that contains the governed table. Defaults to the current account ID.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>The database that contains the governed table.</p>",
          "shape": "NameString"
        },
        "Objects": {
          "documentation": "<p>A list of VirtualObject structures, which indicates the Amazon S3 objects to be deleted if the transaction cancels.</p>",
          "shape": "VirtualObjectList"
        },
        "TableName": {
          "documentation": "<p>The name of the governed table.</p>",
          "shape": "NameString"
        },
        "TransactionId": {
          "documentation": "<p>ID of the transaction that the writes occur in.</p>",
          "shape": "TransactionIdString"
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "TransactionId",
        "Objects"
      ],
      "type": "structure"
    },
    "DeleteObjectsOnCancelResponse": {
      "members": {},
      "type": "structure"
    },
    "DeregisterResourceRequest": {
      "members": {
        "ResourceArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the resource that you want to deregister.</p>",
          "shape": "ResourceArnString"
        }
      },
      "required": [
        "ResourceArn"
      ],
      "type": "structure"
    },
    "DeregisterResourceResponse": {
      "members": {},
      "type": "structure"
    },
    "DescribeResourceRequest": {
      "members": {
        "ResourceArn": {
          "documentation": "<p>The resource ARN.</p>",
          "shape": "ResourceArnString"
        }
      },
      "required": [
        "ResourceArn"
      ],
      "type": "structure"
    },
    "DescribeResourceResponse": {
      "members": {
        "ResourceInfo": {
          "documentation": "<p>A structure containing information about an Lake Formation resource.</p>",
          "shape": "ResourceInfo"
        }
      },
      "type": "structure"
    },
    "DescribeTransactionRequest": {
      "members": {
        "TransactionId": {
          "documentation": "<p>The transaction for which to return status.</p>",
          "shape": "TransactionIdString"
        }
      },
      "required": [
        "TransactionId"
      ],
      "type": "structure"
    },
    "DescribeTransactionResponse": {
      "members": {
        "TransactionDescription": {
          "documentation": "<p>Returns a <code>TransactionDescription</code> object containing information about the transaction.</p>",
          "shape": "TransactionDescription"
        }
      },
      "type": "structure"
    },
    "DescriptionString": {
      "max": 2048,
      "min": 0,
      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
      "type": "string"
    },
    "DetailsMap": {
      "documentation": "<p>A structure containing the additional details to be returned in the <code>AdditionalDetails</code> attribute of <code>PrincipalResourcePermissions</code>.</p> <p>If a catalog resource is shared through Resource Access Manager (RAM), then there will exist a corresponding RAM resource share ARN.</p>",
      "members": {
        "ResourceShare": {
          "documentation": "<p>A resource share ARN for a catalog resource shared through RAM.</p>",
          "shape": "ResourceShareList"
        }
      },
      "type": "structure"
    },
    "ETagString": {
      "max": 255,
      "min": 1,
      "pattern": "[\\p{L}\\p{N}\\p{P}]*",
      "type": "string"
    },
    "EntityNotFoundException": {
      "documentation": "<p>A specified entity does not exist</p>",
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "ErrorDetail": {
      "documentation": "<p>Contains details about an error.</p>",
      "members": {
        "ErrorCode": {
          "documentation": "<p>The code associated with this error.</p>",
          "shape": "NameString"
        },
        "ErrorMessage": {
          "documentation": "<p>A message describing the error.</p>",
          "shape": "DescriptionString"
        }
      },
      "type": "structure"
    },
    "ErrorMessageString": {
      "type": "string"
    },
    "ExecutionStatistics": {
      "documentation": "<p>Statistics related to the processing of a query statement.</p>",
      "members": {
        "AverageExecutionTimeMillis": {
          "documentation": "<p>The average time the request took to be executed.</p>",
          "shape": "NumberOfMilliseconds"
        },
        "DataScannedBytes": {
          "documentation": "<p>The amount of data that was scanned in bytes.</p>",
          "shape": "NumberOfBytes"
        },
        "WorkUnitsExecutedCount": {
          "documentation": "<p>The number of work units executed.</p>",
          "shape": "NumberOfItems"
        }
      },
      "type": "structure"
    },
    "ExpirationTimestamp": {
      "type": "timestamp"
    },
    "ExpiredException": {
      "documentation": "<p>Contains details about an error where the query request expired.</p>",
      "error": {
        "httpStatusCode": 410,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the error.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "Expression": {
      "max": 5,
      "member": {
        "shape": "LFTag"
      },
      "min": 1,
      "type": "list"
    },
    "ExtendTransactionRequest": {
      "members": {
        "TransactionId": {
          "documentation": "<p>The transaction to extend.</p>",
          "shape": "TransactionIdString"
        }
      },
      "type": "structure"
    },
    "ExtendTransactionResponse": {
      "members": {},
      "type": "structure"
    },
    "FieldNameString": {
      "enum": [
        "RESOURCE_ARN",
        "ROLE_ARN",
        "LAST_MODIFIED"
      ],
      "type": "string"
    },
    "FilterCondition": {
      "documentation": "<p>This structure describes the filtering of columns in a table based on a filter condition.</p>",
      "members": {
        "ComparisonOperator": {
          "documentation": "<p>The comparison operator used in the filter condition.</p>",
          "shape": "ComparisonOperator"
        },
        "Field": {
          "documentation": "<p>The field to filter in the filter condition.</p>",
          "shape": "FieldNameString"
        },
        "StringValueList": {
          "documentation": "<p>A string with values used in evaluating the filter condition.</p>",
          "shape": "StringValueList"
        }
      },
      "type": "structure"
    },
    "FilterConditionList": {
      "max": 20,
      "member": {
        "shape": "FilterCondition"
      },
      "min": 1,
      "type": "list"
    },
    "GetDataLakeSettingsRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>",
          "shape": "CatalogIdString"
        }
      },
      "type": "structure"
    },
    "GetDataLakeSettingsResponse": {
      "members": {
        "DataLakeSettings": {
          "documentation": "<p>A structure representing a list of Lake Formation principals designated as data lake administrators.</p>",
          "shape": "DataLakeSettings"
        }
      },
      "type": "structure"
    },
    "GetEffectivePermissionsForPathRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>",
          "shape": "CatalogIdString"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of results to return.</p>",
          "shape": "PageSize"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if this is not the first call to retrieve this list.</p>",
          "shape": "Token"
        },
        "ResourceArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the resource for which you want to get permissions.</p>",
          "shape": "ResourceArnString"
        }
      },
      "required": [
        "ResourceArn"
      ],
      "type": "structure"
    },
    "GetEffectivePermissionsForPathResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>A continuation token, if this is not the first call to retrieve this list.</p>",
          "shape": "Token"
        },
        "Permissions": {
          "documentation": "<p>A list of the permissions for the specified table or database resource located at the path in Amazon S3.</p>",
          "shape": "PrincipalResourcePermissionsList"
        }
      },
      "type": "structure"
    },
    "GetLFTagRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>",
          "shape": "CatalogIdString"
        },
        "TagKey": {
          "documentation": "<p>The key-name for the LF-tag.</p>",
          "shape": "LFTagKey"
        }
      },
      "required": [
        "TagKey"
      ],
      "type": "structure"
    },
    "GetLFTagResponse": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>",
          "shape": "CatalogIdString"
        },
        "TagKey": {
          "documentation": "<p>The key-name for the LF-tag.</p>",
          "shape": "LFTagKey"
        },
        "TagValues": {
          "documentation": "<p>A list of possible values an attribute can take.</p>",
          "shape": "TagValueList"
        }
      },
      "type": "structure"
    },
    "GetQueryStateRequest": {
      "members": {
        "QueryId": {
          "documentation": "<p>The ID of the plan query operation.</p>",
          "shape": "GetQueryStateRequestQueryIdString"
        }
      },
      "required": [
        "QueryId"
      ],
      "type": "structure"
    },
    "GetQueryStateRequestQueryIdString": {
      "max": 36,
      "min": 36,
      "type": "string"
    },
    "GetQueryStateResponse": {
      "documentation": "<p>A structure for the output.</p>",
      "members": {
        "Error": {
          "documentation": "<p>An error message when the operation fails.</p>",
          "shape": "ErrorMessageString"
        },
        "State": {
          "documentation": "<p>The state of a query previously submitted. The possible states are:</p> <ul> <li> <p>PENDING: the query is pending.</p> </li> <li> <p>WORKUNITS_AVAILABLE: some work units are ready for retrieval and execution.</p> </li> <li> <p>FINISHED: the query planning finished successfully, and all work units are ready for retrieval and execution.</p> </li> <li> <p>ERROR: an error occurred with the query, such as an invalid query ID or a backend error.</p> </li> </ul>",
          "shape": "QueryStateString"
        }
      },
      "required": [
        "State"
      ],
      "type": "structure"
    },
    "GetQueryStatisticsRequest": {
      "members": {
        "QueryId": {
          "documentation": "<p>The ID of the plan query operation.</p>",
          "shape": "GetQueryStatisticsRequestQueryIdString"
        }
      },
      "required": [
        "QueryId"
      ],
      "type": "structure"
    },
    "GetQueryStatisticsRequestQueryIdString": {
      "max": 36,
      "min": 36,
      "type": "string"
    },
    "GetQueryStatisticsResponse": {
      "members": {
        "ExecutionStatistics": {
          "documentation": "<p>An <code>ExecutionStatistics</code> structure containing execution statistics.</p>",
          "shape": "ExecutionStatistics"
        },
        "PlanningStatistics": {
          "documentation": "<p>A <code>PlanningStatistics</code> structure containing query planning statistics.</p>",
          "shape": "PlanningStatistics"
        },
        "QuerySubmissionTime": {
          "documentation": "<p>The time that the query was submitted.</p>",
          "shape": "DateTime"
        }
      },
      "type": "structure"
    },
    "GetResourceLFTagsRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>",
          "shape": "CatalogIdString"
        },
        "Resource": {
          "documentation": "<p>The database, table, or column resource for which you want to return LF-tags.</p>",
          "shape": "Resource"
        },
        "ShowAssignedLFTags": {
          "documentation": "<p>Indicates whether to show the assigned LF-tags.</p>",
          "shape": "BooleanNullable"
        }
      },
      "required": [
        "Resource"
      ],
      "type": "structure"
    },
    "GetResourceLFTagsResponse": {
      "members": {
        "LFTagOnDatabase": {
          "documentation": "<p>A list of LF-tags applied to a database resource.</p>",
          "shape": "LFTagsList"
        },
        "LFTagsOnColumns": {
          "documentation": "<p>A list of LF-tags applied to a column resource.</p>",
          "shape": "ColumnLFTagsList"
        },
        "LFTagsOnTable": {
          "documentation": "<p>A list of LF-tags applied to a table resource.</p>",
          "shape": "LFTagsList"
        }
      },
      "type": "structure"
    },
    "GetTableObjectsRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The catalog containing the governed table. Defaults to the caller\u2019s account.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>The database containing the governed table.</p>",
          "shape": "NameString"
        },
        "MaxResults": {
          "documentation": "<p>Specifies how many values to return in a page.</p>",
          "shape": "PageSize"
        },
        "NextToken": {
          "documentation": "<p>A continuation token if this is not the first call to retrieve these objects.</p>",
          "shape": "TokenString"
        },
        "PartitionPredicate": {
          "documentation": "<p>A predicate to filter the objects returned based on the partition keys defined in the governed table.</p> <ul> <li> <p>The comparison operators supported are: =, &gt;, &lt;, &gt;=, &lt;=</p> </li> <li> <p>The logical operators supported are: AND</p> </li> <li> <p>The data types supported are integer, long, date(yyyy-MM-dd), timestamp(yyyy-MM-dd HH:mm:ssXXX or yyyy-MM-dd HH:mm:ss\"), string and decimal.</p> </li> </ul>",
          "shape": "PredicateString"
        },
        "QueryAsOfTime": {
          "documentation": "<p>The time as of when to read the governed table contents. If not set, the most recent transaction commit time is used. Cannot be specified along with <code>TransactionId</code>.</p>",
          "shape": "Timestamp"
        },
        "TableName": {
          "documentation": "<p>The governed table for which to retrieve objects.</p>",
          "shape": "NameString"
        },
        "TransactionId": {
          "documentation": "<p>The transaction ID at which to read the governed table contents. If this transaction has aborted, an error is returned. If not set, defaults to the most recent committed transaction. Cannot be specified along with <code>QueryAsOfTime</code>.</p>",
          "shape": "TransactionIdString"
        }
      },
      "required": [
        "DatabaseName",
        "TableName"
      ],
      "type": "structure"
    },
    "GetTableObjectsResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>A continuation token indicating whether additional data is available.</p>",
          "shape": "TokenString"
        },
        "Objects": {
          "documentation": "<p>A list of objects organized by partition keys.</p>",
          "shape": "PartitionedTableObjectsList"
        }
      },
      "type": "structure"
    },
    "GetTemporaryGluePartitionCredentialsRequest": {
      "members": {
        "AuditContext": {
          "documentation": "<p>A structure representing context to access a resource (column names, query ID, etc).</p>",
          "shape": "AuditContext"
        },
        "DurationSeconds": {
          "documentation": "<p>The time period, between 900 and 21,600 seconds, for the timeout of the temporary credentials.</p>",
          "shape": "CredentialTimeoutDurationSecondInteger"
        },
        "Partition": {
          "documentation": "<p>A list of partition values identifying a single partition.</p>",
          "shape": "PartitionValueList"
        },
        "Permissions": {
          "documentation": "<p>Filters the request based on the user having been granted a list of specified permissions on the requested resource(s).</p>",
          "shape": "PermissionList"
        },
        "SupportedPermissionTypes": {
          "documentation": "<p>A list of supported permission types for the partition. Valid values are <code>COLUMN_PERMISSION</code> and <code>CELL_FILTER_PERMISSION</code>.</p>",
          "shape": "PermissionTypeList"
        },
        "TableArn": {
          "documentation": "<p>The ARN of the partitions' table.</p>",
          "shape": "ResourceArnString"
        }
      },
      "required": [
        "TableArn",
        "Partition",
        "SupportedPermissionTypes"
      ],
      "type": "structure"
    },
    "GetTemporaryGluePartitionCredentialsResponse": {
      "members": {
        "AccessKeyId": {
          "documentation": "<p>The access key ID for the temporary credentials.</p>",
          "shape": "AccessKeyIdString"
        },
        "Expiration": {
          "documentation": "<p>The date and time when the temporary credentials expire.</p>",
          "shape": "ExpirationTimestamp"
        },
        "SecretAccessKey": {
          "documentation": "<p>The secret key for the temporary credentials.</p>",
          "shape": "SecretAccessKeyString"
        },
        "SessionToken": {
          "documentation": "<p>The session token for the temporary credentials.</p>",
          "shape": "SessionTokenString"
        }
      },
      "type": "structure"
    },
    "GetTemporaryGlueTableCredentialsRequest": {
      "members": {
        "AuditContext": {
          "documentation": "<p>A structure representing context to access a resource (column names, query ID, etc).</p>",
          "shape": "AuditContext"
        },
        "DurationSeconds": {
          "documentation": "<p>The time period, between 900 and 21,600 seconds, for the timeout of the temporary credentials.</p>",
          "shape": "CredentialTimeoutDurationSecondInteger"
        },
        "Permissions": {
          "documentation": "<p>Filters the request based on the user having been granted a list of specified permissions on the requested resource(s).</p>",
          "shape": "PermissionList"
        },
        "SupportedPermissionTypes": {
          "documentation": "<p>A list of supported permission types for the table. Valid values are <code>COLUMN_PERMISSION</code> and <code>CELL_FILTER_PERMISSION</code>.</p>",
          "shape": "PermissionTypeList"
        },
        "TableArn": {
          "documentation": "<p>The ARN identifying a table in the Data Catalog for the temporary credentials request.</p>",
          "shape": "ResourceArnString"
        }
      },
      "required": [
        "TableArn",
        "SupportedPermissionTypes"
      ],
      "type": "structure"
    },
    "GetTemporaryGlueTableCredentialsResponse": {
      "members": {
        "AccessKeyId": {
          "documentation": "<p>The access key ID for the temporary credentials.</p>",
          "shape": "AccessKeyIdString"
        },
        "Expiration": {
          "documentation": "<p>The date and time when the temporary credentials expire.</p>",
          "shape": "ExpirationTimestamp"
        },
        "SecretAccessKey": {
          "documentation": "<p>The secret key for the temporary credentials.</p>",
          "shape": "SecretAccessKeyString"
        },
        "SessionToken": {
          "documentation": "<p>The session token for the temporary credentials.</p>",
          "shape": "SessionTokenString"
        }
      },
      "type": "structure"
    },
    "GetWorkUnitResultsRequest": {
      "members": {
        "QueryId": {
          "documentation": "<p>The ID of the plan query operation for which to get results.</p>",
          "shape": "GetWorkUnitResultsRequestQueryIdString"
        },
        "WorkUnitId": {
          "documentation": "<p>The work unit ID for which to get results. Value generated by enumerating <code>WorkUnitIdMin</code> to <code>WorkUnitIdMax</code> (inclusive) from the <code>WorkUnitRange</code> in the output of <code>GetWorkUnits</code>.</p>",
          "shape": "GetWorkUnitResultsRequestWorkUnitIdLong"
        },
        "WorkUnitToken": {
          "documentation": "<p>A work token used to query the execution service. Token output from <code>GetWorkUnits</code>.</p>",
          "shape": "SyntheticGetWorkUnitResultsRequestWorkUnitTokenString"
        }
      },
      "required": [
        "QueryId",
        "WorkUnitId",
        "WorkUnitToken"
      ],
      "type": "structure"
    },
    "GetWorkUnitResultsRequestQueryIdString": {
      "max": 36,
      "min": 36,
      "type": "string"
    },
    "GetWorkUnitResultsRequestWorkUnitIdLong": {
      "min": 0,
      "type": "long"
    },
    "GetWorkUnitResultsResponse": {
      "documentation": "<p>A structure for the output.</p>",
      "members": {
        "ResultStream": {
          "documentation": "<p>Rows returned from the <code>GetWorkUnitResults</code> operation as a stream of Apache Arrow v1.0 messages.</p>",
          "shape": "ResultStream"
        }
      },
      "payload": "ResultStream",
      "type": "structure"
    },
    "GetWorkUnitsRequest": {
      "members": {
        "NextToken": {
          "documentation": "<p>A continuation token, if this is a continuation call.</p>",
          "shape": "Token"
        },
        "PageSize": {
          "documentation": "<p>The size of each page to get in the Amazon Web Services service call. This does not affect the number of items returned in the command's output. Setting a smaller page size results in more calls to the Amazon Web Services service, retrieving fewer items in each call. This can help prevent the Amazon Web Services service calls from timing out.</p>",
          "shape": "Integer"
        },
        "QueryId": {
          "documentation": "<p>The ID of the plan query operation.</p>",
          "shape": "GetWorkUnitsRequestQueryIdString"
        }
      },
      "required": [
        "QueryId"
      ],
      "type": "structure"
    },
    "GetWorkUnitsRequestQueryIdString": {
      "max": 36,
      "min": 36,
      "type": "string"
    },
    "GetWorkUnitsResponse": {
      "documentation": "<p>A structure for the output.</p>",
      "members": {
        "NextToken": {
          "documentation": "<p>A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.</p>",
          "shape": "Token"
        },
        "QueryId": {
          "documentation": "<p>The ID of the plan query operation.</p>",
          "shape": "QueryIdString"
        },
        "WorkUnitRanges": {
          "documentation": "<p>A <code>WorkUnitRangeList</code> object that specifies the valid range of work unit IDs for querying the execution service.</p>",
          "shape": "WorkUnitRangeList"
        }
      },
      "required": [
        "QueryId",
        "WorkUnitRanges"
      ],
      "type": "structure"
    },
    "GlueEncryptionException": {
      "documentation": "<p>An encryption operation failed.</p>",
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "GrantPermissionsRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>",
          "shape": "CatalogIdString"
        },
        "Permissions": {
          "documentation": "<p>The permissions granted to the principal on the resource. Lake Formation defines privileges to grant and revoke access to metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3. Lake Formation requires that each principal be authorized to perform a specific task on Lake Formation resources. </p>",
          "shape": "PermissionList"
        },
        "PermissionsWithGrantOption": {
          "documentation": "<p>Indicates a list of the granted permissions that the principal may pass to other users. These permissions may only be a subset of the permissions granted in the <code>Privileges</code>.</p>",
          "shape": "PermissionList"
        },
        "Principal": {
          "documentation": "<p>The principal to be granted the permissions on the resource. Supported principals are IAM users or IAM roles, and they are defined by their principal type and their ARN.</p> <p>Note that if you define a resource with a particular ARN, then later delete, and recreate a resource with that same ARN, the resource maintains the permissions already granted. </p>",
          "shape": "DataLakePrincipal"
        },
        "Resource": {
          "documentation": "<p>The resource to which permissions are to be granted. Resources in Lake Formation are the Data Catalog, databases, and tables.</p>",
          "shape": "Resource"
        }
      },
      "required": [
        "Principal",
        "Resource",
        "Permissions"
      ],
      "type": "structure"
    },
    "GrantPermissionsResponse": {
      "members": {},
      "type": "structure"
    },
    "IAMRoleArn": {
      "pattern": "arn:aws:iam::[0-9]*:role/.*",
      "type": "string"
    },
    "IAMSAMLProviderArn": {
      "pattern": "arn:aws:iam::[0-9]*:saml-provider/.*",
      "type": "string"
    },
    "Identifier": {
      "max": 255,
      "min": 1,
      "type": "string"
    },
    "Integer": {
      "box": true,
      "type": "integer"
    },
    "InternalServiceException": {
      "documentation": "<p>An internal service error occurred.</p>",
      "error": {
        "httpStatusCode": 500
      },
      "exception": true,
      "fault": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "InvalidInputException": {
      "documentation": "<p>The input provided was not valid.</p>",
      "error": {
        "httpStatusCode": 400,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "LFTag": {
      "documentation": "<p>A structure that allows an admin to grant user permissions on certain conditions. For example, granting a role access to all columns that do not have the LF-tag 'PII' in tables that have the LF-tag 'Prod'.</p>",
      "members": {
        "TagKey": {
          "documentation": "<p>The key-name for the LF-tag.</p>",
          "shape": "LFTagKey"
        },
        "TagValues": {
          "documentation": "<p>A list of possible values an attribute can take.</p>",
          "shape": "TagValueList"
        }
      },
      "required": [
        "TagKey",
        "TagValues"
      ],
      "type": "structure"
    },
    "LFTagError": {
      "documentation": "<p>A structure containing an error related to a <code>TagResource</code> or <code>UnTagResource</code> operation.</p>",
      "members": {
        "Error": {
          "documentation": "<p>An error that occurred with the attachment or detachment of the LF-tag.</p>",
          "shape": "ErrorDetail"
        },
        "LFTag": {
          "documentation": "<p>The key-name of the LF-tag.</p>",
          "shape": "LFTagPair"
        }
      },
      "type": "structure"
    },
    "LFTagErrors": {
      "member": {
        "shape": "LFTagError"
      },
      "type": "list"
    },
    "LFTagKey": {
      "max": 128,
      "min": 1,
      "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:\\/=+\\-@%]*)$",
      "type": "string"
    },
    "LFTagKeyResource": {
      "documentation": "<p>A structure containing an LF-tag key and values for a resource.</p>",
      "members": {
        "CatalogId": {
          "documentation": "<p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>",
          "shape": "CatalogIdString"
        },
        "TagKey": {
          "documentation": "<p>The key-name for the LF-tag.</p>",
          "shape": "NameString"
        },
        "TagValues": {
          "documentation": "<p>A list of possible values an attribute can take.</p>",
          "shape": "TagValueList"
        }
      },
      "required": [
        "TagKey",
        "TagValues"
      ],
      "type": "structure"
    },
    "LFTagPair": {
      "documentation": "<p>A structure containing an LF-tag key-value pair.</p>",
      "members": {
        "CatalogId": {
          "documentation": "<p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>",
          "shape": "CatalogIdString"
        },
        "TagKey": {
          "documentation": "<p>The key-name for the LF-tag.</p>",
          "shape": "LFTagKey"
        },
        "TagValues": {
          "documentation": "<p>A list of possible values an attribute can take.</p>",
          "shape": "TagValueList"
        }
      },
      "required": [
        "TagKey",
        "TagValues"
      ],
      "type": "structure"
    },
    "LFTagPolicyResource": {
      "documentation": "<p>A structure containing a list of LF-tag conditions that apply to a resource's LF-tag policy.</p>",
      "members": {
        "CatalogId": {
          "documentation": "<p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>",
          "shape": "CatalogIdString"
        },
        "Expression": {
          "documentation": "<p>A list of LF-tag conditions that apply to the resource's LF-tag policy.</p>",
          "shape": "Expression"
        },
        "ResourceType": {
          "documentation": "<p>The resource type for which the LF-tag policy applies.</p>",
          "shape": "ResourceType"
        }
      },
      "required": [
        "ResourceType",
        "Expression"
      ],
      "type": "structure"
    },
    "LFTagValue": {
      "max": 256,
      "min": 0,
      "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:\\*\\/=+\\-@%]*)$",
      "type": "string"
    },
    "LFTagsList": {
      "max": 50,
      "member": {
        "shape": "LFTagPair"
      },
      "min": 1,
      "type": "list"
    },
    "LastModifiedTimestamp": {
      "type": "timestamp"
    },
    "ListDataCellsFilterRequest": {
      "members": {
        "MaxResults": {
          "documentation": "<p>The maximum size of the response.</p>",
          "shape": "PageSize"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if this is a continuation call.</p>",
          "shape": "Token"
        },
        "Table": {
          "documentation": "<p>A table in the Glue Data Catalog.</p>",
          "shape": "TableResource"
        }
      },
      "type": "structure"
    },
    "ListDataCellsFilterResponse": {
      "members": {
        "DataCellsFilters": {
          "documentation": "<p>A list of <code>DataCellFilter</code> structures.</p>",
          "shape": "DataCellsFilterList"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if not all requested data cell filters have been returned.</p>",
          "shape": "Token"
        }
      },
      "type": "structure"
    },
    "ListLFTagsRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>",
          "shape": "CatalogIdString"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of results to return.</p>",
          "shape": "PageSize"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if this is not the first call to retrieve this list.</p>",
          "shape": "Token"
        },
        "ResourceShareType": {
          "documentation": "<p>If resource share type is <code>ALL</code>, returns both in-account LF-tags and shared LF-tags that the requester has permission to view. If resource share type is <code>FOREIGN</code>, returns all share LF-tags that the requester can view. If no resource share type is passed, lists LF-tags in the given catalog ID that the requester has permission to view.</p>",
          "shape": "ResourceShareType"
        }
      },
      "type": "structure"
    },
    "ListLFTagsResponse": {
      "members": {
        "LFTags": {
          "documentation": "<p>A list of LF-tags that the requested has permission to view.</p>",
          "shape": "LFTagsList"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, present if the current list segment is not the last.</p>",
          "shape": "Token"
        }
      },
      "type": "structure"
    },
    "ListPermissionsRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>",
          "shape": "CatalogIdString"
        },
        "IncludeRelated": {
          "documentation": "<p>Indicates that related permissions should be included in the results.</p>",
          "shape": "TrueFalseString"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of results to return.</p>",
          "shape": "PageSize"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if this is not the first call to retrieve this list.</p>",
          "shape": "Token"
        },
        "Principal": {
          "documentation": "<p>Specifies a principal to filter the permissions returned.</p>",
          "shape": "DataLakePrincipal"
        },
        "Resource": {
          "documentation": "<p>A resource where you will get a list of the principal permissions.</p> <p>This operation does not support getting privileges on a table with columns. Instead, call this operation on the table, and the operation returns the table and the table w columns.</p>",
          "shape": "Resource"
        },
        "ResourceType": {
          "documentation": "<p>Specifies a resource type to filter the permissions returned.</p>",
          "shape": "DataLakeResourceType"
        }
      },
      "type": "structure"
    },
    "ListPermissionsResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>A continuation token, if this is not the first call to retrieve this list.</p>",
          "shape": "Token"
        },
        "PrincipalResourcePermissions": {
          "documentation": "<p>A list of principals and their permissions on the resource for the specified principal and resource types.</p>",
          "shape": "PrincipalResourcePermissionsList"
        }
      },
      "type": "structure"
    },
    "ListResourcesRequest": {
      "members": {
        "FilterConditionList": {
          "documentation": "<p>Any applicable row-level and/or column-level filtering conditions for the resources.</p>",
          "shape": "FilterConditionList"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of resource results.</p>",
          "shape": "PageSize"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if this is not the first call to retrieve these resources.</p>",
          "shape": "Token"
        }
      },
      "type": "structure"
    },
    "ListResourcesResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>A continuation token, if this is not the first call to retrieve these resources.</p>",
          "shape": "Token"
        },
        "ResourceInfoList": {
          "documentation": "<p>A summary of the data lake resources.</p>",
          "shape": "ResourceInfoList"
        }
      },
      "type": "structure"
    },
    "ListTableStorageOptimizersRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The Catalog ID of the table.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>Name of the database where the table is present.</p>",
          "shape": "NameString"
        },
        "MaxResults": {
          "documentation": "<p>The number of storage optimizers to return on each call.</p>",
          "shape": "PageSize"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if this is a continuation call.</p>",
          "shape": "Token"
        },
        "StorageOptimizerType": {
          "documentation": "<p>The specific type of storage optimizers to list. The supported value is <code>compaction</code>.</p>",
          "shape": "OptimizerType"
        },
        "TableName": {
          "documentation": "<p>Name of the table.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "DatabaseName",
        "TableName"
      ],
      "type": "structure"
    },
    "ListTableStorageOptimizersResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.</p>",
          "shape": "Token"
        },
        "StorageOptimizerList": {
          "documentation": "<p>A list of the storage optimizers associated with a table.</p>",
          "shape": "StorageOptimizerList"
        }
      },
      "type": "structure"
    },
    "ListTransactionsRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The catalog for which to list transactions. Defaults to the account ID of the caller.</p>",
          "shape": "CatalogIdString"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of transactions to return in a single call.</p>",
          "shape": "PageSize"
        },
        "NextToken": {
          "documentation": "<p>A continuation token if this is not the first call to retrieve transactions.</p>",
          "shape": "TokenString"
        },
        "StatusFilter": {
          "documentation": "<p> A filter indicating the status of transactions to return. Options are ALL | COMPLETED | COMMITTED | ABORTED | ACTIVE. The default is <code>ALL</code>.</p>",
          "shape": "TransactionStatusFilter"
        }
      },
      "type": "structure"
    },
    "ListTransactionsResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>A continuation token indicating whether additional data is available.</p>",
          "shape": "TokenString"
        },
        "Transactions": {
          "documentation": "<p>A list of transactions. The record for each transaction is a <code>TransactionDescription</code> object.</p>",
          "shape": "TransactionDescriptionList"
        }
      },
      "type": "structure"
    },
    "MessageString": {
      "type": "string"
    },
    "NameString": {
      "max": 255,
      "min": 1,
      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
      "type": "string"
    },
    "NullableBoolean": {
      "box": true,
      "type": "boolean"
    },
    "NumberOfBytes": {
      "type": "long"
    },
    "NumberOfItems": {
      "type": "long"
    },
    "NumberOfMilliseconds": {
      "type": "long"
    },
    "ObjectSize": {
      "type": "long"
    },
    "OperationTimeoutException": {
      "documentation": "<p>The operation timed out.</p>",
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "OptimizerType": {
      "enum": [
        "COMPACTION",
        "GARBAGE_COLLECTION",
        "ALL"
      ],
      "type": "string"
    },
    "PageSize": {
      "box": true,
      "max": 1000,
      "min": 1,
      "type": "integer"
    },
    "PartitionObjects": {
      "documentation": "<p>A structure containing a list of partition values and table objects.</p>",
      "members": {
        "Objects": {
          "documentation": "<p>A list of table objects</p>",
          "shape": "TableObjectList"
        },
        "PartitionValues": {
          "documentation": "<p>A list of partition values.</p>",
          "shape": "PartitionValuesList"
        }
      },
      "type": "structure"
    },
    "PartitionValueList": {
      "documentation": "<p>Contains a list of values defining partitions.</p>",
      "members": {
        "Values": {
          "documentation": "<p>The list of partition values.</p>",
          "shape": "ValueStringList"
        }
      },
      "required": [
        "Values"
      ],
      "type": "structure"
    },
    "PartitionValueString": {
      "max": 1024,
      "type": "string"
    },
    "PartitionValuesList": {
      "max": 100,
      "member": {
        "shape": "PartitionValueString"
      },
      "min": 1,
      "type": "list"
    },
    "PartitionedTableObjectsList": {
      "member": {
        "shape": "PartitionObjects"
      },
      "type": "list"
    },
    "Permission": {
      "enum": [
        "ALL",
        "SELECT",
        "ALTER",
        "DROP",
        "DELETE",
        "INSERT",
        "DESCRIBE",
        "CREATE_DATABASE",
        "CREATE_TABLE",
        "DATA_LOCATION_ACCESS",
        "CREATE_TAG",
        "ASSOCIATE"
      ],
      "type": "string"
    },
    "PermissionList": {
      "member": {
        "shape": "Permission"
      },
      "type": "list"
    },
    "PermissionType": {
      "enum": [
        "COLUMN_PERMISSION",
        "CELL_FILTER_PERMISSION"
      ],
      "type": "string"
    },
    "PermissionTypeList": {
      "max": 255,
      "member": {
        "shape": "PermissionType"
      },
      "min": 1,
      "type": "list"
    },
    "PermissionTypeMismatchException": {
      "documentation": "<p>The engine does not support filtering data based on the enforced permissions. For example, if you call the <code>GetTemporaryGlueTableCredentials</code> operation with <code>SupportedPermissionType</code> equal to <code>ColumnPermission</code>, but cell-level permissions exist on the table, this exception is thrown.</p>",
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "PlanningStatistics": {
      "documentation": "<p>Statistics related to the processing of a query statement.</p>",
      "members": {
        "EstimatedDataToScanBytes": {
          "documentation": "<p>An estimate of the data that was scanned in bytes.</p>",
          "shape": "NumberOfBytes"
        },
        "PlanningTimeMillis": {
          "documentation": "<p>The time that it took to process the request.</p>",
          "shape": "NumberOfMilliseconds"
        },
        "QueueTimeMillis": {
          "documentation": "<p>The time the request was in queue to be processed.</p>",
          "shape": "NumberOfMilliseconds"
        },
        "WorkUnitsGeneratedCount": {
          "documentation": "<p>The number of work units generated.</p>",
          "shape": "NumberOfItems"
        }
      },
      "type": "structure"
    },
    "PredicateString": {
      "max": 2048,
      "min": 0,
      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
      "type": "string"
    },
    "PrincipalPermissions": {
      "documentation": "<p>Permissions granted to a principal.</p>",
      "members": {
        "Permissions": {
          "documentation": "<p>The permissions that are granted to the principal.</p>",
          "shape": "PermissionList"
        },
        "Principal": {
          "documentation": "<p>The principal who is granted permissions.</p>",
          "shape": "DataLakePrincipal"
        }
      },
      "type": "structure"
    },
    "PrincipalPermissionsList": {
      "member": {
        "shape": "PrincipalPermissions"
      },
      "type": "list"
    },
    "PrincipalResourcePermissions": {
      "documentation": "<p>The permissions granted or revoked on a resource.</p>",
      "members": {
        "AdditionalDetails": {
          "documentation": "<p>This attribute can be used to return any additional details of <code>PrincipalResourcePermissions</code>. Currently returns only as a RAM resource share ARN.</p>",
          "shape": "DetailsMap"
        },
        "Permissions": {
          "documentation": "<p>The permissions to be granted or revoked on the resource.</p>",
          "shape": "PermissionList"
        },
        "PermissionsWithGrantOption": {
          "documentation": "<p>Indicates whether to grant the ability to grant permissions (as a subset of permissions granted).</p>",
          "shape": "PermissionList"
        },
        "Principal": {
          "documentation": "<p>The Data Lake principal to be granted or revoked permissions.</p>",
          "shape": "DataLakePrincipal"
        },
        "Resource": {
          "documentation": "<p>The resource where permissions are to be granted or revoked.</p>",
          "shape": "Resource"
        }
      },
      "type": "structure"
    },
    "PrincipalResourcePermissionsList": {
      "member": {
        "shape": "PrincipalResourcePermissions"
      },
      "type": "list"
    },
    "PutDataLakeSettingsRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>",
          "shape": "CatalogIdString"
        },
        "DataLakeSettings": {
          "documentation": "<p>A structure representing a list of Lake Formation principals designated as data lake administrators.</p>",
          "shape": "DataLakeSettings"
        }
      },
      "required": [
        "DataLakeSettings"
      ],
      "type": "structure"
    },
    "PutDataLakeSettingsResponse": {
      "members": {},
      "type": "structure"
    },
    "QueryIdString": {
      "type": "string"
    },
    "QueryParameterMap": {
      "key": {
        "shape": "String"
      },
      "type": "map",
      "value": {
        "shape": "String"
      }
    },
    "QueryPlanningContext": {
      "documentation": "<p>A structure containing information about the query plan.</p>",
      "members": {
        "CatalogId": {
          "documentation": "<p>The ID of the Data Catalog where the partition in question resides. If none is provided, the Amazon Web Services account ID is used by default.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>The database containing the table.</p>",
          "shape": "QueryPlanningContextDatabaseNameString"
        },
        "QueryAsOfTime": {
          "documentation": "<p>The time as of when to read the table contents. If not set, the most recent transaction commit time will be used. Cannot be specified along with <code>TransactionId</code>.</p>",
          "shape": "Timestamp"
        },
        "QueryParameters": {
          "documentation": "<p>A map consisting of key-value pairs.</p>",
          "shape": "QueryParameterMap"
        },
        "TransactionId": {
          "documentation": "<p>The transaction ID at which to read the table contents. If this transaction is not committed, the read will be treated as part of that transaction and will see its writes. If this transaction has aborted, an error will be returned. If not set, defaults to the most recent committed transaction. Cannot be specified along with <code>QueryAsOfTime</code>.</p>",
          "shape": "TransactionIdString"
        }
      },
      "required": [
        "DatabaseName"
      ],
      "type": "structure"
    },
    "QueryPlanningContextDatabaseNameString": {
      "min": 1,
      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
      "type": "string"
    },
    "QueryStateString": {
      "enum": [
        "PENDING",
        "WORKUNITS_AVAILABLE",
        "ERROR",
        "FINISHED",
        "EXPIRED"
      ],
      "type": "string"
    },
    "RAMResourceShareArn": {
      "type": "string"
    },
    "RegisterResourceRequest": {
      "members": {
        "ResourceArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the resource that you want to register.</p>",
          "shape": "ResourceArnString"
        },
        "RoleArn": {
          "documentation": "<p>The identifier for the role that registers the resource.</p>",
          "shape": "IAMRoleArn"
        },
        "UseServiceLinkedRole": {
          "documentation": "<p>Designates an Identity and Access Management (IAM) service-linked role by registering this role with the Data Catalog. A service-linked role is a unique type of IAM role that is linked directly to Lake Formation.</p> <p>For more information, see <a href=\"https://docs-aws.amazon.com/lake-formation/latest/dg/service-linked-roles.html\">Using Service-Linked Roles for Lake Formation</a>.</p>",
          "shape": "NullableBoolean"
        }
      },
      "required": [
        "ResourceArn"
      ],
      "type": "structure"
    },
    "RegisterResourceResponse": {
      "members": {},
      "type": "structure"
    },
    "RemoveLFTagsFromResourceRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>",
          "shape": "CatalogIdString"
        },
        "LFTags": {
          "documentation": "<p>The LF-tags to be removed from the resource.</p>",
          "shape": "LFTagsList"
        },
        "Resource": {
          "documentation": "<p>The database, table, or column resource where you want to remove an LF-tag.</p>",
          "shape": "Resource"
        }
      },
      "required": [
        "Resource",
        "LFTags"
      ],
      "type": "structure"
    },
    "RemoveLFTagsFromResourceResponse": {
      "members": {
        "Failures": {
          "documentation": "<p>A list of failures to untag a resource.</p>",
          "shape": "LFTagErrors"
        }
      },
      "type": "structure"
    },
    "Resource": {
      "documentation": "<p>A structure for the resource.</p>",
      "members": {
        "Catalog": {
          "documentation": "<p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>",
          "shape": "CatalogResource"
        },
        "DataCellsFilter": {
          "documentation": "<p>A data cell filter.</p>",
          "shape": "DataCellsFilterResource"
        },
        "DataLocation": {
          "documentation": "<p>The location of an Amazon S3 path where permissions are granted or revoked. </p>",
          "shape": "DataLocationResource"
        },
        "Database": {
          "documentation": "<p>The database for the resource. Unique to the Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database permissions to a principal. </p>",
          "shape": "DatabaseResource"
        },
        "LFTag": {
          "documentation": "<p>The LF-tag key and values attached to a resource.</p>",
          "shape": "LFTagKeyResource"
        },
        "LFTagPolicy": {
          "documentation": "<p>A list of LF-tag conditions that define a resource's LF-tag policy.</p>",
          "shape": "LFTagPolicyResource"
        },
        "Table": {
          "documentation": "<p>The table for the resource. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal. </p>",
          "shape": "TableResource"
        },
        "TableWithColumns": {
          "documentation": "<p>The table with columns for the resource. A principal with permissions to this resource can select metadata from the columns of a table in the Data Catalog and the underlying data in Amazon S3.</p>",
          "shape": "TableWithColumnsResource"
        }
      },
      "type": "structure"
    },
    "ResourceArnString": {
      "type": "string"
    },
    "ResourceInfo": {
      "documentation": "<p>A structure containing information about an Lake Formation resource.</p>",
      "members": {
        "LastModified": {
          "documentation": "<p>The date and time the resource was last modified.</p>",
          "shape": "LastModifiedTimestamp"
        },
        "ResourceArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the resource.</p>",
          "shape": "ResourceArnString"
        },
        "RoleArn": {
          "documentation": "<p>The IAM role that registered a resource.</p>",
          "shape": "IAMRoleArn"
        }
      },
      "type": "structure"
    },
    "ResourceInfoList": {
      "member": {
        "shape": "ResourceInfo"
      },
      "type": "list"
    },
    "ResourceNotReadyException": {
      "documentation": "<p>Contains details about an error related to a resource which is not ready for a transaction.</p>",
      "error": {
        "httpStatusCode": 400
      },
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the error.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "ResourceNumberLimitExceededException": {
      "documentation": "<p>A resource numerical limit was exceeded.</p>",
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the problem.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "ResourceShareList": {
      "member": {
        "shape": "RAMResourceShareArn"
      },
      "type": "list"
    },
    "ResourceShareType": {
      "enum": [
        "FOREIGN",
        "ALL"
      ],
      "type": "string"
    },
    "ResourceType": {
      "enum": [
        "DATABASE",
        "TABLE"
      ],
      "type": "string"
    },
    "Result": {
      "type": "string"
    },
    "ResultStream": {
      "streaming": true,
      "type": "blob"
    },
    "RevokePermissionsRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>",
          "shape": "CatalogIdString"
        },
        "Permissions": {
          "documentation": "<p>The permissions revoked to the principal on the resource. For information about permissions, see <a href=\"https://docs-aws.amazon.com/lake-formation/latest/dg/security-data-access.html\">Security and Access Control to Metadata and Data</a>.</p>",
          "shape": "PermissionList"
        },
        "PermissionsWithGrantOption": {
          "documentation": "<p>Indicates a list of permissions for which to revoke the grant option allowing the principal to pass permissions to other principals.</p>",
          "shape": "PermissionList"
        },
        "Principal": {
          "documentation": "<p>The principal to be revoked permissions on the resource.</p>",
          "shape": "DataLakePrincipal"
        },
        "Resource": {
          "documentation": "<p>The resource to which permissions are to be revoked.</p>",
          "shape": "Resource"
        }
      },
      "required": [
        "Principal",
        "Resource",
        "Permissions"
      ],
      "type": "structure"
    },
    "RevokePermissionsResponse": {
      "members": {},
      "type": "structure"
    },
    "RowFilter": {
      "documentation": "<p>A PartiQL predicate.</p>",
      "members": {
        "AllRowsWildcard": {
          "documentation": "<p>A wildcard for all rows.</p>",
          "shape": "AllRowsWildcard"
        },
        "FilterExpression": {
          "documentation": "<p>A filter expression.</p>",
          "shape": "PredicateString"
        }
      },
      "type": "structure"
    },
    "SAMLAssertionString": {
      "max": 100000,
      "min": 4,
      "type": "string"
    },
    "SearchDatabasesByLFTagsRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>",
          "shape": "CatalogIdString"
        },
        "Expression": {
          "documentation": "<p>A list of conditions (<code>LFTag</code> structures) to search for in database resources.</p>",
          "shape": "Expression"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of results to return.</p>",
          "shape": "PageSize"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if this is not the first call to retrieve this list.</p>",
          "shape": "Token"
        }
      },
      "required": [
        "Expression"
      ],
      "type": "structure"
    },
    "SearchDatabasesByLFTagsResponse": {
      "members": {
        "DatabaseList": {
          "documentation": "<p>A list of databases that meet the LF-tag conditions.</p>",
          "shape": "DatabaseLFTagsList"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, present if the current list segment is not the last.</p>",
          "shape": "Token"
        }
      },
      "type": "structure"
    },
    "SearchTablesByLFTagsRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>",
          "shape": "CatalogIdString"
        },
        "Expression": {
          "documentation": "<p>A list of conditions (<code>LFTag</code> structures) to search for in table resources.</p>",
          "shape": "Expression"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of results to return.</p>",
          "shape": "PageSize"
        },
        "NextToken": {
          "documentation": "<p>A continuation token, if this is not the first call to retrieve this list.</p>",
          "shape": "Token"
        }
      },
      "required": [
        "Expression"
      ],
      "type": "structure"
    },
    "SearchTablesByLFTagsResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>A continuation token, present if the current list segment is not the last.</p>",
          "shape": "Token"
        },
        "TableList": {
          "documentation": "<p>A list of tables that meet the LF-tag conditions.</p>",
          "shape": "TableLFTagsList"
        }
      },
      "type": "structure"
    },
    "SecretAccessKeyString": {
      "type": "string"
    },
    "SessionTokenString": {
      "type": "string"
    },
    "StartQueryPlanningRequest": {
      "members": {
        "QueryPlanningContext": {
          "documentation": "<p>A structure containing information about the query plan.</p>",
          "shape": "QueryPlanningContext"
        },
        "QueryString": {
          "documentation": "<p>A PartiQL query statement used as an input to the planner service.</p>",
          "shape": "SyntheticStartQueryPlanningRequestQueryString"
        }
      },
      "required": [
        "QueryPlanningContext",
        "QueryString"
      ],
      "type": "structure"
    },
    "StartQueryPlanningResponse": {
      "documentation": "<p>A structure for the output.</p>",
      "members": {
        "QueryId": {
          "documentation": "<p>The ID of the plan query operation can be used to fetch the actual work unit descriptors that are produced as the result of the operation. The ID is also used to get the query state and as an input to the <code>Execute</code> operation.</p>",
          "shape": "QueryIdString"
        }
      },
      "required": [
        "QueryId"
      ],
      "type": "structure"
    },
    "StartTransactionRequest": {
      "members": {
        "TransactionType": {
          "documentation": "<p>Indicates whether this transaction should be read only or read and write. Writes made using a read-only transaction ID will be rejected. Read-only transactions do not need to be committed. </p>",
          "shape": "TransactionType"
        }
      },
      "type": "structure"
    },
    "StartTransactionResponse": {
      "members": {
        "TransactionId": {
          "documentation": "<p>An opaque identifier for the transaction.</p>",
          "shape": "TransactionIdString"
        }
      },
      "type": "structure"
    },
    "StatisticsNotReadyYetException": {
      "documentation": "<p>Contains details about an error related to statistics not being ready.</p>",
      "error": {
        "httpStatusCode": 420,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the error.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "StorageOptimizer": {
      "documentation": "<p>A structure describing the configuration and details of a storage optimizer.</p>",
      "members": {
        "Config": {
          "documentation": "<p>A map of the storage optimizer configuration. Currently contains only one key-value pair: <code>is_enabled</code> indicates true or false for acceleration.</p>",
          "shape": "StorageOptimizerConfig"
        },
        "ErrorMessage": {
          "documentation": "<p>A message that contains information about any error (if present).</p> <p>When an acceleration result has an enabled status, the error message is empty.</p> <p>When an acceleration result has a disabled status, the message describes an error or simply indicates \"disabled by the user\".</p>",
          "shape": "MessageString"
        },
        "LastRunDetails": {
          "documentation": "<p>When an acceleration result has an enabled status, contains the details of the last job run.</p>",
          "shape": "MessageString"
        },
        "StorageOptimizerType": {
          "documentation": "<p>The specific type of storage optimizer. The supported value is <code>compaction</code>.</p>",
          "shape": "OptimizerType"
        },
        "Warnings": {
          "documentation": "<p>A message that contains information about any warnings (if present).</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "StorageOptimizerConfig": {
      "key": {
        "shape": "StorageOptimizerConfigKey"
      },
      "type": "map",
      "value": {
        "shape": "StorageOptimizerConfigValue"
      }
    },
    "StorageOptimizerConfigKey": {
      "type": "string"
    },
    "StorageOptimizerConfigMap": {
      "key": {
        "shape": "OptimizerType"
      },
      "type": "map",
      "value": {
        "shape": "StorageOptimizerConfig"
      }
    },
    "StorageOptimizerConfigValue": {
      "type": "string"
    },
    "StorageOptimizerList": {
      "member": {
        "shape": "StorageOptimizer"
      },
      "type": "list"
    },
    "String": {
      "type": "string"
    },
    "StringValue": {
      "type": "string"
    },
    "StringValueList": {
      "member": {
        "shape": "StringValue"
      },
      "type": "list"
    },
    "SyntheticGetWorkUnitResultsRequestWorkUnitTokenString": {
      "min": 1,
      "sensitive": true,
      "type": "string"
    },
    "SyntheticStartQueryPlanningRequestQueryString": {
      "min": 1,
      "sensitive": true,
      "type": "string"
    },
    "TableLFTagsList": {
      "member": {
        "shape": "TaggedTable"
      },
      "type": "list"
    },
    "TableObject": {
      "documentation": "<p>Specifies the details of a governed table.</p>",
      "members": {
        "ETag": {
          "documentation": "<p>The Amazon S3 ETag of the object. Returned by <code>GetTableObjects</code> for validation and used to identify changes to the underlying data.</p>",
          "shape": "ETagString"
        },
        "Size": {
          "documentation": "<p>The size of the Amazon S3 object in bytes.</p>",
          "shape": "ObjectSize"
        },
        "Uri": {
          "documentation": "<p>The Amazon S3 location of the object.</p>",
          "shape": "URI"
        }
      },
      "type": "structure"
    },
    "TableObjectList": {
      "member": {
        "shape": "TableObject"
      },
      "type": "list"
    },
    "TableResource": {
      "documentation": "<p>A structure for the table object. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal. </p>",
      "members": {
        "CatalogId": {
          "documentation": "<p>The identifier for the Data Catalog. By default, it is the account ID of the caller.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>The name of the database for the table. Unique to a Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database privileges to a principal. </p>",
          "shape": "NameString"
        },
        "Name": {
          "documentation": "<p>The name of the table.</p>",
          "shape": "NameString"
        },
        "TableWildcard": {
          "documentation": "<p>A wildcard object representing every table under a database.</p> <p>At least one of <code>TableResource$Name</code> or <code>TableResource$TableWildcard</code> is required.</p>",
          "shape": "TableWildcard"
        }
      },
      "required": [
        "DatabaseName"
      ],
      "type": "structure"
    },
    "TableWildcard": {
      "documentation": "<p>A wildcard object representing every table under a database.</p>",
      "members": {},
      "type": "structure"
    },
    "TableWithColumnsResource": {
      "documentation": "<p>A structure for a table with columns object. This object is only used when granting a SELECT permission.</p> <p>This object must take a value for at least one of <code>ColumnsNames</code>, <code>ColumnsIndexes</code>, or <code>ColumnsWildcard</code>.</p>",
      "members": {
        "CatalogId": {
          "documentation": "<p>The identifier for the Data Catalog. By default, it is the account ID of the caller.</p>",
          "shape": "CatalogIdString"
        },
        "ColumnNames": {
          "documentation": "<p>The list of column names for the table. At least one of <code>ColumnNames</code> or <code>ColumnWildcard</code> is required.</p>",
          "shape": "ColumnNames"
        },
        "ColumnWildcard": {
          "documentation": "<p>A wildcard specified by a <code>ColumnWildcard</code> object. At least one of <code>ColumnNames</code> or <code>ColumnWildcard</code> is required.</p>",
          "shape": "ColumnWildcard"
        },
        "DatabaseName": {
          "documentation": "<p>The name of the database for the table with columns resource. Unique to the Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database privileges to a principal. </p>",
          "shape": "NameString"
        },
        "Name": {
          "documentation": "<p>The name of the table resource. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal. </p>",
          "shape": "NameString"
        }
      },
      "required": [
        "DatabaseName",
        "Name"
      ],
      "type": "structure"
    },
    "TagValueList": {
      "max": 50,
      "member": {
        "shape": "LFTagValue"
      },
      "min": 1,
      "type": "list"
    },
    "TaggedDatabase": {
      "documentation": "<p>A structure describing a database resource with LF-tags.</p>",
      "members": {
        "Database": {
          "documentation": "<p>A database that has LF-tags attached to it.</p>",
          "shape": "DatabaseResource"
        },
        "LFTags": {
          "documentation": "<p>A list of LF-tags attached to the database.</p>",
          "shape": "LFTagsList"
        }
      },
      "type": "structure"
    },
    "TaggedTable": {
      "documentation": "<p>A structure describing a table resource with LF-tags.</p>",
      "members": {
        "LFTagOnDatabase": {
          "documentation": "<p>A list of LF-tags attached to the database where the table resides.</p>",
          "shape": "LFTagsList"
        },
        "LFTagsOnColumns": {
          "documentation": "<p>A list of LF-tags attached to columns in the table.</p>",
          "shape": "ColumnLFTagsList"
        },
        "LFTagsOnTable": {
          "documentation": "<p>A list of LF-tags attached to the table.</p>",
          "shape": "LFTagsList"
        },
        "Table": {
          "documentation": "<p>A table that has LF-tags attached to it.</p>",
          "shape": "TableResource"
        }
      },
      "type": "structure"
    },
    "ThrottledException": {
      "documentation": "<p>Contains details about an error where the query request was throttled.</p>",
      "error": {
        "httpStatusCode": 429,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the error.</p>",
          "shape": "MessageString"
        }
      },
      "retryable": {
        "throttling": true
      },
      "type": "structure"
    },
    "Timestamp": {
      "type": "timestamp"
    },
    "Token": {
      "type": "string"
    },
    "TokenString": {
      "max": 4096,
      "type": "string"
    },
    "TransactionCanceledException": {
      "documentation": "<p>Contains details about an error related to a transaction that was cancelled.</p>",
      "error": {
        "httpStatusCode": 400
      },
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the error.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "TransactionCommitInProgressException": {
      "documentation": "<p>Contains details about an error related to a transaction commit that was in progress.</p>",
      "error": {
        "httpStatusCode": 400
      },
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the error.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "TransactionCommittedException": {
      "documentation": "<p>Contains details about an error where the specified transaction has already been committed and cannot be used for <code>UpdateTableObjects</code>.</p>",
      "error": {
        "httpStatusCode": 400
      },
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the error.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "TransactionDescription": {
      "documentation": "<p>A structure that contains information about a transaction.</p>",
      "members": {
        "TransactionEndTime": {
          "documentation": "<p>The time when the transaction committed or aborted, if it is not currently active.</p>",
          "shape": "Timestamp"
        },
        "TransactionId": {
          "documentation": "<p>The ID of the transaction.</p>",
          "shape": "TransactionIdString"
        },
        "TransactionStartTime": {
          "documentation": "<p>The time when the transaction started.</p>",
          "shape": "Timestamp"
        },
        "TransactionStatus": {
          "documentation": "<p>A status of ACTIVE, COMMITTED, or ABORTED.</p>",
          "shape": "TransactionStatus"
        }
      },
      "type": "structure"
    },
    "TransactionDescriptionList": {
      "member": {
        "shape": "TransactionDescription"
      },
      "type": "list"
    },
    "TransactionIdString": {
      "max": 255,
      "min": 1,
      "pattern": "[\\p{L}\\p{N}\\p{P}]*",
      "type": "string"
    },
    "TransactionStatus": {
      "enum": [
        "ACTIVE",
        "COMMITTED",
        "ABORTED",
        "COMMIT_IN_PROGRESS"
      ],
      "type": "string"
    },
    "TransactionStatusFilter": {
      "enum": [
        "ALL",
        "COMPLETED",
        "ACTIVE",
        "COMMITTED",
        "ABORTED"
      ],
      "type": "string"
    },
    "TransactionType": {
      "enum": [
        "READ_AND_WRITE",
        "READ_ONLY"
      ],
      "type": "string"
    },
    "TrueFalseString": {
      "max": 5,
      "min": 1,
      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
      "type": "string"
    },
    "TrustedResourceOwners": {
      "member": {
        "shape": "CatalogIdString"
      },
      "type": "list"
    },
    "URI": {
      "max": 1024,
      "min": 1,
      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
      "type": "string"
    },
    "UpdateLFTagRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>",
          "shape": "CatalogIdString"
        },
        "TagKey": {
          "documentation": "<p>The key-name for the LF-tag for which to add or delete values.</p>",
          "shape": "LFTagKey"
        },
        "TagValuesToAdd": {
          "documentation": "<p>A list of LF-tag values to add from the LF-tag.</p>",
          "shape": "TagValueList"
        },
        "TagValuesToDelete": {
          "documentation": "<p>A list of LF-tag values to delete from the LF-tag.</p>",
          "shape": "TagValueList"
        }
      },
      "required": [
        "TagKey"
      ],
      "type": "structure"
    },
    "UpdateLFTagResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateResourceRequest": {
      "members": {
        "ResourceArn": {
          "documentation": "<p>The resource ARN.</p>",
          "shape": "ResourceArnString"
        },
        "RoleArn": {
          "documentation": "<p>The new role to use for the given resource registered in Lake Formation.</p>",
          "shape": "IAMRoleArn"
        }
      },
      "required": [
        "RoleArn",
        "ResourceArn"
      ],
      "type": "structure"
    },
    "UpdateResourceResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateTableObjectsRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The catalog containing the governed table to update. Defaults to the caller\u2019s account ID.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>The database containing the governed table to update.</p>",
          "shape": "NameString"
        },
        "TableName": {
          "documentation": "<p>The governed table to update.</p>",
          "shape": "NameString"
        },
        "TransactionId": {
          "documentation": "<p>The transaction at which to do the write.</p>",
          "shape": "TransactionIdString"
        },
        "WriteOperations": {
          "documentation": "<p>A list of <code>WriteOperation</code> objects that define an object to add to or delete from the manifest for a governed table.</p>",
          "shape": "WriteOperationList"
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "WriteOperations"
      ],
      "type": "structure"
    },
    "UpdateTableObjectsResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateTableStorageOptimizerRequest": {
      "members": {
        "CatalogId": {
          "documentation": "<p>The Catalog ID of the table.</p>",
          "shape": "CatalogIdString"
        },
        "DatabaseName": {
          "documentation": "<p>Name of the database where the table is present.</p>",
          "shape": "NameString"
        },
        "StorageOptimizerConfig": {
          "documentation": "<p>Name of the table for which to enable the storage optimizer.</p>",
          "shape": "StorageOptimizerConfigMap"
        },
        "TableName": {
          "documentation": "<p>Name of the table for which to enable the storage optimizer.</p>",
          "shape": "NameString"
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "StorageOptimizerConfig"
      ],
      "type": "structure"
    },
    "UpdateTableStorageOptimizerResponse": {
      "members": {
        "Result": {
          "documentation": "<p>A response indicating the success of failure of the operation.</p>",
          "shape": "Result"
        }
      },
      "type": "structure"
    },
    "ValueString": {
      "type": "string"
    },
    "ValueStringList": {
      "member": {
        "shape": "ValueString"
      },
      "min": 1,
      "type": "list"
    },
    "VirtualObject": {
      "documentation": "<p>An object that defines an Amazon S3 object to be deleted if a transaction cancels, provided that <code>VirtualPut</code> was called before writing the object.</p>",
      "members": {
        "ETag": {
          "documentation": "<p>The ETag of the Amazon S3 object.</p>",
          "shape": "ETagString"
        },
        "Uri": {
          "documentation": "<p>The path to the Amazon S3 object. Must start with s3://</p>",
          "shape": "URI"
        }
      },
      "required": [
        "Uri"
      ],
      "type": "structure"
    },
    "VirtualObjectList": {
      "max": 100,
      "member": {
        "shape": "VirtualObject"
      },
      "min": 1,
      "type": "list"
    },
    "WorkUnitIdLong": {
      "type": "long"
    },
    "WorkUnitRange": {
      "documentation": "<p>Defines the valid range of work unit IDs for querying the execution service.</p>",
      "members": {
        "WorkUnitIdMax": {
          "documentation": "<p>Defines the maximum work unit ID in the range. The maximum value is inclusive.</p>",
          "shape": "WorkUnitIdLong"
        },
        "WorkUnitIdMin": {
          "documentation": "<p>Defines the minimum work unit ID in the range.</p>",
          "shape": "WorkUnitIdLong"
        },
        "WorkUnitToken": {
          "documentation": "<p>A work token used to query the execution service.</p>",
          "shape": "WorkUnitTokenString"
        }
      },
      "required": [
        "WorkUnitIdMax",
        "WorkUnitIdMin",
        "WorkUnitToken"
      ],
      "type": "structure"
    },
    "WorkUnitRangeList": {
      "member": {
        "shape": "WorkUnitRange"
      },
      "type": "list"
    },
    "WorkUnitTokenString": {
      "type": "string"
    },
    "WorkUnitsNotReadyYetException": {
      "documentation": "<p>Contains details about an error related to work units not being ready.</p>",
      "error": {
        "httpStatusCode": 420,
        "senderFault": true
      },
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>A message describing the error.</p>",
          "shape": "MessageString"
        }
      },
      "type": "structure"
    },
    "WriteOperation": {
      "documentation": "<p>Defines an object to add to or delete from a governed table.</p>",
      "members": {
        "AddObject": {
          "documentation": "<p>A new object to add to the governed table.</p>",
          "shape": "AddObjectInput"
        },
        "DeleteObject": {
          "documentation": "<p>An object to delete from the governed table.</p>",
          "shape": "DeleteObjectInput"
        }
      },
      "type": "structure"
    },
    "WriteOperationList": {
      "max": 100,
      "member": {
        "shape": "WriteOperation"
      },
      "min": 1,
      "type": "list"
    }
  },
  "version": "2.0"
}
