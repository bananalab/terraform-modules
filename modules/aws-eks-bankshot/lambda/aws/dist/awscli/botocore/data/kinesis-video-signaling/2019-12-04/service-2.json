{
  "documentation": "<p>Kinesis Video Streams Signaling Service is a intermediate service that establishes a communication channel for discovering peers, transmitting offers and answers in order to establish peer-to-peer connection in webRTC technology.</p>",
  "metadata": {
    "apiVersion": "2019-12-04",
    "endpointPrefix": "kinesisvideo",
    "protocol": "rest-json",
    "serviceAbbreviation": "Amazon Kinesis Video Signaling Channels",
    "serviceFullName": "Amazon Kinesis Video Signaling Channels",
    "serviceId": "Kinesis Video Signaling",
    "signatureVersion": "v4",
    "uid": "kinesis-video-signaling-2019-12-04"
  },
  "operations": {
    "GetIceServerConfig": {
      "documentation": "<p>Gets the Interactive Connectivity Establishment (ICE) server configuration information, including URIs, username, and password which can be used to configure the WebRTC connection. The ICE component uses this configuration information to setup the WebRTC connection, including authenticating with the Traversal Using Relays around NAT (TURN) relay server. </p> <p>TURN is a protocol that is used to improve the connectivity of peer-to-peer applications. By providing a cloud-based relay service, TURN ensures that a connection can be established even when one or more peers are incapable of a direct peer-to-peer connection. For more information, see <a href=\"https://tools.ietf.org/html/draft-uberti-rtcweb-turn-rest-00\">A REST API For Access To TURN Services</a>.</p> <p> You can invoke this API to establish a fallback mechanism in case either of the peers is unable to establish a direct peer-to-peer connection over a signaling channel. You must specify either a signaling channel ARN or the client ID in order to invoke this API.</p>",
      "errors": [
        {
          "shape": "InvalidClientException"
        },
        {
          "shape": "SessionExpiredException"
        },
        {
          "shape": "ClientLimitExceededException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InvalidArgumentException"
        },
        {
          "shape": "NotAuthorizedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/v1/get-ice-server-config"
      },
      "input": {
        "shape": "GetIceServerConfigRequest"
      },
      "name": "GetIceServerConfig",
      "output": {
        "shape": "GetIceServerConfigResponse"
      }
    },
    "SendAlexaOfferToMaster": {
      "documentation": "<p>This API allows you to connect WebRTC-enabled devices with Alexa display devices. When invoked, it sends the Alexa Session Description Protocol (SDP) offer to the master peer. The offer is delivered as soon as the master is connected to the specified signaling channel. This API returns the SDP answer from the connected master. If the master is not connected to the signaling channel, redelivery requests are made until the message expires.</p>",
      "errors": [
        {
          "shape": "ClientLimitExceededException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InvalidArgumentException"
        },
        {
          "shape": "NotAuthorizedException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/v1/send-alexa-offer-to-master"
      },
      "input": {
        "shape": "SendAlexaOfferToMasterRequest"
      },
      "name": "SendAlexaOfferToMaster",
      "output": {
        "shape": "SendAlexaOfferToMasterResponse"
      }
    }
  },
  "shapes": {
    "Answer": {
      "max": 10000,
      "min": 1,
      "type": "string"
    },
    "ClientId": {
      "max": 256,
      "min": 1,
      "pattern": "[a-zA-Z0-9_.-]+",
      "type": "string"
    },
    "ClientLimitExceededException": {
      "documentation": "<p>Your request was throttled because you have exceeded the limit of allowed client calls. Try making the call later.</p>",
      "error": {
        "httpStatusCode": 400
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "ErrorMessage"
        }
      },
      "type": "structure"
    },
    "ErrorMessage": {
      "type": "string"
    },
    "GetIceServerConfigRequest": {
      "members": {
        "ChannelARN": {
          "documentation": "<p>The ARN of the signaling channel to be used for the peer-to-peer connection between configured peers. </p>",
          "shape": "ResourceARN"
        },
        "ClientId": {
          "documentation": "<p>Unique identifier for the viewer. Must be unique within the signaling channel.</p>",
          "shape": "ClientId"
        },
        "Service": {
          "documentation": "<p>Specifies the desired service. Currently, <code>TURN</code> is the only valid value.</p>",
          "shape": "Service"
        },
        "Username": {
          "documentation": "<p>An optional user ID to be associated with the credentials.</p>",
          "shape": "Username"
        }
      },
      "required": [
        "ChannelARN"
      ],
      "type": "structure"
    },
    "GetIceServerConfigResponse": {
      "members": {
        "IceServerList": {
          "documentation": "<p>The list of ICE server information objects.</p>",
          "shape": "IceServerList"
        }
      },
      "type": "structure"
    },
    "IceServer": {
      "documentation": "<p>A structure for the ICE server connection data.</p>",
      "members": {
        "Password": {
          "documentation": "<p>A password to login to the ICE server.</p>",
          "shape": "Password"
        },
        "Ttl": {
          "documentation": "<p>The period of time, in seconds, during which the username and password are valid.</p>",
          "shape": "Ttl"
        },
        "Uris": {
          "documentation": "<p>An array of URIs, in the form specified in the <a href=\"https://tools.ietf.org/html/draft-petithuguenin-behave-turn-uris-03\">I-D.petithuguenin-behave-turn-uris</a> spec. These URIs provide the different addresses and/or protocols that can be used to reach the TURN server.</p>",
          "shape": "Uris"
        },
        "Username": {
          "documentation": "<p>A username to login to the ICE server.</p>",
          "shape": "Username"
        }
      },
      "type": "structure"
    },
    "IceServerList": {
      "member": {
        "shape": "IceServer"
      },
      "type": "list"
    },
    "InvalidArgumentException": {
      "documentation": "<p>The value for this input parameter is invalid.</p>",
      "error": {
        "httpStatusCode": 400
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "ErrorMessage"
        }
      },
      "type": "structure"
    },
    "InvalidClientException": {
      "documentation": "<p>The specified client is invalid.</p>",
      "error": {
        "httpStatusCode": 400
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "errorMessage"
        }
      },
      "type": "structure"
    },
    "MessagePayload": {
      "max": 10000,
      "min": 1,
      "pattern": "[a-zA-Z0-9+/=]+",
      "type": "string"
    },
    "NotAuthorizedException": {
      "documentation": "<p>The caller is not authorized to perform this operation.</p>",
      "error": {
        "httpStatusCode": 401
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "ErrorMessage"
        }
      },
      "type": "structure"
    },
    "Password": {
      "max": 256,
      "min": 1,
      "pattern": "[a-zA-Z0-9_.-]+",
      "type": "string"
    },
    "ResourceARN": {
      "max": 1024,
      "min": 1,
      "pattern": "arn:aws:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+",
      "type": "string"
    },
    "ResourceNotFoundException": {
      "documentation": "<p>The specified resource is not found.</p>",
      "error": {
        "httpStatusCode": 404
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "ErrorMessage"
        }
      },
      "type": "structure"
    },
    "SendAlexaOfferToMasterRequest": {
      "members": {
        "ChannelARN": {
          "documentation": "<p>The ARN of the signaling channel by which Alexa and the master peer communicate.</p>",
          "shape": "ResourceARN"
        },
        "MessagePayload": {
          "documentation": "<p>The base64-encoded SDP offer content.</p>",
          "shape": "MessagePayload"
        },
        "SenderClientId": {
          "documentation": "<p>The unique identifier for the sender client.</p>",
          "shape": "ClientId"
        }
      },
      "required": [
        "ChannelARN",
        "SenderClientId",
        "MessagePayload"
      ],
      "type": "structure"
    },
    "SendAlexaOfferToMasterResponse": {
      "members": {
        "Answer": {
          "documentation": "<p>The base64-encoded SDP answer content.</p>",
          "shape": "Answer"
        }
      },
      "type": "structure"
    },
    "Service": {
      "enum": [
        "TURN"
      ],
      "type": "string"
    },
    "SessionExpiredException": {
      "documentation": "<p>If the client session is expired. Once the client is connected, the session is valid for 45 minutes. Client should reconnect to the channel to continue sending/receiving messages.</p>",
      "error": {
        "httpStatusCode": 400
      },
      "exception": true,
      "members": {
        "message": {
          "shape": "errorMessage"
        }
      },
      "type": "structure"
    },
    "Ttl": {
      "max": 86400,
      "min": 30,
      "type": "integer"
    },
    "Uri": {
      "max": 256,
      "min": 1,
      "type": "string"
    },
    "Uris": {
      "member": {
        "shape": "Uri"
      },
      "type": "list"
    },
    "Username": {
      "max": 256,
      "min": 1,
      "pattern": "[a-zA-Z0-9_.-]+",
      "type": "string"
    },
    "errorMessage": {
      "type": "string"
    }
  },
  "version": "2.0"
}
