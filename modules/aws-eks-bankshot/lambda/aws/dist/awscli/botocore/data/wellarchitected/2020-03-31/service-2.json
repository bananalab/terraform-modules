{
  "documentation": "<fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>",
  "metadata": {
    "apiVersion": "2020-03-31",
    "endpointPrefix": "wellarchitected",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "Well-Architected",
    "serviceFullName": "AWS Well-Architected Tool",
    "serviceId": "WellArchitected",
    "signatureVersion": "v4",
    "signingName": "wellarchitected",
    "uid": "wellarchitected-2020-03-31"
  },
  "operations": {
    "AssociateLenses": {
      "documentation": "<p>Associate a lens to a workload.</p> <p>Up to 10 lenses can be associated with a workload in a single API operation. A maximum of 20 lenses can be associated with a workload.</p> <note> <p> <b>Disclaimer</b> </p> <p>By accessing and/or applying custom lenses created by another Amazon Web Services user or account, you acknowledge that custom lenses created by other users and shared with you are Third Party Content as defined in the Amazon Web Services Customer Agreement. </p> </note>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/workloads/{WorkloadId}/associateLenses"
      },
      "input": {
        "shape": "AssociateLensesInput"
      },
      "name": "AssociateLenses"
    },
    "CreateLensShare": {
      "documentation": "<p>Create a lens share.</p> <p>The owner of a lens can share it with other Amazon Web Services accounts and IAM users in the same Amazon Web Services Region. Shared access to a lens is not removed until the lens invitation is deleted.</p> <note> <p> <b>Disclaimer</b> </p> <p>By sharing your custom lenses with other Amazon Web Services accounts, you acknowledge that Amazon Web Services will make your custom lenses available to those other accounts. Those other accounts may continue to access and use your shared custom lenses even if you delete the custom lenses from your own Amazon Web Services account or terminate your Amazon Web Services account.</p> </note>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/lenses/{LensAlias}/shares"
      },
      "input": {
        "shape": "CreateLensShareInput"
      },
      "name": "CreateLensShare",
      "output": {
        "shape": "CreateLensShareOutput"
      }
    },
    "CreateLensVersion": {
      "documentation": "<p>Create a new lens version.</p> <p>A lens can have up to 100 versions.</p> <p>After a lens has been imported, create a new lens version to publish it. The owner of a lens can share the lens with other Amazon Web Services accounts and IAM users in the same Amazon Web Services Region. Only the owner of a lens can delete it. </p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/lenses/{LensAlias}/versions"
      },
      "input": {
        "shape": "CreateLensVersionInput"
      },
      "name": "CreateLensVersion",
      "output": {
        "shape": "CreateLensVersionOutput"
      }
    },
    "CreateMilestone": {
      "documentation": "<p>Create a milestone for an existing workload.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/workloads/{WorkloadId}/milestones"
      },
      "input": {
        "shape": "CreateMilestoneInput"
      },
      "name": "CreateMilestone",
      "output": {
        "shape": "CreateMilestoneOutput"
      }
    },
    "CreateWorkload": {
      "documentation": "<p>Create a new workload.</p> <p>The owner of a workload can share the workload with other Amazon Web Services accounts and IAM users in the same Amazon Web Services Region. Only the owner of a workload can delete it.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/define-workload.html\">Defining a Workload</a> in the <i>Well-Architected Tool User Guide</i>.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/workloads"
      },
      "input": {
        "shape": "CreateWorkloadInput"
      },
      "name": "CreateWorkload",
      "output": {
        "shape": "CreateWorkloadOutput"
      }
    },
    "CreateWorkloadShare": {
      "documentation": "<p>Create a workload share.</p> <p>The owner of a workload can share it with other Amazon Web Services accounts and IAM users in the same Amazon Web Services Region. Shared access to a workload is not removed until the workload invitation is deleted.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/workloads-sharing.html\">Sharing a Workload</a> in the <i>Well-Architected Tool User Guide</i>.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/workloads/{WorkloadId}/shares"
      },
      "input": {
        "shape": "CreateWorkloadShareInput"
      },
      "name": "CreateWorkloadShare",
      "output": {
        "shape": "CreateWorkloadShareOutput"
      }
    },
    "DeleteLens": {
      "documentation": "<p>Delete an existing lens.</p> <p>Only the owner of a lens can delete it. After the lens is deleted, Amazon Web Services accounts and IAM users that you shared the lens with can continue to use it, but they will no longer be able to apply it to new workloads. </p> <note> <p> <b>Disclaimer</b> </p> <p>By sharing your custom lenses with other Amazon Web Services accounts, you acknowledge that Amazon Web Services will make your custom lenses available to those other accounts. Those other accounts may continue to access and use your shared custom lenses even if you delete the custom lenses from your own Amazon Web Services account or terminate your Amazon Web Services account.</p> </note>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/lenses/{LensAlias}"
      },
      "input": {
        "shape": "DeleteLensInput"
      },
      "name": "DeleteLens"
    },
    "DeleteLensShare": {
      "documentation": "<p>Delete a lens share.</p> <p>After the lens share is deleted, Amazon Web Services accounts and IAM users that you shared the lens with can continue to use it, but they will no longer be able to apply it to new workloads.</p> <note> <p> <b>Disclaimer</b> </p> <p>By sharing your custom lenses with other Amazon Web Services accounts, you acknowledge that Amazon Web Services will make your custom lenses available to those other accounts. Those other accounts may continue to access and use your shared custom lenses even if you delete the custom lenses from your own Amazon Web Services account or terminate your Amazon Web Services account.</p> </note>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/lenses/{LensAlias}/shares/{ShareId}"
      },
      "input": {
        "shape": "DeleteLensShareInput"
      },
      "name": "DeleteLensShare"
    },
    "DeleteWorkload": {
      "documentation": "<p>Delete an existing workload.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/workloads/{WorkloadId}"
      },
      "input": {
        "shape": "DeleteWorkloadInput"
      },
      "name": "DeleteWorkload"
    },
    "DeleteWorkloadShare": {
      "documentation": "<p>Delete a workload share.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/workloads/{WorkloadId}/shares/{ShareId}"
      },
      "input": {
        "shape": "DeleteWorkloadShareInput"
      },
      "name": "DeleteWorkloadShare"
    },
    "DisassociateLenses": {
      "documentation": "<p>Disassociate a lens from a workload.</p> <p>Up to 10 lenses can be disassociated from a workload in a single API operation.</p> <note> <p>The Amazon Web Services Well-Architected Framework lens (<code>wellarchitected</code>) cannot be removed from a workload.</p> </note>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/workloads/{WorkloadId}/disassociateLenses"
      },
      "input": {
        "shape": "DisassociateLensesInput"
      },
      "name": "DisassociateLenses"
    },
    "ExportLens": {
      "documentation": "<p>Export an existing lens.</p> <p>Lenses are defined in JSON. For more information, see <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/lenses-format-specification.html\">JSON format specification</a> in the <i>Well-Architected Tool User Guide</i>. Only the owner of a lens can export it. </p> <note> <p> <b>Disclaimer</b> </p> <p>Do not include or gather personal identifiable information (PII) of end users or other identifiable individuals in or via your custom lenses. If your custom lens or those shared with you and used in your account do include or collect PII you are responsible for: ensuring that the included PII is processed in accordance with applicable law, providing adequate privacy notices, and obtaining necessary consents for processing such data.</p> </note>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/lenses/{LensAlias}/export"
      },
      "input": {
        "shape": "ExportLensInput"
      },
      "name": "ExportLens",
      "output": {
        "shape": "ExportLensOutput"
      }
    },
    "GetAnswer": {
      "documentation": "<p>Get the answer to a specific question in a workload review.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/workloads/{WorkloadId}/lensReviews/{LensAlias}/answers/{QuestionId}"
      },
      "input": {
        "shape": "GetAnswerInput"
      },
      "name": "GetAnswer",
      "output": {
        "shape": "GetAnswerOutput"
      }
    },
    "GetLens": {
      "documentation": "<p>Get an existing lens.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/lenses/{LensAlias}"
      },
      "input": {
        "shape": "GetLensInput"
      },
      "name": "GetLens",
      "output": {
        "shape": "GetLensOutput"
      }
    },
    "GetLensReview": {
      "documentation": "<p>Get lens review.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/workloads/{WorkloadId}/lensReviews/{LensAlias}"
      },
      "input": {
        "shape": "GetLensReviewInput"
      },
      "name": "GetLensReview",
      "output": {
        "shape": "GetLensReviewOutput"
      }
    },
    "GetLensReviewReport": {
      "documentation": "<p>Get lens review report.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/workloads/{WorkloadId}/lensReviews/{LensAlias}/report"
      },
      "input": {
        "shape": "GetLensReviewReportInput"
      },
      "name": "GetLensReviewReport",
      "output": {
        "shape": "GetLensReviewReportOutput"
      }
    },
    "GetLensVersionDifference": {
      "documentation": "<p>Get lens version differences.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/lenses/{LensAlias}/versionDifference"
      },
      "input": {
        "shape": "GetLensVersionDifferenceInput"
      },
      "name": "GetLensVersionDifference",
      "output": {
        "shape": "GetLensVersionDifferenceOutput"
      }
    },
    "GetMilestone": {
      "documentation": "<p>Get a milestone for an existing workload.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/workloads/{WorkloadId}/milestones/{MilestoneNumber}"
      },
      "input": {
        "shape": "GetMilestoneInput"
      },
      "name": "GetMilestone",
      "output": {
        "shape": "GetMilestoneOutput"
      }
    },
    "GetWorkload": {
      "documentation": "<p>Get an existing workload.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/workloads/{WorkloadId}"
      },
      "input": {
        "shape": "GetWorkloadInput"
      },
      "name": "GetWorkload",
      "output": {
        "shape": "GetWorkloadOutput"
      }
    },
    "ImportLens": {
      "documentation": "<p>Import a new lens.</p> <p>The lens cannot be applied to workloads or shared with other Amazon Web Services accounts until it's published with <a>CreateLensVersion</a> </p> <p>Lenses are defined in JSON. For more information, see <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/lenses-format-specification.html\">JSON format specification</a> in the <i>Well-Architected Tool User Guide</i>.</p> <p>A custom lens cannot exceed 500 KB in size.</p> <note> <p> <b>Disclaimer</b> </p> <p>Do not include or gather personal identifiable information (PII) of end users or other identifiable individuals in or via your custom lenses. If your custom lens or those shared with you and used in your account do include or collect PII you are responsible for: ensuring that the included PII is processed in accordance with applicable law, providing adequate privacy notices, and obtaining necessary consents for processing such data.</p> </note>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ServiceQuotaExceededException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/importLens"
      },
      "input": {
        "shape": "ImportLensInput"
      },
      "name": "ImportLens",
      "output": {
        "shape": "ImportLensOutput"
      }
    },
    "ListAnswers": {
      "documentation": "<p>List of answers.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/workloads/{WorkloadId}/lensReviews/{LensAlias}/answers"
      },
      "input": {
        "shape": "ListAnswersInput"
      },
      "name": "ListAnswers",
      "output": {
        "shape": "ListAnswersOutput"
      }
    },
    "ListLensReviewImprovements": {
      "documentation": "<p>List lens review improvements.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/workloads/{WorkloadId}/lensReviews/{LensAlias}/improvements"
      },
      "input": {
        "shape": "ListLensReviewImprovementsInput"
      },
      "name": "ListLensReviewImprovements",
      "output": {
        "shape": "ListLensReviewImprovementsOutput"
      }
    },
    "ListLensReviews": {
      "documentation": "<p>List lens reviews.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/workloads/{WorkloadId}/lensReviews"
      },
      "input": {
        "shape": "ListLensReviewsInput"
      },
      "name": "ListLensReviews",
      "output": {
        "shape": "ListLensReviewsOutput"
      }
    },
    "ListLensShares": {
      "documentation": "<p>List the lens shares associated with the lens.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/lenses/{LensAlias}/shares"
      },
      "input": {
        "shape": "ListLensSharesInput"
      },
      "name": "ListLensShares",
      "output": {
        "shape": "ListLensSharesOutput"
      }
    },
    "ListLenses": {
      "documentation": "<p>List the available lenses.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/lenses"
      },
      "input": {
        "shape": "ListLensesInput"
      },
      "name": "ListLenses",
      "output": {
        "shape": "ListLensesOutput"
      }
    },
    "ListMilestones": {
      "documentation": "<p>List all milestones for an existing workload.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/workloads/{WorkloadId}/milestonesSummaries"
      },
      "input": {
        "shape": "ListMilestonesInput"
      },
      "name": "ListMilestones",
      "output": {
        "shape": "ListMilestonesOutput"
      }
    },
    "ListNotifications": {
      "documentation": "<p>List lens notifications.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/notifications"
      },
      "input": {
        "shape": "ListNotificationsInput"
      },
      "name": "ListNotifications",
      "output": {
        "shape": "ListNotificationsOutput"
      }
    },
    "ListShareInvitations": {
      "documentation": "<p>List the workload invitations.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/shareInvitations"
      },
      "input": {
        "shape": "ListShareInvitationsInput"
      },
      "name": "ListShareInvitations",
      "output": {
        "shape": "ListShareInvitationsOutput"
      }
    },
    "ListTagsForResource": {
      "documentation": "<p>List the tags for a resource.</p> <note> <p>The WorkloadArn parameter can be either a workload ARN or a custom lens ARN.</p> </note>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/tags/{WorkloadArn}"
      },
      "input": {
        "shape": "ListTagsForResourceInput"
      },
      "name": "ListTagsForResource",
      "output": {
        "shape": "ListTagsForResourceOutput"
      }
    },
    "ListWorkloadShares": {
      "documentation": "<p>List the workload shares associated with the workload.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/workloads/{WorkloadId}/shares"
      },
      "input": {
        "shape": "ListWorkloadSharesInput"
      },
      "name": "ListWorkloadShares",
      "output": {
        "shape": "ListWorkloadSharesOutput"
      }
    },
    "ListWorkloads": {
      "documentation": "<p>List workloads. Paginated.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/workloadsSummaries"
      },
      "input": {
        "shape": "ListWorkloadsInput"
      },
      "name": "ListWorkloads",
      "output": {
        "shape": "ListWorkloadsOutput"
      }
    },
    "TagResource": {
      "documentation": "<p>Adds one or more tags to the specified resource.</p> <note> <p>The WorkloadArn parameter can be either a workload ARN or a custom lens ARN.</p> </note>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/tags/{WorkloadArn}"
      },
      "input": {
        "shape": "TagResourceInput"
      },
      "name": "TagResource",
      "output": {
        "shape": "TagResourceOutput"
      }
    },
    "UntagResource": {
      "documentation": "<p>Deletes specified tags from a resource.</p> <note> <p>The WorkloadArn parameter can be either a workload ARN or a custom lens ARN.</p> </note> <p>To specify multiple tags, use separate <b>tagKeys</b> parameters, for example:</p> <p> <code>DELETE /tags/WorkloadArn?tagKeys=key1&amp;tagKeys=key2</code> </p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/tags/{WorkloadArn}"
      },
      "input": {
        "shape": "UntagResourceInput"
      },
      "name": "UntagResource",
      "output": {
        "shape": "UntagResourceOutput"
      }
    },
    "UpdateAnswer": {
      "documentation": "<p>Update the answer to a specific question in a workload review.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/workloads/{WorkloadId}/lensReviews/{LensAlias}/answers/{QuestionId}"
      },
      "input": {
        "shape": "UpdateAnswerInput"
      },
      "name": "UpdateAnswer",
      "output": {
        "shape": "UpdateAnswerOutput"
      }
    },
    "UpdateGlobalSettings": {
      "documentation": "<p>Updates whether the Amazon Web Services account is opted into organization sharing features.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/global-settings"
      },
      "input": {
        "shape": "UpdateGlobalSettingsInput"
      },
      "name": "UpdateGlobalSettings"
    },
    "UpdateLensReview": {
      "documentation": "<p>Update lens review.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/workloads/{WorkloadId}/lensReviews/{LensAlias}"
      },
      "input": {
        "shape": "UpdateLensReviewInput"
      },
      "name": "UpdateLensReview",
      "output": {
        "shape": "UpdateLensReviewOutput"
      }
    },
    "UpdateShareInvitation": {
      "documentation": "<p>Update a workload invitation.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/shareInvitations/{ShareInvitationId}"
      },
      "input": {
        "shape": "UpdateShareInvitationInput"
      },
      "name": "UpdateShareInvitation",
      "output": {
        "shape": "UpdateShareInvitationOutput"
      }
    },
    "UpdateWorkload": {
      "documentation": "<p>Update an existing workload.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/workloads/{WorkloadId}"
      },
      "input": {
        "shape": "UpdateWorkloadInput"
      },
      "name": "UpdateWorkload",
      "output": {
        "shape": "UpdateWorkloadOutput"
      }
    },
    "UpdateWorkloadShare": {
      "documentation": "<p>Update a workload share.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/workloads/{WorkloadId}/shares/{ShareId}"
      },
      "input": {
        "shape": "UpdateWorkloadShareInput"
      },
      "name": "UpdateWorkloadShare",
      "output": {
        "shape": "UpdateWorkloadShareOutput"
      }
    },
    "UpgradeLensReview": {
      "documentation": "<p>Upgrade lens review.</p>",
      "errors": [
        {
          "shape": "ValidationException"
        },
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "ConflictException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "AccessDeniedException"
        },
        {
          "shape": "ThrottlingException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/workloads/{WorkloadId}/lensReviews/{LensAlias}/upgrade"
      },
      "input": {
        "shape": "UpgradeLensReviewInput"
      },
      "name": "UpgradeLensReview"
    }
  },
  "shapes": {
    "AccessDeniedException": {
      "documentation": "<p>User does not have sufficient access to perform this action.</p>",
      "error": {
        "httpStatusCode": 403
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "ExceptionMessage"
        }
      },
      "required": [
        "Message"
      ],
      "type": "structure"
    },
    "AdditionalResourceType": {
      "enum": [
        "HELPFUL_RESOURCE",
        "IMPROVEMENT_PLAN"
      ],
      "type": "string"
    },
    "AdditionalResources": {
      "documentation": "<p>The choice level additional resources.</p>",
      "members": {
        "Content": {
          "documentation": "<p>The URLs for additional resources, either helpful resources or improvement plans. Up to five additional URLs can be specified.</p>",
          "shape": "Urls"
        },
        "Type": {
          "documentation": "<p>Type of additional resource.</p>",
          "shape": "AdditionalResourceType"
        }
      },
      "type": "structure"
    },
    "AdditionalResourcesList": {
      "member": {
        "shape": "AdditionalResources"
      },
      "type": "list"
    },
    "Answer": {
      "documentation": "<p>An answer of the question.</p>",
      "members": {
        "ChoiceAnswers": {
          "documentation": "<p>A list of selected choices to a question in your workload.</p>",
          "shape": "ChoiceAnswers"
        },
        "Choices": {
          "shape": "Choices"
        },
        "HelpfulResourceDisplayText": {
          "documentation": "<p>The helpful resource text to be displayed.</p>",
          "shape": "DisplayText"
        },
        "HelpfulResourceUrl": {
          "shape": "HelpfulResourceUrl"
        },
        "ImprovementPlanUrl": {
          "shape": "ImprovementPlanUrl"
        },
        "IsApplicable": {
          "shape": "IsApplicable"
        },
        "Notes": {
          "shape": "Notes"
        },
        "PillarId": {
          "shape": "PillarId"
        },
        "QuestionDescription": {
          "shape": "QuestionDescription"
        },
        "QuestionId": {
          "shape": "QuestionId"
        },
        "QuestionTitle": {
          "shape": "QuestionTitle"
        },
        "Reason": {
          "documentation": "<p>The reason why the question is not applicable to your workload.</p>",
          "shape": "AnswerReason"
        },
        "Risk": {
          "shape": "Risk"
        },
        "SelectedChoices": {
          "shape": "SelectedChoices"
        }
      },
      "type": "structure"
    },
    "AnswerReason": {
      "enum": [
        "OUT_OF_SCOPE",
        "BUSINESS_PRIORITIES",
        "ARCHITECTURE_CONSTRAINTS",
        "OTHER",
        "NONE"
      ],
      "type": "string"
    },
    "AnswerSummaries": {
      "documentation": "<p>List of answer summaries of lens review in a workload.</p>",
      "member": {
        "shape": "AnswerSummary"
      },
      "type": "list"
    },
    "AnswerSummary": {
      "documentation": "<p>An answer summary of a lens review in a workload.</p>",
      "members": {
        "ChoiceAnswerSummaries": {
          "documentation": "<p>A list of selected choices to a question in your workload.</p>",
          "shape": "ChoiceAnswerSummaries"
        },
        "Choices": {
          "shape": "Choices"
        },
        "IsApplicable": {
          "shape": "IsApplicable"
        },
        "PillarId": {
          "shape": "PillarId"
        },
        "QuestionId": {
          "shape": "QuestionId"
        },
        "QuestionTitle": {
          "shape": "QuestionTitle"
        },
        "Reason": {
          "documentation": "<p>The reason why a choice is non-applicable to a question in your workload.</p>",
          "shape": "AnswerReason"
        },
        "Risk": {
          "shape": "Risk"
        },
        "SelectedChoices": {
          "shape": "SelectedChoices"
        }
      },
      "type": "structure"
    },
    "AssociateLensesInput": {
      "documentation": "<p>Input to associate lens reviews.</p>",
      "members": {
        "LensAliases": {
          "shape": "LensAliases"
        },
        "WorkloadId": {
          "location": "uri",
          "locationName": "WorkloadId",
          "shape": "WorkloadId"
        }
      },
      "required": [
        "WorkloadId",
        "LensAliases"
      ],
      "type": "structure"
    },
    "AwsAccountId": {
      "documentation": "<p>An Amazon Web Services account ID.</p>",
      "pattern": "[0-9]{12}",
      "type": "string"
    },
    "AwsRegion": {
      "documentation": "<p>An Amazon Web Services Region, for example, <code>us-west-2</code> or <code>ap-northeast-1</code>.</p>",
      "max": 100,
      "type": "string"
    },
    "Base64String": {
      "documentation": "<p>The Base64-encoded string representation of a lens review report.</p> <p>This data can be used to create a PDF file.</p>",
      "type": "string"
    },
    "Choice": {
      "documentation": "<p>A choice available to answer question.</p>",
      "members": {
        "AdditionalResources": {
          "documentation": "<p>The additional resources for a choice. A choice can have up to two additional resources: one of type <code>HELPFUL_RESOURCE</code>, one of type <code>IMPROVEMENT_PLAN</code>, or both.</p>",
          "shape": "AdditionalResourcesList"
        },
        "ChoiceId": {
          "shape": "ChoiceId"
        },
        "Description": {
          "shape": "ChoiceDescription"
        },
        "HelpfulResource": {
          "documentation": "<p>The choice level helpful resource.</p>",
          "shape": "ChoiceContent"
        },
        "ImprovementPlan": {
          "documentation": "<p>The choice level improvement plan.</p>",
          "shape": "ChoiceContent"
        },
        "Title": {
          "shape": "ChoiceTitle"
        }
      },
      "type": "structure"
    },
    "ChoiceAnswer": {
      "documentation": "<p>A choice that has been answered on a question in your workload.</p>",
      "members": {
        "ChoiceId": {
          "shape": "ChoiceId"
        },
        "Notes": {
          "documentation": "<p>The notes associated with a choice.</p>",
          "shape": "ChoiceNotes"
        },
        "Reason": {
          "documentation": "<p>The reason why a choice is non-applicable to a question in your workload.</p>",
          "shape": "ChoiceReason"
        },
        "Status": {
          "documentation": "<p>The status of a choice.</p>",
          "shape": "ChoiceStatus"
        }
      },
      "type": "structure"
    },
    "ChoiceAnswerSummaries": {
      "member": {
        "shape": "ChoiceAnswerSummary"
      },
      "type": "list"
    },
    "ChoiceAnswerSummary": {
      "documentation": "<p>A choice summary that has been answered on a question in your workload.</p>",
      "members": {
        "ChoiceId": {
          "shape": "ChoiceId"
        },
        "Reason": {
          "documentation": "<p>The reason why a choice is non-applicable to a question in your workload.</p>",
          "shape": "ChoiceReason"
        },
        "Status": {
          "documentation": "<p>The status of a choice.</p>",
          "shape": "ChoiceStatus"
        }
      },
      "type": "structure"
    },
    "ChoiceAnswers": {
      "member": {
        "shape": "ChoiceAnswer"
      },
      "type": "list"
    },
    "ChoiceContent": {
      "documentation": "<p>The choice content.</p>",
      "members": {
        "DisplayText": {
          "documentation": "<p>The display text for the choice content.</p>",
          "shape": "ChoiceContentDisplayText"
        },
        "Url": {
          "documentation": "<p>The URL for the choice content.</p>",
          "shape": "ChoiceContentUrl"
        }
      },
      "type": "structure"
    },
    "ChoiceContentDisplayText": {
      "max": 1024,
      "min": 1,
      "type": "string"
    },
    "ChoiceContentUrl": {
      "max": 1024,
      "min": 1,
      "type": "string"
    },
    "ChoiceDescription": {
      "documentation": "<p>The description of a choice.</p>",
      "max": 1024,
      "min": 1,
      "type": "string"
    },
    "ChoiceId": {
      "documentation": "<p>The ID of a choice.</p>",
      "max": 64,
      "min": 1,
      "type": "string"
    },
    "ChoiceImprovementPlan": {
      "documentation": "<p>The choice level improvement plan.</p>",
      "members": {
        "ChoiceId": {
          "shape": "ChoiceId"
        },
        "DisplayText": {
          "documentation": "<p>The display text for the improvement plan.</p>",
          "shape": "DisplayText"
        },
        "ImprovementPlanUrl": {
          "shape": "ImprovementPlanUrl"
        }
      },
      "type": "structure"
    },
    "ChoiceImprovementPlans": {
      "member": {
        "shape": "ChoiceImprovementPlan"
      },
      "type": "list"
    },
    "ChoiceNotes": {
      "max": 250,
      "type": "string"
    },
    "ChoiceReason": {
      "enum": [
        "OUT_OF_SCOPE",
        "BUSINESS_PRIORITIES",
        "ARCHITECTURE_CONSTRAINTS",
        "OTHER",
        "NONE"
      ],
      "type": "string"
    },
    "ChoiceStatus": {
      "enum": [
        "SELECTED",
        "NOT_APPLICABLE",
        "UNSELECTED"
      ],
      "type": "string"
    },
    "ChoiceTitle": {
      "documentation": "<p>The title of a choice.</p>",
      "max": 512,
      "min": 1,
      "type": "string"
    },
    "ChoiceUpdate": {
      "documentation": "<p>A list of choices to be updated.</p>",
      "members": {
        "Notes": {
          "documentation": "<p>The notes associated with a choice.</p>",
          "shape": "ChoiceNotes"
        },
        "Reason": {
          "documentation": "<p>The reason why a choice is non-applicable to a question in your workload.</p>",
          "shape": "ChoiceReason"
        },
        "Status": {
          "documentation": "<p>The status of a choice.</p>",
          "shape": "ChoiceStatus"
        }
      },
      "required": [
        "Status"
      ],
      "type": "structure"
    },
    "ChoiceUpdates": {
      "key": {
        "shape": "ChoiceId"
      },
      "type": "map",
      "value": {
        "shape": "ChoiceUpdate"
      }
    },
    "Choices": {
      "documentation": "<p>List of choices available for a question.</p>",
      "member": {
        "shape": "Choice"
      },
      "type": "list"
    },
    "ClientRequestToken": {
      "documentation": "<p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after it has completed successfully, the result of the original request is returned. </p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>",
      "type": "string"
    },
    "ConflictException": {
      "documentation": "<p>The resource already exists.</p>",
      "error": {
        "httpStatusCode": 409
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "ExceptionMessage"
        },
        "ResourceId": {
          "shape": "ExceptionResourceId"
        },
        "ResourceType": {
          "shape": "ExceptionResourceType"
        }
      },
      "required": [
        "Message",
        "ResourceId",
        "ResourceType"
      ],
      "type": "structure"
    },
    "Count": {
      "documentation": "<p>A non-negative integer that denotes how many.</p>",
      "min": 0,
      "type": "integer"
    },
    "CreateLensShareInput": {
      "members": {
        "ClientRequestToken": {
          "idempotencyToken": true,
          "shape": "ClientRequestToken"
        },
        "LensAlias": {
          "location": "uri",
          "locationName": "LensAlias",
          "shape": "LensAlias"
        },
        "SharedWith": {
          "shape": "SharedWith"
        }
      },
      "required": [
        "LensAlias",
        "SharedWith",
        "ClientRequestToken"
      ],
      "type": "structure"
    },
    "CreateLensShareOutput": {
      "members": {
        "ShareId": {
          "shape": "ShareId"
        }
      },
      "type": "structure"
    },
    "CreateLensVersionInput": {
      "members": {
        "ClientRequestToken": {
          "idempotencyToken": true,
          "shape": "ClientRequestToken"
        },
        "IsMajorVersion": {
          "documentation": "<p>Set to true if this new major lens version.</p>",
          "shape": "IsMajorVersion"
        },
        "LensAlias": {
          "location": "uri",
          "locationName": "LensAlias",
          "shape": "LensAlias"
        },
        "LensVersion": {
          "documentation": "<p>The version of the lens being created.</p>",
          "shape": "LensVersion"
        }
      },
      "required": [
        "LensAlias",
        "LensVersion",
        "ClientRequestToken"
      ],
      "type": "structure"
    },
    "CreateLensVersionOutput": {
      "members": {
        "LensArn": {
          "documentation": "<p>The ARN for the lens.</p>",
          "shape": "LensArn"
        },
        "LensVersion": {
          "documentation": "<p>The version of the lens.</p>",
          "shape": "LensVersion"
        }
      },
      "type": "structure"
    },
    "CreateMilestoneInput": {
      "documentation": "<p>Input for milestone creation.</p>",
      "members": {
        "ClientRequestToken": {
          "idempotencyToken": true,
          "shape": "ClientRequestToken"
        },
        "MilestoneName": {
          "shape": "MilestoneName"
        },
        "WorkloadId": {
          "location": "uri",
          "locationName": "WorkloadId",
          "shape": "WorkloadId"
        }
      },
      "required": [
        "WorkloadId",
        "MilestoneName",
        "ClientRequestToken"
      ],
      "type": "structure"
    },
    "CreateMilestoneOutput": {
      "documentation": "<p>Output of a create milestone call.</p>",
      "members": {
        "MilestoneNumber": {
          "shape": "MilestoneNumber"
        },
        "WorkloadId": {
          "shape": "WorkloadId"
        }
      },
      "type": "structure"
    },
    "CreateWorkloadInput": {
      "documentation": "<p>Input for workload creation.</p>",
      "members": {
        "AccountIds": {
          "shape": "WorkloadAccountIds"
        },
        "ArchitecturalDesign": {
          "shape": "WorkloadArchitecturalDesign"
        },
        "AwsRegions": {
          "shape": "WorkloadAwsRegions"
        },
        "ClientRequestToken": {
          "idempotencyToken": true,
          "shape": "ClientRequestToken"
        },
        "Description": {
          "shape": "WorkloadDescription"
        },
        "Environment": {
          "shape": "WorkloadEnvironment"
        },
        "Industry": {
          "shape": "WorkloadIndustry"
        },
        "IndustryType": {
          "shape": "WorkloadIndustryType"
        },
        "Lenses": {
          "shape": "WorkloadLenses"
        },
        "NonAwsRegions": {
          "shape": "WorkloadNonAwsRegions"
        },
        "Notes": {
          "shape": "Notes"
        },
        "PillarPriorities": {
          "shape": "WorkloadPillarPriorities"
        },
        "ReviewOwner": {
          "shape": "WorkloadReviewOwner"
        },
        "Tags": {
          "documentation": "<p>The tags to be associated with the workload.</p>",
          "shape": "TagMap"
        },
        "WorkloadName": {
          "shape": "WorkloadName"
        }
      },
      "required": [
        "WorkloadName",
        "Description",
        "Environment",
        "Lenses",
        "ClientRequestToken"
      ],
      "type": "structure"
    },
    "CreateWorkloadOutput": {
      "documentation": "<p>Output of a create workload call.</p>",
      "members": {
        "WorkloadArn": {
          "shape": "WorkloadArn"
        },
        "WorkloadId": {
          "shape": "WorkloadId"
        }
      },
      "type": "structure"
    },
    "CreateWorkloadShareInput": {
      "documentation": "<p>Input for Create Workload Share</p>",
      "members": {
        "ClientRequestToken": {
          "idempotencyToken": true,
          "shape": "ClientRequestToken"
        },
        "PermissionType": {
          "shape": "PermissionType"
        },
        "SharedWith": {
          "shape": "SharedWith"
        },
        "WorkloadId": {
          "location": "uri",
          "locationName": "WorkloadId",
          "shape": "WorkloadId"
        }
      },
      "required": [
        "WorkloadId",
        "SharedWith",
        "PermissionType",
        "ClientRequestToken"
      ],
      "type": "structure"
    },
    "CreateWorkloadShareOutput": {
      "documentation": "<p>Input for Create Workload Share</p>",
      "members": {
        "ShareId": {
          "shape": "ShareId"
        },
        "WorkloadId": {
          "shape": "WorkloadId"
        }
      },
      "type": "structure"
    },
    "DeleteLensInput": {
      "members": {
        "ClientRequestToken": {
          "idempotencyToken": true,
          "location": "querystring",
          "locationName": "ClientRequestToken",
          "shape": "ClientRequestToken"
        },
        "LensAlias": {
          "location": "uri",
          "locationName": "LensAlias",
          "shape": "LensAlias"
        },
        "LensStatus": {
          "documentation": "<p>The status of the lens to be deleted.</p>",
          "location": "querystring",
          "locationName": "LensStatus",
          "shape": "LensStatusType"
        }
      },
      "required": [
        "LensAlias",
        "ClientRequestToken",
        "LensStatus"
      ],
      "type": "structure"
    },
    "DeleteLensShareInput": {
      "members": {
        "ClientRequestToken": {
          "idempotencyToken": true,
          "location": "querystring",
          "locationName": "ClientRequestToken",
          "shape": "ClientRequestToken"
        },
        "LensAlias": {
          "location": "uri",
          "locationName": "LensAlias",
          "shape": "LensAlias"
        },
        "ShareId": {
          "location": "uri",
          "locationName": "ShareId",
          "shape": "ShareId"
        }
      },
      "required": [
        "ShareId",
        "LensAlias",
        "ClientRequestToken"
      ],
      "type": "structure"
    },
    "DeleteWorkloadInput": {
      "documentation": "<p>Input for workload deletion.</p>",
      "members": {
        "ClientRequestToken": {
          "idempotencyToken": true,
          "location": "querystring",
          "locationName": "ClientRequestToken",
          "shape": "ClientRequestToken"
        },
        "WorkloadId": {
          "location": "uri",
          "locationName": "WorkloadId",
          "shape": "WorkloadId"
        }
      },
      "required": [
        "WorkloadId",
        "ClientRequestToken"
      ],
      "type": "structure"
    },
    "DeleteWorkloadShareInput": {
      "documentation": "<p>Input for Delete Workload Share</p>",
      "members": {
        "ClientRequestToken": {
          "idempotencyToken": true,
          "location": "querystring",
          "locationName": "ClientRequestToken",
          "shape": "ClientRequestToken"
        },
        "ShareId": {
          "location": "uri",
          "locationName": "ShareId",
          "shape": "ShareId"
        },
        "WorkloadId": {
          "location": "uri",
          "locationName": "WorkloadId",
          "shape": "WorkloadId"
        }
      },
      "required": [
        "ShareId",
        "WorkloadId",
        "ClientRequestToken"
      ],
      "type": "structure"
    },
    "DifferenceStatus": {
      "enum": [
        "UPDATED",
        "NEW",
        "DELETED"
      ],
      "type": "string"
    },
    "DisassociateLensesInput": {
      "documentation": "<p>Input to disassociate lens reviews.</p>",
      "members": {
        "LensAliases": {
          "shape": "LensAliases"
        },
        "WorkloadId": {
          "location": "uri",
          "locationName": "WorkloadId",
          "shape": "WorkloadId"
        }
      },
      "required": [
        "WorkloadId",
        "LensAliases"
      ],
      "type": "structure"
    },
    "DisplayText": {
      "max": 64,
      "min": 1,
      "type": "string"
    },
    "ExceptionMessage": {
      "documentation": "<p>Description of the error.</p>",
      "type": "string"
    },
    "ExceptionResourceId": {
      "documentation": "<p>Identifier of the resource affected.</p>",
      "type": "string"
    },
    "ExceptionResourceType": {
      "documentation": "<p>Type of the resource affected.</p>",
      "type": "string"
    },
    "ExportLensInput": {
      "members": {
        "LensAlias": {
          "location": "uri",
          "locationName": "LensAlias",
          "shape": "LensAlias"
        },
        "LensVersion": {
          "documentation": "<p>The lens version to be exported.</p>",
          "location": "querystring",
          "locationName": "LensVersion",
          "shape": "LensVersion"
        }
      },
      "required": [
        "LensAlias"
      ],
      "type": "structure"
    },
    "ExportLensOutput": {
      "members": {
        "LensJSON": {
          "documentation": "<p>The JSON for the lens.</p>",
          "shape": "LensJSON"
        }
      },
      "type": "structure"
    },
    "GetAnswerInput": {
      "documentation": "<p>Input to get answer.</p>",
      "members": {
        "LensAlias": {
          "location": "uri",
          "locationName": "LensAlias",
          "shape": "LensAlias"
        },
        "MilestoneNumber": {
          "location": "querystring",
          "locationName": "MilestoneNumber",
          "shape": "MilestoneNumber"
        },
        "QuestionId": {
          "location": "uri",
          "locationName": "QuestionId",
          "shape": "QuestionId"
        },
        "WorkloadId": {
          "location": "uri",
          "locationName": "WorkloadId",
          "shape": "WorkloadId"
        }
      },
      "required": [
        "WorkloadId",
        "LensAlias",
        "QuestionId"
      ],
      "type": "structure"
    },
    "GetAnswerOutput": {
      "documentation": "<p>Output of a get answer call.</p>",
      "members": {
        "Answer": {
          "shape": "Answer"
        },
        "LensAlias": {
          "shape": "LensAlias"
        },
        "LensArn": {
          "documentation": "<p>The ARN for the lens.</p>",
          "shape": "LensArn"
        },
        "MilestoneNumber": {
          "shape": "MilestoneNumber"
        },
        "WorkloadId": {
          "shape": "WorkloadId"
        }
      },
      "type": "structure"
    },
    "GetLensInput": {
      "members": {
        "LensAlias": {
          "location": "uri",
          "locationName": "LensAlias",
          "shape": "LensAlias"
        },
        "LensVersion": {
          "documentation": "<p>The lens version to be retrieved.</p>",
          "location": "querystring",
          "locationName": "LensVersion",
          "shape": "LensVersion"
        }
      },
      "required": [
        "LensAlias"
      ],
      "type": "structure"
    },
    "GetLensOutput": {
      "members": {
        "Lens": {
          "documentation": "<p>A lens return object.</p>",
          "shape": "Lens"
        }
      },
      "type": "structure"
    },
    "GetLensReviewInput": {
      "documentation": "<p>Input to get lens review.</p>",
      "members": {
        "LensAlias": {
          "location": "uri",
          "locationName": "LensAlias",
          "shape": "LensAlias"
        },
        "MilestoneNumber": {
          "location": "querystring",
          "locationName": "MilestoneNumber",
          "shape": "MilestoneNumber"
        },
        "WorkloadId": {
          "location": "uri",
          "locationName": "WorkloadId",
          "shape": "WorkloadId"
        }
      },
      "required": [
        "WorkloadId",
        "LensAlias"
      ],
      "type": "structure"
    },
    "GetLensReviewOutput": {
      "documentation": "<p>Output of a get lens review call.</p>",
      "members": {
        "LensReview": {
          "shape": "LensReview"
        },
        "MilestoneNumber": {
          "shape": "MilestoneNumber"
        },
        "WorkloadId": {
          "shape": "WorkloadId"
        }
      },
      "type": "structure"
    },
    "GetLensReviewReportInput": {
      "documentation": "<p>Input to get lens review report.</p>",
      "members": {
        "LensAlias": {
          "location": "uri",
          "locationName": "LensAlias",
          "shape": "LensAlias"
        },
        "MilestoneNumber": {
          "location": "querystring",
          "locationName": "MilestoneNumber",
          "shape": "MilestoneNumber"
        },
        "WorkloadId": {
          "location": "uri",
          "locationName": "WorkloadId",
          "shape": "WorkloadId"
        }
      },
      "required": [
        "WorkloadId",
        "LensAlias"
      ],
      "type": "structure"
    },
    "GetLensReviewReportOutput": {
      "documentation": "<p>Output of a get lens review report call.</p>",
      "members": {
        "LensReviewReport": {
          "shape": "LensReviewReport"
        },
        "MilestoneNumber": {
          "shape": "MilestoneNumber"
        },
        "WorkloadId": {
          "shape": "WorkloadId"
        }
      },
      "type": "structure"
    },
    "GetLensVersionDifferenceInput": {
      "members": {
        "BaseLensVersion": {
          "documentation": "<p>The base version of the lens.</p>",
          "location": "querystring",
          "locationName": "BaseLensVersion",
          "shape": "LensVersion"
        },
        "LensAlias": {
          "location": "uri",
          "locationName": "LensAlias",
          "shape": "LensAlias"
        },
        "TargetLensVersion": {
          "documentation": "<p>The lens version to target a difference for.</p>",
          "location": "querystring",
          "locationName": "TargetLensVersion",
          "shape": "LensVersion"
        }
      },
      "required": [
        "LensAlias"
      ],
      "type": "structure"
    },
    "GetLensVersionDifferenceOutput": {
      "members": {
        "BaseLensVersion": {
          "documentation": "<p>The base version of the lens.</p>",
          "shape": "LensVersion"
        },
        "LatestLensVersion": {
          "documentation": "<p>The latest version of the lens.</p>",
          "shape": "LensVersion"
        },
        "LensAlias": {
          "shape": "LensAlias"
        },
        "LensArn": {
          "documentation": "<p>The ARN for the lens.</p>",
          "shape": "LensArn"
        },
        "TargetLensVersion": {
          "documentation": "<p>The target lens version for the lens.</p>",
          "shape": "LensVersion"
        },
        "VersionDifferences": {
          "shape": "VersionDifferences"
        }
      },
      "type": "structure"
    },
    "GetMilestoneInput": {
      "documentation": "<p>Input to get a milestone.</p>",
      "members": {
        "MilestoneNumber": {
          "location": "uri",
          "locationName": "MilestoneNumber",
          "shape": "MilestoneNumber"
        },
        "WorkloadId": {
          "location": "uri",
          "locationName": "WorkloadId",
          "shape": "WorkloadId"
        }
      },
      "required": [
        "WorkloadId",
        "MilestoneNumber"
      ],
      "type": "structure"
    },
    "GetMilestoneOutput": {
      "documentation": "<p>Output of a get milestone call.</p>",
      "members": {
        "Milestone": {
          "shape": "Milestone"
        },
        "WorkloadId": {
          "shape": "WorkloadId"
        }
      },
      "type": "structure"
    },
    "GetWorkloadInput": {
      "documentation": "<p>Input to get a workload.</p>",
      "members": {
        "WorkloadId": {
          "location": "uri",
          "locationName": "WorkloadId",
          "shape": "WorkloadId"
        }
      },
      "required": [
        "WorkloadId"
      ],
      "type": "structure"
    },
    "GetWorkloadOutput": {
      "documentation": "<p>Output of a get workload call.</p>",
      "members": {
        "Workload": {
          "shape": "Workload"
        }
      },
      "type": "structure"
    },
    "HelpfulResourceUrl": {
      "documentation": "<p>The helpful resource URL for a question.</p>",
      "max": 2048,
      "min": 1,
      "type": "string"
    },
    "ImportLensInput": {
      "members": {
        "ClientRequestToken": {
          "idempotencyToken": true,
          "shape": "ClientRequestToken"
        },
        "JSONString": {
          "documentation": "<p>The JSON representation of a lens.</p>",
          "shape": "LensJSON"
        },
        "LensAlias": {
          "shape": "LensAlias"
        },
        "Tags": {
          "documentation": "<p>Tags to associate to a lens.</p>",
          "shape": "TagMap"
        }
      },
      "required": [
        "JSONString",
        "ClientRequestToken"
      ],
      "type": "structure"
    },
    "ImportLensOutput": {
      "members": {
        "LensArn": {
          "documentation": "<p>The ARN for the lens.</p>",
          "shape": "LensArn"
        },
        "Status": {
          "documentation": "<p>The status of the imported lens.</p>",
          "shape": "ImportLensStatus"
        }
      },
      "type": "structure"
    },
    "ImportLensStatus": {
      "enum": [
        "IN_PROGRESS",
        "COMPLETE",
        "ERROR"
      ],
      "type": "string"
    },
    "ImprovementPlanUrl": {
      "documentation": "<p>The improvement plan URL for a question.</p> <p>This value is only available if the question has been answered.</p>",
      "max": 2048,
      "min": 1,
      "type": "string"
    },
    "ImprovementSummaries": {
      "documentation": "<p>List of improvement summaries of lens review in a workload.</p>",
      "member": {
        "shape": "ImprovementSummary"
      },
      "type": "list"
    },
    "ImprovementSummary": {
      "documentation": "<p>An improvement summary of a lens review in a workload.</p>",
      "members": {
        "ImprovementPlanUrl": {
          "shape": "ImprovementPlanUrl"
        },
        "ImprovementPlans": {
          "documentation": "<p>The improvement plan details.</p>",
          "shape": "ChoiceImprovementPlans"
        },
        "PillarId": {
          "shape": "PillarId"
        },
        "QuestionId": {
          "shape": "QuestionId"
        },
        "QuestionTitle": {
          "shape": "QuestionTitle"
        },
        "Risk": {
          "shape": "Risk"
        }
      },
      "type": "structure"
    },
    "InternalServerException": {
      "documentation": "<p>There is a problem with the Well-Architected Tool API service.</p>",
      "error": {
        "httpStatusCode": 500
      },
      "exception": true,
      "fault": true,
      "members": {
        "Message": {
          "shape": "ExceptionMessage"
        }
      },
      "required": [
        "Message"
      ],
      "type": "structure"
    },
    "IsApplicable": {
      "documentation": "<p>Defines whether this question is applicable to a lens review.</p>",
      "type": "boolean"
    },
    "IsMajorVersion": {
      "type": "boolean"
    },
    "IsReviewOwnerUpdateAcknowledged": {
      "type": "boolean"
    },
    "Lens": {
      "documentation": "<p>A lens return object.</p>",
      "members": {
        "Description": {
          "shape": "LensDescription"
        },
        "LensArn": {
          "documentation": "<p>The ARN of a lens.</p>",
          "shape": "LensArn"
        },
        "LensVersion": {
          "documentation": "<p>The version of a lens.</p>",
          "shape": "LensVersion"
        },
        "Name": {
          "shape": "LensName"
        },
        "Owner": {
          "documentation": "<p>The Amazon Web Services account ID that owns the lens.</p>",
          "shape": "LensOwner"
        },
        "ShareInvitationId": {
          "documentation": "<p>The ID assigned to the share invitation.</p>",
          "shape": "ShareInvitationId"
        },
        "Tags": {
          "documentation": "<p>The tags assigned to the lens.</p>",
          "shape": "TagMap"
        }
      },
      "type": "structure"
    },
    "LensAlias": {
      "documentation": "<p>The alias of the lens.</p> <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p> <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p> <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>",
      "max": 128,
      "min": 1,
      "type": "string"
    },
    "LensAliases": {
      "documentation": "<p>List of lens aliases to associate or disassociate with a workload. Up to 10 lenses can be specified.</p> <p>Identify a lens using its <a>LensSummary$LensAlias</a>.</p>",
      "member": {
        "shape": "LensAlias"
      },
      "min": 1,
      "type": "list"
    },
    "LensArn": {
      "type": "string"
    },
    "LensDescription": {
      "documentation": "<p>The description of the lens.</p>",
      "max": 1024,
      "min": 1,
      "type": "string"
    },
    "LensJSON": {
      "max": 500000,
      "min": 2,
      "type": "string"
    },
    "LensName": {
      "documentation": "<p>The full name of the lens.</p>",
      "max": 128,
      "min": 1,
      "type": "string"
    },
    "LensNamePrefix": {
      "max": 100,
      "type": "string"
    },
    "LensOwner": {
      "type": "string"
    },
    "LensReview": {
      "documentation": "<p>A lens review of a question.</p>",
      "members": {
        "LensAlias": {
          "shape": "LensAlias"
        },
        "LensArn": {
          "documentation": "<p>The ARN for the lens.</p>",
          "shape": "LensArn"
        },
        "LensName": {
          "shape": "LensName"
        },
        "LensStatus": {
          "documentation": "<p>The status of the lens.</p>",
          "shape": "LensStatus"
        },
        "LensVersion": {
          "documentation": "<p>The version of the lens.</p>",
          "shape": "LensVersion"
        },
        "NextToken": {
          "shape": "NextToken"
        },
        "Notes": {
          "shape": "Notes"
        },
        "PillarReviewSummaries": {
          "shape": "PillarReviewSummaries"
        },
        "RiskCounts": {
          "shape": "RiskCounts"
        },
        "UpdatedAt": {
          "shape": "Timestamp"
        }
      },
      "type": "structure"
    },
    "LensReviewReport": {
      "documentation": "<p>A report of a lens review.</p>",
      "members": {
        "Base64String": {
          "shape": "Base64String"
        },
        "LensAlias": {
          "shape": "LensAlias"
        },
        "LensArn": {
          "documentation": "<p>The ARN for the lens.</p>",
          "shape": "LensArn"
        }
      },
      "type": "structure"
    },
    "LensReviewSummaries": {
      "documentation": "<p>List of lens summaries of lens reviews of a workload.</p>",
      "member": {
        "shape": "LensReviewSummary"
      },
      "type": "list"
    },
    "LensReviewSummary": {
      "documentation": "<p>A lens review summary of a workload.</p>",
      "members": {
        "LensAlias": {
          "shape": "LensAlias"
        },
        "LensArn": {
          "documentation": "<p>The ARN for the lens.</p>",
          "shape": "LensArn"
        },
        "LensName": {
          "shape": "LensName"
        },
        "LensStatus": {
          "documentation": "<p>The status of the lens.</p>",
          "shape": "LensStatus"
        },
        "LensVersion": {
          "documentation": "<p>The version of the lens.</p>",
          "shape": "LensVersion"
        },
        "RiskCounts": {
          "shape": "RiskCounts"
        },
        "UpdatedAt": {
          "shape": "Timestamp"
        }
      },
      "type": "structure"
    },
    "LensShareSummaries": {
      "member": {
        "shape": "LensShareSummary"
      },
      "type": "list"
    },
    "LensShareSummary": {
      "documentation": "<p>A lens share summary return object.</p>",
      "members": {
        "ShareId": {
          "shape": "ShareId"
        },
        "SharedWith": {
          "shape": "SharedWith"
        },
        "Status": {
          "shape": "ShareStatus"
        },
        "StatusMessage": {
          "documentation": "<p>Optional message to compliment the Status field.</p>",
          "shape": "StatusMessage"
        }
      },
      "type": "structure"
    },
    "LensStatus": {
      "enum": [
        "CURRENT",
        "NOT_CURRENT",
        "DEPRECATED",
        "DELETED",
        "UNSHARED"
      ],
      "type": "string"
    },
    "LensStatusType": {
      "enum": [
        "ALL",
        "DRAFT",
        "PUBLISHED"
      ],
      "type": "string"
    },
    "LensSummaries": {
      "documentation": "<p>List of lens summaries of available lenses.</p>",
      "member": {
        "shape": "LensSummary"
      },
      "type": "list"
    },
    "LensSummary": {
      "documentation": "<p>A lens summary of a lens.</p>",
      "members": {
        "CreatedAt": {
          "shape": "Timestamp"
        },
        "Description": {
          "shape": "LensDescription"
        },
        "LensAlias": {
          "shape": "LensAlias"
        },
        "LensArn": {
          "documentation": "<p>The ARN of the lens.</p>",
          "shape": "LensArn"
        },
        "LensName": {
          "shape": "LensName"
        },
        "LensStatus": {
          "documentation": "<p>The status of the lens.</p>",
          "shape": "LensStatus"
        },
        "LensType": {
          "documentation": "<p>The type of the lens.</p>",
          "shape": "LensType"
        },
        "LensVersion": {
          "documentation": "<p>The version of the lens.</p>",
          "shape": "LensVersion"
        },
        "Owner": {
          "shape": "AwsAccountId"
        },
        "UpdatedAt": {
          "shape": "Timestamp"
        }
      },
      "type": "structure"
    },
    "LensType": {
      "enum": [
        "AWS_OFFICIAL",
        "CUSTOM_SHARED",
        "CUSTOM_SELF"
      ],
      "type": "string"
    },
    "LensUpgradeSummary": {
      "documentation": "<p>Lens upgrade summary return object.</p>",
      "members": {
        "CurrentLensVersion": {
          "documentation": "<p>The current version of the lens.</p>",
          "shape": "LensVersion"
        },
        "LatestLensVersion": {
          "documentation": "<p>The latest version of the lens.</p>",
          "shape": "LensVersion"
        },
        "LensAlias": {
          "shape": "LensAlias"
        },
        "LensArn": {
          "documentation": "<p>The ARN for the lens.</p>",
          "shape": "LensArn"
        },
        "WorkloadId": {
          "shape": "WorkloadId"
        },
        "WorkloadName": {
          "shape": "WorkloadName"
        }
      },
      "type": "structure"
    },
    "LensVersion": {
      "max": 32,
      "min": 1,
      "type": "string"
    },
    "ListAnswersInput": {
      "documentation": "<p>Input to list answers.</p>",
      "members": {
        "LensAlias": {
          "location": "uri",
          "locationName": "LensAlias",
          "shape": "LensAlias"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of results to return for this request.</p>",
          "location": "querystring",
          "locationName": "MaxResults",
          "shape": "ListAnswersMaxResults"
        },
        "MilestoneNumber": {
          "location": "querystring",
          "locationName": "MilestoneNumber",
          "shape": "MilestoneNumber"
        },
        "NextToken": {
          "location": "querystring",
          "locationName": "NextToken",
          "shape": "NextToken"
        },
        "PillarId": {
          "location": "querystring",
          "locationName": "PillarId",
          "shape": "PillarId"
        },
        "WorkloadId": {
          "location": "uri",
          "locationName": "WorkloadId",
          "shape": "WorkloadId"
        }
      },
      "required": [
        "WorkloadId",
        "LensAlias"
      ],
      "type": "structure"
    },
    "ListAnswersMaxResults": {
      "max": 50,
      "min": 1,
      "type": "integer"
    },
    "ListAnswersOutput": {
      "documentation": "<p>Output of a list answers call.</p>",
      "members": {
        "AnswerSummaries": {
          "shape": "AnswerSummaries"
        },
        "LensAlias": {
          "shape": "LensAlias"
        },
        "LensArn": {
          "documentation": "<p>The ARN for the lens.</p>",
          "shape": "LensArn"
        },
        "MilestoneNumber": {
          "shape": "MilestoneNumber"
        },
        "NextToken": {
          "shape": "NextToken"
        },
        "WorkloadId": {
          "shape": "WorkloadId"
        }
      },
      "type": "structure"
    },
    "ListLensReviewImprovementsInput": {
      "documentation": "<p>Input to list lens review improvements.</p>",
      "members": {
        "LensAlias": {
          "location": "uri",
          "locationName": "LensAlias",
          "shape": "LensAlias"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of results to return for this request.</p>",
          "location": "querystring",
          "locationName": "MaxResults",
          "shape": "ListLensReviewImprovementsMaxResults"
        },
        "MilestoneNumber": {
          "location": "querystring",
          "locationName": "MilestoneNumber",
          "shape": "MilestoneNumber"
        },
        "NextToken": {
          "location": "querystring",
          "locationName": "NextToken",
          "shape": "NextToken"
        },
        "PillarId": {
          "location": "querystring",
          "locationName": "PillarId",
          "shape": "PillarId"
        },
        "WorkloadId": {
          "location": "uri",
          "locationName": "WorkloadId",
          "shape": "WorkloadId"
        }
      },
      "required": [
        "WorkloadId",
        "LensAlias"
      ],
      "type": "structure"
    },
    "ListLensReviewImprovementsMaxResults": {
      "max": 100,
      "min": 1,
      "type": "integer"
    },
    "ListLensReviewImprovementsOutput": {
      "documentation": "<p>Output of a list lens review improvements call.</p>",
      "members": {
        "ImprovementSummaries": {
          "shape": "ImprovementSummaries"
        },
        "LensAlias": {
          "shape": "LensAlias"
        },
        "LensArn": {
          "documentation": "<p>The ARN for the lens.</p>",
          "shape": "LensArn"
        },
        "MilestoneNumber": {
          "shape": "MilestoneNumber"
        },
        "NextToken": {
          "shape": "NextToken"
        },
        "WorkloadId": {
          "shape": "WorkloadId"
        }
      },
      "type": "structure"
    },
    "ListLensReviewsInput": {
      "documentation": "<p>Input to list lens reviews.</p>",
      "members": {
        "MaxResults": {
          "location": "querystring",
          "locationName": "MaxResults",
          "shape": "MaxResults"
        },
        "MilestoneNumber": {
          "location": "querystring",
          "locationName": "MilestoneNumber",
          "shape": "MilestoneNumber"
        },
        "NextToken": {
          "location": "querystring",
          "locationName": "NextToken",
          "shape": "NextToken"
        },
        "WorkloadId": {
          "location": "uri",
          "locationName": "WorkloadId",
          "shape": "WorkloadId"
        }
      },
      "required": [
        "WorkloadId"
      ],
      "type": "structure"
    },
    "ListLensReviewsOutput": {
      "documentation": "<p>Output of a list lens reviews call.</p>",
      "members": {
        "LensReviewSummaries": {
          "shape": "LensReviewSummaries"
        },
        "MilestoneNumber": {
          "shape": "MilestoneNumber"
        },
        "NextToken": {
          "shape": "NextToken"
        },
        "WorkloadId": {
          "shape": "WorkloadId"
        }
      },
      "type": "structure"
    },
    "ListLensSharesInput": {
      "members": {
        "LensAlias": {
          "location": "uri",
          "locationName": "LensAlias",
          "shape": "LensAlias"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of results to return for this request.</p>",
          "location": "querystring",
          "locationName": "MaxResults",
          "shape": "ListWorkloadSharesMaxResults"
        },
        "NextToken": {
          "location": "querystring",
          "locationName": "NextToken",
          "shape": "NextToken"
        },
        "SharedWithPrefix": {
          "documentation": "<p>The Amazon Web Services account ID or IAM role with which the lens is shared.</p>",
          "location": "querystring",
          "locationName": "SharedWithPrefix",
          "shape": "SharedWithPrefix"
        },
        "Status": {
          "location": "querystring",
          "locationName": "Status",
          "shape": "ShareStatus"
        }
      },
      "required": [
        "LensAlias"
      ],
      "type": "structure"
    },
    "ListLensSharesOutput": {
      "members": {
        "LensShareSummaries": {
          "documentation": "<p>A list of lens share summaries.</p>",
          "shape": "LensShareSummaries"
        },
        "NextToken": {
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListLensesInput": {
      "documentation": "<p>Input to list lenses.</p>",
      "members": {
        "LensName": {
          "location": "querystring",
          "locationName": "LensName",
          "shape": "LensName"
        },
        "LensStatus": {
          "documentation": "<p>The status of lenses to be returned.</p>",
          "location": "querystring",
          "locationName": "LensStatus",
          "shape": "LensStatusType"
        },
        "LensType": {
          "documentation": "<p>The type of lenses to be returned.</p>",
          "location": "querystring",
          "locationName": "LensType",
          "shape": "LensType"
        },
        "MaxResults": {
          "location": "querystring",
          "locationName": "MaxResults",
          "shape": "MaxResults"
        },
        "NextToken": {
          "location": "querystring",
          "locationName": "NextToken",
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListLensesOutput": {
      "documentation": "<p>Output of a list lenses call.</p>",
      "members": {
        "LensSummaries": {
          "shape": "LensSummaries"
        },
        "NextToken": {
          "shape": "NextToken"
        }
      },
      "type": "structure"
    },
    "ListMilestonesInput": {
      "documentation": "<p>Input to list all milestones for a workload.</p>",
      "members": {
        "MaxResults": {
          "shape": "MaxResults"
        },
        "NextToken": {
          "shape": "NextToken"
        },
        "WorkloadId": {
          "location": "uri",
          "locationName": "WorkloadId",
          "shape": "WorkloadId"
        }
      },
      "required": [
        "WorkloadId"
      ],
      "type": "structure"
    },
    "ListMilestonesOutput": {
      "documentation": "<p>Output of a list milestones call.</p>",
      "members": {
        "MilestoneSummaries": {
          "shape": "MilestoneSummaries"
        },
        "NextToken": {
          "shape": "NextToken"
        },
        "WorkloadId": {
          "shape": "WorkloadId"
        }
      },
      "type": "structure"
    },
    "ListNotificationsInput": {
      "members": {
        "MaxResults": {
          "documentation": "<p>The maximum number of results to return for this request.</p>",
          "shape": "ListNotificationsMaxResults"
        },
        "NextToken": {
          "shape": "NextToken"
        },
        "WorkloadId": {
          "shape": "WorkloadId"
        }
      },
      "type": "structure"
    },
    "ListNotificationsMaxResults": {
      "max": 50,
      "min": 1,
      "type": "integer"
    },
    "ListNotificationsOutput": {
      "members": {
        "NextToken": {
          "shape": "NextToken"
        },
        "NotificationSummaries": {
          "documentation": "<p>List of lens notification summaries in a workload.</p>",
          "shape": "NotificationSummaries"
        }
      },
      "type": "structure"
    },
    "ListShareInvitationsInput": {
      "documentation": "<p>Input for List Share Invitations</p>",
      "members": {
        "LensNamePrefix": {
          "documentation": "<p>An optional string added to the beginning of each lens name returned in the results.</p>",
          "location": "querystring",
          "locationName": "LensNamePrefix",
          "shape": "LensNamePrefix"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of results to return for this request.</p>",
          "location": "querystring",
          "locationName": "MaxResults",
          "shape": "ListShareInvitationsMaxResults"
        },
        "NextToken": {
          "location": "querystring",
          "locationName": "NextToken",
          "shape": "NextToken"
        },
        "ShareResourceType": {
          "documentation": "<p>The type of share invitations to be returned.</p>",
          "location": "querystring",
          "locationName": "ShareResourceType",
          "shape": "ShareResourceType"
        },
        "WorkloadNamePrefix": {
          "location": "querystring",
          "locationName": "WorkloadNamePrefix",
          "shape": "WorkloadNamePrefix"
        }
      },
      "type": "structure"
    },
    "ListShareInvitationsMaxResults": {
      "max": 50,
      "min": 1,
      "type": "integer"
    },
    "ListShareInvitationsOutput": {
      "documentation": "<p>Input for List Share Invitations</p>",
      "members": {
        "NextToken": {
          "shape": "NextToken"
        },
        "ShareInvitationSummaries": {
          "documentation": "<p>List of share invitation summaries in a workload.</p>",
          "shape": "ShareInvitationSummaries"
        }
      },
      "type": "structure"
    },
    "ListTagsForResourceInput": {
      "members": {
        "WorkloadArn": {
          "location": "uri",
          "locationName": "WorkloadArn",
          "shape": "WorkloadArn"
        }
      },
      "required": [
        "WorkloadArn"
      ],
      "type": "structure"
    },
    "ListTagsForResourceOutput": {
      "members": {
        "Tags": {
          "documentation": "<p>The tags for the resource.</p>",
          "shape": "TagMap"
        }
      },
      "type": "structure"
    },
    "ListWorkloadSharesInput": {
      "documentation": "<p>Input for List Workload Share</p>",
      "members": {
        "MaxResults": {
          "documentation": "<p>The maximum number of results to return for this request.</p>",
          "location": "querystring",
          "locationName": "MaxResults",
          "shape": "ListWorkloadSharesMaxResults"
        },
        "NextToken": {
          "location": "querystring",
          "locationName": "NextToken",
          "shape": "NextToken"
        },
        "SharedWithPrefix": {
          "documentation": "<p>The Amazon Web Services account ID or IAM role with which the workload is shared.</p>",
          "location": "querystring",
          "locationName": "SharedWithPrefix",
          "shape": "SharedWithPrefix"
        },
        "Status": {
          "location": "querystring",
          "locationName": "Status",
          "shape": "ShareStatus"
        },
        "WorkloadId": {
          "location": "uri",
          "locationName": "WorkloadId",
          "shape": "WorkloadId"
        }
      },
      "required": [
        "WorkloadId"
      ],
      "type": "structure"
    },
    "ListWorkloadSharesMaxResults": {
      "max": 50,
      "min": 1,
      "type": "integer"
    },
    "ListWorkloadSharesOutput": {
      "documentation": "<p>Input for List Workload Share</p>",
      "members": {
        "NextToken": {
          "shape": "NextToken"
        },
        "WorkloadId": {
          "shape": "WorkloadId"
        },
        "WorkloadShareSummaries": {
          "shape": "WorkloadShareSummaries"
        }
      },
      "type": "structure"
    },
    "ListWorkloadsInput": {
      "documentation": "<p>Input to list all workloads.</p>",
      "members": {
        "MaxResults": {
          "documentation": "<p>The maximum number of results to return for this request.</p>",
          "shape": "ListWorkloadsMaxResults"
        },
        "NextToken": {
          "shape": "NextToken"
        },
        "WorkloadNamePrefix": {
          "shape": "WorkloadNamePrefix"
        }
      },
      "type": "structure"
    },
    "ListWorkloadsMaxResults": {
      "max": 50,
      "min": 1,
      "type": "integer"
    },
    "ListWorkloadsOutput": {
      "documentation": "<p>Output of a list workloads call.</p>",
      "members": {
        "NextToken": {
          "shape": "NextToken"
        },
        "WorkloadSummaries": {
          "shape": "WorkloadSummaries"
        }
      },
      "type": "structure"
    },
    "MaxResults": {
      "documentation": "<p>The maximum number of results to return for this request.</p>",
      "max": 50,
      "min": 1,
      "type": "integer"
    },
    "Milestone": {
      "documentation": "<p>A milestone return object.</p>",
      "members": {
        "MilestoneName": {
          "shape": "MilestoneName"
        },
        "MilestoneNumber": {
          "shape": "MilestoneNumber"
        },
        "RecordedAt": {
          "shape": "Timestamp"
        },
        "Workload": {
          "shape": "Workload"
        }
      },
      "type": "structure"
    },
    "MilestoneName": {
      "documentation": "<p>The name of the milestone in a workload.</p> <p>Milestone names must be unique within a workload.</p>",
      "max": 100,
      "min": 3,
      "type": "string"
    },
    "MilestoneNumber": {
      "documentation": "<p>The milestone number.</p> <p>A workload can have a maximum of 100 milestones.</p>",
      "max": 100,
      "min": 1,
      "type": "integer"
    },
    "MilestoneSummaries": {
      "documentation": "<p>A list of milestone summaries.</p>",
      "member": {
        "shape": "MilestoneSummary"
      },
      "type": "list"
    },
    "MilestoneSummary": {
      "documentation": "<p>A milestone summary return object.</p>",
      "members": {
        "MilestoneName": {
          "shape": "MilestoneName"
        },
        "MilestoneNumber": {
          "shape": "MilestoneNumber"
        },
        "RecordedAt": {
          "shape": "Timestamp"
        },
        "WorkloadSummary": {
          "shape": "WorkloadSummary"
        }
      },
      "type": "structure"
    },
    "NextToken": {
      "documentation": "<p>The token to use to retrieve the next set of results.</p>",
      "type": "string"
    },
    "Notes": {
      "documentation": "<p>The notes associated with the workload.</p>",
      "max": 2084,
      "type": "string"
    },
    "NotificationSummaries": {
      "member": {
        "shape": "NotificationSummary"
      },
      "type": "list"
    },
    "NotificationSummary": {
      "documentation": "<p>A notification summary return object.</p>",
      "members": {
        "LensUpgradeSummary": {
          "documentation": "<p>Summary of lens upgrade.</p>",
          "shape": "LensUpgradeSummary"
        },
        "Type": {
          "documentation": "<p>The type of notification.</p>",
          "shape": "NotificationType"
        }
      },
      "type": "structure"
    },
    "NotificationType": {
      "enum": [
        "LENS_VERSION_UPGRADED",
        "LENS_VERSION_DEPRECATED"
      ],
      "type": "string"
    },
    "OrganizationSharingStatus": {
      "enum": [
        "ENABLED",
        "DISABLED"
      ],
      "type": "string"
    },
    "PermissionType": {
      "documentation": "<p>Permission granted on a workload share.</p>",
      "enum": [
        "READONLY",
        "CONTRIBUTOR"
      ],
      "type": "string"
    },
    "PillarDifference": {
      "documentation": "<p>A pillar difference return object.</p>",
      "members": {
        "DifferenceStatus": {
          "documentation": "<p>Indicates the type of change to the pillar.</p>",
          "shape": "DifferenceStatus"
        },
        "PillarId": {
          "shape": "PillarId"
        },
        "PillarName": {
          "shape": "PillarName"
        },
        "QuestionDifferences": {
          "documentation": "<p>List of question differences.</p>",
          "shape": "QuestionDifferences"
        }
      },
      "type": "structure"
    },
    "PillarDifferences": {
      "member": {
        "shape": "PillarDifference"
      },
      "type": "list"
    },
    "PillarId": {
      "documentation": "<p>The ID used to identify a pillar, for example, <code>security</code>.</p> <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>",
      "max": 64,
      "min": 1,
      "type": "string"
    },
    "PillarName": {
      "documentation": "<p>The name of the pillar.</p>",
      "max": 128,
      "min": 1,
      "type": "string"
    },
    "PillarNotes": {
      "documentation": "<p>List of pillar notes of a lens review in a workload.</p>",
      "key": {
        "shape": "PillarId"
      },
      "type": "map",
      "value": {
        "shape": "Notes"
      }
    },
    "PillarReviewSummaries": {
      "documentation": "<p>List of pillar review summaries of lens review in a workload.</p>",
      "member": {
        "shape": "PillarReviewSummary"
      },
      "type": "list"
    },
    "PillarReviewSummary": {
      "documentation": "<p>A pillar review summary of a lens review.</p>",
      "members": {
        "Notes": {
          "shape": "Notes"
        },
        "PillarId": {
          "shape": "PillarId"
        },
        "PillarName": {
          "shape": "PillarName"
        },
        "RiskCounts": {
          "shape": "RiskCounts"
        }
      },
      "type": "structure"
    },
    "QuestionDescription": {
      "documentation": "<p>The description of the question.</p>",
      "max": 1024,
      "min": 1,
      "type": "string"
    },
    "QuestionDifference": {
      "documentation": "<p>A question difference return object.</p>",
      "members": {
        "DifferenceStatus": {
          "documentation": "<p>Indicates the type of change to the question.</p>",
          "shape": "DifferenceStatus"
        },
        "QuestionId": {
          "shape": "QuestionId"
        },
        "QuestionTitle": {
          "shape": "QuestionTitle"
        }
      },
      "type": "structure"
    },
    "QuestionDifferences": {
      "member": {
        "shape": "QuestionDifference"
      },
      "type": "list"
    },
    "QuestionId": {
      "documentation": "<p>The ID of the question.</p>",
      "max": 128,
      "min": 1,
      "type": "string"
    },
    "QuestionTitle": {
      "documentation": "<p>The title of the question.</p>",
      "max": 512,
      "min": 1,
      "type": "string"
    },
    "QuotaCode": {
      "documentation": "<p>Service Quotas requirement to identify originating quota.</p>",
      "type": "string"
    },
    "ResourceNotFoundException": {
      "documentation": "<p>The requested resource was not found.</p>",
      "error": {
        "httpStatusCode": 404
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "ExceptionMessage"
        },
        "ResourceId": {
          "shape": "ExceptionResourceId"
        },
        "ResourceType": {
          "shape": "ExceptionResourceType"
        }
      },
      "required": [
        "Message",
        "ResourceId",
        "ResourceType"
      ],
      "type": "structure"
    },
    "Risk": {
      "documentation": "<p>The risk for a given workload, lens review, pillar, or question.</p>",
      "enum": [
        "UNANSWERED",
        "HIGH",
        "MEDIUM",
        "NONE",
        "NOT_APPLICABLE"
      ],
      "type": "string"
    },
    "RiskCounts": {
      "documentation": "<p>A map from risk names to the count of how questions have that rating.</p>",
      "key": {
        "shape": "Risk"
      },
      "type": "map",
      "value": {
        "shape": "Count"
      }
    },
    "SelectedChoices": {
      "documentation": "<p>List of selected choice IDs in a question answer.</p> <p>The values entered replace the previously selected choices.</p>",
      "member": {
        "shape": "ChoiceId"
      },
      "type": "list"
    },
    "ServiceCode": {
      "documentation": "<p>Service Quotas requirement to identify originating service.</p>",
      "type": "string"
    },
    "ServiceQuotaExceededException": {
      "documentation": "<p>The user has reached their resource quota.</p>",
      "error": {
        "httpStatusCode": 402
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "ExceptionMessage"
        },
        "QuotaCode": {
          "shape": "QuotaCode"
        },
        "ResourceId": {
          "shape": "ExceptionResourceId"
        },
        "ResourceType": {
          "shape": "ExceptionResourceType"
        },
        "ServiceCode": {
          "shape": "ServiceCode"
        }
      },
      "required": [
        "Message",
        "QuotaCode",
        "ServiceCode"
      ],
      "type": "structure"
    },
    "ShareId": {
      "documentation": "<p>The ID associated with the workload share.</p>",
      "pattern": "[0-9a-f]{32}",
      "type": "string"
    },
    "ShareInvitation": {
      "documentation": "<p>The share invitation.</p>",
      "members": {
        "LensAlias": {
          "shape": "LensAlias"
        },
        "LensArn": {
          "documentation": "<p>The ARN for the lens.</p>",
          "shape": "LensArn"
        },
        "ShareInvitationId": {
          "documentation": "<p>The ID assigned to the share invitation.</p>",
          "shape": "ShareInvitationId"
        },
        "ShareResourceType": {
          "documentation": "<p>The resource type of the share invitation.</p>",
          "shape": "ShareResourceType"
        },
        "WorkloadId": {
          "shape": "WorkloadId"
        }
      },
      "type": "structure"
    },
    "ShareInvitationAction": {
      "documentation": "<p>Share invitation action taken by contributor.</p>",
      "enum": [
        "ACCEPT",
        "REJECT"
      ],
      "type": "string"
    },
    "ShareInvitationId": {
      "pattern": "[0-9a-f]{32}",
      "type": "string"
    },
    "ShareInvitationSummaries": {
      "member": {
        "shape": "ShareInvitationSummary"
      },
      "type": "list"
    },
    "ShareInvitationSummary": {
      "documentation": "<p>A share invitation summary return object.</p>",
      "members": {
        "LensArn": {
          "documentation": "<p>The ARN for the lens.</p>",
          "shape": "LensArn"
        },
        "LensName": {
          "shape": "LensName"
        },
        "PermissionType": {
          "shape": "PermissionType"
        },
        "ShareInvitationId": {
          "documentation": "<p>The ID assigned to the share invitation.</p>",
          "shape": "ShareInvitationId"
        },
        "ShareResourceType": {
          "documentation": "<p>The resource type of the share invitation.</p>",
          "shape": "ShareResourceType"
        },
        "SharedBy": {
          "shape": "AwsAccountId"
        },
        "SharedWith": {
          "shape": "SharedWith"
        },
        "WorkloadId": {
          "shape": "WorkloadId"
        },
        "WorkloadName": {
          "shape": "WorkloadName"
        }
      },
      "type": "structure"
    },
    "ShareResourceType": {
      "enum": [
        "WORKLOAD",
        "LENS"
      ],
      "type": "string"
    },
    "ShareStatus": {
      "documentation": "<p>The status of a workload share.</p>",
      "enum": [
        "ACCEPTED",
        "REJECTED",
        "PENDING",
        "REVOKED",
        "EXPIRED",
        "ASSOCIATING",
        "ASSOCIATED",
        "FAILED"
      ],
      "type": "string"
    },
    "SharedWith": {
      "documentation": "<p>The Amazon Web Services account ID or IAM role with which the workload is shared.</p>",
      "max": 2048,
      "min": 12,
      "type": "string"
    },
    "SharedWithPrefix": {
      "max": 100,
      "type": "string"
    },
    "StatusMessage": {
      "max": 512,
      "min": 1,
      "type": "string"
    },
    "TagKey": {
      "max": 128,
      "min": 1,
      "type": "string"
    },
    "TagKeyList": {
      "max": 50,
      "member": {
        "shape": "TagKey"
      },
      "min": 1,
      "type": "list"
    },
    "TagMap": {
      "key": {
        "shape": "TagKey"
      },
      "max": 50,
      "min": 1,
      "type": "map",
      "value": {
        "shape": "TagValue"
      }
    },
    "TagResourceInput": {
      "members": {
        "Tags": {
          "documentation": "<p>The tags for the resource.</p>",
          "shape": "TagMap"
        },
        "WorkloadArn": {
          "location": "uri",
          "locationName": "WorkloadArn",
          "shape": "WorkloadArn"
        }
      },
      "required": [
        "WorkloadArn",
        "Tags"
      ],
      "type": "structure"
    },
    "TagResourceOutput": {
      "members": {},
      "type": "structure"
    },
    "TagValue": {
      "max": 256,
      "min": 0,
      "type": "string"
    },
    "ThrottlingException": {
      "documentation": "<p>Request was denied due to request throttling.</p>",
      "error": {
        "httpStatusCode": 429
      },
      "exception": true,
      "members": {
        "Message": {
          "shape": "ExceptionMessage"
        },
        "QuotaCode": {
          "shape": "QuotaCode"
        },
        "ServiceCode": {
          "shape": "ServiceCode"
        }
      },
      "required": [
        "Message"
      ],
      "type": "structure"
    },
    "Timestamp": {
      "documentation": "<p>The date and time recorded.</p>",
      "type": "timestamp"
    },
    "UntagResourceInput": {
      "members": {
        "TagKeys": {
          "documentation": "<p>A list of tag keys. Existing tags of the resource whose keys are members of this list are removed from the resource.</p>",
          "location": "querystring",
          "locationName": "tagKeys",
          "shape": "TagKeyList"
        },
        "WorkloadArn": {
          "location": "uri",
          "locationName": "WorkloadArn",
          "shape": "WorkloadArn"
        }
      },
      "required": [
        "WorkloadArn",
        "TagKeys"
      ],
      "type": "structure"
    },
    "UntagResourceOutput": {
      "members": {},
      "type": "structure"
    },
    "UpdateAnswerInput": {
      "documentation": "<p>Input to update answer.</p>",
      "members": {
        "ChoiceUpdates": {
          "documentation": "<p>A list of choices to update on a question in your workload. The String key corresponds to the choice ID to be updated.</p>",
          "shape": "ChoiceUpdates"
        },
        "IsApplicable": {
          "shape": "IsApplicable"
        },
        "LensAlias": {
          "location": "uri",
          "locationName": "LensAlias",
          "shape": "LensAlias"
        },
        "Notes": {
          "shape": "Notes"
        },
        "QuestionId": {
          "location": "uri",
          "locationName": "QuestionId",
          "shape": "QuestionId"
        },
        "Reason": {
          "documentation": "<p>The reason why a question is not applicable to your workload.</p>",
          "shape": "AnswerReason"
        },
        "SelectedChoices": {
          "shape": "SelectedChoices"
        },
        "WorkloadId": {
          "location": "uri",
          "locationName": "WorkloadId",
          "shape": "WorkloadId"
        }
      },
      "required": [
        "WorkloadId",
        "LensAlias",
        "QuestionId"
      ],
      "type": "structure"
    },
    "UpdateAnswerOutput": {
      "documentation": "<p>Output of a update answer call.</p>",
      "members": {
        "Answer": {
          "shape": "Answer"
        },
        "LensAlias": {
          "shape": "LensAlias"
        },
        "LensArn": {
          "documentation": "<p>The ARN for the lens.</p>",
          "shape": "LensArn"
        },
        "WorkloadId": {
          "shape": "WorkloadId"
        }
      },
      "type": "structure"
    },
    "UpdateGlobalSettingsInput": {
      "members": {
        "OrganizationSharingStatus": {
          "documentation": "<p>The status of organization sharing settings.</p>",
          "shape": "OrganizationSharingStatus"
        }
      },
      "type": "structure"
    },
    "UpdateLensReviewInput": {
      "documentation": "<p>Input for update lens review.</p>",
      "members": {
        "LensAlias": {
          "location": "uri",
          "locationName": "LensAlias",
          "shape": "LensAlias"
        },
        "LensNotes": {
          "shape": "Notes"
        },
        "PillarNotes": {
          "shape": "PillarNotes"
        },
        "WorkloadId": {
          "location": "uri",
          "locationName": "WorkloadId",
          "shape": "WorkloadId"
        }
      },
      "required": [
        "WorkloadId",
        "LensAlias"
      ],
      "type": "structure"
    },
    "UpdateLensReviewOutput": {
      "documentation": "<p>Output of a update lens review call.</p>",
      "members": {
        "LensReview": {
          "shape": "LensReview"
        },
        "WorkloadId": {
          "shape": "WorkloadId"
        }
      },
      "type": "structure"
    },
    "UpdateShareInvitationInput": {
      "documentation": "<p>Input for Update Share Invitation</p>",
      "members": {
        "ShareInvitationAction": {
          "shape": "ShareInvitationAction"
        },
        "ShareInvitationId": {
          "documentation": "<p>The ID assigned to the share invitation.</p>",
          "location": "uri",
          "locationName": "ShareInvitationId",
          "shape": "ShareInvitationId"
        }
      },
      "required": [
        "ShareInvitationId",
        "ShareInvitationAction"
      ],
      "type": "structure"
    },
    "UpdateShareInvitationOutput": {
      "members": {
        "ShareInvitation": {
          "documentation": "<p>The updated workload share invitation.</p>",
          "shape": "ShareInvitation"
        }
      },
      "type": "structure"
    },
    "UpdateWorkloadInput": {
      "documentation": "<p>Input to update a workload.</p>",
      "members": {
        "AccountIds": {
          "shape": "WorkloadAccountIds"
        },
        "ArchitecturalDesign": {
          "shape": "WorkloadArchitecturalDesign"
        },
        "AwsRegions": {
          "shape": "WorkloadAwsRegions"
        },
        "Description": {
          "shape": "WorkloadDescription"
        },
        "Environment": {
          "shape": "WorkloadEnvironment"
        },
        "ImprovementStatus": {
          "shape": "WorkloadImprovementStatus"
        },
        "Industry": {
          "shape": "WorkloadIndustry"
        },
        "IndustryType": {
          "shape": "WorkloadIndustryType"
        },
        "IsReviewOwnerUpdateAcknowledged": {
          "documentation": "<p>Flag indicating whether the workload owner has acknowledged that the <i>Review owner</i> field is required.</p> <p>If a <b>Review owner</b> is not added to the workload within 60 days of acknowledgement, access to the workload is restricted until an owner is added.</p>",
          "shape": "IsReviewOwnerUpdateAcknowledged"
        },
        "NonAwsRegions": {
          "shape": "WorkloadNonAwsRegions"
        },
        "Notes": {
          "shape": "Notes"
        },
        "PillarPriorities": {
          "shape": "WorkloadPillarPriorities"
        },
        "ReviewOwner": {
          "shape": "WorkloadReviewOwner"
        },
        "WorkloadId": {
          "location": "uri",
          "locationName": "WorkloadId",
          "shape": "WorkloadId"
        },
        "WorkloadName": {
          "shape": "WorkloadName"
        }
      },
      "required": [
        "WorkloadId"
      ],
      "type": "structure"
    },
    "UpdateWorkloadOutput": {
      "documentation": "<p>Output of an update workload call.</p>",
      "members": {
        "Workload": {
          "shape": "Workload"
        }
      },
      "type": "structure"
    },
    "UpdateWorkloadShareInput": {
      "documentation": "<p>Input for Update Workload Share</p>",
      "members": {
        "PermissionType": {
          "shape": "PermissionType"
        },
        "ShareId": {
          "location": "uri",
          "locationName": "ShareId",
          "shape": "ShareId"
        },
        "WorkloadId": {
          "location": "uri",
          "locationName": "WorkloadId",
          "shape": "WorkloadId"
        }
      },
      "required": [
        "ShareId",
        "WorkloadId",
        "PermissionType"
      ],
      "type": "structure"
    },
    "UpdateWorkloadShareOutput": {
      "documentation": "<p>Input for Update Workload Share</p>",
      "members": {
        "WorkloadId": {
          "shape": "WorkloadId"
        },
        "WorkloadShare": {
          "shape": "WorkloadShare"
        }
      },
      "type": "structure"
    },
    "UpgradeLensReviewInput": {
      "members": {
        "ClientRequestToken": {
          "shape": "ClientRequestToken"
        },
        "LensAlias": {
          "location": "uri",
          "locationName": "LensAlias",
          "shape": "LensAlias"
        },
        "MilestoneName": {
          "shape": "MilestoneName"
        },
        "WorkloadId": {
          "location": "uri",
          "locationName": "WorkloadId",
          "shape": "WorkloadId"
        }
      },
      "required": [
        "WorkloadId",
        "LensAlias",
        "MilestoneName"
      ],
      "type": "structure"
    },
    "Urls": {
      "member": {
        "shape": "ChoiceContent"
      },
      "type": "list"
    },
    "ValidationException": {
      "documentation": "<p>The user input is not valid.</p>",
      "error": {
        "httpStatusCode": 400
      },
      "exception": true,
      "members": {
        "Fields": {
          "shape": "ValidationExceptionFieldList"
        },
        "Message": {
          "shape": "ExceptionMessage"
        },
        "Reason": {
          "shape": "ValidationExceptionReason"
        }
      },
      "required": [
        "Message"
      ],
      "type": "structure"
    },
    "ValidationExceptionField": {
      "documentation": "<p>Stores information about a field passed inside a request that resulted in an exception.</p>",
      "members": {
        "Message": {
          "shape": "ExceptionMessage"
        },
        "Name": {
          "shape": "ValidationExceptionFieldName"
        }
      },
      "required": [
        "Name",
        "Message"
      ],
      "type": "structure"
    },
    "ValidationExceptionFieldList": {
      "documentation": "<p>The fields that caused the error, if applicable.</p>",
      "member": {
        "shape": "ValidationExceptionField"
      },
      "type": "list"
    },
    "ValidationExceptionFieldName": {
      "documentation": "<p>The field name for which validation failed.</p>",
      "type": "string"
    },
    "ValidationExceptionReason": {
      "documentation": "<p>The reason why the request failed validation.</p>",
      "enum": [
        "UNKNOWN_OPERATION",
        "CANNOT_PARSE",
        "FIELD_VALIDATION_FAILED",
        "OTHER"
      ],
      "type": "string"
    },
    "VersionDifferences": {
      "documentation": "<p>The differences between the base and latest versions of the lens.</p>",
      "members": {
        "PillarDifferences": {
          "documentation": "<p>The differences between the base and latest versions of the lens.</p>",
          "shape": "PillarDifferences"
        }
      },
      "type": "structure"
    },
    "Workload": {
      "documentation": "<p>A workload return object.</p>",
      "members": {
        "AccountIds": {
          "shape": "WorkloadAccountIds"
        },
        "ArchitecturalDesign": {
          "shape": "WorkloadArchitecturalDesign"
        },
        "AwsRegions": {
          "shape": "WorkloadAwsRegions"
        },
        "Description": {
          "shape": "WorkloadDescription"
        },
        "Environment": {
          "shape": "WorkloadEnvironment"
        },
        "ImprovementStatus": {
          "shape": "WorkloadImprovementStatus"
        },
        "Industry": {
          "shape": "WorkloadIndustry"
        },
        "IndustryType": {
          "shape": "WorkloadIndustryType"
        },
        "IsReviewOwnerUpdateAcknowledged": {
          "documentation": "<p>Flag indicating whether the workload owner has acknowledged that the <i>Review owner</i> field is required.</p> <p>If a <b>Review owner</b> is not added to the workload within 60 days of acknowledgement, access to the workload is restricted until an owner is added.</p>",
          "shape": "IsReviewOwnerUpdateAcknowledged"
        },
        "Lenses": {
          "shape": "WorkloadLenses"
        },
        "NonAwsRegions": {
          "shape": "WorkloadNonAwsRegions"
        },
        "Notes": {
          "shape": "Notes"
        },
        "Owner": {
          "shape": "AwsAccountId"
        },
        "PillarPriorities": {
          "shape": "WorkloadPillarPriorities"
        },
        "ReviewOwner": {
          "shape": "WorkloadReviewOwner"
        },
        "ReviewRestrictionDate": {
          "shape": "Timestamp"
        },
        "RiskCounts": {
          "shape": "RiskCounts"
        },
        "ShareInvitationId": {
          "documentation": "<p>The ID assigned to the share invitation.</p>",
          "shape": "ShareInvitationId"
        },
        "Tags": {
          "documentation": "<p>The tags associated with the workload.</p>",
          "shape": "TagMap"
        },
        "UpdatedAt": {
          "shape": "Timestamp"
        },
        "WorkloadArn": {
          "shape": "WorkloadArn"
        },
        "WorkloadId": {
          "shape": "WorkloadId"
        },
        "WorkloadName": {
          "shape": "WorkloadName"
        }
      },
      "type": "structure"
    },
    "WorkloadAccountIds": {
      "documentation": "<p>The list of Amazon Web Services account IDs associated with the workload.</p>",
      "max": 100,
      "member": {
        "shape": "AwsAccountId"
      },
      "type": "list"
    },
    "WorkloadArchitecturalDesign": {
      "documentation": "<p>The URL of the architectural design for the workload.</p>",
      "max": 2048,
      "type": "string"
    },
    "WorkloadArn": {
      "documentation": "<p>The ARN for the workload.</p>",
      "type": "string"
    },
    "WorkloadAwsRegions": {
      "documentation": "<p>The list of Amazon Web Services Regions associated with the workload, for example, <code>us-east-2</code>, or <code>ca-central-1</code>.</p>",
      "max": 50,
      "member": {
        "shape": "AwsRegion"
      },
      "type": "list"
    },
    "WorkloadDescription": {
      "documentation": "<p>The description for the workload.</p>",
      "max": 250,
      "min": 3,
      "type": "string"
    },
    "WorkloadEnvironment": {
      "documentation": "<p>The environment for the workload.</p>",
      "enum": [
        "PRODUCTION",
        "PREPRODUCTION"
      ],
      "type": "string"
    },
    "WorkloadId": {
      "documentation": "<p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>",
      "pattern": "[0-9a-f]{32}",
      "type": "string"
    },
    "WorkloadImprovementStatus": {
      "documentation": "<p>The improvement status for a workload.</p>",
      "enum": [
        "NOT_APPLICABLE",
        "NOT_STARTED",
        "IN_PROGRESS",
        "COMPLETE",
        "RISK_ACKNOWLEDGED"
      ],
      "type": "string"
    },
    "WorkloadIndustry": {
      "documentation": "<p>The industry for the workload.</p>",
      "max": 100,
      "type": "string"
    },
    "WorkloadIndustryType": {
      "documentation": "<p>The industry type for the workload.</p> <p>If specified, must be one of the following:</p> <ul> <li> <p> <code>Agriculture</code> </p> </li> <li> <p> <code>Automobile</code> </p> </li> <li> <p> <code>Defense</code> </p> </li> <li> <p> <code>Design and Engineering</code> </p> </li> <li> <p> <code>Digital Advertising</code> </p> </li> <li> <p> <code>Education</code> </p> </li> <li> <p> <code>Environmental Protection</code> </p> </li> <li> <p> <code>Financial Services</code> </p> </li> <li> <p> <code>Gaming</code> </p> </li> <li> <p> <code>General Public Services</code> </p> </li> <li> <p> <code>Healthcare</code> </p> </li> <li> <p> <code>Hospitality</code> </p> </li> <li> <p> <code>InfoTech</code> </p> </li> <li> <p> <code>Justice and Public Safety</code> </p> </li> <li> <p> <code>Life Sciences</code> </p> </li> <li> <p> <code>Manufacturing</code> </p> </li> <li> <p> <code>Media &amp; Entertainment</code> </p> </li> <li> <p> <code>Mining &amp; Resources</code> </p> </li> <li> <p> <code>Oil &amp; Gas</code> </p> </li> <li> <p> <code>Power &amp; Utilities</code> </p> </li> <li> <p> <code>Professional Services</code> </p> </li> <li> <p> <code>Real Estate &amp; Construction</code> </p> </li> <li> <p> <code>Retail &amp; Wholesale</code> </p> </li> <li> <p> <code>Social Protection</code> </p> </li> <li> <p> <code>Telecommunications</code> </p> </li> <li> <p> <code>Travel, Transportation &amp; Logistics</code> </p> </li> <li> <p> <code>Other</code> </p> </li> </ul>",
      "max": 100,
      "type": "string"
    },
    "WorkloadLenses": {
      "documentation": "<p>The list of lenses associated with the workload. Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>",
      "member": {
        "shape": "LensAlias"
      },
      "type": "list"
    },
    "WorkloadName": {
      "documentation": "<p>The name of the workload.</p> <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>",
      "max": 100,
      "min": 3,
      "type": "string"
    },
    "WorkloadNamePrefix": {
      "documentation": "<p>An optional string added to the beginning of each workload name returned in the results.</p>",
      "max": 100,
      "type": "string"
    },
    "WorkloadNonAwsRegion": {
      "max": 25,
      "min": 3,
      "type": "string"
    },
    "WorkloadNonAwsRegions": {
      "documentation": "<p> The list of non-Amazon Web Services Regions associated with the workload.</p>",
      "max": 5,
      "member": {
        "shape": "WorkloadNonAwsRegion"
      },
      "type": "list"
    },
    "WorkloadPillarPriorities": {
      "documentation": "<p>The priorities of the pillars, which are used to order items in the improvement plan. Each pillar is represented by its <a>PillarReviewSummary$PillarId</a>.</p>",
      "member": {
        "shape": "PillarId"
      },
      "type": "list"
    },
    "WorkloadReviewOwner": {
      "documentation": "<p>The review owner of the workload. The name, email address, or identifier for the primary group or individual that owns the workload review process.</p>",
      "max": 255,
      "min": 3,
      "type": "string"
    },
    "WorkloadShare": {
      "documentation": "<p>A workload share return object.</p>",
      "members": {
        "PermissionType": {
          "shape": "PermissionType"
        },
        "ShareId": {
          "shape": "ShareId"
        },
        "SharedBy": {
          "shape": "AwsAccountId"
        },
        "SharedWith": {
          "shape": "SharedWith"
        },
        "Status": {
          "shape": "ShareStatus"
        },
        "WorkloadId": {
          "shape": "WorkloadId"
        },
        "WorkloadName": {
          "shape": "WorkloadName"
        }
      },
      "type": "structure"
    },
    "WorkloadShareSummaries": {
      "documentation": "<p>A list of workload share summaries.</p>",
      "member": {
        "shape": "WorkloadShareSummary"
      },
      "type": "list"
    },
    "WorkloadShareSummary": {
      "documentation": "<p>A workload share summary return object.</p>",
      "members": {
        "PermissionType": {
          "shape": "PermissionType"
        },
        "ShareId": {
          "shape": "ShareId"
        },
        "SharedWith": {
          "shape": "SharedWith"
        },
        "Status": {
          "shape": "ShareStatus"
        },
        "StatusMessage": {
          "documentation": "<p>Optional message to compliment the Status field.</p>",
          "shape": "StatusMessage"
        }
      },
      "type": "structure"
    },
    "WorkloadSummaries": {
      "documentation": "<p>A list of workload summaries.</p>",
      "member": {
        "shape": "WorkloadSummary"
      },
      "type": "list"
    },
    "WorkloadSummary": {
      "documentation": "<p>A workload summary return object.</p>",
      "members": {
        "ImprovementStatus": {
          "shape": "WorkloadImprovementStatus"
        },
        "Lenses": {
          "shape": "WorkloadLenses"
        },
        "Owner": {
          "shape": "AwsAccountId"
        },
        "RiskCounts": {
          "shape": "RiskCounts"
        },
        "UpdatedAt": {
          "shape": "Timestamp"
        },
        "WorkloadArn": {
          "shape": "WorkloadArn"
        },
        "WorkloadId": {
          "shape": "WorkloadId"
        },
        "WorkloadName": {
          "shape": "WorkloadName"
        }
      },
      "type": "structure"
    }
  },
  "version": "2.0"
}
